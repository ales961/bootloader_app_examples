
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013290  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020d8  08033440  08033440  00023440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035518  08035518  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08035518  08035518  00025518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035520  08035520  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035520  08035520  00025520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035524  08035524  00025524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08035528  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300f8  2**0
                  CONTENTS
 10 .bss          00006ab4  200000f8  200000f8  000300f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006bac  20006bac  000300f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023b27  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006460  00000000  00000000  00053c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  0005a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018e8  00000000  00000000  0005bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030fdf  00000000  00000000  0005d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d423  00000000  00000000  0008e43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef9e5  00000000  00000000  000bb862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ab247  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007844  00000000  00000000  001ab298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000f8 	.word	0x200000f8
 80201cc:	00000000 	.word	0x00000000
 80201d0:	08033428 	.word	0x08033428

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000fc 	.word	0x200000fc
 80201ec:	08033428 	.word	0x08033428

080201f0 <strcmp>:
 80201f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201f8:	2a01      	cmp	r2, #1
 80201fa:	bf28      	it	cs
 80201fc:	429a      	cmpcs	r2, r3
 80201fe:	d0f7      	beq.n	80201f0 <strcmp>
 8020200:	1ad0      	subs	r0, r2, r3
 8020202:	4770      	bx	lr

08020204 <strlen>:
 8020204:	4603      	mov	r3, r0
 8020206:	f813 2b01 	ldrb.w	r2, [r3], #1
 802020a:	2a00      	cmp	r2, #0
 802020c:	d1fb      	bne.n	8020206 <strlen+0x2>
 802020e:	1a18      	subs	r0, r3, r0
 8020210:	3801      	subs	r0, #1
 8020212:	4770      	bx	lr
	...

08020220 <memchr>:
 8020220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020224:	2a10      	cmp	r2, #16
 8020226:	db2b      	blt.n	8020280 <memchr+0x60>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	d008      	beq.n	8020240 <memchr+0x20>
 802022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020232:	3a01      	subs	r2, #1
 8020234:	428b      	cmp	r3, r1
 8020236:	d02d      	beq.n	8020294 <memchr+0x74>
 8020238:	f010 0f07 	tst.w	r0, #7
 802023c:	b342      	cbz	r2, 8020290 <memchr+0x70>
 802023e:	d1f6      	bne.n	802022e <memchr+0xe>
 8020240:	b4f0      	push	{r4, r5, r6, r7}
 8020242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802024a:	f022 0407 	bic.w	r4, r2, #7
 802024e:	f07f 0700 	mvns.w	r7, #0
 8020252:	2300      	movs	r3, #0
 8020254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020258:	3c08      	subs	r4, #8
 802025a:	ea85 0501 	eor.w	r5, r5, r1
 802025e:	ea86 0601 	eor.w	r6, r6, r1
 8020262:	fa85 f547 	uadd8	r5, r5, r7
 8020266:	faa3 f587 	sel	r5, r3, r7
 802026a:	fa86 f647 	uadd8	r6, r6, r7
 802026e:	faa5 f687 	sel	r6, r5, r7
 8020272:	b98e      	cbnz	r6, 8020298 <memchr+0x78>
 8020274:	d1ee      	bne.n	8020254 <memchr+0x34>
 8020276:	bcf0      	pop	{r4, r5, r6, r7}
 8020278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802027c:	f002 0207 	and.w	r2, r2, #7
 8020280:	b132      	cbz	r2, 8020290 <memchr+0x70>
 8020282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020286:	3a01      	subs	r2, #1
 8020288:	ea83 0301 	eor.w	r3, r3, r1
 802028c:	b113      	cbz	r3, 8020294 <memchr+0x74>
 802028e:	d1f8      	bne.n	8020282 <memchr+0x62>
 8020290:	2000      	movs	r0, #0
 8020292:	4770      	bx	lr
 8020294:	3801      	subs	r0, #1
 8020296:	4770      	bx	lr
 8020298:	2d00      	cmp	r5, #0
 802029a:	bf06      	itte	eq
 802029c:	4635      	moveq	r5, r6
 802029e:	3803      	subeq	r0, #3
 80202a0:	3807      	subne	r0, #7
 80202a2:	f015 0f01 	tst.w	r5, #1
 80202a6:	d107      	bne.n	80202b8 <memchr+0x98>
 80202a8:	3001      	adds	r0, #1
 80202aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202ae:	bf02      	ittt	eq
 80202b0:	3001      	addeq	r0, #1
 80202b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202b6:	3001      	addeq	r0, #1
 80202b8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ba:	3801      	subs	r0, #1
 80202bc:	4770      	bx	lr
 80202be:	bf00      	nop

080202c0 <__aeabi_drsub>:
 80202c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202c4:	e002      	b.n	80202cc <__adddf3>
 80202c6:	bf00      	nop

080202c8 <__aeabi_dsub>:
 80202c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202cc <__adddf3>:
 80202cc:	b530      	push	{r4, r5, lr}
 80202ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202d6:	ea94 0f05 	teq	r4, r5
 80202da:	bf08      	it	eq
 80202dc:	ea90 0f02 	teqeq	r0, r2
 80202e0:	bf1f      	itttt	ne
 80202e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202f2:	f000 80e2 	beq.w	80204ba <__adddf3+0x1ee>
 80202f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202fe:	bfb8      	it	lt
 8020300:	426d      	neglt	r5, r5
 8020302:	dd0c      	ble.n	802031e <__adddf3+0x52>
 8020304:	442c      	add	r4, r5
 8020306:	ea80 0202 	eor.w	r2, r0, r2
 802030a:	ea81 0303 	eor.w	r3, r1, r3
 802030e:	ea82 0000 	eor.w	r0, r2, r0
 8020312:	ea83 0101 	eor.w	r1, r3, r1
 8020316:	ea80 0202 	eor.w	r2, r0, r2
 802031a:	ea81 0303 	eor.w	r3, r1, r3
 802031e:	2d36      	cmp	r5, #54	; 0x36
 8020320:	bf88      	it	hi
 8020322:	bd30      	pophi	{r4, r5, pc}
 8020324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020334:	d002      	beq.n	802033c <__adddf3+0x70>
 8020336:	4240      	negs	r0, r0
 8020338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020348:	d002      	beq.n	8020350 <__adddf3+0x84>
 802034a:	4252      	negs	r2, r2
 802034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020350:	ea94 0f05 	teq	r4, r5
 8020354:	f000 80a7 	beq.w	80204a6 <__adddf3+0x1da>
 8020358:	f1a4 0401 	sub.w	r4, r4, #1
 802035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020360:	db0d      	blt.n	802037e <__adddf3+0xb2>
 8020362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020366:	fa22 f205 	lsr.w	r2, r2, r5
 802036a:	1880      	adds	r0, r0, r2
 802036c:	f141 0100 	adc.w	r1, r1, #0
 8020370:	fa03 f20e 	lsl.w	r2, r3, lr
 8020374:	1880      	adds	r0, r0, r2
 8020376:	fa43 f305 	asr.w	r3, r3, r5
 802037a:	4159      	adcs	r1, r3
 802037c:	e00e      	b.n	802039c <__adddf3+0xd0>
 802037e:	f1a5 0520 	sub.w	r5, r5, #32
 8020382:	f10e 0e20 	add.w	lr, lr, #32
 8020386:	2a01      	cmp	r2, #1
 8020388:	fa03 fc0e 	lsl.w	ip, r3, lr
 802038c:	bf28      	it	cs
 802038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020392:	fa43 f305 	asr.w	r3, r3, r5
 8020396:	18c0      	adds	r0, r0, r3
 8020398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203a0:	d507      	bpl.n	80203b2 <__adddf3+0xe6>
 80203a2:	f04f 0e00 	mov.w	lr, #0
 80203a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80203b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203b6:	d31b      	bcc.n	80203f0 <__adddf3+0x124>
 80203b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203bc:	d30c      	bcc.n	80203d8 <__adddf3+0x10c>
 80203be:	0849      	lsrs	r1, r1, #1
 80203c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203c8:	f104 0401 	add.w	r4, r4, #1
 80203cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80203d4:	f080 809a 	bcs.w	802050c <__adddf3+0x240>
 80203d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80203dc:	bf08      	it	eq
 80203de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203e2:	f150 0000 	adcs.w	r0, r0, #0
 80203e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203ea:	ea41 0105 	orr.w	r1, r1, r5
 80203ee:	bd30      	pop	{r4, r5, pc}
 80203f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203f4:	4140      	adcs	r0, r0
 80203f6:	eb41 0101 	adc.w	r1, r1, r1
 80203fa:	3c01      	subs	r4, #1
 80203fc:	bf28      	it	cs
 80203fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020402:	d2e9      	bcs.n	80203d8 <__adddf3+0x10c>
 8020404:	f091 0f00 	teq	r1, #0
 8020408:	bf04      	itt	eq
 802040a:	4601      	moveq	r1, r0
 802040c:	2000      	moveq	r0, #0
 802040e:	fab1 f381 	clz	r3, r1
 8020412:	bf08      	it	eq
 8020414:	3320      	addeq	r3, #32
 8020416:	f1a3 030b 	sub.w	r3, r3, #11
 802041a:	f1b3 0220 	subs.w	r2, r3, #32
 802041e:	da0c      	bge.n	802043a <__adddf3+0x16e>
 8020420:	320c      	adds	r2, #12
 8020422:	dd08      	ble.n	8020436 <__adddf3+0x16a>
 8020424:	f102 0c14 	add.w	ip, r2, #20
 8020428:	f1c2 020c 	rsb	r2, r2, #12
 802042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020430:	fa21 f102 	lsr.w	r1, r1, r2
 8020434:	e00c      	b.n	8020450 <__adddf3+0x184>
 8020436:	f102 0214 	add.w	r2, r2, #20
 802043a:	bfd8      	it	le
 802043c:	f1c2 0c20 	rsble	ip, r2, #32
 8020440:	fa01 f102 	lsl.w	r1, r1, r2
 8020444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020448:	bfdc      	itt	le
 802044a:	ea41 010c 	orrle.w	r1, r1, ip
 802044e:	4090      	lslle	r0, r2
 8020450:	1ae4      	subs	r4, r4, r3
 8020452:	bfa2      	ittt	ge
 8020454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020458:	4329      	orrge	r1, r5
 802045a:	bd30      	popge	{r4, r5, pc}
 802045c:	ea6f 0404 	mvn.w	r4, r4
 8020460:	3c1f      	subs	r4, #31
 8020462:	da1c      	bge.n	802049e <__adddf3+0x1d2>
 8020464:	340c      	adds	r4, #12
 8020466:	dc0e      	bgt.n	8020486 <__adddf3+0x1ba>
 8020468:	f104 0414 	add.w	r4, r4, #20
 802046c:	f1c4 0220 	rsb	r2, r4, #32
 8020470:	fa20 f004 	lsr.w	r0, r0, r4
 8020474:	fa01 f302 	lsl.w	r3, r1, r2
 8020478:	ea40 0003 	orr.w	r0, r0, r3
 802047c:	fa21 f304 	lsr.w	r3, r1, r4
 8020480:	ea45 0103 	orr.w	r1, r5, r3
 8020484:	bd30      	pop	{r4, r5, pc}
 8020486:	f1c4 040c 	rsb	r4, r4, #12
 802048a:	f1c4 0220 	rsb	r2, r4, #32
 802048e:	fa20 f002 	lsr.w	r0, r0, r2
 8020492:	fa01 f304 	lsl.w	r3, r1, r4
 8020496:	ea40 0003 	orr.w	r0, r0, r3
 802049a:	4629      	mov	r1, r5
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	fa21 f004 	lsr.w	r0, r1, r4
 80204a2:	4629      	mov	r1, r5
 80204a4:	bd30      	pop	{r4, r5, pc}
 80204a6:	f094 0f00 	teq	r4, #0
 80204aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80204ae:	bf06      	itte	eq
 80204b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204b4:	3401      	addeq	r4, #1
 80204b6:	3d01      	subne	r5, #1
 80204b8:	e74e      	b.n	8020358 <__adddf3+0x8c>
 80204ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204be:	bf18      	it	ne
 80204c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204c4:	d029      	beq.n	802051a <__adddf3+0x24e>
 80204c6:	ea94 0f05 	teq	r4, r5
 80204ca:	bf08      	it	eq
 80204cc:	ea90 0f02 	teqeq	r0, r2
 80204d0:	d005      	beq.n	80204de <__adddf3+0x212>
 80204d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204d6:	bf04      	itt	eq
 80204d8:	4619      	moveq	r1, r3
 80204da:	4610      	moveq	r0, r2
 80204dc:	bd30      	pop	{r4, r5, pc}
 80204de:	ea91 0f03 	teq	r1, r3
 80204e2:	bf1e      	ittt	ne
 80204e4:	2100      	movne	r1, #0
 80204e6:	2000      	movne	r0, #0
 80204e8:	bd30      	popne	{r4, r5, pc}
 80204ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ee:	d105      	bne.n	80204fc <__adddf3+0x230>
 80204f0:	0040      	lsls	r0, r0, #1
 80204f2:	4149      	adcs	r1, r1
 80204f4:	bf28      	it	cs
 80204f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204fa:	bd30      	pop	{r4, r5, pc}
 80204fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020500:	bf3c      	itt	cc
 8020502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020506:	bd30      	popcc	{r4, r5, pc}
 8020508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020514:	f04f 0000 	mov.w	r0, #0
 8020518:	bd30      	pop	{r4, r5, pc}
 802051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802051e:	bf1a      	itte	ne
 8020520:	4619      	movne	r1, r3
 8020522:	4610      	movne	r0, r2
 8020524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020528:	bf1c      	itt	ne
 802052a:	460b      	movne	r3, r1
 802052c:	4602      	movne	r2, r0
 802052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020532:	bf06      	itte	eq
 8020534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020538:	ea91 0f03 	teqeq	r1, r3
 802053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020540:	bd30      	pop	{r4, r5, pc}
 8020542:	bf00      	nop

08020544 <__aeabi_ui2d>:
 8020544:	f090 0f00 	teq	r0, #0
 8020548:	bf04      	itt	eq
 802054a:	2100      	moveq	r1, #0
 802054c:	4770      	bxeq	lr
 802054e:	b530      	push	{r4, r5, lr}
 8020550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020558:	f04f 0500 	mov.w	r5, #0
 802055c:	f04f 0100 	mov.w	r1, #0
 8020560:	e750      	b.n	8020404 <__adddf3+0x138>
 8020562:	bf00      	nop

08020564 <__aeabi_i2d>:
 8020564:	f090 0f00 	teq	r0, #0
 8020568:	bf04      	itt	eq
 802056a:	2100      	moveq	r1, #0
 802056c:	4770      	bxeq	lr
 802056e:	b530      	push	{r4, r5, lr}
 8020570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802057c:	bf48      	it	mi
 802057e:	4240      	negmi	r0, r0
 8020580:	f04f 0100 	mov.w	r1, #0
 8020584:	e73e      	b.n	8020404 <__adddf3+0x138>
 8020586:	bf00      	nop

08020588 <__aeabi_f2d>:
 8020588:	0042      	lsls	r2, r0, #1
 802058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020596:	bf1f      	itttt	ne
 8020598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80205a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80205a4:	4770      	bxne	lr
 80205a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80205aa:	bf08      	it	eq
 80205ac:	4770      	bxeq	lr
 80205ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80205b2:	bf04      	itt	eq
 80205b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80205b8:	4770      	bxeq	lr
 80205ba:	b530      	push	{r4, r5, lr}
 80205bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205c8:	e71c      	b.n	8020404 <__adddf3+0x138>
 80205ca:	bf00      	nop

080205cc <__aeabi_ul2d>:
 80205cc:	ea50 0201 	orrs.w	r2, r0, r1
 80205d0:	bf08      	it	eq
 80205d2:	4770      	bxeq	lr
 80205d4:	b530      	push	{r4, r5, lr}
 80205d6:	f04f 0500 	mov.w	r5, #0
 80205da:	e00a      	b.n	80205f2 <__aeabi_l2d+0x16>

080205dc <__aeabi_l2d>:
 80205dc:	ea50 0201 	orrs.w	r2, r0, r1
 80205e0:	bf08      	it	eq
 80205e2:	4770      	bxeq	lr
 80205e4:	b530      	push	{r4, r5, lr}
 80205e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205ea:	d502      	bpl.n	80205f2 <__aeabi_l2d+0x16>
 80205ec:	4240      	negs	r0, r0
 80205ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205fe:	f43f aed8 	beq.w	80203b2 <__adddf3+0xe6>
 8020602:	f04f 0203 	mov.w	r2, #3
 8020606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802060a:	bf18      	it	ne
 802060c:	3203      	addne	r2, #3
 802060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020612:	bf18      	it	ne
 8020614:	3203      	addne	r2, #3
 8020616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802061a:	f1c2 0320 	rsb	r3, r2, #32
 802061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020622:	fa20 f002 	lsr.w	r0, r0, r2
 8020626:	fa01 fe03 	lsl.w	lr, r1, r3
 802062a:	ea40 000e 	orr.w	r0, r0, lr
 802062e:	fa21 f102 	lsr.w	r1, r1, r2
 8020632:	4414      	add	r4, r2
 8020634:	e6bd      	b.n	80203b2 <__adddf3+0xe6>
 8020636:	bf00      	nop

08020638 <__aeabi_dmul>:
 8020638:	b570      	push	{r4, r5, r6, lr}
 802063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020646:	bf1d      	ittte	ne
 8020648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802064c:	ea94 0f0c 	teqne	r4, ip
 8020650:	ea95 0f0c 	teqne	r5, ip
 8020654:	f000 f8de 	bleq	8020814 <__aeabi_dmul+0x1dc>
 8020658:	442c      	add	r4, r5
 802065a:	ea81 0603 	eor.w	r6, r1, r3
 802065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802066a:	bf18      	it	ne
 802066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020678:	d038      	beq.n	80206ec <__aeabi_dmul+0xb4>
 802067a:	fba0 ce02 	umull	ip, lr, r0, r2
 802067e:	f04f 0500 	mov.w	r5, #0
 8020682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802068e:	f04f 0600 	mov.w	r6, #0
 8020692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020696:	f09c 0f00 	teq	ip, #0
 802069a:	bf18      	it	ne
 802069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80206a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80206a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80206a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80206ac:	d204      	bcs.n	80206b8 <__aeabi_dmul+0x80>
 80206ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206b2:	416d      	adcs	r5, r5
 80206b4:	eb46 0606 	adc.w	r6, r6, r6
 80206b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80206d0:	bf88      	it	hi
 80206d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80206d6:	d81e      	bhi.n	8020716 <__aeabi_dmul+0xde>
 80206d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80206dc:	bf08      	it	eq
 80206de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206e2:	f150 0000 	adcs.w	r0, r0, #0
 80206e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206ea:	bd70      	pop	{r4, r5, r6, pc}
 80206ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206f0:	ea46 0101 	orr.w	r1, r6, r1
 80206f4:	ea40 0002 	orr.w	r0, r0, r2
 80206f8:	ea81 0103 	eor.w	r1, r1, r3
 80206fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020700:	bfc2      	ittt	gt
 8020702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802070a:	bd70      	popgt	{r4, r5, r6, pc}
 802070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020710:	f04f 0e00 	mov.w	lr, #0
 8020714:	3c01      	subs	r4, #1
 8020716:	f300 80ab 	bgt.w	8020870 <__aeabi_dmul+0x238>
 802071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802071e:	bfde      	ittt	le
 8020720:	2000      	movle	r0, #0
 8020722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020726:	bd70      	pople	{r4, r5, r6, pc}
 8020728:	f1c4 0400 	rsb	r4, r4, #0
 802072c:	3c20      	subs	r4, #32
 802072e:	da35      	bge.n	802079c <__aeabi_dmul+0x164>
 8020730:	340c      	adds	r4, #12
 8020732:	dc1b      	bgt.n	802076c <__aeabi_dmul+0x134>
 8020734:	f104 0414 	add.w	r4, r4, #20
 8020738:	f1c4 0520 	rsb	r5, r4, #32
 802073c:	fa00 f305 	lsl.w	r3, r0, r5
 8020740:	fa20 f004 	lsr.w	r0, r0, r4
 8020744:	fa01 f205 	lsl.w	r2, r1, r5
 8020748:	ea40 0002 	orr.w	r0, r0, r2
 802074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020758:	fa21 f604 	lsr.w	r6, r1, r4
 802075c:	eb42 0106 	adc.w	r1, r2, r6
 8020760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020764:	bf08      	it	eq
 8020766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802076a:	bd70      	pop	{r4, r5, r6, pc}
 802076c:	f1c4 040c 	rsb	r4, r4, #12
 8020770:	f1c4 0520 	rsb	r5, r4, #32
 8020774:	fa00 f304 	lsl.w	r3, r0, r4
 8020778:	fa20 f005 	lsr.w	r0, r0, r5
 802077c:	fa01 f204 	lsl.w	r2, r1, r4
 8020780:	ea40 0002 	orr.w	r0, r0, r2
 8020784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802078c:	f141 0100 	adc.w	r1, r1, #0
 8020790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020794:	bf08      	it	eq
 8020796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	f1c4 0520 	rsb	r5, r4, #32
 80207a0:	fa00 f205 	lsl.w	r2, r0, r5
 80207a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207a8:	fa20 f304 	lsr.w	r3, r0, r4
 80207ac:	fa01 f205 	lsl.w	r2, r1, r5
 80207b0:	ea43 0302 	orr.w	r3, r3, r2
 80207b4:	fa21 f004 	lsr.w	r0, r1, r4
 80207b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207bc:	fa21 f204 	lsr.w	r2, r1, r4
 80207c0:	ea20 0002 	bic.w	r0, r0, r2
 80207c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207cc:	bf08      	it	eq
 80207ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207d2:	bd70      	pop	{r4, r5, r6, pc}
 80207d4:	f094 0f00 	teq	r4, #0
 80207d8:	d10f      	bne.n	80207fa <__aeabi_dmul+0x1c2>
 80207da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80207de:	0040      	lsls	r0, r0, #1
 80207e0:	eb41 0101 	adc.w	r1, r1, r1
 80207e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207e8:	bf08      	it	eq
 80207ea:	3c01      	subeq	r4, #1
 80207ec:	d0f7      	beq.n	80207de <__aeabi_dmul+0x1a6>
 80207ee:	ea41 0106 	orr.w	r1, r1, r6
 80207f2:	f095 0f00 	teq	r5, #0
 80207f6:	bf18      	it	ne
 80207f8:	4770      	bxne	lr
 80207fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207fe:	0052      	lsls	r2, r2, #1
 8020800:	eb43 0303 	adc.w	r3, r3, r3
 8020804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020808:	bf08      	it	eq
 802080a:	3d01      	subeq	r5, #1
 802080c:	d0f7      	beq.n	80207fe <__aeabi_dmul+0x1c6>
 802080e:	ea43 0306 	orr.w	r3, r3, r6
 8020812:	4770      	bx	lr
 8020814:	ea94 0f0c 	teq	r4, ip
 8020818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802081c:	bf18      	it	ne
 802081e:	ea95 0f0c 	teqne	r5, ip
 8020822:	d00c      	beq.n	802083e <__aeabi_dmul+0x206>
 8020824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020828:	bf18      	it	ne
 802082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802082e:	d1d1      	bne.n	80207d4 <__aeabi_dmul+0x19c>
 8020830:	ea81 0103 	eor.w	r1, r1, r3
 8020834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020838:	f04f 0000 	mov.w	r0, #0
 802083c:	bd70      	pop	{r4, r5, r6, pc}
 802083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020842:	bf06      	itte	eq
 8020844:	4610      	moveq	r0, r2
 8020846:	4619      	moveq	r1, r3
 8020848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802084c:	d019      	beq.n	8020882 <__aeabi_dmul+0x24a>
 802084e:	ea94 0f0c 	teq	r4, ip
 8020852:	d102      	bne.n	802085a <__aeabi_dmul+0x222>
 8020854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020858:	d113      	bne.n	8020882 <__aeabi_dmul+0x24a>
 802085a:	ea95 0f0c 	teq	r5, ip
 802085e:	d105      	bne.n	802086c <__aeabi_dmul+0x234>
 8020860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020864:	bf1c      	itt	ne
 8020866:	4610      	movne	r0, r2
 8020868:	4619      	movne	r1, r3
 802086a:	d10a      	bne.n	8020882 <__aeabi_dmul+0x24a>
 802086c:	ea81 0103 	eor.w	r1, r1, r3
 8020870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802087c:	f04f 0000 	mov.w	r0, #0
 8020880:	bd70      	pop	{r4, r5, r6, pc}
 8020882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802088a:	bd70      	pop	{r4, r5, r6, pc}

0802088c <__aeabi_ddiv>:
 802088c:	b570      	push	{r4, r5, r6, lr}
 802088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802089a:	bf1d      	ittte	ne
 802089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208a0:	ea94 0f0c 	teqne	r4, ip
 80208a4:	ea95 0f0c 	teqne	r5, ip
 80208a8:	f000 f8a7 	bleq	80209fa <__aeabi_ddiv+0x16e>
 80208ac:	eba4 0405 	sub.w	r4, r4, r5
 80208b0:	ea81 0e03 	eor.w	lr, r1, r3
 80208b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208bc:	f000 8088 	beq.w	80209d0 <__aeabi_ddiv+0x144>
 80208c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208e4:	429d      	cmp	r5, r3
 80208e6:	bf08      	it	eq
 80208e8:	4296      	cmpeq	r6, r2
 80208ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208f2:	d202      	bcs.n	80208fa <__aeabi_ddiv+0x6e>
 80208f4:	085b      	lsrs	r3, r3, #1
 80208f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fa:	1ab6      	subs	r6, r6, r2
 80208fc:	eb65 0503 	sbc.w	r5, r5, r3
 8020900:	085b      	lsrs	r3, r3, #1
 8020902:	ea4f 0232 	mov.w	r2, r2, rrx
 8020906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020916:	bf22      	ittt	cs
 8020918:	1ab6      	subcs	r6, r6, r2
 802091a:	4675      	movcs	r5, lr
 802091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	ebb6 0e02 	subs.w	lr, r6, r2
 802092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802092e:	bf22      	ittt	cs
 8020930:	1ab6      	subcs	r6, r6, r2
 8020932:	4675      	movcs	r5, lr
 8020934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020938:	085b      	lsrs	r3, r3, #1
 802093a:	ea4f 0232 	mov.w	r2, r2, rrx
 802093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020946:	bf22      	ittt	cs
 8020948:	1ab6      	subcs	r6, r6, r2
 802094a:	4675      	movcs	r5, lr
 802094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020950:	085b      	lsrs	r3, r3, #1
 8020952:	ea4f 0232 	mov.w	r2, r2, rrx
 8020956:	ebb6 0e02 	subs.w	lr, r6, r2
 802095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802095e:	bf22      	ittt	cs
 8020960:	1ab6      	subcs	r6, r6, r2
 8020962:	4675      	movcs	r5, lr
 8020964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020968:	ea55 0e06 	orrs.w	lr, r5, r6
 802096c:	d018      	beq.n	80209a0 <__aeabi_ddiv+0x114>
 802096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802098a:	d1c0      	bne.n	802090e <__aeabi_ddiv+0x82>
 802098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020990:	d10b      	bne.n	80209aa <__aeabi_ddiv+0x11e>
 8020992:	ea41 0100 	orr.w	r1, r1, r0
 8020996:	f04f 0000 	mov.w	r0, #0
 802099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802099e:	e7b6      	b.n	802090e <__aeabi_ddiv+0x82>
 80209a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209a4:	bf04      	itt	eq
 80209a6:	4301      	orreq	r1, r0
 80209a8:	2000      	moveq	r0, #0
 80209aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80209ae:	bf88      	it	hi
 80209b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80209b4:	f63f aeaf 	bhi.w	8020716 <__aeabi_dmul+0xde>
 80209b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209bc:	bf04      	itt	eq
 80209be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209c6:	f150 0000 	adcs.w	r0, r0, #0
 80209ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209ce:	bd70      	pop	{r4, r5, r6, pc}
 80209d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80209d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209dc:	bfc2      	ittt	gt
 80209de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209e6:	bd70      	popgt	{r4, r5, r6, pc}
 80209e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ec:	f04f 0e00 	mov.w	lr, #0
 80209f0:	3c01      	subs	r4, #1
 80209f2:	e690      	b.n	8020716 <__aeabi_dmul+0xde>
 80209f4:	ea45 0e06 	orr.w	lr, r5, r6
 80209f8:	e68d      	b.n	8020716 <__aeabi_dmul+0xde>
 80209fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209fe:	ea94 0f0c 	teq	r4, ip
 8020a02:	bf08      	it	eq
 8020a04:	ea95 0f0c 	teqeq	r5, ip
 8020a08:	f43f af3b 	beq.w	8020882 <__aeabi_dmul+0x24a>
 8020a0c:	ea94 0f0c 	teq	r4, ip
 8020a10:	d10a      	bne.n	8020a28 <__aeabi_ddiv+0x19c>
 8020a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a16:	f47f af34 	bne.w	8020882 <__aeabi_dmul+0x24a>
 8020a1a:	ea95 0f0c 	teq	r5, ip
 8020a1e:	f47f af25 	bne.w	802086c <__aeabi_dmul+0x234>
 8020a22:	4610      	mov	r0, r2
 8020a24:	4619      	mov	r1, r3
 8020a26:	e72c      	b.n	8020882 <__aeabi_dmul+0x24a>
 8020a28:	ea95 0f0c 	teq	r5, ip
 8020a2c:	d106      	bne.n	8020a3c <__aeabi_ddiv+0x1b0>
 8020a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a32:	f43f aefd 	beq.w	8020830 <__aeabi_dmul+0x1f8>
 8020a36:	4610      	mov	r0, r2
 8020a38:	4619      	mov	r1, r3
 8020a3a:	e722      	b.n	8020882 <__aeabi_dmul+0x24a>
 8020a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a46:	f47f aec5 	bne.w	80207d4 <__aeabi_dmul+0x19c>
 8020a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a4e:	f47f af0d 	bne.w	802086c <__aeabi_dmul+0x234>
 8020a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a56:	f47f aeeb 	bne.w	8020830 <__aeabi_dmul+0x1f8>
 8020a5a:	e712      	b.n	8020882 <__aeabi_dmul+0x24a>

08020a5c <__gedf2>:
 8020a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a60:	e006      	b.n	8020a70 <__cmpdf2+0x4>
 8020a62:	bf00      	nop

08020a64 <__ledf2>:
 8020a64:	f04f 0c01 	mov.w	ip, #1
 8020a68:	e002      	b.n	8020a70 <__cmpdf2+0x4>
 8020a6a:	bf00      	nop

08020a6c <__cmpdf2>:
 8020a6c:	f04f 0c01 	mov.w	ip, #1
 8020a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a80:	bf18      	it	ne
 8020a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a86:	d01b      	beq.n	8020ac0 <__cmpdf2+0x54>
 8020a88:	b001      	add	sp, #4
 8020a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a8e:	bf0c      	ite	eq
 8020a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a94:	ea91 0f03 	teqne	r1, r3
 8020a98:	bf02      	ittt	eq
 8020a9a:	ea90 0f02 	teqeq	r0, r2
 8020a9e:	2000      	moveq	r0, #0
 8020aa0:	4770      	bxeq	lr
 8020aa2:	f110 0f00 	cmn.w	r0, #0
 8020aa6:	ea91 0f03 	teq	r1, r3
 8020aaa:	bf58      	it	pl
 8020aac:	4299      	cmppl	r1, r3
 8020aae:	bf08      	it	eq
 8020ab0:	4290      	cmpeq	r0, r2
 8020ab2:	bf2c      	ite	cs
 8020ab4:	17d8      	asrcs	r0, r3, #31
 8020ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aba:	f040 0001 	orr.w	r0, r0, #1
 8020abe:	4770      	bx	lr
 8020ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ac8:	d102      	bne.n	8020ad0 <__cmpdf2+0x64>
 8020aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020ace:	d107      	bne.n	8020ae0 <__cmpdf2+0x74>
 8020ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ad8:	d1d6      	bne.n	8020a88 <__cmpdf2+0x1c>
 8020ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020ade:	d0d3      	beq.n	8020a88 <__cmpdf2+0x1c>
 8020ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020ae4:	4770      	bx	lr
 8020ae6:	bf00      	nop

08020ae8 <__aeabi_cdrcmple>:
 8020ae8:	4684      	mov	ip, r0
 8020aea:	4610      	mov	r0, r2
 8020aec:	4662      	mov	r2, ip
 8020aee:	468c      	mov	ip, r1
 8020af0:	4619      	mov	r1, r3
 8020af2:	4663      	mov	r3, ip
 8020af4:	e000      	b.n	8020af8 <__aeabi_cdcmpeq>
 8020af6:	bf00      	nop

08020af8 <__aeabi_cdcmpeq>:
 8020af8:	b501      	push	{r0, lr}
 8020afa:	f7ff ffb7 	bl	8020a6c <__cmpdf2>
 8020afe:	2800      	cmp	r0, #0
 8020b00:	bf48      	it	mi
 8020b02:	f110 0f00 	cmnmi.w	r0, #0
 8020b06:	bd01      	pop	{r0, pc}

08020b08 <__aeabi_dcmpeq>:
 8020b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b0c:	f7ff fff4 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b10:	bf0c      	ite	eq
 8020b12:	2001      	moveq	r0, #1
 8020b14:	2000      	movne	r0, #0
 8020b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b1a:	bf00      	nop

08020b1c <__aeabi_dcmplt>:
 8020b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b20:	f7ff ffea 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b24:	bf34      	ite	cc
 8020b26:	2001      	movcc	r0, #1
 8020b28:	2000      	movcs	r0, #0
 8020b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2e:	bf00      	nop

08020b30 <__aeabi_dcmple>:
 8020b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b34:	f7ff ffe0 	bl	8020af8 <__aeabi_cdcmpeq>
 8020b38:	bf94      	ite	ls
 8020b3a:	2001      	movls	r0, #1
 8020b3c:	2000      	movhi	r0, #0
 8020b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b42:	bf00      	nop

08020b44 <__aeabi_dcmpge>:
 8020b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b48:	f7ff ffce 	bl	8020ae8 <__aeabi_cdrcmple>
 8020b4c:	bf94      	ite	ls
 8020b4e:	2001      	movls	r0, #1
 8020b50:	2000      	movhi	r0, #0
 8020b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b56:	bf00      	nop

08020b58 <__aeabi_dcmpgt>:
 8020b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b5c:	f7ff ffc4 	bl	8020ae8 <__aeabi_cdrcmple>
 8020b60:	bf34      	ite	cc
 8020b62:	2001      	movcc	r0, #1
 8020b64:	2000      	movcs	r0, #0
 8020b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b6a:	bf00      	nop

08020b6c <__aeabi_dcmpun>:
 8020b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b74:	d102      	bne.n	8020b7c <__aeabi_dcmpun+0x10>
 8020b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b7a:	d10a      	bne.n	8020b92 <__aeabi_dcmpun+0x26>
 8020b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b84:	d102      	bne.n	8020b8c <__aeabi_dcmpun+0x20>
 8020b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b8a:	d102      	bne.n	8020b92 <__aeabi_dcmpun+0x26>
 8020b8c:	f04f 0000 	mov.w	r0, #0
 8020b90:	4770      	bx	lr
 8020b92:	f04f 0001 	mov.w	r0, #1
 8020b96:	4770      	bx	lr

08020b98 <__aeabi_d2uiz>:
 8020b98:	004a      	lsls	r2, r1, #1
 8020b9a:	d211      	bcs.n	8020bc0 <__aeabi_d2uiz+0x28>
 8020b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020ba0:	d211      	bcs.n	8020bc6 <__aeabi_d2uiz+0x2e>
 8020ba2:	d50d      	bpl.n	8020bc0 <__aeabi_d2uiz+0x28>
 8020ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bac:	d40e      	bmi.n	8020bcc <__aeabi_d2uiz+0x34>
 8020bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bba:	fa23 f002 	lsr.w	r0, r3, r2
 8020bbe:	4770      	bx	lr
 8020bc0:	f04f 0000 	mov.w	r0, #0
 8020bc4:	4770      	bx	lr
 8020bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bca:	d102      	bne.n	8020bd2 <__aeabi_d2uiz+0x3a>
 8020bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8020bd0:	4770      	bx	lr
 8020bd2:	f04f 0000 	mov.w	r0, #0
 8020bd6:	4770      	bx	lr

08020bd8 <__aeabi_uldivmod>:
 8020bd8:	b953      	cbnz	r3, 8020bf0 <__aeabi_uldivmod+0x18>
 8020bda:	b94a      	cbnz	r2, 8020bf0 <__aeabi_uldivmod+0x18>
 8020bdc:	2900      	cmp	r1, #0
 8020bde:	bf08      	it	eq
 8020be0:	2800      	cmpeq	r0, #0
 8020be2:	bf1c      	itt	ne
 8020be4:	f04f 31ff 	movne.w	r1, #4294967295
 8020be8:	f04f 30ff 	movne.w	r0, #4294967295
 8020bec:	f000 b974 	b.w	8020ed8 <__aeabi_idiv0>
 8020bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020bf8:	f000 f806 	bl	8020c08 <__udivmoddi4>
 8020bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020c04:	b004      	add	sp, #16
 8020c06:	4770      	bx	lr

08020c08 <__udivmoddi4>:
 8020c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c0c:	9d08      	ldr	r5, [sp, #32]
 8020c0e:	4604      	mov	r4, r0
 8020c10:	468e      	mov	lr, r1
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d14d      	bne.n	8020cb2 <__udivmoddi4+0xaa>
 8020c16:	428a      	cmp	r2, r1
 8020c18:	4694      	mov	ip, r2
 8020c1a:	d969      	bls.n	8020cf0 <__udivmoddi4+0xe8>
 8020c1c:	fab2 f282 	clz	r2, r2
 8020c20:	b152      	cbz	r2, 8020c38 <__udivmoddi4+0x30>
 8020c22:	fa01 f302 	lsl.w	r3, r1, r2
 8020c26:	f1c2 0120 	rsb	r1, r2, #32
 8020c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8020c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8020c32:	ea41 0e03 	orr.w	lr, r1, r3
 8020c36:	4094      	lsls	r4, r2
 8020c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020c3c:	0c21      	lsrs	r1, r4, #16
 8020c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8020c42:	fa1f f78c 	uxth.w	r7, ip
 8020c46:	fb08 e316 	mls	r3, r8, r6, lr
 8020c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020c4e:	fb06 f107 	mul.w	r1, r6, r7
 8020c52:	4299      	cmp	r1, r3
 8020c54:	d90a      	bls.n	8020c6c <__udivmoddi4+0x64>
 8020c56:	eb1c 0303 	adds.w	r3, ip, r3
 8020c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8020c5e:	f080 811f 	bcs.w	8020ea0 <__udivmoddi4+0x298>
 8020c62:	4299      	cmp	r1, r3
 8020c64:	f240 811c 	bls.w	8020ea0 <__udivmoddi4+0x298>
 8020c68:	3e02      	subs	r6, #2
 8020c6a:	4463      	add	r3, ip
 8020c6c:	1a5b      	subs	r3, r3, r1
 8020c6e:	b2a4      	uxth	r4, r4
 8020c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c74:	fb08 3310 	mls	r3, r8, r0, r3
 8020c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020c7c:	fb00 f707 	mul.w	r7, r0, r7
 8020c80:	42a7      	cmp	r7, r4
 8020c82:	d90a      	bls.n	8020c9a <__udivmoddi4+0x92>
 8020c84:	eb1c 0404 	adds.w	r4, ip, r4
 8020c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c8c:	f080 810a 	bcs.w	8020ea4 <__udivmoddi4+0x29c>
 8020c90:	42a7      	cmp	r7, r4
 8020c92:	f240 8107 	bls.w	8020ea4 <__udivmoddi4+0x29c>
 8020c96:	4464      	add	r4, ip
 8020c98:	3802      	subs	r0, #2
 8020c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020c9e:	1be4      	subs	r4, r4, r7
 8020ca0:	2600      	movs	r6, #0
 8020ca2:	b11d      	cbz	r5, 8020cac <__udivmoddi4+0xa4>
 8020ca4:	40d4      	lsrs	r4, r2
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8020cac:	4631      	mov	r1, r6
 8020cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d909      	bls.n	8020cca <__udivmoddi4+0xc2>
 8020cb6:	2d00      	cmp	r5, #0
 8020cb8:	f000 80ef 	beq.w	8020e9a <__udivmoddi4+0x292>
 8020cbc:	2600      	movs	r6, #0
 8020cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8020cc2:	4630      	mov	r0, r6
 8020cc4:	4631      	mov	r1, r6
 8020cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cca:	fab3 f683 	clz	r6, r3
 8020cce:	2e00      	cmp	r6, #0
 8020cd0:	d14a      	bne.n	8020d68 <__udivmoddi4+0x160>
 8020cd2:	428b      	cmp	r3, r1
 8020cd4:	d302      	bcc.n	8020cdc <__udivmoddi4+0xd4>
 8020cd6:	4282      	cmp	r2, r0
 8020cd8:	f200 80f9 	bhi.w	8020ece <__udivmoddi4+0x2c6>
 8020cdc:	1a84      	subs	r4, r0, r2
 8020cde:	eb61 0303 	sbc.w	r3, r1, r3
 8020ce2:	2001      	movs	r0, #1
 8020ce4:	469e      	mov	lr, r3
 8020ce6:	2d00      	cmp	r5, #0
 8020ce8:	d0e0      	beq.n	8020cac <__udivmoddi4+0xa4>
 8020cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8020cee:	e7dd      	b.n	8020cac <__udivmoddi4+0xa4>
 8020cf0:	b902      	cbnz	r2, 8020cf4 <__udivmoddi4+0xec>
 8020cf2:	deff      	udf	#255	; 0xff
 8020cf4:	fab2 f282 	clz	r2, r2
 8020cf8:	2a00      	cmp	r2, #0
 8020cfa:	f040 8092 	bne.w	8020e22 <__udivmoddi4+0x21a>
 8020cfe:	eba1 010c 	sub.w	r1, r1, ip
 8020d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020d06:	fa1f fe8c 	uxth.w	lr, ip
 8020d0a:	2601      	movs	r6, #1
 8020d0c:	0c20      	lsrs	r0, r4, #16
 8020d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8020d12:	fb07 1113 	mls	r1, r7, r3, r1
 8020d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020d1a:	fb0e f003 	mul.w	r0, lr, r3
 8020d1e:	4288      	cmp	r0, r1
 8020d20:	d908      	bls.n	8020d34 <__udivmoddi4+0x12c>
 8020d22:	eb1c 0101 	adds.w	r1, ip, r1
 8020d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8020d2a:	d202      	bcs.n	8020d32 <__udivmoddi4+0x12a>
 8020d2c:	4288      	cmp	r0, r1
 8020d2e:	f200 80cb 	bhi.w	8020ec8 <__udivmoddi4+0x2c0>
 8020d32:	4643      	mov	r3, r8
 8020d34:	1a09      	subs	r1, r1, r0
 8020d36:	b2a4      	uxth	r4, r4
 8020d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8020d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8020d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020d44:	fb0e fe00 	mul.w	lr, lr, r0
 8020d48:	45a6      	cmp	lr, r4
 8020d4a:	d908      	bls.n	8020d5e <__udivmoddi4+0x156>
 8020d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8020d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8020d54:	d202      	bcs.n	8020d5c <__udivmoddi4+0x154>
 8020d56:	45a6      	cmp	lr, r4
 8020d58:	f200 80bb 	bhi.w	8020ed2 <__udivmoddi4+0x2ca>
 8020d5c:	4608      	mov	r0, r1
 8020d5e:	eba4 040e 	sub.w	r4, r4, lr
 8020d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8020d66:	e79c      	b.n	8020ca2 <__udivmoddi4+0x9a>
 8020d68:	f1c6 0720 	rsb	r7, r6, #32
 8020d6c:	40b3      	lsls	r3, r6
 8020d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8020d76:	fa20 f407 	lsr.w	r4, r0, r7
 8020d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8020d7e:	431c      	orrs	r4, r3
 8020d80:	40f9      	lsrs	r1, r7
 8020d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020d86:	fa00 f306 	lsl.w	r3, r0, r6
 8020d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8020d8e:	0c20      	lsrs	r0, r4, #16
 8020d90:	fa1f fe8c 	uxth.w	lr, ip
 8020d94:	fb09 1118 	mls	r1, r9, r8, r1
 8020d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8020da0:	4288      	cmp	r0, r1
 8020da2:	fa02 f206 	lsl.w	r2, r2, r6
 8020da6:	d90b      	bls.n	8020dc0 <__udivmoddi4+0x1b8>
 8020da8:	eb1c 0101 	adds.w	r1, ip, r1
 8020dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8020db0:	f080 8088 	bcs.w	8020ec4 <__udivmoddi4+0x2bc>
 8020db4:	4288      	cmp	r0, r1
 8020db6:	f240 8085 	bls.w	8020ec4 <__udivmoddi4+0x2bc>
 8020dba:	f1a8 0802 	sub.w	r8, r8, #2
 8020dbe:	4461      	add	r1, ip
 8020dc0:	1a09      	subs	r1, r1, r0
 8020dc2:	b2a4      	uxth	r4, r4
 8020dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8020dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8020dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8020dd4:	458e      	cmp	lr, r1
 8020dd6:	d908      	bls.n	8020dea <__udivmoddi4+0x1e2>
 8020dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8020ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8020de0:	d26c      	bcs.n	8020ebc <__udivmoddi4+0x2b4>
 8020de2:	458e      	cmp	lr, r1
 8020de4:	d96a      	bls.n	8020ebc <__udivmoddi4+0x2b4>
 8020de6:	3802      	subs	r0, #2
 8020de8:	4461      	add	r1, ip
 8020dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020dee:	fba0 9402 	umull	r9, r4, r0, r2
 8020df2:	eba1 010e 	sub.w	r1, r1, lr
 8020df6:	42a1      	cmp	r1, r4
 8020df8:	46c8      	mov	r8, r9
 8020dfa:	46a6      	mov	lr, r4
 8020dfc:	d356      	bcc.n	8020eac <__udivmoddi4+0x2a4>
 8020dfe:	d053      	beq.n	8020ea8 <__udivmoddi4+0x2a0>
 8020e00:	b15d      	cbz	r5, 8020e1a <__udivmoddi4+0x212>
 8020e02:	ebb3 0208 	subs.w	r2, r3, r8
 8020e06:	eb61 010e 	sbc.w	r1, r1, lr
 8020e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8020e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8020e12:	40f1      	lsrs	r1, r6
 8020e14:	431f      	orrs	r7, r3
 8020e16:	e9c5 7100 	strd	r7, r1, [r5]
 8020e1a:	2600      	movs	r6, #0
 8020e1c:	4631      	mov	r1, r6
 8020e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e22:	f1c2 0320 	rsb	r3, r2, #32
 8020e26:	40d8      	lsrs	r0, r3
 8020e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8020e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8020e30:	4091      	lsls	r1, r2
 8020e32:	4301      	orrs	r1, r0
 8020e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020e38:	fa1f fe8c 	uxth.w	lr, ip
 8020e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8020e40:	fb07 3610 	mls	r6, r7, r0, r3
 8020e44:	0c0b      	lsrs	r3, r1, #16
 8020e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8020e4e:	429e      	cmp	r6, r3
 8020e50:	fa04 f402 	lsl.w	r4, r4, r2
 8020e54:	d908      	bls.n	8020e68 <__udivmoddi4+0x260>
 8020e56:	eb1c 0303 	adds.w	r3, ip, r3
 8020e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8020e5e:	d22f      	bcs.n	8020ec0 <__udivmoddi4+0x2b8>
 8020e60:	429e      	cmp	r6, r3
 8020e62:	d92d      	bls.n	8020ec0 <__udivmoddi4+0x2b8>
 8020e64:	3802      	subs	r0, #2
 8020e66:	4463      	add	r3, ip
 8020e68:	1b9b      	subs	r3, r3, r6
 8020e6a:	b289      	uxth	r1, r1
 8020e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8020e70:	fb07 3316 	mls	r3, r7, r6, r3
 8020e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020e78:	fb06 f30e 	mul.w	r3, r6, lr
 8020e7c:	428b      	cmp	r3, r1
 8020e7e:	d908      	bls.n	8020e92 <__udivmoddi4+0x28a>
 8020e80:	eb1c 0101 	adds.w	r1, ip, r1
 8020e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8020e88:	d216      	bcs.n	8020eb8 <__udivmoddi4+0x2b0>
 8020e8a:	428b      	cmp	r3, r1
 8020e8c:	d914      	bls.n	8020eb8 <__udivmoddi4+0x2b0>
 8020e8e:	3e02      	subs	r6, #2
 8020e90:	4461      	add	r1, ip
 8020e92:	1ac9      	subs	r1, r1, r3
 8020e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020e98:	e738      	b.n	8020d0c <__udivmoddi4+0x104>
 8020e9a:	462e      	mov	r6, r5
 8020e9c:	4628      	mov	r0, r5
 8020e9e:	e705      	b.n	8020cac <__udivmoddi4+0xa4>
 8020ea0:	4606      	mov	r6, r0
 8020ea2:	e6e3      	b.n	8020c6c <__udivmoddi4+0x64>
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	e6f8      	b.n	8020c9a <__udivmoddi4+0x92>
 8020ea8:	454b      	cmp	r3, r9
 8020eaa:	d2a9      	bcs.n	8020e00 <__udivmoddi4+0x1f8>
 8020eac:	ebb9 0802 	subs.w	r8, r9, r2
 8020eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8020eb4:	3801      	subs	r0, #1
 8020eb6:	e7a3      	b.n	8020e00 <__udivmoddi4+0x1f8>
 8020eb8:	4646      	mov	r6, r8
 8020eba:	e7ea      	b.n	8020e92 <__udivmoddi4+0x28a>
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	e794      	b.n	8020dea <__udivmoddi4+0x1e2>
 8020ec0:	4640      	mov	r0, r8
 8020ec2:	e7d1      	b.n	8020e68 <__udivmoddi4+0x260>
 8020ec4:	46d0      	mov	r8, sl
 8020ec6:	e77b      	b.n	8020dc0 <__udivmoddi4+0x1b8>
 8020ec8:	3b02      	subs	r3, #2
 8020eca:	4461      	add	r1, ip
 8020ecc:	e732      	b.n	8020d34 <__udivmoddi4+0x12c>
 8020ece:	4630      	mov	r0, r6
 8020ed0:	e709      	b.n	8020ce6 <__udivmoddi4+0xde>
 8020ed2:	4464      	add	r4, ip
 8020ed4:	3802      	subs	r0, #2
 8020ed6:	e742      	b.n	8020d5e <__udivmoddi4+0x156>

08020ed8 <__aeabi_idiv0>:
 8020ed8:	4770      	bx	lr
 8020eda:	bf00      	nop

08020edc <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8020edc:	b580      	push	{r7, lr}
 8020ede:	b084      	sub	sp, #16
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	4603      	mov	r3, r0
 8020ee4:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8020ee6:	200c      	movs	r0, #12
 8020ee8:	f010 f95e 	bl	80311a8 <malloc>
 8020eec:	4603      	mov	r3, r0
 8020eee:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8020ef0:	88fb      	ldrh	r3, [r7, #6]
 8020ef2:	4618      	mov	r0, r3
 8020ef4:	f010 f958 	bl	80311a8 <malloc>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	461a      	mov	r2, r3
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	88fa      	ldrh	r2, [r7, #6]
 8020f04:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8020f06:	68f8      	ldr	r0, [r7, #12]
 8020f08:	f000 f896 	bl	8021038 <bufferClear>
    return buffer;
 8020f0c:	68fb      	ldr	r3, [r7, #12]
}
 8020f0e:	4618      	mov	r0, r3
 8020f10:	3710      	adds	r7, #16
 8020f12:	46bd      	mov	sp, r7
 8020f14:	bd80      	pop	{r7, pc}

08020f16 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8020f16:	b580      	push	{r7, lr}
 8020f18:	b082      	sub	sp, #8
 8020f1a:	af00      	add	r7, sp, #0
 8020f1c:	6078      	str	r0, [r7, #4]
 8020f1e:	460b      	mov	r3, r1
 8020f20:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	889a      	ldrh	r2, [r3, #4]
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	88db      	ldrh	r3, [r3, #6]
 8020f2a:	429a      	cmp	r2, r3
 8020f2c:	d21f      	bcs.n	8020f6e <bufferPush+0x58>
        disableInt();
 8020f2e:	f000 f8f7 	bl	8021120 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	689b      	ldr	r3, [r3, #8]
 8020f36:	687a      	ldr	r2, [r7, #4]
 8020f38:	8812      	ldrh	r2, [r2, #0]
 8020f3a:	4413      	add	r3, r2
 8020f3c:	78fa      	ldrb	r2, [r7, #3]
 8020f3e:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	881b      	ldrh	r3, [r3, #0]
 8020f44:	3301      	adds	r3, #1
 8020f46:	687a      	ldr	r2, [r7, #4]
 8020f48:	88d2      	ldrh	r2, [r2, #6]
 8020f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8020f4e:	fb01 f202 	mul.w	r2, r1, r2
 8020f52:	1a9b      	subs	r3, r3, r2
 8020f54:	b29a      	uxth	r2, r3
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	889b      	ldrh	r3, [r3, #4]
 8020f5e:	3301      	adds	r3, #1
 8020f60:	b29a      	uxth	r2, r3
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	809a      	strh	r2, [r3, #4]

        enableInt();
 8020f66:	f000 f8ef 	bl	8021148 <enableInt>
        return 1;
 8020f6a:	2301      	movs	r3, #1
 8020f6c:	e000      	b.n	8020f70 <bufferPush+0x5a>
    } else
        return 0;
 8020f6e:	2300      	movs	r3, #0
}
 8020f70:	4618      	mov	r0, r3
 8020f72:	3708      	adds	r7, #8
 8020f74:	46bd      	mov	sp, r7
 8020f76:	bd80      	pop	{r7, pc}

08020f78 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8020f78:	b580      	push	{r7, lr}
 8020f7a:	b086      	sub	sp, #24
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	60f8      	str	r0, [r7, #12]
 8020f80:	60b9      	str	r1, [r7, #8]
 8020f82:	4613      	mov	r3, r2
 8020f84:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8020f86:	2300      	movs	r3, #0
 8020f88:	82fb      	strh	r3, [r7, #22]
 8020f8a:	e00f      	b.n	8020fac <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8020f8c:	8afb      	ldrh	r3, [r7, #22]
 8020f8e:	68ba      	ldr	r2, [r7, #8]
 8020f90:	4413      	add	r3, r2
 8020f92:	781b      	ldrb	r3, [r3, #0]
 8020f94:	4619      	mov	r1, r3
 8020f96:	68f8      	ldr	r0, [r7, #12]
 8020f98:	f7ff ffbd 	bl	8020f16 <bufferPush>
 8020f9c:	4603      	mov	r3, r0
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d101      	bne.n	8020fa6 <bufferPushValues+0x2e>
            return pushed;
 8020fa2:	8afb      	ldrh	r3, [r7, #22]
 8020fa4:	e007      	b.n	8020fb6 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8020fa6:	8afb      	ldrh	r3, [r7, #22]
 8020fa8:	3301      	adds	r3, #1
 8020faa:	82fb      	strh	r3, [r7, #22]
 8020fac:	8afa      	ldrh	r2, [r7, #22]
 8020fae:	88fb      	ldrh	r3, [r7, #6]
 8020fb0:	429a      	cmp	r2, r3
 8020fb2:	d3eb      	bcc.n	8020f8c <bufferPushValues+0x14>
    }
    return pushed;
 8020fb4:	8afb      	ldrh	r3, [r7, #22]
}
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	3718      	adds	r7, #24
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd80      	pop	{r7, pc}

08020fbe <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8020fbe:	b580      	push	{r7, lr}
 8020fc0:	b084      	sub	sp, #16
 8020fc2:	af00      	add	r7, sp, #0
 8020fc4:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	889b      	ldrh	r3, [r3, #4]
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d101      	bne.n	8020fd2 <bufferPop+0x14>
        return 0;
 8020fce:	2300      	movs	r3, #0
 8020fd0:	e01e      	b.n	8021010 <bufferPop+0x52>

    disableInt();
 8020fd2:	f000 f8a5 	bl	8021120 <disableInt>

    buffer->size--;
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	889b      	ldrh	r3, [r3, #4]
 8020fda:	3b01      	subs	r3, #1
 8020fdc:	b29a      	uxth	r2, r3
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	689b      	ldr	r3, [r3, #8]
 8020fe6:	687a      	ldr	r2, [r7, #4]
 8020fe8:	8852      	ldrh	r2, [r2, #2]
 8020fea:	4413      	add	r3, r2
 8020fec:	781b      	ldrb	r3, [r3, #0]
 8020fee:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	885b      	ldrh	r3, [r3, #2]
 8020ff4:	3301      	adds	r3, #1
 8020ff6:	687a      	ldr	r2, [r7, #4]
 8020ff8:	88d2      	ldrh	r2, [r2, #6]
 8020ffa:	fb93 f1f2 	sdiv	r1, r3, r2
 8020ffe:	fb01 f202 	mul.w	r2, r1, r2
 8021002:	1a9b      	subs	r3, r3, r2
 8021004:	b29a      	uxth	r2, r3
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	805a      	strh	r2, [r3, #2]

    enableInt();
 802100a:	f000 f89d 	bl	8021148 <enableInt>

    return value;
 802100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021010:	4618      	mov	r0, r3
 8021012:	3710      	adds	r7, #16
 8021014:	46bd      	mov	sp, r7
 8021016:	bd80      	pop	{r7, pc}

08021018 <bufferPeek>:

uint8_t bufferPeek(const Buffer * const buffer) {
 8021018:	b480      	push	{r7}
 802101a:	b083      	sub	sp, #12
 802101c:	af00      	add	r7, sp, #0
 802101e:	6078      	str	r0, [r7, #4]
    return buffer->data[buffer->ptrOut];
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	689b      	ldr	r3, [r3, #8]
 8021024:	687a      	ldr	r2, [r7, #4]
 8021026:	8852      	ldrh	r2, [r2, #2]
 8021028:	4413      	add	r3, r2
 802102a:	781b      	ldrb	r3, [r3, #0]
}
 802102c:	4618      	mov	r0, r3
 802102e:	370c      	adds	r7, #12
 8021030:	46bd      	mov	sp, r7
 8021032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021036:	4770      	bx	lr

08021038 <bufferClear>:

void bufferClear(Buffer * const buffer) {
 8021038:	b580      	push	{r7, lr}
 802103a:	b082      	sub	sp, #8
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
    disableInt();
 8021040:	f000 f86e 	bl	8021120 <disableInt>
    buffer->size = 0;
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	2200      	movs	r2, #0
 8021048:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	2200      	movs	r2, #0
 802104e:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	2200      	movs	r2, #0
 8021054:	805a      	strh	r2, [r3, #2]
    enableInt();
 8021056:	f000 f877 	bl	8021148 <enableInt>
}
 802105a:	bf00      	nop
 802105c:	3708      	adds	r7, #8
 802105e:	46bd      	mov	sp, r7
 8021060:	bd80      	pop	{r7, pc}

08021062 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8021062:	b480      	push	{r7}
 8021064:	b083      	sub	sp, #12
 8021066:	af00      	add	r7, sp, #0
 8021068:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	889b      	ldrh	r3, [r3, #4]
 802106e:	2b00      	cmp	r3, #0
 8021070:	bf14      	ite	ne
 8021072:	2301      	movne	r3, #1
 8021074:	2300      	moveq	r3, #0
 8021076:	b2db      	uxtb	r3, r3
}
 8021078:	4618      	mov	r0, r3
 802107a:	370c      	adds	r7, #12
 802107c:	46bd      	mov	sp, r7
 802107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021082:	4770      	bx	lr

08021084 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8021084:	b590      	push	{r4, r7, lr}
 8021086:	b087      	sub	sp, #28
 8021088:	af00      	add	r7, sp, #0
 802108a:	60f8      	str	r0, [r7, #12]
 802108c:	60b9      	str	r1, [r7, #8]
 802108e:	4613      	mov	r3, r2
 8021090:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8021092:	68f8      	ldr	r0, [r7, #12]
 8021094:	f7ff ffe5 	bl	8021062 <bufferHasValues>
 8021098:	4603      	mov	r3, r0
 802109a:	2b00      	cmp	r3, #0
 802109c:	d101      	bne.n	80210a2 <bufferPopValues+0x1e>
        return 0;
 802109e:	2300      	movs	r3, #0
 80210a0:	e01d      	b.n	80210de <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 80210a2:	68f8      	ldr	r0, [r7, #12]
 80210a4:	f000 f81f 	bl	80210e6 <bufferGetSize>
 80210a8:	4603      	mov	r3, r0
 80210aa:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 80210ac:	8afa      	ldrh	r2, [r7, #22]
 80210ae:	88fb      	ldrh	r3, [r7, #6]
 80210b0:	429a      	cmp	r2, r3
 80210b2:	d901      	bls.n	80210b8 <bufferPopValues+0x34>
        popSize = bufSize;
 80210b4:	88fb      	ldrh	r3, [r7, #6]
 80210b6:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 80210b8:	2300      	movs	r3, #0
 80210ba:	82bb      	strh	r3, [r7, #20]
 80210bc:	e00a      	b.n	80210d4 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 80210be:	8abb      	ldrh	r3, [r7, #20]
 80210c0:	68ba      	ldr	r2, [r7, #8]
 80210c2:	18d4      	adds	r4, r2, r3
 80210c4:	68f8      	ldr	r0, [r7, #12]
 80210c6:	f7ff ff7a 	bl	8020fbe <bufferPop>
 80210ca:	4603      	mov	r3, r0
 80210cc:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 80210ce:	8abb      	ldrh	r3, [r7, #20]
 80210d0:	3301      	adds	r3, #1
 80210d2:	82bb      	strh	r3, [r7, #20]
 80210d4:	8aba      	ldrh	r2, [r7, #20]
 80210d6:	8afb      	ldrh	r3, [r7, #22]
 80210d8:	429a      	cmp	r2, r3
 80210da:	d3f0      	bcc.n	80210be <bufferPopValues+0x3a>
    return popSize;
 80210dc:	8afb      	ldrh	r3, [r7, #22]
}
 80210de:	4618      	mov	r0, r3
 80210e0:	371c      	adds	r7, #28
 80210e2:	46bd      	mov	sp, r7
 80210e4:	bd90      	pop	{r4, r7, pc}

080210e6 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 80210e6:	b480      	push	{r7}
 80210e8:	b083      	sub	sp, #12
 80210ea:	af00      	add	r7, sp, #0
 80210ec:	6078      	str	r0, [r7, #4]
    return buffer->size;
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	889b      	ldrh	r3, [r3, #4]
}
 80210f2:	4618      	mov	r0, r3
 80210f4:	370c      	adds	r7, #12
 80210f6:	46bd      	mov	sp, r7
 80210f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210fc:	4770      	bx	lr

080210fe <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 80210fe:	b480      	push	{r7}
 8021100:	b083      	sub	sp, #12
 8021102:	af00      	add	r7, sp, #0
 8021104:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	88da      	ldrh	r2, [r3, #6]
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	889b      	ldrh	r3, [r3, #4]
 802110e:	1ad3      	subs	r3, r2, r3
 8021110:	b29b      	uxth	r3, r3
}
 8021112:	4618      	mov	r0, r3
 8021114:	370c      	adds	r7, #12
 8021116:	46bd      	mov	sp, r7
 8021118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802111c:	4770      	bx	lr
	...

08021120 <disableInt>:
uint16_t bufferPeekValues(const Buffer * const buffer, uint8_t **values) {
    *values = buffer->data + buffer->ptrOut;
    return buffer->size;
}

static void disableInt() {
 8021120:	b480      	push	{r7}
 8021122:	b083      	sub	sp, #12
 8021124:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021126:	f3ef 8310 	mrs	r3, PRIMASK
 802112a:	607b      	str	r3, [r7, #4]
  return(result);
 802112c:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 802112e:	4a05      	ldr	r2, [pc, #20]	; (8021144 <disableInt+0x24>)
 8021130:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8021132:	b672      	cpsid	i
}
 8021134:	bf00      	nop
    __disable_irq();
}
 8021136:	bf00      	nop
 8021138:	370c      	adds	r7, #12
 802113a:	46bd      	mov	sp, r7
 802113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021140:	4770      	bx	lr
 8021142:	bf00      	nop
 8021144:	20000114 	.word	0x20000114

08021148 <enableInt>:

static void enableInt() {
 8021148:	b480      	push	{r7}
 802114a:	b083      	sub	sp, #12
 802114c:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 802114e:	4b06      	ldr	r3, [pc, #24]	; (8021168 <enableInt+0x20>)
 8021150:	681b      	ldr	r3, [r3, #0]
 8021152:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	f383 8810 	msr	PRIMASK, r3
}
 802115a:	bf00      	nop
}
 802115c:	bf00      	nop
 802115e:	370c      	adds	r7, #12
 8021160:	46bd      	mov	sp, r7
 8021162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021166:	4770      	bx	lr
 8021168:	20000114 	.word	0x20000114

0802116c <commandCreate>:
struct Command {
    char *name;
    CommandAction action;
};

Command * commandCreate(const char * const name, const CommandAction action) {
 802116c:	b580      	push	{r7, lr}
 802116e:	b086      	sub	sp, #24
 8021170:	af00      	add	r7, sp, #0
 8021172:	6078      	str	r0, [r7, #4]
 8021174:	6039      	str	r1, [r7, #0]
    size_t nameLen = strlen(name);
 8021176:	6878      	ldr	r0, [r7, #4]
 8021178:	f7ff f844 	bl	8020204 <strlen>
 802117c:	6178      	str	r0, [r7, #20]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 802117e:	697b      	ldr	r3, [r7, #20]
 8021180:	3301      	adds	r3, #1
 8021182:	4618      	mov	r0, r3
 8021184:	f010 f810 	bl	80311a8 <malloc>
 8021188:	4603      	mov	r3, r0
 802118a:	613b      	str	r3, [r7, #16]
    strcpy(nameCopy, name);
 802118c:	6879      	ldr	r1, [r7, #4]
 802118e:	6938      	ldr	r0, [r7, #16]
 8021190:	f010 f960 	bl	8031454 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8021194:	2008      	movs	r0, #8
 8021196:	f010 f807 	bl	80311a8 <malloc>
 802119a:	4603      	mov	r3, r0
 802119c:	60fb      	str	r3, [r7, #12]
    command->name = nameCopy;
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	693a      	ldr	r2, [r7, #16]
 80211a2:	601a      	str	r2, [r3, #0]
    command->action = action;
 80211a4:	68fb      	ldr	r3, [r7, #12]
 80211a6:	683a      	ldr	r2, [r7, #0]
 80211a8:	605a      	str	r2, [r3, #4]
    return command;
 80211aa:	68fb      	ldr	r3, [r7, #12]
}
 80211ac:	4618      	mov	r0, r3
 80211ae:	3718      	adds	r7, #24
 80211b0:	46bd      	mov	sp, r7
 80211b2:	bd80      	pop	{r7, pc}

080211b4 <commandExecute>:

const char * commandExecute(const Command * const command) {
 80211b4:	b580      	push	{r7, lr}
 80211b6:	b082      	sub	sp, #8
 80211b8:	af00      	add	r7, sp, #0
 80211ba:	6078      	str	r0, [r7, #4]
    if (command == NULL || command->action == NULL)
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d003      	beq.n	80211ca <commandExecute+0x16>
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	685b      	ldr	r3, [r3, #4]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d101      	bne.n	80211ce <commandExecute+0x1a>
        return NULL;
 80211ca:	2300      	movs	r3, #0
 80211cc:	e004      	b.n	80211d8 <commandExecute+0x24>
    return (*command->action)(NULL);
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	685b      	ldr	r3, [r3, #4]
 80211d2:	2000      	movs	r0, #0
 80211d4:	4798      	blx	r3
 80211d6:	4603      	mov	r3, r0
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3708      	adds	r7, #8
 80211dc:	46bd      	mov	sp, r7
 80211de:	bd80      	pop	{r7, pc}

080211e0 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 80211e0:	b480      	push	{r7}
 80211e2:	b083      	sub	sp, #12
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d101      	bne.n	80211f2 <commandGetName+0x12>
        return NULL;
 80211ee:	2300      	movs	r3, #0
 80211f0:	e001      	b.n	80211f6 <commandGetName+0x16>
    return command->name;
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	681b      	ldr	r3, [r3, #0]
}
 80211f6:	4618      	mov	r0, r3
 80211f8:	370c      	adds	r7, #12
 80211fa:	46bd      	mov	sp, r7
 80211fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021200:	4770      	bx	lr
	...

08021204 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8021204:	b580      	push	{r7, lr}
 8021206:	b08a      	sub	sp, #40	; 0x28
 8021208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802120a:	f107 0314 	add.w	r3, r7, #20
 802120e:	2200      	movs	r2, #0
 8021210:	601a      	str	r2, [r3, #0]
 8021212:	605a      	str	r2, [r3, #4]
 8021214:	609a      	str	r2, [r3, #8]
 8021216:	60da      	str	r2, [r3, #12]
 8021218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802121a:	2300      	movs	r3, #0
 802121c:	613b      	str	r3, [r7, #16]
 802121e:	4b2c      	ldr	r3, [pc, #176]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021222:	4a2b      	ldr	r2, [pc, #172]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021228:	6313      	str	r3, [r2, #48]	; 0x30
 802122a:	4b29      	ldr	r3, [pc, #164]	; (80212d0 <MX_GPIO_Init+0xcc>)
 802122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021232:	613b      	str	r3, [r7, #16]
 8021234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021236:	2300      	movs	r3, #0
 8021238:	60fb      	str	r3, [r7, #12]
 802123a:	4b25      	ldr	r3, [pc, #148]	; (80212d0 <MX_GPIO_Init+0xcc>)
 802123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802123e:	4a24      	ldr	r2, [pc, #144]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021240:	f043 0304 	orr.w	r3, r3, #4
 8021244:	6313      	str	r3, [r2, #48]	; 0x30
 8021246:	4b22      	ldr	r3, [pc, #136]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802124a:	f003 0304 	and.w	r3, r3, #4
 802124e:	60fb      	str	r3, [r7, #12]
 8021250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021252:	2300      	movs	r3, #0
 8021254:	60bb      	str	r3, [r7, #8]
 8021256:	4b1e      	ldr	r3, [pc, #120]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802125a:	4a1d      	ldr	r2, [pc, #116]	; (80212d0 <MX_GPIO_Init+0xcc>)
 802125c:	f043 0301 	orr.w	r3, r3, #1
 8021260:	6313      	str	r3, [r2, #48]	; 0x30
 8021262:	4b1b      	ldr	r3, [pc, #108]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021266:	f003 0301 	and.w	r3, r3, #1
 802126a:	60bb      	str	r3, [r7, #8]
 802126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802126e:	2300      	movs	r3, #0
 8021270:	607b      	str	r3, [r7, #4]
 8021272:	4b17      	ldr	r3, [pc, #92]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021276:	4a16      	ldr	r2, [pc, #88]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021278:	f043 0310 	orr.w	r3, r3, #16
 802127c:	6313      	str	r3, [r2, #48]	; 0x30
 802127e:	4b14      	ldr	r3, [pc, #80]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021282:	f003 0310 	and.w	r3, r3, #16
 8021286:	607b      	str	r3, [r7, #4]
 8021288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802128a:	2300      	movs	r3, #0
 802128c:	603b      	str	r3, [r7, #0]
 802128e:	4b10      	ldr	r3, [pc, #64]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021292:	4a0f      	ldr	r2, [pc, #60]	; (80212d0 <MX_GPIO_Init+0xcc>)
 8021294:	f043 0302 	orr.w	r3, r3, #2
 8021298:	6313      	str	r3, [r2, #48]	; 0x30
 802129a:	4b0d      	ldr	r3, [pc, #52]	; (80212d0 <MX_GPIO_Init+0xcc>)
 802129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802129e:	f003 0302 	and.w	r3, r3, #2
 80212a2:	603b      	str	r3, [r7, #0]
 80212a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80212a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80212aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212ac:	2302      	movs	r3, #2
 80212ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212b0:	2300      	movs	r3, #0
 80212b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212b4:	2300      	movs	r3, #0
 80212b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80212b8:	2300      	movs	r3, #0
 80212ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80212bc:	f107 0314 	add.w	r3, r7, #20
 80212c0:	4619      	mov	r1, r3
 80212c2:	4804      	ldr	r0, [pc, #16]	; (80212d4 <MX_GPIO_Init+0xd0>)
 80212c4:	f003 f820 	bl	8024308 <HAL_GPIO_Init>

}
 80212c8:	bf00      	nop
 80212ca:	3728      	adds	r7, #40	; 0x28
 80212cc:	46bd      	mov	sp, r7
 80212ce:	bd80      	pop	{r7, pc}
 80212d0:	40023800 	.word	0x40023800
 80212d4:	40020000 	.word	0x40020000

080212d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80212d8:	b480      	push	{r7}
 80212da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80212dc:	f3bf 8f4f 	dsb	sy
}
 80212e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80212e2:	4b06      	ldr	r3, [pc, #24]	; (80212fc <__NVIC_SystemReset+0x24>)
 80212e4:	68db      	ldr	r3, [r3, #12]
 80212e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80212ea:	4904      	ldr	r1, [pc, #16]	; (80212fc <__NVIC_SystemReset+0x24>)
 80212ec:	4b04      	ldr	r3, [pc, #16]	; (8021300 <__NVIC_SystemReset+0x28>)
 80212ee:	4313      	orrs	r3, r2
 80212f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80212f2:	f3bf 8f4f 	dsb	sy
}
 80212f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80212f8:	bf00      	nop
 80212fa:	e7fd      	b.n	80212f8 <__NVIC_SystemReset+0x20>
 80212fc:	e000ed00 	.word	0xe000ed00
 8021300:	05fa0004 	.word	0x05fa0004

08021304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021304:	b580      	push	{r7, lr}
 8021306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("1", (CommandAction) playA);
 8021308:	4947      	ldr	r1, [pc, #284]	; (8021428 <main+0x124>)
 802130a:	4848      	ldr	r0, [pc, #288]	; (802142c <main+0x128>)
 802130c:	f7ff ff2e 	bl	802116c <commandCreate>
 8021310:	4603      	mov	r3, r0
 8021312:	4a47      	ldr	r2, [pc, #284]	; (8021430 <main+0x12c>)
 8021314:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("2", (CommandAction) playB);
 8021316:	4947      	ldr	r1, [pc, #284]	; (8021434 <main+0x130>)
 8021318:	4847      	ldr	r0, [pc, #284]	; (8021438 <main+0x134>)
 802131a:	f7ff ff27 	bl	802116c <commandCreate>
 802131e:	4603      	mov	r3, r0
 8021320:	4a43      	ldr	r2, [pc, #268]	; (8021430 <main+0x12c>)
 8021322:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("3", (CommandAction) playC);
 8021324:	4945      	ldr	r1, [pc, #276]	; (802143c <main+0x138>)
 8021326:	4846      	ldr	r0, [pc, #280]	; (8021440 <main+0x13c>)
 8021328:	f7ff ff20 	bl	802116c <commandCreate>
 802132c:	4603      	mov	r3, r0
 802132e:	4a40      	ldr	r2, [pc, #256]	; (8021430 <main+0x12c>)
 8021330:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("4", (CommandAction) playD);
 8021332:	4944      	ldr	r1, [pc, #272]	; (8021444 <main+0x140>)
 8021334:	4844      	ldr	r0, [pc, #272]	; (8021448 <main+0x144>)
 8021336:	f7ff ff19 	bl	802116c <commandCreate>
 802133a:	4603      	mov	r3, r0
 802133c:	4a3c      	ldr	r2, [pc, #240]	; (8021430 <main+0x12c>)
 802133e:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("5", (CommandAction) playE);
 8021340:	4942      	ldr	r1, [pc, #264]	; (802144c <main+0x148>)
 8021342:	4843      	ldr	r0, [pc, #268]	; (8021450 <main+0x14c>)
 8021344:	f7ff ff12 	bl	802116c <commandCreate>
 8021348:	4603      	mov	r3, r0
 802134a:	4a39      	ldr	r2, [pc, #228]	; (8021430 <main+0x12c>)
 802134c:	6113      	str	r3, [r2, #16]
	  commands[5] = commandCreate("6", (CommandAction) playF);
 802134e:	4941      	ldr	r1, [pc, #260]	; (8021454 <main+0x150>)
 8021350:	4841      	ldr	r0, [pc, #260]	; (8021458 <main+0x154>)
 8021352:	f7ff ff0b 	bl	802116c <commandCreate>
 8021356:	4603      	mov	r3, r0
 8021358:	4a35      	ldr	r2, [pc, #212]	; (8021430 <main+0x12c>)
 802135a:	6153      	str	r3, [r2, #20]
	  commands[6] = commandCreate("7", (CommandAction) playG);
 802135c:	493f      	ldr	r1, [pc, #252]	; (802145c <main+0x158>)
 802135e:	4840      	ldr	r0, [pc, #256]	; (8021460 <main+0x15c>)
 8021360:	f7ff ff04 	bl	802116c <commandCreate>
 8021364:	4603      	mov	r3, r0
 8021366:	4a32      	ldr	r2, [pc, #200]	; (8021430 <main+0x12c>)
 8021368:	6193      	str	r3, [r2, #24]
	  commands[7] = commandCreate("+", (CommandAction) upOctave);
 802136a:	493e      	ldr	r1, [pc, #248]	; (8021464 <main+0x160>)
 802136c:	483e      	ldr	r0, [pc, #248]	; (8021468 <main+0x164>)
 802136e:	f7ff fefd 	bl	802116c <commandCreate>
 8021372:	4603      	mov	r3, r0
 8021374:	4a2e      	ldr	r2, [pc, #184]	; (8021430 <main+0x12c>)
 8021376:	61d3      	str	r3, [r2, #28]
	  commands[8] = commandCreate("-", (CommandAction) downOctave);
 8021378:	493c      	ldr	r1, [pc, #240]	; (802146c <main+0x168>)
 802137a:	483d      	ldr	r0, [pc, #244]	; (8021470 <main+0x16c>)
 802137c:	f7ff fef6 	bl	802116c <commandCreate>
 8021380:	4603      	mov	r3, r0
 8021382:	4a2b      	ldr	r2, [pc, #172]	; (8021430 <main+0x12c>)
 8021384:	6213      	str	r3, [r2, #32]
	  commands[9] = commandCreate("A", (CommandAction) upDuration);
 8021386:	493b      	ldr	r1, [pc, #236]	; (8021474 <main+0x170>)
 8021388:	483b      	ldr	r0, [pc, #236]	; (8021478 <main+0x174>)
 802138a:	f7ff feef 	bl	802116c <commandCreate>
 802138e:	4603      	mov	r3, r0
 8021390:	4a27      	ldr	r2, [pc, #156]	; (8021430 <main+0x12c>)
 8021392:	6253      	str	r3, [r2, #36]	; 0x24
	  commands[10] = commandCreate("a", (CommandAction) downDuration);
 8021394:	4939      	ldr	r1, [pc, #228]	; (802147c <main+0x178>)
 8021396:	483a      	ldr	r0, [pc, #232]	; (8021480 <main+0x17c>)
 8021398:	f7ff fee8 	bl	802116c <commandCreate>
 802139c:	4603      	mov	r3, r0
 802139e:	4a24      	ldr	r2, [pc, #144]	; (8021430 <main+0x12c>)
 80213a0:	6293      	str	r3, [r2, #40]	; 0x28
	  commands[11] = commandCreate("\r", (CommandAction) playAll);
 80213a2:	4938      	ldr	r1, [pc, #224]	; (8021484 <main+0x180>)
 80213a4:	4838      	ldr	r0, [pc, #224]	; (8021488 <main+0x184>)
 80213a6:	f7ff fee1 	bl	802116c <commandCreate>
 80213aa:	4603      	mov	r3, r0
 80213ac:	4a20      	ldr	r2, [pc, #128]	; (8021430 <main+0x12c>)
 80213ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	  commands[12] = commandCreate("q", (CommandAction) quit);
 80213b0:	4936      	ldr	r1, [pc, #216]	; (802148c <main+0x188>)
 80213b2:	4837      	ldr	r0, [pc, #220]	; (8021490 <main+0x18c>)
 80213b4:	f7ff feda 	bl	802116c <commandCreate>
 80213b8:	4603      	mov	r3, r0
 80213ba:	4a1d      	ldr	r2, [pc, #116]	; (8021430 <main+0x12c>)
 80213bc:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80213be:	f001 fb9d 	bl	8022afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80213c2:	f000 f871 	bl	80214a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80213c6:	f7ff ff1d 	bl	8021204 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80213ca:	f000 fd33 	bl	8021e34 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80213ce:	f000 faf9 	bl	80219c4 <MX_TIM1_Init>
  MX_TIM6_Init();
 80213d2:	f000 fb97 	bl	8021b04 <MX_TIM6_Init>
  MX_TIM7_Init();
 80213d6:	f000 fbcb 	bl	8021b70 <MX_TIM7_Init>
  MX_LWIP_Init();
 80213da:	f006 f853 	bl	8027484 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 80213de:	f000 fdcb 	bl	8021f78 <uartInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80213e2:	2100      	movs	r1, #0
 80213e4:	482b      	ldr	r0, [pc, #172]	; (8021494 <main+0x190>)
 80213e6:	f004 f823 	bl	8025430 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80213ea:	482b      	ldr	r0, [pc, #172]	; (8021498 <main+0x194>)
 80213ec:	f003 ff28 	bl	8025240 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80213f0:	482a      	ldr	r0, [pc, #168]	; (802149c <main+0x198>)
 80213f2:	f003 ff25 	bl	8025240 <HAL_TIM_Base_Start_IT>
  menuInit(commands, 13);
 80213f6:	210d      	movs	r1, #13
 80213f8:	480d      	ldr	r0, [pc, #52]	; (8021430 <main+0x12c>)
 80213fa:	f000 f945 	bl	8021688 <menuInit>
  lwip_tcp_init();
 80213fe:	f000 fe43 	bl	8022088 <lwip_tcp_init>
  sendMessage("Started\n");
 8021402:	4827      	ldr	r0, [pc, #156]	; (80214a0 <main+0x19c>)
 8021404:	f000 f8c6 	bl	8021594 <sendMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8021408:	4b26      	ldr	r3, [pc, #152]	; (80214a4 <main+0x1a0>)
 802140a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 802140e:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 8021410:	f006 f964 	bl	80276dc <MX_LWIP_Process>
	  uartPolling();
 8021414:	f000 fdc4 	bl	8021fa0 <uartPolling>

	  if (uartHasNext()) {
 8021418:	f000 fda2 	bl	8021f60 <uartHasNext>
 802141c:	4603      	mov	r3, r0
 802141e:	2b00      	cmp	r3, #0
 8021420:	d0f2      	beq.n	8021408 <main+0x104>
		  receiveAndSendChar();
 8021422:	f000 f8c9 	bl	80215b8 <receiveAndSendChar>
	  WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8021426:	e7ef      	b.n	8021408 <main+0x104>
 8021428:	080227d9 	.word	0x080227d9
 802142c:	08033440 	.word	0x08033440
 8021430:	2000019c 	.word	0x2000019c
 8021434:	080227e9 	.word	0x080227e9
 8021438:	08033444 	.word	0x08033444
 802143c:	080227f9 	.word	0x080227f9
 8021440:	08033448 	.word	0x08033448
 8021444:	08022809 	.word	0x08022809
 8021448:	0803344c 	.word	0x0803344c
 802144c:	08022819 	.word	0x08022819
 8021450:	08033450 	.word	0x08033450
 8021454:	08022829 	.word	0x08022829
 8021458:	08033454 	.word	0x08033454
 802145c:	08022839 	.word	0x08022839
 8021460:	08033458 	.word	0x08033458
 8021464:	080228a9 	.word	0x080228a9
 8021468:	0803345c 	.word	0x0803345c
 802146c:	08022909 	.word	0x08022909
 8021470:	08033460 	.word	0x08033460
 8021474:	08022969 	.word	0x08022969
 8021478:	08033464 	.word	0x08033464
 802147c:	080229cd 	.word	0x080229cd
 8021480:	08033468 	.word	0x08033468
 8021484:	08022849 	.word	0x08022849
 8021488:	0803346c 	.word	0x0803346c
 802148c:	08021659 	.word	0x08021659
 8021490:	08033470 	.word	0x08033470
 8021494:	200001e0 	.word	0x200001e0
 8021498:	20000228 	.word	0x20000228
 802149c:	20000270 	.word	0x20000270
 80214a0:	08033474 	.word	0x08033474
 80214a4:	40003000 	.word	0x40003000

080214a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80214a8:	b580      	push	{r7, lr}
 80214aa:	b094      	sub	sp, #80	; 0x50
 80214ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80214ae:	f107 0320 	add.w	r3, r7, #32
 80214b2:	2230      	movs	r2, #48	; 0x30
 80214b4:	2100      	movs	r1, #0
 80214b6:	4618      	mov	r0, r3
 80214b8:	f00f fe9c 	bl	80311f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80214bc:	f107 030c 	add.w	r3, r7, #12
 80214c0:	2200      	movs	r2, #0
 80214c2:	601a      	str	r2, [r3, #0]
 80214c4:	605a      	str	r2, [r3, #4]
 80214c6:	609a      	str	r2, [r3, #8]
 80214c8:	60da      	str	r2, [r3, #12]
 80214ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80214cc:	2300      	movs	r3, #0
 80214ce:	60bb      	str	r3, [r7, #8]
 80214d0:	4b2e      	ldr	r3, [pc, #184]	; (802158c <SystemClock_Config+0xe4>)
 80214d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214d4:	4a2d      	ldr	r2, [pc, #180]	; (802158c <SystemClock_Config+0xe4>)
 80214d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80214da:	6413      	str	r3, [r2, #64]	; 0x40
 80214dc:	4b2b      	ldr	r3, [pc, #172]	; (802158c <SystemClock_Config+0xe4>)
 80214de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80214e4:	60bb      	str	r3, [r7, #8]
 80214e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80214e8:	2300      	movs	r3, #0
 80214ea:	607b      	str	r3, [r7, #4]
 80214ec:	4b28      	ldr	r3, [pc, #160]	; (8021590 <SystemClock_Config+0xe8>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	4a27      	ldr	r2, [pc, #156]	; (8021590 <SystemClock_Config+0xe8>)
 80214f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80214f6:	6013      	str	r3, [r2, #0]
 80214f8:	4b25      	ldr	r3, [pc, #148]	; (8021590 <SystemClock_Config+0xe8>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8021500:	607b      	str	r3, [r7, #4]
 8021502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021504:	2301      	movs	r3, #1
 8021506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802150c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802150e:	2302      	movs	r3, #2
 8021510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8021518:	230f      	movs	r3, #15
 802151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 802151c:	23d8      	movs	r3, #216	; 0xd8
 802151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021520:	2302      	movs	r3, #2
 8021522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8021524:	2304      	movs	r3, #4
 8021526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021528:	f107 0320 	add.w	r3, r7, #32
 802152c:	4618      	mov	r0, r3
 802152e:	f003 f8e7 	bl	8024700 <HAL_RCC_OscConfig>
 8021532:	4603      	mov	r3, r0
 8021534:	2b00      	cmp	r3, #0
 8021536:	d001      	beq.n	802153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021538:	f000 f8a0 	bl	802167c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 802153c:	f003 f890 	bl	8024660 <HAL_PWREx_EnableOverDrive>
 8021540:	4603      	mov	r3, r0
 8021542:	2b00      	cmp	r3, #0
 8021544:	d001      	beq.n	802154a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8021546:	f000 f899 	bl	802167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802154a:	230f      	movs	r3, #15
 802154c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802154e:	2302      	movs	r3, #2
 8021550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021552:	2300      	movs	r3, #0
 8021554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8021556:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021560:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021562:	f107 030c 	add.w	r3, r7, #12
 8021566:	2105      	movs	r1, #5
 8021568:	4618      	mov	r0, r3
 802156a:	f003 fb41 	bl	8024bf0 <HAL_RCC_ClockConfig>
 802156e:	4603      	mov	r3, r0
 8021570:	2b00      	cmp	r3, #0
 8021572:	d001      	beq.n	8021578 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8021574:	f000 f882 	bl	802167c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8021578:	2200      	movs	r2, #0
 802157a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802157e:	2000      	movs	r0, #0
 8021580:	f003 fc1c 	bl	8024dbc <HAL_RCC_MCOConfig>
}
 8021584:	bf00      	nop
 8021586:	3750      	adds	r7, #80	; 0x50
 8021588:	46bd      	mov	sp, r7
 802158a:	bd80      	pop	{r7, pc}
 802158c:	40023800 	.word	0x40023800
 8021590:	40007000 	.word	0x40007000

08021594 <sendMessage>:

/* USER CODE BEGIN 4 */
static void sendMessage(const char * msg) {
 8021594:	b580      	push	{r7, lr}
 8021596:	b082      	sub	sp, #8
 8021598:	af00      	add	r7, sp, #0
 802159a:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 802159c:	6878      	ldr	r0, [r7, #4]
 802159e:	f7fe fe31 	bl	8020204 <strlen>
 80215a2:	4603      	mov	r3, r0
 80215a4:	b29b      	uxth	r3, r3
 80215a6:	4619      	mov	r1, r3
 80215a8:	6878      	ldr	r0, [r7, #4]
 80215aa:	f000 fcbd 	bl	8021f28 <uartTransmit>
}
 80215ae:	bf00      	nop
 80215b0:	3708      	adds	r7, #8
 80215b2:	46bd      	mov	sp, r7
 80215b4:	bd80      	pop	{r7, pc}
	...

080215b8 <receiveAndSendChar>:

static void receiveAndSendChar() {
 80215b8:	b580      	push	{r7, lr}
 80215ba:	b082      	sub	sp, #8
 80215bc:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 80215be:	4b18      	ldr	r3, [pc, #96]	; (8021620 <receiveAndSendChar+0x68>)
 80215c0:	781b      	ldrb	r3, [r3, #0]
 80215c2:	461a      	mov	r2, r3
 80215c4:	4b17      	ldr	r3, [pc, #92]	; (8021624 <receiveAndSendChar+0x6c>)
 80215c6:	4413      	add	r3, r2
 80215c8:	2101      	movs	r1, #1
 80215ca:	4618      	mov	r0, r3
 80215cc:	f000 fcf0 	bl	8021fb0 <uartReceive>
 80215d0:	4603      	mov	r3, r0
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d020      	beq.n	8021618 <receiveAndSendChar+0x60>
        uint8_t received = uartBuf[uartBufLast];
 80215d6:	4b12      	ldr	r3, [pc, #72]	; (8021620 <receiveAndSendChar+0x68>)
 80215d8:	781b      	ldrb	r3, [r3, #0]
 80215da:	461a      	mov	r2, r3
 80215dc:	4b11      	ldr	r3, [pc, #68]	; (8021624 <receiveAndSendChar+0x6c>)
 80215de:	5c9b      	ldrb	r3, [r3, r2]
 80215e0:	70fb      	strb	r3, [r7, #3]
        uartBufLast++;
 80215e2:	4b0f      	ldr	r3, [pc, #60]	; (8021620 <receiveAndSendChar+0x68>)
 80215e4:	781b      	ldrb	r3, [r3, #0]
 80215e6:	3301      	adds	r3, #1
 80215e8:	b2da      	uxtb	r2, r3
 80215ea:	4b0d      	ldr	r3, [pc, #52]	; (8021620 <receiveAndSendChar+0x68>)
 80215ec:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80215ee:	1cfb      	adds	r3, r7, #3
 80215f0:	2101      	movs	r1, #1
 80215f2:	4618      	mov	r0, r3
 80215f4:	f000 fc98 	bl	8021f28 <uartTransmit>

        uartBuf[uartBufLast] = '\0';
 80215f8:	4b09      	ldr	r3, [pc, #36]	; (8021620 <receiveAndSendChar+0x68>)
 80215fa:	781b      	ldrb	r3, [r3, #0]
 80215fc:	461a      	mov	r2, r3
 80215fe:	4b09      	ldr	r3, [pc, #36]	; (8021624 <receiveAndSendChar+0x6c>)
 8021600:	2100      	movs	r1, #0
 8021602:	5499      	strb	r1, [r3, r2]
        const char *commandResult = menuExecuteCommand((char *) uartBuf);
 8021604:	4807      	ldr	r0, [pc, #28]	; (8021624 <receiveAndSendChar+0x6c>)
 8021606:	f000 f873 	bl	80216f0 <menuExecuteCommand>
 802160a:	6078      	str	r0, [r7, #4]
        sendMessage("\n");
 802160c:	4806      	ldr	r0, [pc, #24]	; (8021628 <receiveAndSendChar+0x70>)
 802160e:	f7ff ffc1 	bl	8021594 <sendMessage>
        sendCommandResult(commandResult);
 8021612:	6878      	ldr	r0, [r7, #4]
 8021614:	f000 f80a 	bl	802162c <sendCommandResult>
    }
}
 8021618:	bf00      	nop
 802161a:	3708      	adds	r7, #8
 802161c:	46bd      	mov	sp, r7
 802161e:	bd80      	pop	{r7, pc}
 8021620:	20000198 	.word	0x20000198
 8021624:	20000118 	.word	0x20000118
 8021628:	08033480 	.word	0x08033480

0802162c <sendCommandResult>:

static void sendCommandResult(const char * commandResult) {
 802162c:	b580      	push	{r7, lr}
 802162e:	b082      	sub	sp, #8
 8021630:	af00      	add	r7, sp, #0
 8021632:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 8021634:	6878      	ldr	r0, [r7, #4]
 8021636:	f7fe fde5 	bl	8020204 <strlen>
 802163a:	4603      	mov	r3, r0
 802163c:	b29b      	uxth	r3, r3
 802163e:	4619      	mov	r1, r3
 8021640:	6878      	ldr	r0, [r7, #4]
 8021642:	f000 fc71 	bl	8021f28 <uartTransmit>
    uartBufLast = 0;
 8021646:	4b03      	ldr	r3, [pc, #12]	; (8021654 <sendCommandResult+0x28>)
 8021648:	2200      	movs	r2, #0
 802164a:	701a      	strb	r2, [r3, #0]
}
 802164c:	bf00      	nop
 802164e:	3708      	adds	r7, #8
 8021650:	46bd      	mov	sp, r7
 8021652:	bd80      	pop	{r7, pc}
 8021654:	20000198 	.word	0x20000198

08021658 <quit>:

static void quit() {
 8021658:	b580      	push	{r7, lr}
 802165a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 802165c:	f002 fce2 	bl	8024024 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x08104000, 0);
 8021660:	f04f 0200 	mov.w	r2, #0
 8021664:	f04f 0300 	mov.w	r3, #0
 8021668:	4903      	ldr	r1, [pc, #12]	; (8021678 <quit+0x20>)
 802166a:	2002      	movs	r0, #2
 802166c:	f002 fc86 	bl	8023f7c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8021670:	f002 fcfa 	bl	8024068 <HAL_FLASH_Lock>
	NVIC_SystemReset();
 8021674:	f7ff fe30 	bl	80212d8 <__NVIC_SystemReset>
 8021678:	08104000 	.word	0x08104000

0802167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802167c:	b480      	push	{r7}
 802167e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021680:	b672      	cpsid	i
}
 8021682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021684:	e7fe      	b.n	8021684 <Error_Handler+0x8>
	...

08021688 <menuInit>:
#include "command.h"

Command **menuCommands = NULL;
uint16_t menuSize;

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8021688:	b580      	push	{r7, lr}
 802168a:	b084      	sub	sp, #16
 802168c:	af00      	add	r7, sp, #0
 802168e:	6078      	str	r0, [r7, #4]
 8021690:	460b      	mov	r3, r1
 8021692:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8021694:	4b14      	ldr	r3, [pc, #80]	; (80216e8 <menuInit+0x60>)
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d121      	bne.n	80216e0 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 802169c:	887b      	ldrh	r3, [r7, #2]
 802169e:	009b      	lsls	r3, r3, #2
 80216a0:	4618      	mov	r0, r3
 80216a2:	f00f fd81 	bl	80311a8 <malloc>
 80216a6:	4603      	mov	r3, r0
 80216a8:	461a      	mov	r2, r3
 80216aa:	4b0f      	ldr	r3, [pc, #60]	; (80216e8 <menuInit+0x60>)
 80216ac:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80216ae:	2300      	movs	r3, #0
 80216b0:	81fb      	strh	r3, [r7, #14]
 80216b2:	e00d      	b.n	80216d0 <menuInit+0x48>
        menuCommands[i] = commands[i];
 80216b4:	89fb      	ldrh	r3, [r7, #14]
 80216b6:	009b      	lsls	r3, r3, #2
 80216b8:	687a      	ldr	r2, [r7, #4]
 80216ba:	441a      	add	r2, r3
 80216bc:	4b0a      	ldr	r3, [pc, #40]	; (80216e8 <menuInit+0x60>)
 80216be:	6819      	ldr	r1, [r3, #0]
 80216c0:	89fb      	ldrh	r3, [r7, #14]
 80216c2:	009b      	lsls	r3, r3, #2
 80216c4:	440b      	add	r3, r1
 80216c6:	6812      	ldr	r2, [r2, #0]
 80216c8:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80216ca:	89fb      	ldrh	r3, [r7, #14]
 80216cc:	3301      	adds	r3, #1
 80216ce:	81fb      	strh	r3, [r7, #14]
 80216d0:	89fa      	ldrh	r2, [r7, #14]
 80216d2:	887b      	ldrh	r3, [r7, #2]
 80216d4:	429a      	cmp	r2, r3
 80216d6:	d3ed      	bcc.n	80216b4 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 80216d8:	4a04      	ldr	r2, [pc, #16]	; (80216ec <menuInit+0x64>)
 80216da:	887b      	ldrh	r3, [r7, #2]
 80216dc:	8013      	strh	r3, [r2, #0]
 80216de:	e000      	b.n	80216e2 <menuInit+0x5a>
        return;
 80216e0:	bf00      	nop
}
 80216e2:	3710      	adds	r7, #16
 80216e4:	46bd      	mov	sp, r7
 80216e6:	bd80      	pop	{r7, pc}
 80216e8:	200001d0 	.word	0x200001d0
 80216ec:	200001d4 	.word	0x200001d4

080216f0 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandName) {
 80216f0:	b580      	push	{r7, lr}
 80216f2:	b084      	sub	sp, #16
 80216f4:	af00      	add	r7, sp, #0
 80216f6:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < menuSize; i++) {
 80216f8:	2300      	movs	r3, #0
 80216fa:	81fb      	strh	r3, [r7, #14]
 80216fc:	e01f      	b.n	802173e <menuExecuteCommand+0x4e>
        const Command * const command = menuCommands[i];
 80216fe:	4b15      	ldr	r3, [pc, #84]	; (8021754 <menuExecuteCommand+0x64>)
 8021700:	681a      	ldr	r2, [r3, #0]
 8021702:	89fb      	ldrh	r3, [r7, #14]
 8021704:	009b      	lsls	r3, r3, #2
 8021706:	4413      	add	r3, r2
 8021708:	681b      	ldr	r3, [r3, #0]
 802170a:	60bb      	str	r3, [r7, #8]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 802170c:	4b11      	ldr	r3, [pc, #68]	; (8021754 <menuExecuteCommand+0x64>)
 802170e:	681a      	ldr	r2, [r3, #0]
 8021710:	89fb      	ldrh	r3, [r7, #14]
 8021712:	009b      	lsls	r3, r3, #2
 8021714:	4413      	add	r3, r2
 8021716:	681b      	ldr	r3, [r3, #0]
 8021718:	4618      	mov	r0, r3
 802171a:	f7ff fd61 	bl	80211e0 <commandGetName>
 802171e:	4603      	mov	r3, r0
 8021720:	6879      	ldr	r1, [r7, #4]
 8021722:	4618      	mov	r0, r3
 8021724:	f7fe fd64 	bl	80201f0 <strcmp>
 8021728:	4603      	mov	r3, r0
 802172a:	2b00      	cmp	r3, #0
 802172c:	d104      	bne.n	8021738 <menuExecuteCommand+0x48>
            return commandExecute(command);
 802172e:	68b8      	ldr	r0, [r7, #8]
 8021730:	f7ff fd40 	bl	80211b4 <commandExecute>
 8021734:	4603      	mov	r3, r0
 8021736:	e008      	b.n	802174a <menuExecuteCommand+0x5a>
    for (uint16_t i = 0; i < menuSize; i++) {
 8021738:	89fb      	ldrh	r3, [r7, #14]
 802173a:	3301      	adds	r3, #1
 802173c:	81fb      	strh	r3, [r7, #14]
 802173e:	4b06      	ldr	r3, [pc, #24]	; (8021758 <menuExecuteCommand+0x68>)
 8021740:	881b      	ldrh	r3, [r3, #0]
 8021742:	89fa      	ldrh	r2, [r7, #14]
 8021744:	429a      	cmp	r2, r3
 8021746:	d3da      	bcc.n	80216fe <menuExecuteCommand+0xe>
        }
    }
    return "Command not found\n";
 8021748:	4b04      	ldr	r3, [pc, #16]	; (802175c <menuExecuteCommand+0x6c>)
}
 802174a:	4618      	mov	r0, r3
 802174c:	3710      	adds	r7, #16
 802174e:	46bd      	mov	sp, r7
 8021750:	bd80      	pop	{r7, pc}
 8021752:	bf00      	nop
 8021754:	200001d0 	.word	0x200001d0
 8021758:	200001d4 	.word	0x200001d4
 802175c:	08033484 	.word	0x08033484

08021760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021760:	b480      	push	{r7}
 8021762:	b083      	sub	sp, #12
 8021764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021766:	2300      	movs	r3, #0
 8021768:	607b      	str	r3, [r7, #4]
 802176a:	4b10      	ldr	r3, [pc, #64]	; (80217ac <HAL_MspInit+0x4c>)
 802176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802176e:	4a0f      	ldr	r2, [pc, #60]	; (80217ac <HAL_MspInit+0x4c>)
 8021770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021774:	6453      	str	r3, [r2, #68]	; 0x44
 8021776:	4b0d      	ldr	r3, [pc, #52]	; (80217ac <HAL_MspInit+0x4c>)
 8021778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802177e:	607b      	str	r3, [r7, #4]
 8021780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021782:	2300      	movs	r3, #0
 8021784:	603b      	str	r3, [r7, #0]
 8021786:	4b09      	ldr	r3, [pc, #36]	; (80217ac <HAL_MspInit+0x4c>)
 8021788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802178a:	4a08      	ldr	r2, [pc, #32]	; (80217ac <HAL_MspInit+0x4c>)
 802178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021790:	6413      	str	r3, [r2, #64]	; 0x40
 8021792:	4b06      	ldr	r3, [pc, #24]	; (80217ac <HAL_MspInit+0x4c>)
 8021794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802179a:	603b      	str	r3, [r7, #0]
 802179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802179e:	bf00      	nop
 80217a0:	370c      	adds	r7, #12
 80217a2:	46bd      	mov	sp, r7
 80217a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a8:	4770      	bx	lr
 80217aa:	bf00      	nop
 80217ac:	40023800 	.word	0x40023800

080217b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80217b0:	b480      	push	{r7}
 80217b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80217b4:	e7fe      	b.n	80217b4 <NMI_Handler+0x4>

080217b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80217b6:	b480      	push	{r7}
 80217b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80217ba:	e7fe      	b.n	80217ba <HardFault_Handler+0x4>

080217bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80217bc:	b480      	push	{r7}
 80217be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80217c0:	e7fe      	b.n	80217c0 <MemManage_Handler+0x4>

080217c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80217c2:	b480      	push	{r7}
 80217c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80217c6:	e7fe      	b.n	80217c6 <BusFault_Handler+0x4>

080217c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80217c8:	b480      	push	{r7}
 80217ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80217cc:	e7fe      	b.n	80217cc <UsageFault_Handler+0x4>

080217ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80217ce:	b480      	push	{r7}
 80217d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80217d2:	bf00      	nop
 80217d4:	46bd      	mov	sp, r7
 80217d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217da:	4770      	bx	lr

080217dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80217dc:	b480      	push	{r7}
 80217de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80217e0:	bf00      	nop
 80217e2:	46bd      	mov	sp, r7
 80217e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e8:	4770      	bx	lr

080217ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80217ea:	b480      	push	{r7}
 80217ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80217ee:	bf00      	nop
 80217f0:	46bd      	mov	sp, r7
 80217f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f6:	4770      	bx	lr

080217f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80217fc:	f001 f9d0 	bl	8022ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021800:	bf00      	nop
 8021802:	bd80      	pop	{r7, pc}

08021804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8021804:	b580      	push	{r7, lr}
 8021806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021808:	4802      	ldr	r0, [pc, #8]	; (8021814 <TIM6_DAC_IRQHandler+0x10>)
 802180a:	f003 fed9 	bl	80255c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802180e:	bf00      	nop
 8021810:	bd80      	pop	{r7, pc}
 8021812:	bf00      	nop
 8021814:	20000228 	.word	0x20000228

08021818 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8021818:	b580      	push	{r7, lr}
 802181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802181c:	4802      	ldr	r0, [pc, #8]	; (8021828 <TIM7_IRQHandler+0x10>)
 802181e:	f003 fecf 	bl	80255c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8021822:	bf00      	nop
 8021824:	bd80      	pop	{r7, pc}
 8021826:	bf00      	nop
 8021828:	20000270 	.word	0x20000270

0802182c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 802182c:	b580      	push	{r7, lr}
 802182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8021830:	4802      	ldr	r0, [pc, #8]	; (802183c <ETH_IRQHandler+0x10>)
 8021832:	f001 ff79 	bl	8023728 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8021836:	bf00      	nop
 8021838:	bd80      	pop	{r7, pc}
 802183a:	bf00      	nop
 802183c:	2000349c 	.word	0x2000349c

08021840 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8021840:	b580      	push	{r7, lr}
 8021842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8021844:	4802      	ldr	r0, [pc, #8]	; (8021850 <USART6_IRQHandler+0x10>)
 8021846:	f004 fee9 	bl	802661c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 802184a:	bf00      	nop
 802184c:	bd80      	pop	{r7, pc}
 802184e:	bf00      	nop
 8021850:	200002c4 	.word	0x200002c4

08021854 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021854:	b580      	push	{r7, lr}
 8021856:	b086      	sub	sp, #24
 8021858:	af00      	add	r7, sp, #0
 802185a:	60f8      	str	r0, [r7, #12]
 802185c:	60b9      	str	r1, [r7, #8]
 802185e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021860:	2300      	movs	r3, #0
 8021862:	617b      	str	r3, [r7, #20]
 8021864:	e00a      	b.n	802187c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8021866:	f3af 8000 	nop.w
 802186a:	4601      	mov	r1, r0
 802186c:	68bb      	ldr	r3, [r7, #8]
 802186e:	1c5a      	adds	r2, r3, #1
 8021870:	60ba      	str	r2, [r7, #8]
 8021872:	b2ca      	uxtb	r2, r1
 8021874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021876:	697b      	ldr	r3, [r7, #20]
 8021878:	3301      	adds	r3, #1
 802187a:	617b      	str	r3, [r7, #20]
 802187c:	697a      	ldr	r2, [r7, #20]
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	429a      	cmp	r2, r3
 8021882:	dbf0      	blt.n	8021866 <_read+0x12>
	}

return len;
 8021884:	687b      	ldr	r3, [r7, #4]
}
 8021886:	4618      	mov	r0, r3
 8021888:	3718      	adds	r7, #24
 802188a:	46bd      	mov	sp, r7
 802188c:	bd80      	pop	{r7, pc}

0802188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802188e:	b580      	push	{r7, lr}
 8021890:	b086      	sub	sp, #24
 8021892:	af00      	add	r7, sp, #0
 8021894:	60f8      	str	r0, [r7, #12]
 8021896:	60b9      	str	r1, [r7, #8]
 8021898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802189a:	2300      	movs	r3, #0
 802189c:	617b      	str	r3, [r7, #20]
 802189e:	e009      	b.n	80218b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80218a0:	68bb      	ldr	r3, [r7, #8]
 80218a2:	1c5a      	adds	r2, r3, #1
 80218a4:	60ba      	str	r2, [r7, #8]
 80218a6:	781b      	ldrb	r3, [r3, #0]
 80218a8:	4618      	mov	r0, r3
 80218aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80218ae:	697b      	ldr	r3, [r7, #20]
 80218b0:	3301      	adds	r3, #1
 80218b2:	617b      	str	r3, [r7, #20]
 80218b4:	697a      	ldr	r2, [r7, #20]
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	429a      	cmp	r2, r3
 80218ba:	dbf1      	blt.n	80218a0 <_write+0x12>
	}
	return len;
 80218bc:	687b      	ldr	r3, [r7, #4]
}
 80218be:	4618      	mov	r0, r3
 80218c0:	3718      	adds	r7, #24
 80218c2:	46bd      	mov	sp, r7
 80218c4:	bd80      	pop	{r7, pc}

080218c6 <_close>:

int _close(int file)
{
 80218c6:	b480      	push	{r7}
 80218c8:	b083      	sub	sp, #12
 80218ca:	af00      	add	r7, sp, #0
 80218cc:	6078      	str	r0, [r7, #4]
	return -1;
 80218ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80218d2:	4618      	mov	r0, r3
 80218d4:	370c      	adds	r7, #12
 80218d6:	46bd      	mov	sp, r7
 80218d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218dc:	4770      	bx	lr

080218de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80218de:	b480      	push	{r7}
 80218e0:	b083      	sub	sp, #12
 80218e2:	af00      	add	r7, sp, #0
 80218e4:	6078      	str	r0, [r7, #4]
 80218e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80218e8:	683b      	ldr	r3, [r7, #0]
 80218ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80218ee:	605a      	str	r2, [r3, #4]
	return 0;
 80218f0:	2300      	movs	r3, #0
}
 80218f2:	4618      	mov	r0, r3
 80218f4:	370c      	adds	r7, #12
 80218f6:	46bd      	mov	sp, r7
 80218f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218fc:	4770      	bx	lr

080218fe <_isatty>:

int _isatty(int file)
{
 80218fe:	b480      	push	{r7}
 8021900:	b083      	sub	sp, #12
 8021902:	af00      	add	r7, sp, #0
 8021904:	6078      	str	r0, [r7, #4]
	return 1;
 8021906:	2301      	movs	r3, #1
}
 8021908:	4618      	mov	r0, r3
 802190a:	370c      	adds	r7, #12
 802190c:	46bd      	mov	sp, r7
 802190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021912:	4770      	bx	lr

08021914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021914:	b480      	push	{r7}
 8021916:	b085      	sub	sp, #20
 8021918:	af00      	add	r7, sp, #0
 802191a:	60f8      	str	r0, [r7, #12]
 802191c:	60b9      	str	r1, [r7, #8]
 802191e:	607a      	str	r2, [r7, #4]
	return 0;
 8021920:	2300      	movs	r3, #0
}
 8021922:	4618      	mov	r0, r3
 8021924:	3714      	adds	r7, #20
 8021926:	46bd      	mov	sp, r7
 8021928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802192c:	4770      	bx	lr
	...

08021930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021930:	b480      	push	{r7}
 8021932:	b087      	sub	sp, #28
 8021934:	af00      	add	r7, sp, #0
 8021936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021938:	4a14      	ldr	r2, [pc, #80]	; (802198c <_sbrk+0x5c>)
 802193a:	4b15      	ldr	r3, [pc, #84]	; (8021990 <_sbrk+0x60>)
 802193c:	1ad3      	subs	r3, r2, r3
 802193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021940:	697b      	ldr	r3, [r7, #20]
 8021942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021944:	4b13      	ldr	r3, [pc, #76]	; (8021994 <_sbrk+0x64>)
 8021946:	681b      	ldr	r3, [r3, #0]
 8021948:	2b00      	cmp	r3, #0
 802194a:	d102      	bne.n	8021952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802194c:	4b11      	ldr	r3, [pc, #68]	; (8021994 <_sbrk+0x64>)
 802194e:	4a12      	ldr	r2, [pc, #72]	; (8021998 <_sbrk+0x68>)
 8021950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021952:	4b10      	ldr	r3, [pc, #64]	; (8021994 <_sbrk+0x64>)
 8021954:	681a      	ldr	r2, [r3, #0]
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	4413      	add	r3, r2
 802195a:	693a      	ldr	r2, [r7, #16]
 802195c:	429a      	cmp	r2, r3
 802195e:	d205      	bcs.n	802196c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8021960:	4b0e      	ldr	r3, [pc, #56]	; (802199c <_sbrk+0x6c>)
 8021962:	220c      	movs	r2, #12
 8021964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021966:	f04f 33ff 	mov.w	r3, #4294967295
 802196a:	e009      	b.n	8021980 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 802196c:	4b09      	ldr	r3, [pc, #36]	; (8021994 <_sbrk+0x64>)
 802196e:	681b      	ldr	r3, [r3, #0]
 8021970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021972:	4b08      	ldr	r3, [pc, #32]	; (8021994 <_sbrk+0x64>)
 8021974:	681a      	ldr	r2, [r3, #0]
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	4413      	add	r3, r2
 802197a:	4a06      	ldr	r2, [pc, #24]	; (8021994 <_sbrk+0x64>)
 802197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802197e:	68fb      	ldr	r3, [r7, #12]
}
 8021980:	4618      	mov	r0, r3
 8021982:	371c      	adds	r7, #28
 8021984:	46bd      	mov	sp, r7
 8021986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802198a:	4770      	bx	lr
 802198c:	20030000 	.word	0x20030000
 8021990:	00000400 	.word	0x00000400
 8021994:	200001d8 	.word	0x200001d8
 8021998:	20006bb0 	.word	0x20006bb0
 802199c:	20006ba4 	.word	0x20006ba4

080219a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80219a0:	b480      	push	{r7}
 80219a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80219a4:	4b06      	ldr	r3, [pc, #24]	; (80219c0 <SystemInit+0x20>)
 80219a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80219aa:	4a05      	ldr	r2, [pc, #20]	; (80219c0 <SystemInit+0x20>)
 80219ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80219b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80219b4:	bf00      	nop
 80219b6:	46bd      	mov	sp, r7
 80219b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219bc:	4770      	bx	lr
 80219be:	bf00      	nop
 80219c0:	e000ed00 	.word	0xe000ed00

080219c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80219c4:	b580      	push	{r7, lr}
 80219c6:	b096      	sub	sp, #88	; 0x58
 80219c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80219ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80219ce:	2200      	movs	r2, #0
 80219d0:	601a      	str	r2, [r3, #0]
 80219d2:	605a      	str	r2, [r3, #4]
 80219d4:	609a      	str	r2, [r3, #8]
 80219d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80219d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80219dc:	2200      	movs	r2, #0
 80219de:	601a      	str	r2, [r3, #0]
 80219e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80219e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80219e6:	2200      	movs	r2, #0
 80219e8:	601a      	str	r2, [r3, #0]
 80219ea:	605a      	str	r2, [r3, #4]
 80219ec:	609a      	str	r2, [r3, #8]
 80219ee:	60da      	str	r2, [r3, #12]
 80219f0:	611a      	str	r2, [r3, #16]
 80219f2:	615a      	str	r2, [r3, #20]
 80219f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80219f6:	1d3b      	adds	r3, r7, #4
 80219f8:	2220      	movs	r2, #32
 80219fa:	2100      	movs	r1, #0
 80219fc:	4618      	mov	r0, r3
 80219fe:	f00f fbf9 	bl	80311f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021a02:	4b3e      	ldr	r3, [pc, #248]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a04:	4a3e      	ldr	r2, [pc, #248]	; (8021b00 <MX_TIM1_Init+0x13c>)
 8021a06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8021a08:	4b3c      	ldr	r3, [pc, #240]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021a0e:	4b3b      	ldr	r3, [pc, #236]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a10:	2200      	movs	r2, #0
 8021a12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8021a14:	4b39      	ldr	r3, [pc, #228]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a16:	2214      	movs	r2, #20
 8021a18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021a1a:	4b38      	ldr	r3, [pc, #224]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021a20:	4b36      	ldr	r3, [pc, #216]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a22:	2200      	movs	r2, #0
 8021a24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021a26:	4b35      	ldr	r3, [pc, #212]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a28:	2200      	movs	r2, #0
 8021a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8021a2c:	4833      	ldr	r0, [pc, #204]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a2e:	f003 fb27 	bl	8025080 <HAL_TIM_Base_Init>
 8021a32:	4603      	mov	r3, r0
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d001      	beq.n	8021a3c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8021a38:	f7ff fe20 	bl	802167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021a40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8021a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021a46:	4619      	mov	r1, r3
 8021a48:	482c      	ldr	r0, [pc, #176]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a4a:	f003 ff83 	bl	8025954 <HAL_TIM_ConfigClockSource>
 8021a4e:	4603      	mov	r3, r0
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d001      	beq.n	8021a58 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8021a54:	f7ff fe12 	bl	802167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021a58:	4828      	ldr	r0, [pc, #160]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a5a:	f003 fc90 	bl	802537e <HAL_TIM_PWM_Init>
 8021a5e:	4603      	mov	r3, r0
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d001      	beq.n	8021a68 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8021a64:	f7ff fe0a 	bl	802167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021a68:	2300      	movs	r3, #0
 8021a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021a74:	4619      	mov	r1, r3
 8021a76:	4821      	ldr	r0, [pc, #132]	; (8021afc <MX_TIM1_Init+0x138>)
 8021a78:	f004 fb6c 	bl	8026154 <HAL_TIMEx_MasterConfigSynchronization>
 8021a7c:	4603      	mov	r3, r0
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d001      	beq.n	8021a86 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8021a82:	f7ff fdfb 	bl	802167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021a86:	2360      	movs	r3, #96	; 0x60
 8021a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021a8e:	2300      	movs	r3, #0
 8021a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021a92:	2300      	movs	r3, #0
 8021a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021a96:	2300      	movs	r3, #0
 8021a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021a9a:	2300      	movs	r3, #0
 8021a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021a9e:	2300      	movs	r3, #0
 8021aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	4619      	mov	r1, r3
 8021aaa:	4814      	ldr	r0, [pc, #80]	; (8021afc <MX_TIM1_Init+0x138>)
 8021aac:	f003 fe90 	bl	80257d0 <HAL_TIM_PWM_ConfigChannel>
 8021ab0:	4603      	mov	r3, r0
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d001      	beq.n	8021aba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8021ab6:	f7ff fde1 	bl	802167c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021aba:	2300      	movs	r3, #0
 8021abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8021abe:	2300      	movs	r3, #0
 8021ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021aca:	2300      	movs	r3, #0
 8021acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8021ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8021ad8:	1d3b      	adds	r3, r7, #4
 8021ada:	4619      	mov	r1, r3
 8021adc:	4807      	ldr	r0, [pc, #28]	; (8021afc <MX_TIM1_Init+0x138>)
 8021ade:	f004 fbb5 	bl	802624c <HAL_TIMEx_ConfigBreakDeadTime>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d001      	beq.n	8021aec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8021ae8:	f7ff fdc8 	bl	802167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8021aec:	4803      	ldr	r0, [pc, #12]	; (8021afc <MX_TIM1_Init+0x138>)
 8021aee:	f000 f8d1 	bl	8021c94 <HAL_TIM_MspPostInit>

}
 8021af2:	bf00      	nop
 8021af4:	3758      	adds	r7, #88	; 0x58
 8021af6:	46bd      	mov	sp, r7
 8021af8:	bd80      	pop	{r7, pc}
 8021afa:	bf00      	nop
 8021afc:	200001e0 	.word	0x200001e0
 8021b00:	40010000 	.word	0x40010000

08021b04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8021b04:	b580      	push	{r7, lr}
 8021b06:	b082      	sub	sp, #8
 8021b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b0a:	463b      	mov	r3, r7
 8021b0c:	2200      	movs	r2, #0
 8021b0e:	601a      	str	r2, [r3, #0]
 8021b10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8021b12:	4b15      	ldr	r3, [pc, #84]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b14:	4a15      	ldr	r2, [pc, #84]	; (8021b6c <MX_TIM6_Init+0x68>)
 8021b16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44999;
 8021b18:	4b13      	ldr	r3, [pc, #76]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b1a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8021b1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021b20:	4b11      	ldr	r3, [pc, #68]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b22:	2200      	movs	r2, #0
 8021b24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 8021b26:	4b10      	ldr	r3, [pc, #64]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021b2e:	4b0e      	ldr	r3, [pc, #56]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b30:	2200      	movs	r2, #0
 8021b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8021b34:	480c      	ldr	r0, [pc, #48]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b36:	f003 faa3 	bl	8025080 <HAL_TIM_Base_Init>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d001      	beq.n	8021b44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8021b40:	f7ff fd9c 	bl	802167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021b44:	2300      	movs	r3, #0
 8021b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021b48:	2300      	movs	r3, #0
 8021b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8021b4c:	463b      	mov	r3, r7
 8021b4e:	4619      	mov	r1, r3
 8021b50:	4805      	ldr	r0, [pc, #20]	; (8021b68 <MX_TIM6_Init+0x64>)
 8021b52:	f004 faff 	bl	8026154 <HAL_TIMEx_MasterConfigSynchronization>
 8021b56:	4603      	mov	r3, r0
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d001      	beq.n	8021b60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8021b5c:	f7ff fd8e 	bl	802167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8021b60:	bf00      	nop
 8021b62:	3708      	adds	r7, #8
 8021b64:	46bd      	mov	sp, r7
 8021b66:	bd80      	pop	{r7, pc}
 8021b68:	20000228 	.word	0x20000228
 8021b6c:	40001000 	.word	0x40001000

08021b70 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8021b70:	b580      	push	{r7, lr}
 8021b72:	b082      	sub	sp, #8
 8021b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b76:	463b      	mov	r3, r7
 8021b78:	2200      	movs	r2, #0
 8021b7a:	601a      	str	r2, [r3, #0]
 8021b7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8021b7e:	4b15      	ldr	r3, [pc, #84]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021b80:	4a15      	ldr	r2, [pc, #84]	; (8021bd8 <MX_TIM7_Init+0x68>)
 8021b82:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 44999;
 8021b84:	4b13      	ldr	r3, [pc, #76]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021b86:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8021b8a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021b8c:	4b11      	ldr	r3, [pc, #68]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021b8e:	2200      	movs	r2, #0
 8021b90:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8021b92:	4b10      	ldr	r3, [pc, #64]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021b94:	f242 7210 	movw	r2, #10000	; 0x2710
 8021b98:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021b9a:	4b0e      	ldr	r3, [pc, #56]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021ba0:	480c      	ldr	r0, [pc, #48]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021ba2:	f003 fa6d 	bl	8025080 <HAL_TIM_Base_Init>
 8021ba6:	4603      	mov	r3, r0
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d001      	beq.n	8021bb0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8021bac:	f7ff fd66 	bl	802167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021bb0:	2300      	movs	r3, #0
 8021bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8021bb8:	463b      	mov	r3, r7
 8021bba:	4619      	mov	r1, r3
 8021bbc:	4805      	ldr	r0, [pc, #20]	; (8021bd4 <MX_TIM7_Init+0x64>)
 8021bbe:	f004 fac9 	bl	8026154 <HAL_TIMEx_MasterConfigSynchronization>
 8021bc2:	4603      	mov	r3, r0
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	d001      	beq.n	8021bcc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8021bc8:	f7ff fd58 	bl	802167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8021bcc:	bf00      	nop
 8021bce:	3708      	adds	r7, #8
 8021bd0:	46bd      	mov	sp, r7
 8021bd2:	bd80      	pop	{r7, pc}
 8021bd4:	20000270 	.word	0x20000270
 8021bd8:	40001400 	.word	0x40001400

08021bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	b086      	sub	sp, #24
 8021be0:	af00      	add	r7, sp, #0
 8021be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	4a26      	ldr	r2, [pc, #152]	; (8021c84 <HAL_TIM_Base_MspInit+0xa8>)
 8021bea:	4293      	cmp	r3, r2
 8021bec:	d10e      	bne.n	8021c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021bee:	2300      	movs	r3, #0
 8021bf0:	617b      	str	r3, [r7, #20]
 8021bf2:	4b25      	ldr	r3, [pc, #148]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bf6:	4a24      	ldr	r2, [pc, #144]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021bf8:	f043 0301 	orr.w	r3, r3, #1
 8021bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8021bfe:	4b22      	ldr	r3, [pc, #136]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c02:	f003 0301 	and.w	r3, r3, #1
 8021c06:	617b      	str	r3, [r7, #20]
 8021c08:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8021c0a:	e036      	b.n	8021c7a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	4a1e      	ldr	r2, [pc, #120]	; (8021c8c <HAL_TIM_Base_MspInit+0xb0>)
 8021c12:	4293      	cmp	r3, r2
 8021c14:	d116      	bne.n	8021c44 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021c16:	2300      	movs	r3, #0
 8021c18:	613b      	str	r3, [r7, #16]
 8021c1a:	4b1b      	ldr	r3, [pc, #108]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c1e:	4a1a      	ldr	r2, [pc, #104]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c20:	f043 0310 	orr.w	r3, r3, #16
 8021c24:	6413      	str	r3, [r2, #64]	; 0x40
 8021c26:	4b18      	ldr	r3, [pc, #96]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f003 0310 	and.w	r3, r3, #16
 8021c2e:	613b      	str	r3, [r7, #16]
 8021c30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8021c32:	2200      	movs	r2, #0
 8021c34:	2100      	movs	r1, #0
 8021c36:	2036      	movs	r0, #54	; 0x36
 8021c38:	f001 f8d1 	bl	8022dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021c3c:	2036      	movs	r0, #54	; 0x36
 8021c3e:	f001 f8ea 	bl	8022e16 <HAL_NVIC_EnableIRQ>
}
 8021c42:	e01a      	b.n	8021c7a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8021c44:	687b      	ldr	r3, [r7, #4]
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	4a11      	ldr	r2, [pc, #68]	; (8021c90 <HAL_TIM_Base_MspInit+0xb4>)
 8021c4a:	4293      	cmp	r3, r2
 8021c4c:	d115      	bne.n	8021c7a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021c4e:	2300      	movs	r3, #0
 8021c50:	60fb      	str	r3, [r7, #12]
 8021c52:	4b0d      	ldr	r3, [pc, #52]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c56:	4a0c      	ldr	r2, [pc, #48]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c58:	f043 0320 	orr.w	r3, r3, #32
 8021c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8021c5e:	4b0a      	ldr	r3, [pc, #40]	; (8021c88 <HAL_TIM_Base_MspInit+0xac>)
 8021c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c62:	f003 0320 	and.w	r3, r3, #32
 8021c66:	60fb      	str	r3, [r7, #12]
 8021c68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8021c6a:	2200      	movs	r2, #0
 8021c6c:	2100      	movs	r1, #0
 8021c6e:	2037      	movs	r0, #55	; 0x37
 8021c70:	f001 f8b5 	bl	8022dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021c74:	2037      	movs	r0, #55	; 0x37
 8021c76:	f001 f8ce 	bl	8022e16 <HAL_NVIC_EnableIRQ>
}
 8021c7a:	bf00      	nop
 8021c7c:	3718      	adds	r7, #24
 8021c7e:	46bd      	mov	sp, r7
 8021c80:	bd80      	pop	{r7, pc}
 8021c82:	bf00      	nop
 8021c84:	40010000 	.word	0x40010000
 8021c88:	40023800 	.word	0x40023800
 8021c8c:	40001000 	.word	0x40001000
 8021c90:	40001400 	.word	0x40001400

08021c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8021c94:	b580      	push	{r7, lr}
 8021c96:	b088      	sub	sp, #32
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c9c:	f107 030c 	add.w	r3, r7, #12
 8021ca0:	2200      	movs	r2, #0
 8021ca2:	601a      	str	r2, [r3, #0]
 8021ca4:	605a      	str	r2, [r3, #4]
 8021ca6:	609a      	str	r2, [r3, #8]
 8021ca8:	60da      	str	r2, [r3, #12]
 8021caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	4a12      	ldr	r2, [pc, #72]	; (8021cfc <HAL_TIM_MspPostInit+0x68>)
 8021cb2:	4293      	cmp	r3, r2
 8021cb4:	d11e      	bne.n	8021cf4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021cb6:	2300      	movs	r3, #0
 8021cb8:	60bb      	str	r3, [r7, #8]
 8021cba:	4b11      	ldr	r3, [pc, #68]	; (8021d00 <HAL_TIM_MspPostInit+0x6c>)
 8021cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cbe:	4a10      	ldr	r2, [pc, #64]	; (8021d00 <HAL_TIM_MspPostInit+0x6c>)
 8021cc0:	f043 0310 	orr.w	r3, r3, #16
 8021cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8021cc6:	4b0e      	ldr	r3, [pc, #56]	; (8021d00 <HAL_TIM_MspPostInit+0x6c>)
 8021cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cca:	f003 0310 	and.w	r3, r3, #16
 8021cce:	60bb      	str	r3, [r7, #8]
 8021cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8021cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021cd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cd8:	2302      	movs	r3, #2
 8021cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cdc:	2300      	movs	r3, #0
 8021cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8021ce4:	2301      	movs	r3, #1
 8021ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021ce8:	f107 030c 	add.w	r3, r7, #12
 8021cec:	4619      	mov	r1, r3
 8021cee:	4805      	ldr	r0, [pc, #20]	; (8021d04 <HAL_TIM_MspPostInit+0x70>)
 8021cf0:	f002 fb0a 	bl	8024308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8021cf4:	bf00      	nop
 8021cf6:	3720      	adds	r7, #32
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd80      	pop	{r7, pc}
 8021cfc:	40010000 	.word	0x40010000
 8021d00:	40023800 	.word	0x40023800
 8021d04:	40021000 	.word	0x40021000

08021d08 <TIM6_START>:
  /* USER CODE END TIM7_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef TIM6_START() {
 8021d08:	b580      	push	{r7, lr}
 8021d0a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8021d0c:	4802      	ldr	r0, [pc, #8]	; (8021d18 <TIM6_START+0x10>)
 8021d0e:	f003 fa07 	bl	8025120 <HAL_TIM_Base_Start>
 8021d12:	4603      	mov	r3, r0
}
 8021d14:	4618      	mov	r0, r3
 8021d16:	bd80      	pop	{r7, pc}
 8021d18:	20000228 	.word	0x20000228

08021d1c <TIM6_STOP>:

HAL_StatusTypeDef TIM6_STOP() {
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Stop(&htim6);
 8021d20:	4802      	ldr	r0, [pc, #8]	; (8021d2c <TIM6_STOP+0x10>)
 8021d22:	f003 fa65 	bl	80251f0 <HAL_TIM_Base_Stop>
 8021d26:	4603      	mov	r3, r0
}
 8021d28:	4618      	mov	r0, r3
 8021d2a:	bd80      	pop	{r7, pc}
 8021d2c:	20000228 	.word	0x20000228

08021d30 <setPlayAllFlag>:

void setPlayAllFlag() {
 8021d30:	b480      	push	{r7}
 8021d32:	af00      	add	r7, sp, #0
	playAllFlag = 1;
 8021d34:	4b03      	ldr	r3, [pc, #12]	; (8021d44 <setPlayAllFlag+0x14>)
 8021d36:	2201      	movs	r2, #1
 8021d38:	701a      	strb	r2, [r3, #0]
};
 8021d3a:	bf00      	nop
 8021d3c:	46bd      	mov	sp, r7
 8021d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d42:	4770      	bx	lr
 8021d44:	200001dc 	.word	0x200001dc

08021d48 <resetPlayAllFlag>:

void resetPlayAllFlag() {
 8021d48:	b480      	push	{r7}
 8021d4a:	af00      	add	r7, sp, #0
	playAllFlag = 0;
 8021d4c:	4b03      	ldr	r3, [pc, #12]	; (8021d5c <resetPlayAllFlag+0x14>)
 8021d4e:	2200      	movs	r2, #0
 8021d50:	701a      	strb	r2, [r3, #0]
};
 8021d52:	bf00      	nop
 8021d54:	46bd      	mov	sp, r7
 8021d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d5a:	4770      	bx	lr
 8021d5c:	200001dc 	.word	0x200001dc

08021d60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8021d60:	b580      	push	{r7, lr}
 8021d62:	b082      	sub	sp, #8
 8021d64:	af00      	add	r7, sp, #0
 8021d66:	6078      	str	r0, [r7, #4]
	static uint8_t note = 0;
	if( htim->Instance == TIM6 ) {
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	681b      	ldr	r3, [r3, #0]
 8021d6c:	4a28      	ldr	r2, [pc, #160]	; (8021e10 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8021d6e:	4293      	cmp	r3, r2
 8021d70:	d127      	bne.n	8021dc2 <HAL_TIM_PeriodElapsedCallback+0x62>
		if (!playAllFlag) {
 8021d72:	4b28      	ldr	r3, [pc, #160]	; (8021e14 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8021d74:	781b      	ldrb	r3, [r3, #0]
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d107      	bne.n	8021d8a <HAL_TIM_PeriodElapsedCallback+0x2a>
			TIM6_STOP();
 8021d7a:	f7ff ffcf 	bl	8021d1c <TIM6_STOP>
			TIM1->CCR1 = 0;
 8021d7e:	4b26      	ldr	r3, [pc, #152]	; (8021e18 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8021d80:	2200      	movs	r2, #0
 8021d82:	635a      	str	r2, [r3, #52]	; 0x34
			disableIsPlaying();
 8021d84:	f000 fe52 	bl	8022a2c <disableIsPlaying>
 8021d88:	e01b      	b.n	8021dc2 <HAL_TIM_PeriodElapsedCallback+0x62>
		} else {
			note++;
 8021d8a:	4b24      	ldr	r3, [pc, #144]	; (8021e1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8021d8c:	781b      	ldrb	r3, [r3, #0]
 8021d8e:	3301      	adds	r3, #1
 8021d90:	b2da      	uxtb	r2, r3
 8021d92:	4b22      	ldr	r3, [pc, #136]	; (8021e1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8021d94:	701a      	strb	r2, [r3, #0]
			if (note >= 6) {
 8021d96:	4b21      	ldr	r3, [pc, #132]	; (8021e1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8021d98:	781b      	ldrb	r3, [r3, #0]
 8021d9a:	2b05      	cmp	r3, #5
 8021d9c:	d90c      	bls.n	8021db8 <HAL_TIM_PeriodElapsedCallback+0x58>
				note = 0;
 8021d9e:	4b1f      	ldr	r3, [pc, #124]	; (8021e1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8021da0:	2200      	movs	r2, #0
 8021da2:	701a      	strb	r2, [r3, #0]
				TIM6_STOP();
 8021da4:	f7ff ffba 	bl	8021d1c <TIM6_STOP>
				TIM1->CCR1 = 0;
 8021da8:	4b1b      	ldr	r3, [pc, #108]	; (8021e18 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8021daa:	2200      	movs	r2, #0
 8021dac:	635a      	str	r2, [r3, #52]	; 0x34
				resetPlayAllFlag();
 8021dae:	f7ff ffcb 	bl	8021d48 <resetPlayAllFlag>
				disableIsPlaying();
 8021db2:	f000 fe3b 	bl	8022a2c <disableIsPlaying>
 8021db6:	e004      	b.n	8021dc2 <HAL_TIM_PeriodElapsedCallback+0x62>
			} else {
				setPlay(note);
 8021db8:	4b18      	ldr	r3, [pc, #96]	; (8021e1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8021dba:	781b      	ldrb	r3, [r3, #0]
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	f000 fcb3 	bl	8022728 <setPlay>
			}
		}

	}

	if( htim->Instance == TIM7 ) {
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	681b      	ldr	r3, [r3, #0]
 8021dc6:	4a16      	ldr	r2, [pc, #88]	; (8021e20 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8021dc8:	4293      	cmp	r3, r2
 8021dca:	d11e      	bne.n	8021e0a <HAL_TIM_PeriodElapsedCallback+0xaa>
		if (timFlag == 1) {
 8021dcc:	4b15      	ldr	r3, [pc, #84]	; (8021e24 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8021dce:	781b      	ldrb	r3, [r3, #0]
 8021dd0:	2b01      	cmp	r3, #1
 8021dd2:	d103      	bne.n	8021ddc <HAL_TIM_PeriodElapsedCallback+0x7c>
			timFlag = 0;
 8021dd4:	4b13      	ldr	r3, [pc, #76]	; (8021e24 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8021dd6:	2200      	movs	r2, #0
 8021dd8:	701a      	strb	r2, [r3, #0]
			return;
 8021dda:	e016      	b.n	8021e0a <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		HAL_FLASH_Unlock();
 8021ddc:	f002 f922 	bl	8024024 <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x08108008, 0);
 8021de0:	f04f 0200 	mov.w	r2, #0
 8021de4:	f04f 0300 	mov.w	r3, #0
 8021de8:	490f      	ldr	r1, [pc, #60]	; (8021e28 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8021dea:	2002      	movs	r0, #2
 8021dec:	f002 f8c6 	bl	8023f7c <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x0810C008, 0);
 8021df0:	f04f 0200 	mov.w	r2, #0
 8021df4:	f04f 0300 	mov.w	r3, #0
 8021df8:	490c      	ldr	r1, [pc, #48]	; (8021e2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8021dfa:	2002      	movs	r0, #2
 8021dfc:	f002 f8be 	bl	8023f7c <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8021e00:	f002 f932 	bl	8024068 <HAL_FLASH_Lock>
		HAL_TIM_Base_Stop_IT(&htim7);
 8021e04:	480a      	ldr	r0, [pc, #40]	; (8021e30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8021e06:	f003 fa8b 	bl	8025320 <HAL_TIM_Base_Stop_IT>
	}
}
 8021e0a:	3708      	adds	r7, #8
 8021e0c:	46bd      	mov	sp, r7
 8021e0e:	bd80      	pop	{r7, pc}
 8021e10:	40001000 	.word	0x40001000
 8021e14:	200001dc 	.word	0x200001dc
 8021e18:	40010000 	.word	0x40010000
 8021e1c:	200002b8 	.word	0x200002b8
 8021e20:	40001400 	.word	0x40001400
 8021e24:	20000004 	.word	0x20000004
 8021e28:	08108008 	.word	0x08108008
 8021e2c:	0810c008 	.word	0x0810c008
 8021e30:	20000270 	.word	0x20000270

08021e34 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8021e34:	b580      	push	{r7, lr}
 8021e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8021e38:	4b11      	ldr	r3, [pc, #68]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e3a:	4a12      	ldr	r2, [pc, #72]	; (8021e84 <MX_USART6_UART_Init+0x50>)
 8021e3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8021e3e:	4b10      	ldr	r3, [pc, #64]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021e44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8021e46:	4b0e      	ldr	r3, [pc, #56]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e48:	2200      	movs	r2, #0
 8021e4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8021e4c:	4b0c      	ldr	r3, [pc, #48]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e4e:	2200      	movs	r2, #0
 8021e50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8021e52:	4b0b      	ldr	r3, [pc, #44]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e54:	2200      	movs	r2, #0
 8021e56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8021e58:	4b09      	ldr	r3, [pc, #36]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e5a:	220c      	movs	r2, #12
 8021e5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021e5e:	4b08      	ldr	r3, [pc, #32]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e60:	2200      	movs	r2, #0
 8021e62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8021e64:	4b06      	ldr	r3, [pc, #24]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e66:	2200      	movs	r2, #0
 8021e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8021e6a:	4805      	ldr	r0, [pc, #20]	; (8021e80 <MX_USART6_UART_Init+0x4c>)
 8021e6c:	f004 fa54 	bl	8026318 <HAL_UART_Init>
 8021e70:	4603      	mov	r3, r0
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d001      	beq.n	8021e7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8021e76:	f7ff fc01 	bl	802167c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8021e7a:	bf00      	nop
 8021e7c:	bd80      	pop	{r7, pc}
 8021e7e:	bf00      	nop
 8021e80:	200002c4 	.word	0x200002c4
 8021e84:	40011400 	.word	0x40011400

08021e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8021e88:	b580      	push	{r7, lr}
 8021e8a:	b08a      	sub	sp, #40	; 0x28
 8021e8c:	af00      	add	r7, sp, #0
 8021e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021e90:	f107 0314 	add.w	r3, r7, #20
 8021e94:	2200      	movs	r2, #0
 8021e96:	601a      	str	r2, [r3, #0]
 8021e98:	605a      	str	r2, [r3, #4]
 8021e9a:	609a      	str	r2, [r3, #8]
 8021e9c:	60da      	str	r2, [r3, #12]
 8021e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	4a1d      	ldr	r2, [pc, #116]	; (8021f1c <HAL_UART_MspInit+0x94>)
 8021ea6:	4293      	cmp	r3, r2
 8021ea8:	d133      	bne.n	8021f12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8021eaa:	2300      	movs	r3, #0
 8021eac:	613b      	str	r3, [r7, #16]
 8021eae:	4b1c      	ldr	r3, [pc, #112]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021eb2:	4a1b      	ldr	r2, [pc, #108]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021eb4:	f043 0320 	orr.w	r3, r3, #32
 8021eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8021eba:	4b19      	ldr	r3, [pc, #100]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021ebe:	f003 0320 	and.w	r3, r3, #32
 8021ec2:	613b      	str	r3, [r7, #16]
 8021ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	60fb      	str	r3, [r7, #12]
 8021eca:	4b15      	ldr	r3, [pc, #84]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ece:	4a14      	ldr	r2, [pc, #80]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021ed0:	f043 0304 	orr.w	r3, r3, #4
 8021ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8021ed6:	4b12      	ldr	r3, [pc, #72]	; (8021f20 <HAL_UART_MspInit+0x98>)
 8021ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eda:	f003 0304 	and.w	r3, r3, #4
 8021ede:	60fb      	str	r3, [r7, #12]
 8021ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021ee2:	23c0      	movs	r3, #192	; 0xc0
 8021ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ee6:	2302      	movs	r3, #2
 8021ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021eea:	2300      	movs	r3, #0
 8021eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021eee:	2303      	movs	r3, #3
 8021ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8021ef2:	2308      	movs	r3, #8
 8021ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021ef6:	f107 0314 	add.w	r3, r7, #20
 8021efa:	4619      	mov	r1, r3
 8021efc:	4809      	ldr	r0, [pc, #36]	; (8021f24 <HAL_UART_MspInit+0x9c>)
 8021efe:	f002 fa03 	bl	8024308 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8021f02:	2200      	movs	r2, #0
 8021f04:	2100      	movs	r1, #0
 8021f06:	2047      	movs	r0, #71	; 0x47
 8021f08:	f000 ff69 	bl	8022dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8021f0c:	2047      	movs	r0, #71	; 0x47
 8021f0e:	f000 ff82 	bl	8022e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8021f12:	bf00      	nop
 8021f14:	3728      	adds	r7, #40	; 0x28
 8021f16:	46bd      	mov	sp, r7
 8021f18:	bd80      	pop	{r7, pc}
 8021f1a:	bf00      	nop
 8021f1c:	40011400 	.word	0x40011400
 8021f20:	40023800 	.word	0x40023800
 8021f24:	40020800 	.word	0x40020800

08021f28 <uartTransmit>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8021f28:	b580      	push	{r7, lr}
 8021f2a:	b084      	sub	sp, #16
 8021f2c:	af00      	add	r7, sp, #0
 8021f2e:	6078      	str	r0, [r7, #4]
 8021f30:	460b      	mov	r3, r1
 8021f32:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d101      	bne.n	8021f3e <uartTransmit+0x16>
        return 0;
 8021f3a:	2300      	movs	r3, #0
 8021f3c:	e009      	b.n	8021f52 <uartTransmit+0x2a>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8021f3e:	4b07      	ldr	r3, [pc, #28]	; (8021f5c <uartTransmit+0x34>)
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	887a      	ldrh	r2, [r7, #2]
 8021f44:	6879      	ldr	r1, [r7, #4]
 8021f46:	4618      	mov	r0, r3
 8021f48:	f7ff f816 	bl	8020f78 <bufferPushValues>
 8021f4c:	4603      	mov	r3, r0
 8021f4e:	81fb      	strh	r3, [r7, #14]
    return transmitted;
 8021f50:	89fb      	ldrh	r3, [r7, #14]
}
 8021f52:	4618      	mov	r0, r3
 8021f54:	3710      	adds	r7, #16
 8021f56:	46bd      	mov	sp, r7
 8021f58:	bd80      	pop	{r7, pc}
 8021f5a:	bf00      	nop
 8021f5c:	200002bc 	.word	0x200002bc

08021f60 <uartHasNext>:

uint8_t uartHasNext() {
 8021f60:	b580      	push	{r7, lr}
 8021f62:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8021f64:	4b03      	ldr	r3, [pc, #12]	; (8021f74 <uartHasNext+0x14>)
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	4618      	mov	r0, r3
 8021f6a:	f7ff f87a 	bl	8021062 <bufferHasValues>
 8021f6e:	4603      	mov	r3, r0
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	bd80      	pop	{r7, pc}
 8021f74:	200002c0 	.word	0x200002c0

08021f78 <uartInit>:

void uartInit() {
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8021f7c:	2080      	movs	r0, #128	; 0x80
 8021f7e:	f7fe ffad 	bl	8020edc <bufferCreate>
 8021f82:	4603      	mov	r3, r0
 8021f84:	4a04      	ldr	r2, [pc, #16]	; (8021f98 <uartInit+0x20>)
 8021f86:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8021f88:	2080      	movs	r0, #128	; 0x80
 8021f8a:	f7fe ffa7 	bl	8020edc <bufferCreate>
 8021f8e:	4603      	mov	r3, r0
 8021f90:	4a02      	ldr	r2, [pc, #8]	; (8021f9c <uartInit+0x24>)
 8021f92:	6013      	str	r3, [r2, #0]
}
 8021f94:	bf00      	nop
 8021f96:	bd80      	pop	{r7, pc}
 8021f98:	200002bc 	.word	0x200002bc
 8021f9c:	200002c0 	.word	0x200002c0

08021fa0 <uartPolling>:

void uartPolling() {
 8021fa0:	b580      	push	{r7, lr}
 8021fa2:	af00      	add	r7, sp, #0
    hardwareTransmit();
 8021fa4:	f000 f84a 	bl	802203c <hardwareTransmit>
    hardwareReceive();
 8021fa8:	f000 f818 	bl	8021fdc <hardwareReceive>
}
 8021fac:	bf00      	nop
 8021fae:	bd80      	pop	{r7, pc}

08021fb0 <uartReceive>:

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8021fb0:	b580      	push	{r7, lr}
 8021fb2:	b084      	sub	sp, #16
 8021fb4:	af00      	add	r7, sp, #0
 8021fb6:	6078      	str	r0, [r7, #4]
 8021fb8:	460b      	mov	r3, r1
 8021fba:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8021fbc:	4b06      	ldr	r3, [pc, #24]	; (8021fd8 <uartReceive+0x28>)
 8021fbe:	681b      	ldr	r3, [r3, #0]
 8021fc0:	887a      	ldrh	r2, [r7, #2]
 8021fc2:	6879      	ldr	r1, [r7, #4]
 8021fc4:	4618      	mov	r0, r3
 8021fc6:	f7ff f85d 	bl	8021084 <bufferPopValues>
 8021fca:	4603      	mov	r3, r0
 8021fcc:	81fb      	strh	r3, [r7, #14]
    return received;
 8021fce:	89fb      	ldrh	r3, [r7, #14]
}
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	3710      	adds	r7, #16
 8021fd4:	46bd      	mov	sp, r7
 8021fd6:	bd80      	pop	{r7, pc}
 8021fd8:	200002c0 	.word	0x200002c0

08021fdc <hardwareReceive>:

static void hardwareReceive() {
 8021fdc:	b580      	push	{r7, lr}
 8021fde:	b082      	sub	sp, #8
 8021fe0:	af00      	add	r7, sp, #0
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8021fe2:	4b15      	ldr	r3, [pc, #84]	; (8022038 <hardwareReceive+0x5c>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	f7ff f889 	bl	80210fe <bufferGetFreeSize>
 8021fec:	4603      	mov	r3, r0
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d010      	beq.n	8022014 <hardwareReceive+0x38>
        uint8_t data = 0;
 8021ff2:	2300      	movs	r3, #0
 8021ff4:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareReceivePolling(&data, 1)) {
 8021ff6:	1dfb      	adds	r3, r7, #7
 8021ff8:	2101      	movs	r1, #1
 8021ffa:	4618      	mov	r0, r3
 8021ffc:	f000 fd3c 	bl	8022a78 <uartHardwareReceivePolling>
 8022000:	4603      	mov	r3, r0
 8022002:	2b00      	cmp	r3, #0
 8022004:	d006      	beq.n	8022014 <hardwareReceive+0x38>
            bufferPush(rxBuffer, data);
 8022006:	4b0c      	ldr	r3, [pc, #48]	; (8022038 <hardwareReceive+0x5c>)
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	79fa      	ldrb	r2, [r7, #7]
 802200c:	4611      	mov	r1, r2
 802200e:	4618      	mov	r0, r3
 8022010:	f7fe ff81 	bl	8020f16 <bufferPush>
        }
    }
    if (!bufferHasValues(rxBuffer))
 8022014:	4b08      	ldr	r3, [pc, #32]	; (8022038 <hardwareReceive+0x5c>)
 8022016:	681b      	ldr	r3, [r3, #0]
 8022018:	4618      	mov	r0, r3
 802201a:	f7ff f822 	bl	8021062 <bufferHasValues>
 802201e:	4603      	mov	r3, r0
 8022020:	2b00      	cmp	r3, #0
 8022022:	d104      	bne.n	802202e <hardwareReceive+0x52>
        bufferClear(rxBuffer);
 8022024:	4b04      	ldr	r3, [pc, #16]	; (8022038 <hardwareReceive+0x5c>)
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	4618      	mov	r0, r3
 802202a:	f7ff f805 	bl	8021038 <bufferClear>
}
 802202e:	bf00      	nop
 8022030:	3708      	adds	r7, #8
 8022032:	46bd      	mov	sp, r7
 8022034:	bd80      	pop	{r7, pc}
 8022036:	bf00      	nop
 8022038:	200002c0 	.word	0x200002c0

0802203c <hardwareTransmit>:

static void hardwareTransmit() {
 802203c:	b580      	push	{r7, lr}
 802203e:	b082      	sub	sp, #8
 8022040:	af00      	add	r7, sp, #0
    if (bufferHasValues(txBuffer)) {
 8022042:	4b10      	ldr	r3, [pc, #64]	; (8022084 <hardwareTransmit+0x48>)
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	4618      	mov	r0, r3
 8022048:	f7ff f80b 	bl	8021062 <bufferHasValues>
 802204c:	4603      	mov	r3, r0
 802204e:	2b00      	cmp	r3, #0
 8022050:	d013      	beq.n	802207a <hardwareTransmit+0x3e>
        const uint8_t byte = bufferPeek(txBuffer);
 8022052:	4b0c      	ldr	r3, [pc, #48]	; (8022084 <hardwareTransmit+0x48>)
 8022054:	681b      	ldr	r3, [r3, #0]
 8022056:	4618      	mov	r0, r3
 8022058:	f7fe ffde 	bl	8021018 <bufferPeek>
 802205c:	4603      	mov	r3, r0
 802205e:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareTransmitPolling(byte, 1))
 8022060:	79fb      	ldrb	r3, [r7, #7]
 8022062:	2101      	movs	r1, #1
 8022064:	4618      	mov	r0, r3
 8022066:	f000 fced 	bl	8022a44 <uartHardwareTransmitPolling>
 802206a:	4603      	mov	r3, r0
 802206c:	2b00      	cmp	r3, #0
 802206e:	d004      	beq.n	802207a <hardwareTransmit+0x3e>
            bufferPop(txBuffer);
 8022070:	4b04      	ldr	r3, [pc, #16]	; (8022084 <hardwareTransmit+0x48>)
 8022072:	681b      	ldr	r3, [r3, #0]
 8022074:	4618      	mov	r0, r3
 8022076:	f7fe ffa2 	bl	8020fbe <bufferPop>
    }
}
 802207a:	bf00      	nop
 802207c:	3708      	adds	r7, #8
 802207e:	46bd      	mov	sp, r7
 8022080:	bd80      	pop	{r7, pc}
 8022082:	bf00      	nop
 8022084:	200002bc 	.word	0x200002bc

08022088 <lwip_tcp_init>:
err_t poll_callback(void *arg, struct tcp_pcb *tpcb);
err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len);
void send(struct tcp_pcb *tpcb, struct conn_state *es);
void conn_close(struct tcp_pcb *tpcb, struct conn_state *es);

void lwip_tcp_init(void) {
 8022088:	b580      	push	{r7, lr}
 802208a:	b082      	sub	sp, #8
 802208c:	af00      	add	r7, sp, #0
  tpcb = tcp_new();
 802208e:	f008 fbe3 	bl	802a858 <tcp_new>
 8022092:	4603      	mov	r3, r0
 8022094:	4a13      	ldr	r2, [pc, #76]	; (80220e4 <lwip_tcp_init+0x5c>)
 8022096:	6013      	str	r3, [r2, #0]
  if (tpcb != NULL) {
 8022098:	4b12      	ldr	r3, [pc, #72]	; (80220e4 <lwip_tcp_init+0x5c>)
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d01d      	beq.n	80220dc <lwip_tcp_init+0x54>
    err_t err;
	ip4_addr_t ip_addr;
	IP4_ADDR(&ip_addr, 169, 254, 8, 45);
 80220a0:	4b11      	ldr	r3, [pc, #68]	; (80220e8 <lwip_tcp_init+0x60>)
 80220a2:	603b      	str	r3, [r7, #0]
    err = tcp_bind(tpcb, &ip_addr, 80);
 80220a4:	4b0f      	ldr	r3, [pc, #60]	; (80220e4 <lwip_tcp_init+0x5c>)
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	4639      	mov	r1, r7
 80220aa:	2250      	movs	r2, #80	; 0x50
 80220ac:	4618      	mov	r0, r3
 80220ae:	f007 fc53 	bl	8029958 <tcp_bind>
 80220b2:	4603      	mov	r3, r0
 80220b4:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 80220b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	d10e      	bne.n	80220dc <lwip_tcp_init+0x54>
      tpcb = tcp_listen(tpcb);
 80220be:	4b09      	ldr	r3, [pc, #36]	; (80220e4 <lwip_tcp_init+0x5c>)
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	21ff      	movs	r1, #255	; 0xff
 80220c4:	4618      	mov	r0, r3
 80220c6:	f007 fce9 	bl	8029a9c <tcp_listen_with_backlog>
 80220ca:	4603      	mov	r3, r0
 80220cc:	4a05      	ldr	r2, [pc, #20]	; (80220e4 <lwip_tcp_init+0x5c>)
 80220ce:	6013      	str	r3, [r2, #0]
      tcp_accept(tpcb, accept_callback);
 80220d0:	4b04      	ldr	r3, [pc, #16]	; (80220e4 <lwip_tcp_init+0x5c>)
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	4905      	ldr	r1, [pc, #20]	; (80220ec <lwip_tcp_init+0x64>)
 80220d6:	4618      	mov	r0, r3
 80220d8:	f008 fc3c 	bl	802a954 <tcp_accept>
      /* abort? output diagnostic? */
    }
  } else {
    /* abort? output diagnostic? */
  }
}
 80220dc:	bf00      	nop
 80220de:	3708      	adds	r7, #8
 80220e0:	46bd      	mov	sp, r7
 80220e2:	bd80      	pop	{r7, pc}
 80220e4:	20000308 	.word	0x20000308
 80220e8:	2d08fea9 	.word	0x2d08fea9
 80220ec:	080220f1 	.word	0x080220f1

080220f0 <accept_callback>:


err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err) {
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b086      	sub	sp, #24
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	60f8      	str	r0, [r7, #12]
 80220f8:	60b9      	str	r1, [r7, #8]
 80220fa:	4613      	mov	r3, r2
 80220fc:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80220fe:	2101      	movs	r1, #1
 8022100:	68b8      	ldr	r0, [r7, #8]
 8022102:	f008 fa1d 	bl	802a540 <tcp_setprio>

  es = (struct conn_state *)mem_malloc(sizeof(struct conn_state));
 8022106:	200c      	movs	r0, #12
 8022108:	f006 f836 	bl	8028178 <mem_malloc>
 802210c:	6138      	str	r0, [r7, #16]
  if (es != NULL) {
 802210e:	693b      	ldr	r3, [r7, #16]
 8022110:	2b00      	cmp	r3, #0
 8022112:	d01f      	beq.n	8022154 <accept_callback+0x64>
    es->state = CONN_ACCEPTED;
 8022114:	693b      	ldr	r3, [r7, #16]
 8022116:	2201      	movs	r2, #1
 8022118:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 802211a:	693b      	ldr	r3, [r7, #16]
 802211c:	68ba      	ldr	r2, [r7, #8]
 802211e:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8022120:	693b      	ldr	r3, [r7, #16]
 8022122:	2200      	movs	r2, #0
 8022124:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8022126:	693b      	ldr	r3, [r7, #16]
 8022128:	2200      	movs	r2, #0
 802212a:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 802212c:	6939      	ldr	r1, [r7, #16]
 802212e:	68b8      	ldr	r0, [r7, #8]
 8022130:	f008 fb9a 	bl	802a868 <tcp_arg>
    tcp_recv(newpcb, recv_callback);
 8022134:	490b      	ldr	r1, [pc, #44]	; (8022164 <accept_callback+0x74>)
 8022136:	68b8      	ldr	r0, [r7, #8]
 8022138:	f008 fba8 	bl	802a88c <tcp_recv>
    tcp_err(newpcb, error_callback);
 802213c:	490a      	ldr	r1, [pc, #40]	; (8022168 <accept_callback+0x78>)
 802213e:	68b8      	ldr	r0, [r7, #8]
 8022140:	f008 fbe6 	bl	802a910 <tcp_err>
    tcp_poll(newpcb, poll_callback, 0);
 8022144:	2200      	movs	r2, #0
 8022146:	4909      	ldr	r1, [pc, #36]	; (802216c <accept_callback+0x7c>)
 8022148:	68b8      	ldr	r0, [r7, #8]
 802214a:	f008 fc1b 	bl	802a984 <tcp_poll>
    ret_err = ERR_OK;
 802214e:	2300      	movs	r3, #0
 8022150:	75fb      	strb	r3, [r7, #23]
 8022152:	e001      	b.n	8022158 <accept_callback+0x68>
  } else {
    ret_err = ERR_MEM;
 8022154:	23ff      	movs	r3, #255	; 0xff
 8022156:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8022158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802215c:	4618      	mov	r0, r3
 802215e:	3718      	adds	r7, #24
 8022160:	46bd      	mov	sp, r7
 8022162:	bd80      	pop	{r7, pc}
 8022164:	08022171 	.word	0x08022171
 8022168:	080222ad 	.word	0x080222ad
 802216c:	080222d1 	.word	0x080222d1

08022170 <recv_callback>:

err_t recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8022170:	b580      	push	{r7, lr}
 8022172:	b088      	sub	sp, #32
 8022174:	af00      	add	r7, sp, #0
 8022176:	60f8      	str	r0, [r7, #12]
 8022178:	60b9      	str	r1, [r7, #8]
 802217a:	607a      	str	r2, [r7, #4]
 802217c:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	2b00      	cmp	r3, #0
 8022182:	d105      	bne.n	8022190 <recv_callback+0x20>
 8022184:	4b45      	ldr	r3, [pc, #276]	; (802229c <recv_callback+0x12c>)
 8022186:	2253      	movs	r2, #83	; 0x53
 8022188:	4945      	ldr	r1, [pc, #276]	; (80222a0 <recv_callback+0x130>)
 802218a:	4846      	ldr	r0, [pc, #280]	; (80222a4 <recv_callback+0x134>)
 802218c:	f00f f91a 	bl	80313c4 <iprintf>
  es = (struct conn_state *)arg;
 8022190:	68fb      	ldr	r3, [r7, #12]
 8022192:	61bb      	str	r3, [r7, #24]
  if (p == NULL) {
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	2b00      	cmp	r3, #0
 8022198:	d116      	bne.n	80221c8 <recv_callback+0x58>
    /* remote host closed connection */
    es->state = CONN_CLOSING;
 802219a:	69bb      	ldr	r3, [r7, #24]
 802219c:	2203      	movs	r2, #3
 802219e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL) {
 80221a0:	69bb      	ldr	r3, [r7, #24]
 80221a2:	689b      	ldr	r3, [r3, #8]
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d104      	bne.n	80221b2 <recv_callback+0x42>
       /* we're done sending, close it */
       conn_close(tpcb, es);
 80221a8:	69b9      	ldr	r1, [r7, #24]
 80221aa:	68b8      	ldr	r0, [r7, #8]
 80221ac:	f000 f936 	bl	802241c <conn_close>
 80221b0:	e007      	b.n	80221c2 <recv_callback+0x52>
    } else {
      /* we're not done yet */
      tcp_sent(tpcb, sent_callback);
 80221b2:	493d      	ldr	r1, [pc, #244]	; (80222a8 <recv_callback+0x138>)
 80221b4:	68b8      	ldr	r0, [r7, #8]
 80221b6:	f008 fb8b 	bl	802a8d0 <tcp_sent>
      send(tpcb, es);
 80221ba:	69b9      	ldr	r1, [r7, #24]
 80221bc:	68b8      	ldr	r0, [r7, #8]
 80221be:	f000 f8df 	bl	8022380 <send>
    }
    ret_err = ERR_OK;
 80221c2:	2300      	movs	r3, #0
 80221c4:	77fb      	strb	r3, [r7, #31]
 80221c6:	e063      	b.n	8022290 <recv_callback+0x120>
  } else if(err != ERR_OK) {
 80221c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d00b      	beq.n	80221e8 <recv_callback+0x78>
    /* cleanup, for unknown reason */
    if (p != NULL) {
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d005      	beq.n	80221e2 <recv_callback+0x72>
      es->p = NULL;
 80221d6:	69bb      	ldr	r3, [r7, #24]
 80221d8:	2200      	movs	r2, #0
 80221da:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80221dc:	6878      	ldr	r0, [r7, #4]
 80221de:	f006 fea3 	bl	8028f28 <pbuf_free>
    }
    ret_err = err;
 80221e2:	78fb      	ldrb	r3, [r7, #3]
 80221e4:	77fb      	strb	r3, [r7, #31]
 80221e6:	e053      	b.n	8022290 <recv_callback+0x120>
  } else if(es->state == CONN_ACCEPTED) {
 80221e8:	69bb      	ldr	r3, [r7, #24]
 80221ea:	781b      	ldrb	r3, [r3, #0]
 80221ec:	2b01      	cmp	r3, #1
 80221ee:	d110      	bne.n	8022212 <recv_callback+0xa2>
    /* first data chunk in p->payload */
    es->state = CONN_RECEIVED;
 80221f0:	69bb      	ldr	r3, [r7, #24]
 80221f2:	2202      	movs	r2, #2
 80221f4:	701a      	strb	r2, [r3, #0]
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80221f6:	69bb      	ldr	r3, [r7, #24]
 80221f8:	687a      	ldr	r2, [r7, #4]
 80221fa:	609a      	str	r2, [r3, #8]
    /* install send completion notifier */
    tcp_sent(tpcb, sent_callback);
 80221fc:	492a      	ldr	r1, [pc, #168]	; (80222a8 <recv_callback+0x138>)
 80221fe:	68b8      	ldr	r0, [r7, #8]
 8022200:	f008 fb66 	bl	802a8d0 <tcp_sent>
    send(tpcb, es);
 8022204:	69b9      	ldr	r1, [r7, #24]
 8022206:	68b8      	ldr	r0, [r7, #8]
 8022208:	f000 f8ba 	bl	8022380 <send>
    ret_err = ERR_OK;
 802220c:	2300      	movs	r3, #0
 802220e:	77fb      	strb	r3, [r7, #31]
 8022210:	e03e      	b.n	8022290 <recv_callback+0x120>
  } else if (es->state == CONN_RECEIVED) {
 8022212:	69bb      	ldr	r3, [r7, #24]
 8022214:	781b      	ldrb	r3, [r3, #0]
 8022216:	2b02      	cmp	r3, #2
 8022218:	d119      	bne.n	802224e <recv_callback+0xde>
    /* read some more data */
    if(es->p == NULL) {
 802221a:	69bb      	ldr	r3, [r7, #24]
 802221c:	689b      	ldr	r3, [r3, #8]
 802221e:	2b00      	cmp	r3, #0
 8022220:	d10b      	bne.n	802223a <recv_callback+0xca>
      es->p = p;
 8022222:	69bb      	ldr	r3, [r7, #24]
 8022224:	687a      	ldr	r2, [r7, #4]
 8022226:	609a      	str	r2, [r3, #8]
      tcp_sent(tpcb, sent_callback);
 8022228:	491f      	ldr	r1, [pc, #124]	; (80222a8 <recv_callback+0x138>)
 802222a:	68b8      	ldr	r0, [r7, #8]
 802222c:	f008 fb50 	bl	802a8d0 <tcp_sent>
      send(tpcb, es);
 8022230:	69b9      	ldr	r1, [r7, #24]
 8022232:	68b8      	ldr	r0, [r7, #8]
 8022234:	f000 f8a4 	bl	8022380 <send>
 8022238:	e006      	b.n	8022248 <recv_callback+0xd8>
    } else {
      struct pbuf *ptr;
      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 802223a:	69bb      	ldr	r3, [r7, #24]
 802223c:	689b      	ldr	r3, [r3, #8]
 802223e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8022240:	6879      	ldr	r1, [r7, #4]
 8022242:	6978      	ldr	r0, [r7, #20]
 8022244:	f006 ff94 	bl	8029170 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8022248:	2300      	movs	r3, #0
 802224a:	77fb      	strb	r3, [r7, #31]
 802224c:	e020      	b.n	8022290 <recv_callback+0x120>
  } else if(es->state == CONN_CLOSING) {
 802224e:	69bb      	ldr	r3, [r7, #24]
 8022250:	781b      	ldrb	r3, [r3, #0]
 8022252:	2b03      	cmp	r3, #3
 8022254:	d10e      	bne.n	8022274 <recv_callback+0x104>
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	891b      	ldrh	r3, [r3, #8]
 802225a:	4619      	mov	r1, r3
 802225c:	68b8      	ldr	r0, [r7, #8]
 802225e:	f007 fd15 	bl	8029c8c <tcp_recved>
    es->p = NULL;
 8022262:	69bb      	ldr	r3, [r7, #24]
 8022264:	2200      	movs	r2, #0
 8022266:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8022268:	6878      	ldr	r0, [r7, #4]
 802226a:	f006 fe5d 	bl	8028f28 <pbuf_free>
    ret_err = ERR_OK;
 802226e:	2300      	movs	r3, #0
 8022270:	77fb      	strb	r3, [r7, #31]
 8022272:	e00d      	b.n	8022290 <recv_callback+0x120>
  } else {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	891b      	ldrh	r3, [r3, #8]
 8022278:	4619      	mov	r1, r3
 802227a:	68b8      	ldr	r0, [r7, #8]
 802227c:	f007 fd06 	bl	8029c8c <tcp_recved>
    es->p = NULL;
 8022280:	69bb      	ldr	r3, [r7, #24]
 8022282:	2200      	movs	r2, #0
 8022284:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8022286:	6878      	ldr	r0, [r7, #4]
 8022288:	f006 fe4e 	bl	8028f28 <pbuf_free>
    ret_err = ERR_OK;
 802228c:	2300      	movs	r3, #0
 802228e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8022290:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022294:	4618      	mov	r0, r3
 8022296:	3720      	adds	r7, #32
 8022298:	46bd      	mov	sp, r7
 802229a:	bd80      	pop	{r7, pc}
 802229c:	08033498 	.word	0x08033498
 80222a0:	080334b4 	.word	0x080334b4
 80222a4:	080334c0 	.word	0x080334c0
 80222a8:	08022331 	.word	0x08022331

080222ac <error_callback>:

void error_callback(void *arg, err_t err) {
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b084      	sub	sp, #16
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	6078      	str	r0, [r7, #4]
 80222b4:	460b      	mov	r3, r1
 80222b6:	70fb      	strb	r3, [r7, #3]
  struct conn_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct conn_state *)arg;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	60fb      	str	r3, [r7, #12]
  if (es != NULL) {
 80222bc:	68fb      	ldr	r3, [r7, #12]
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d002      	beq.n	80222c8 <error_callback+0x1c>
    mem_free(es);
 80222c2:	68f8      	ldr	r0, [r7, #12]
 80222c4:	f005 fe1a 	bl	8027efc <mem_free>
  }
}
 80222c8:	bf00      	nop
 80222ca:	3710      	adds	r7, #16
 80222cc:	46bd      	mov	sp, r7
 80222ce:	bd80      	pop	{r7, pc}

080222d0 <poll_callback>:

err_t poll_callback(void *arg, struct tcp_pcb *tpcb) {
 80222d0:	b580      	push	{r7, lr}
 80222d2:	b084      	sub	sp, #16
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	6078      	str	r0, [r7, #4]
 80222d8:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct conn_state *es;

  es = (struct conn_state *)arg;
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	60bb      	str	r3, [r7, #8]
  if (es != NULL) {
 80222de:	68bb      	ldr	r3, [r7, #8]
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d017      	beq.n	8022314 <poll_callback+0x44>
    if (es->p != NULL) {
 80222e4:	68bb      	ldr	r3, [r7, #8]
 80222e6:	689b      	ldr	r3, [r3, #8]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d008      	beq.n	80222fe <poll_callback+0x2e>
      /* there is a remaining pbuf (chain)  */
      tcp_sent(tpcb, sent_callback);
 80222ec:	490f      	ldr	r1, [pc, #60]	; (802232c <poll_callback+0x5c>)
 80222ee:	6838      	ldr	r0, [r7, #0]
 80222f0:	f008 faee 	bl	802a8d0 <tcp_sent>
      send(tpcb, es);
 80222f4:	68b9      	ldr	r1, [r7, #8]
 80222f6:	6838      	ldr	r0, [r7, #0]
 80222f8:	f000 f842 	bl	8022380 <send>
 80222fc:	e007      	b.n	802230e <poll_callback+0x3e>
    } else {
      /* no remaining pbuf (chain)  */
      if(es->state == CONN_CLOSING) {
 80222fe:	68bb      	ldr	r3, [r7, #8]
 8022300:	781b      	ldrb	r3, [r3, #0]
 8022302:	2b03      	cmp	r3, #3
 8022304:	d103      	bne.n	802230e <poll_callback+0x3e>
        conn_close(tpcb, es);
 8022306:	68b9      	ldr	r1, [r7, #8]
 8022308:	6838      	ldr	r0, [r7, #0]
 802230a:	f000 f887 	bl	802241c <conn_close>
      }
    }
    ret_err = ERR_OK;
 802230e:	2300      	movs	r3, #0
 8022310:	73fb      	strb	r3, [r7, #15]
 8022312:	e004      	b.n	802231e <poll_callback+0x4e>
  } else {
    /* nothing to be done */
    tcp_abort(tpcb);
 8022314:	6838      	ldr	r0, [r7, #0]
 8022316:	f007 fb13 	bl	8029940 <tcp_abort>
    ret_err = ERR_ABRT;
 802231a:	23f3      	movs	r3, #243	; 0xf3
 802231c:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 802231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022322:	4618      	mov	r0, r3
 8022324:	3710      	adds	r7, #16
 8022326:	46bd      	mov	sp, r7
 8022328:	bd80      	pop	{r7, pc}
 802232a:	bf00      	nop
 802232c:	08022331 	.word	0x08022331

08022330 <sent_callback>:

err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8022330:	b580      	push	{r7, lr}
 8022332:	b086      	sub	sp, #24
 8022334:	af00      	add	r7, sp, #0
 8022336:	60f8      	str	r0, [r7, #12]
 8022338:	60b9      	str	r1, [r7, #8]
 802233a:	4613      	mov	r3, r2
 802233c:	80fb      	strh	r3, [r7, #6]
  struct conn_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct conn_state *)arg;
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8022342:	697b      	ldr	r3, [r7, #20]
 8022344:	2200      	movs	r2, #0
 8022346:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL) {
 8022348:	697b      	ldr	r3, [r7, #20]
 802234a:	689b      	ldr	r3, [r3, #8]
 802234c:	2b00      	cmp	r3, #0
 802234e:	d008      	beq.n	8022362 <sent_callback+0x32>
    /* still got pbufs to send */
    tcp_sent(tpcb, sent_callback);
 8022350:	490a      	ldr	r1, [pc, #40]	; (802237c <sent_callback+0x4c>)
 8022352:	68b8      	ldr	r0, [r7, #8]
 8022354:	f008 fabc 	bl	802a8d0 <tcp_sent>
    send(tpcb, es);
 8022358:	6979      	ldr	r1, [r7, #20]
 802235a:	68b8      	ldr	r0, [r7, #8]
 802235c:	f000 f810 	bl	8022380 <send>
 8022360:	e007      	b.n	8022372 <sent_callback+0x42>
  } else {
    /* no more pbufs to send */
    if(es->state == CONN_CLOSING) {
 8022362:	697b      	ldr	r3, [r7, #20]
 8022364:	781b      	ldrb	r3, [r3, #0]
 8022366:	2b03      	cmp	r3, #3
 8022368:	d103      	bne.n	8022372 <sent_callback+0x42>
      conn_close(tpcb, es);
 802236a:	6979      	ldr	r1, [r7, #20]
 802236c:	68b8      	ldr	r0, [r7, #8]
 802236e:	f000 f855 	bl	802241c <conn_close>
    }
  }
  return ERR_OK;
 8022372:	2300      	movs	r3, #0
}
 8022374:	4618      	mov	r0, r3
 8022376:	3718      	adds	r7, #24
 8022378:	46bd      	mov	sp, r7
 802237a:	bd80      	pop	{r7, pc}
 802237c:	08022331 	.word	0x08022331

08022380 <send>:

void send(struct tcp_pcb *tpcb, struct conn_state *es) {
 8022380:	b580      	push	{r7, lr}
 8022382:	b086      	sub	sp, #24
 8022384:	af00      	add	r7, sp, #0
 8022386:	6078      	str	r0, [r7, #4]
 8022388:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 802238a:	2300      	movs	r3, #0
 802238c:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 802238e:	e031      	b.n	80223f4 <send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb))) {
  ptr = es->p;
 8022390:	683b      	ldr	r3, [r7, #0]
 8022392:	689b      	ldr	r3, [r3, #8]
 8022394:	613b      	str	r3, [r7, #16]

  /* enqueue data for transmission */
  char* answer = handle_packet(tpcb, ptr);
 8022396:	6939      	ldr	r1, [r7, #16]
 8022398:	6878      	ldr	r0, [r7, #4]
 802239a:	f000 f87d 	bl	8022498 <handle_packet>
 802239e:	60f8      	str	r0, [r7, #12]
  if (answer != NULL) {
 80223a0:	68fb      	ldr	r3, [r7, #12]
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d009      	beq.n	80223ba <send+0x3a>
	  tcp_write(tpcb, answer, strlen(answer), TCP_WRITE_FLAG_COPY);
 80223a6:	68f8      	ldr	r0, [r7, #12]
 80223a8:	f7fd ff2c 	bl	8020204 <strlen>
 80223ac:	4603      	mov	r3, r0
 80223ae:	b29a      	uxth	r2, r3
 80223b0:	2301      	movs	r3, #1
 80223b2:	68f9      	ldr	r1, [r7, #12]
 80223b4:	6878      	ldr	r0, [r7, #4]
 80223b6:	f00b f897 	bl	802d4e8 <tcp_write>
  }

  u16_t plen;
  u8_t freed;

  plen = ptr->len;
 80223ba:	693b      	ldr	r3, [r7, #16]
 80223bc:	895b      	ldrh	r3, [r3, #10]
 80223be:	817b      	strh	r3, [r7, #10]
  /* continue with next pbuf in chain (if any) */
  es->p = ptr->next;
 80223c0:	693b      	ldr	r3, [r7, #16]
 80223c2:	681a      	ldr	r2, [r3, #0]
 80223c4:	683b      	ldr	r3, [r7, #0]
 80223c6:	609a      	str	r2, [r3, #8]
  if(es->p != NULL) {
 80223c8:	683b      	ldr	r3, [r7, #0]
 80223ca:	689b      	ldr	r3, [r3, #8]
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	d004      	beq.n	80223da <send+0x5a>
     /* new reference! */
     pbuf_ref(es->p);
 80223d0:	683b      	ldr	r3, [r7, #0]
 80223d2:	689b      	ldr	r3, [r3, #8]
 80223d4:	4618      	mov	r0, r3
 80223d6:	f006 fe53 	bl	8029080 <pbuf_ref>
  } do { // chop first pbuf from chain
     /* try hard to free pbuf */
     freed = pbuf_free(ptr);
 80223da:	6938      	ldr	r0, [r7, #16]
 80223dc:	f006 fda4 	bl	8028f28 <pbuf_free>
 80223e0:	4603      	mov	r3, r0
 80223e2:	727b      	strb	r3, [r7, #9]
  } while(freed == 0);
 80223e4:	7a7b      	ldrb	r3, [r7, #9]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d0f7      	beq.n	80223da <send+0x5a>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80223ea:	897b      	ldrh	r3, [r7, #10]
 80223ec:	4619      	mov	r1, r3
 80223ee:	6878      	ldr	r0, [r7, #4]
 80223f0:	f007 fc4c 	bl	8029c8c <tcp_recved>
  while ((wr_err == ERR_OK) &&
 80223f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d10b      	bne.n	8022414 <send+0x94>
         (es->p != NULL) &&
 80223fc:	683b      	ldr	r3, [r7, #0]
 80223fe:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8022400:	2b00      	cmp	r3, #0
 8022402:	d007      	beq.n	8022414 <send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb))) {
 8022404:	683b      	ldr	r3, [r7, #0]
 8022406:	689b      	ldr	r3, [r3, #8]
 8022408:	895a      	ldrh	r2, [r3, #10]
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8022410:	429a      	cmp	r2, r3
 8022412:	d9bd      	bls.n	8022390 <send+0x10>
  }
}
 8022414:	bf00      	nop
 8022416:	3718      	adds	r7, #24
 8022418:	46bd      	mov	sp, r7
 802241a:	bd80      	pop	{r7, pc}

0802241c <conn_close>:

void conn_close(struct tcp_pcb *tpcb, struct conn_state *es) {
 802241c:	b580      	push	{r7, lr}
 802241e:	b082      	sub	sp, #8
 8022420:	af00      	add	r7, sp, #0
 8022422:	6078      	str	r0, [r7, #4]
 8022424:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 8022426:	2100      	movs	r1, #0
 8022428:	6878      	ldr	r0, [r7, #4]
 802242a:	f008 fa1d 	bl	802a868 <tcp_arg>
  tcp_sent(tpcb, NULL);
 802242e:	2100      	movs	r1, #0
 8022430:	6878      	ldr	r0, [r7, #4]
 8022432:	f008 fa4d 	bl	802a8d0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8022436:	2100      	movs	r1, #0
 8022438:	6878      	ldr	r0, [r7, #4]
 802243a:	f008 fa27 	bl	802a88c <tcp_recv>
  tcp_err(tpcb, NULL);
 802243e:	2100      	movs	r1, #0
 8022440:	6878      	ldr	r0, [r7, #4]
 8022442:	f008 fa65 	bl	802a910 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8022446:	2200      	movs	r2, #0
 8022448:	2100      	movs	r1, #0
 802244a:	6878      	ldr	r0, [r7, #4]
 802244c:	f008 fa9a 	bl	802a984 <tcp_poll>

  if (es != NULL) {
 8022450:	683b      	ldr	r3, [r7, #0]
 8022452:	2b00      	cmp	r3, #0
 8022454:	d002      	beq.n	802245c <conn_close+0x40>
    mem_free(es);
 8022456:	6838      	ldr	r0, [r7, #0]
 8022458:	f005 fd50 	bl	8027efc <mem_free>
  }
  tcp_close(tpcb);
 802245c:	6878      	ldr	r0, [r7, #4]
 802245e:	f007 f9a5 	bl	80297ac <tcp_close>
}
 8022462:	bf00      	nop
 8022464:	3708      	adds	r7, #8
 8022466:	46bd      	mov	sp, r7
 8022468:	bd80      	pop	{r7, pc}
	...

0802246c <__NVIC_SystemReset>:
{
 802246c:	b480      	push	{r7}
 802246e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8022470:	f3bf 8f4f 	dsb	sy
}
 8022474:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8022476:	4b06      	ldr	r3, [pc, #24]	; (8022490 <__NVIC_SystemReset+0x24>)
 8022478:	68db      	ldr	r3, [r3, #12]
 802247a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802247e:	4904      	ldr	r1, [pc, #16]	; (8022490 <__NVIC_SystemReset+0x24>)
 8022480:	4b04      	ldr	r3, [pc, #16]	; (8022494 <__NVIC_SystemReset+0x28>)
 8022482:	4313      	orrs	r3, r2
 8022484:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8022486:	f3bf 8f4f 	dsb	sy
}
 802248a:	bf00      	nop
    __NOP();
 802248c:	bf00      	nop
 802248e:	e7fd      	b.n	802248c <__NVIC_SystemReset+0x20>
 8022490:	e000ed00 	.word	0xe000ed00
 8022494:	05fa0004 	.word	0x05fa0004

08022498 <handle_packet>:
#include "hardware/buzzer.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_flash.h"
#include "stm32f4xx_hal_flash_ex.h"

char* handle_packet(struct tcp_pcb* tpcb, struct pbuf* p) {
 8022498:	b580      	push	{r7, lr}
 802249a:	b084      	sub	sp, #16
 802249c:	af00      	add	r7, sp, #0
 802249e:	6078      	str	r0, [r7, #4]
 80224a0:	6039      	str	r1, [r7, #0]
	WRITE_REG(IWDG->KR, 0x0000AAAAU);
 80224a2:	4b69      	ldr	r3, [pc, #420]	; (8022648 <handle_packet+0x1b0>)
 80224a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80224a8:	601a      	str	r2, [r3, #0]
	if (p == NULL || p->len <= 0 || p->payload == NULL) return "handle error";
 80224aa:	683b      	ldr	r3, [r7, #0]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d007      	beq.n	80224c0 <handle_packet+0x28>
 80224b0:	683b      	ldr	r3, [r7, #0]
 80224b2:	895b      	ldrh	r3, [r3, #10]
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d003      	beq.n	80224c0 <handle_packet+0x28>
 80224b8:	683b      	ldr	r3, [r7, #0]
 80224ba:	685b      	ldr	r3, [r3, #4]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d101      	bne.n	80224c4 <handle_packet+0x2c>
 80224c0:	4b62      	ldr	r3, [pc, #392]	; (802264c <handle_packet+0x1b4>)
 80224c2:	e0bd      	b.n	8022640 <handle_packet+0x1a8>
	uint8_t header;
	memcpy(&header, p->payload, 1);
 80224c4:	683b      	ldr	r3, [r7, #0]
 80224c6:	685b      	ldr	r3, [r3, #4]
 80224c8:	781b      	ldrb	r3, [r3, #0]
 80224ca:	73fb      	strb	r3, [r7, #15]
	switch (header) {
 80224cc:	7bfb      	ldrb	r3, [r7, #15]
 80224ce:	2b35      	cmp	r3, #53	; 0x35
 80224d0:	dc74      	bgt.n	80225bc <handle_packet+0x124>
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	f340 80b3 	ble.w	802263e <handle_packet+0x1a6>
 80224d8:	3b01      	subs	r3, #1
 80224da:	2b34      	cmp	r3, #52	; 0x34
 80224dc:	f200 80af 	bhi.w	802263e <handle_packet+0x1a6>
 80224e0:	a201      	add	r2, pc, #4	; (adr r2, 80224e8 <handle_packet+0x50>)
 80224e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80224e6:	bf00      	nop
 80224e8:	080225c3 	.word	0x080225c3
 80224ec:	080225cb 	.word	0x080225cb
 80224f0:	080225d3 	.word	0x080225d3
 80224f4:	080225db 	.word	0x080225db
 80224f8:	080225e3 	.word	0x080225e3
 80224fc:	080225eb 	.word	0x080225eb
 8022500:	080225f3 	.word	0x080225f3
 8022504:	0802263f 	.word	0x0802263f
 8022508:	0802263f 	.word	0x0802263f
 802250c:	0802263f 	.word	0x0802263f
 8022510:	0802263f 	.word	0x0802263f
 8022514:	0802263f 	.word	0x0802263f
 8022518:	0802263f 	.word	0x0802263f
 802251c:	0802263f 	.word	0x0802263f
 8022520:	0802263f 	.word	0x0802263f
 8022524:	080225fb 	.word	0x080225fb
 8022528:	08022603 	.word	0x08022603
 802252c:	0802263f 	.word	0x0802263f
 8022530:	0802263f 	.word	0x0802263f
 8022534:	0802263f 	.word	0x0802263f
 8022538:	0802263f 	.word	0x0802263f
 802253c:	0802263f 	.word	0x0802263f
 8022540:	0802263f 	.word	0x0802263f
 8022544:	0802263f 	.word	0x0802263f
 8022548:	0802263f 	.word	0x0802263f
 802254c:	0802263f 	.word	0x0802263f
 8022550:	0802263f 	.word	0x0802263f
 8022554:	0802263f 	.word	0x0802263f
 8022558:	0802263f 	.word	0x0802263f
 802255c:	0802263f 	.word	0x0802263f
 8022560:	0802263f 	.word	0x0802263f
 8022564:	0802260b 	.word	0x0802260b
 8022568:	08022613 	.word	0x08022613
 802256c:	0802263f 	.word	0x0802263f
 8022570:	0802263f 	.word	0x0802263f
 8022574:	0802263f 	.word	0x0802263f
 8022578:	0802263f 	.word	0x0802263f
 802257c:	0802263f 	.word	0x0802263f
 8022580:	0802263f 	.word	0x0802263f
 8022584:	0802263f 	.word	0x0802263f
 8022588:	0802263f 	.word	0x0802263f
 802258c:	0802263f 	.word	0x0802263f
 8022590:	0802263f 	.word	0x0802263f
 8022594:	0802263f 	.word	0x0802263f
 8022598:	0802263f 	.word	0x0802263f
 802259c:	0802263f 	.word	0x0802263f
 80225a0:	0802263f 	.word	0x0802263f
 80225a4:	0802263f 	.word	0x0802263f
 80225a8:	0802263f 	.word	0x0802263f
 80225ac:	0802263f 	.word	0x0802263f
 80225b0:	0802263f 	.word	0x0802263f
 80225b4:	0802263f 	.word	0x0802263f
 80225b8:	0802261b 	.word	0x0802261b
 80225bc:	2bff      	cmp	r3, #255	; 0xff
 80225be:	d030      	beq.n	8022622 <handle_packet+0x18a>
 80225c0:	e03d      	b.n	802263e <handle_packet+0x1a6>
		case NOTE_A:
			return playA();
 80225c2:	f000 f909 	bl	80227d8 <playA>
 80225c6:	4603      	mov	r3, r0
 80225c8:	e03a      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_B:
			return playB();
 80225ca:	f000 f90d 	bl	80227e8 <playB>
 80225ce:	4603      	mov	r3, r0
 80225d0:	e036      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_C:
			return playC();
 80225d2:	f000 f911 	bl	80227f8 <playC>
 80225d6:	4603      	mov	r3, r0
 80225d8:	e032      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_D:
			return playD();
 80225da:	f000 f915 	bl	8022808 <playD>
 80225de:	4603      	mov	r3, r0
 80225e0:	e02e      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_E:
			return playE();
 80225e2:	f000 f919 	bl	8022818 <playE>
 80225e6:	4603      	mov	r3, r0
 80225e8:	e02a      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_F:
			return playF();
 80225ea:	f000 f91d 	bl	8022828 <playF>
 80225ee:	4603      	mov	r3, r0
 80225f0:	e026      	b.n	8022640 <handle_packet+0x1a8>
		case NOTE_G:
			return playG();
 80225f2:	f000 f921 	bl	8022838 <playG>
 80225f6:	4603      	mov	r3, r0
 80225f8:	e022      	b.n	8022640 <handle_packet+0x1a8>
		case UP_OCT:
			return upOctave();
 80225fa:	f000 f955 	bl	80228a8 <upOctave>
 80225fe:	4603      	mov	r3, r0
 8022600:	e01e      	b.n	8022640 <handle_packet+0x1a8>
		case DOWN_OCT:
			return downOctave();
 8022602:	f000 f981 	bl	8022908 <downOctave>
 8022606:	4603      	mov	r3, r0
 8022608:	e01a      	b.n	8022640 <handle_packet+0x1a8>
		case UP_DUR:
			return upDuration();
 802260a:	f000 f9ad 	bl	8022968 <upDuration>
 802260e:	4603      	mov	r3, r0
 8022610:	e016      	b.n	8022640 <handle_packet+0x1a8>
		case DOWN_DUR:
			return downDuration();
 8022612:	f000 f9db 	bl	80229cc <downDuration>
 8022616:	4603      	mov	r3, r0
 8022618:	e012      	b.n	8022640 <handle_packet+0x1a8>
		case PLAY_ALL:
			return playAll();
 802261a:	f000 f915 	bl	8022848 <playAll>
 802261e:	4603      	mov	r3, r0
 8022620:	e00e      	b.n	8022640 <handle_packet+0x1a8>
		case BOOT:
			HAL_FLASH_Unlock();
 8022622:	f001 fcff 	bl	8024024 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x08104000, 0);
 8022626:	f04f 0200 	mov.w	r2, #0
 802262a:	f04f 0300 	mov.w	r3, #0
 802262e:	4908      	ldr	r1, [pc, #32]	; (8022650 <handle_packet+0x1b8>)
 8022630:	2002      	movs	r0, #2
 8022632:	f001 fca3 	bl	8023f7c <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8022636:	f001 fd17 	bl	8024068 <HAL_FLASH_Lock>
			NVIC_SystemReset();
 802263a:	f7ff ff17 	bl	802246c <__NVIC_SystemReset>
			return "";
		default:
			return "No such command\n";
 802263e:	4b05      	ldr	r3, [pc, #20]	; (8022654 <handle_packet+0x1bc>)
	}
}
 8022640:	4618      	mov	r0, r3
 8022642:	3710      	adds	r7, #16
 8022644:	46bd      	mov	sp, r7
 8022646:	bd80      	pop	{r7, pc}
 8022648:	40003000 	.word	0x40003000
 802264c:	080334ec 	.word	0x080334ec
 8022650:	08104000 	.word	0x08104000
 8022654:	080334fc 	.word	0x080334fc

08022658 <getNoteFrequency>:
double notes[7] = {16.352, 18.354, 20.602, 21.827, 24.5, 27.5, 30.868};
char* noteNames[7] = {"A", "B", "C", "D", "E", "F", "G"};

int duration = 1000;

double getNoteFrequency(uint8_t noteNumber) {
 8022658:	b5b0      	push	{r4, r5, r7, lr}
 802265a:	b082      	sub	sp, #8
 802265c:	af00      	add	r7, sp, #0
 802265e:	4603      	mov	r3, r0
 8022660:	71fb      	strb	r3, [r7, #7]
	return rint(notes[noteNumber] * pow(2, octave));
 8022662:	79fb      	ldrb	r3, [r7, #7]
 8022664:	4a18      	ldr	r2, [pc, #96]	; (80226c8 <getNoteFrequency+0x70>)
 8022666:	00db      	lsls	r3, r3, #3
 8022668:	4413      	add	r3, r2
 802266a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802266e:	4b17      	ldr	r3, [pc, #92]	; (80226cc <getNoteFrequency+0x74>)
 8022670:	781b      	ldrb	r3, [r3, #0]
 8022672:	4618      	mov	r0, r3
 8022674:	f7fd ff66 	bl	8020544 <__aeabi_ui2d>
 8022678:	4602      	mov	r2, r0
 802267a:	460b      	mov	r3, r1
 802267c:	ec43 2b11 	vmov	d1, r2, r3
 8022680:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80226c0 <getNoteFrequency+0x68>
 8022684:	f00f ffb0 	bl	80325e8 <pow>
 8022688:	ec53 2b10 	vmov	r2, r3, d0
 802268c:	4620      	mov	r0, r4
 802268e:	4629      	mov	r1, r5
 8022690:	f7fd ffd2 	bl	8020638 <__aeabi_dmul>
 8022694:	4602      	mov	r2, r0
 8022696:	460b      	mov	r3, r1
 8022698:	ec43 2b17 	vmov	d7, r2, r3
 802269c:	eeb0 0a47 	vmov.f32	s0, s14
 80226a0:	eef0 0a67 	vmov.f32	s1, s15
 80226a4:	f00f ff12 	bl	80324cc <rint>
 80226a8:	eeb0 7a40 	vmov.f32	s14, s0
 80226ac:	eef0 7a60 	vmov.f32	s15, s1
}
 80226b0:	eeb0 0a47 	vmov.f32	s0, s14
 80226b4:	eef0 0a67 	vmov.f32	s1, s15
 80226b8:	3708      	adds	r7, #8
 80226ba:	46bd      	mov	sp, r7
 80226bc:	bdb0      	pop	{r4, r5, r7, pc}
 80226be:	bf00      	nop
 80226c0:	00000000 	.word	0x00000000
 80226c4:	40000000 	.word	0x40000000
 80226c8:	20000030 	.word	0x20000030
 80226cc:	20000005 	.word	0x20000005

080226d0 <setVolume>:

void setVolume(uint8_t volume) {
 80226d0:	b480      	push	{r7}
 80226d2:	b083      	sub	sp, #12
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	4603      	mov	r3, r0
 80226d8:	71fb      	strb	r3, [r7, #7]
	if (0 <= volume && volume <= 10) {
 80226da:	79fb      	ldrb	r3, [r7, #7]
 80226dc:	2b0a      	cmp	r3, #10
 80226de:	d802      	bhi.n	80226e6 <setVolume+0x16>
		TIM1->CCR1 = volume;
 80226e0:	4a04      	ldr	r2, [pc, #16]	; (80226f4 <setVolume+0x24>)
 80226e2:	79fb      	ldrb	r3, [r7, #7]
 80226e4:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 80226e6:	bf00      	nop
 80226e8:	370c      	adds	r7, #12
 80226ea:	46bd      	mov	sp, r7
 80226ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226f0:	4770      	bx	lr
 80226f2:	bf00      	nop
 80226f4:	40010000 	.word	0x40010000

080226f8 <setFrequency>:

void setFrequency(uint16_t freq) {
 80226f8:	b580      	push	{r7, lr}
 80226fa:	b082      	sub	sp, #8
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	4603      	mov	r3, r0
 8022700:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = HAL_RCC_GetPCLK2Freq() / (20 * freq) - 1;
 8022702:	f002 fca9 	bl	8025058 <HAL_RCC_GetPCLK2Freq>
 8022706:	4601      	mov	r1, r0
 8022708:	88fa      	ldrh	r2, [r7, #6]
 802270a:	4613      	mov	r3, r2
 802270c:	009b      	lsls	r3, r3, #2
 802270e:	4413      	add	r3, r2
 8022710:	009b      	lsls	r3, r3, #2
 8022712:	fbb1 f3f3 	udiv	r3, r1, r3
 8022716:	4a03      	ldr	r2, [pc, #12]	; (8022724 <setFrequency+0x2c>)
 8022718:	3b01      	subs	r3, #1
 802271a:	6293      	str	r3, [r2, #40]	; 0x28
}
 802271c:	bf00      	nop
 802271e:	3708      	adds	r7, #8
 8022720:	46bd      	mov	sp, r7
 8022722:	bd80      	pop	{r7, pc}
 8022724:	40010000 	.word	0x40010000

08022728 <setPlay>:

void setPlay(uint8_t noteNumber) {
 8022728:	b580      	push	{r7, lr}
 802272a:	b082      	sub	sp, #8
 802272c:	af00      	add	r7, sp, #0
 802272e:	4603      	mov	r3, r0
 8022730:	71fb      	strb	r3, [r7, #7]
	setFrequency((uint16_t) getNoteFrequency(noteNumber));
 8022732:	79fb      	ldrb	r3, [r7, #7]
 8022734:	4618      	mov	r0, r3
 8022736:	f7ff ff8f 	bl	8022658 <getNoteFrequency>
 802273a:	ec53 2b10 	vmov	r2, r3, d0
 802273e:	4610      	mov	r0, r2
 8022740:	4619      	mov	r1, r3
 8022742:	f7fe fa29 	bl	8020b98 <__aeabi_d2uiz>
 8022746:	4603      	mov	r3, r0
 8022748:	b29b      	uxth	r3, r3
 802274a:	4618      	mov	r0, r3
 802274c:	f7ff ffd4 	bl	80226f8 <setFrequency>
	setVolume(10);
 8022750:	200a      	movs	r0, #10
 8022752:	f7ff ffbd 	bl	80226d0 <setVolume>
}
 8022756:	bf00      	nop
 8022758:	3708      	adds	r7, #8
 802275a:	46bd      	mov	sp, r7
 802275c:	bd80      	pop	{r7, pc}
	...

08022760 <playNote>:

char buf[128];
char* playNote(uint8_t noteNumber) {
 8022760:	b580      	push	{r7, lr}
 8022762:	b084      	sub	sp, #16
 8022764:	af02      	add	r7, sp, #8
 8022766:	4603      	mov	r3, r0
 8022768:	71fb      	strb	r3, [r7, #7]
	if (isPlaying) return "buzzer not ready\n";
 802276a:	4b13      	ldr	r3, [pc, #76]	; (80227b8 <playNote+0x58>)
 802276c:	781b      	ldrb	r3, [r3, #0]
 802276e:	2b00      	cmp	r3, #0
 8022770:	d001      	beq.n	8022776 <playNote+0x16>
 8022772:	4b12      	ldr	r3, [pc, #72]	; (80227bc <playNote+0x5c>)
 8022774:	e01b      	b.n	80227ae <playNote+0x4e>
	isPlaying = 1;
 8022776:	4b10      	ldr	r3, [pc, #64]	; (80227b8 <playNote+0x58>)
 8022778:	2201      	movs	r2, #1
 802277a:	701a      	strb	r2, [r3, #0]
	setPlay(noteNumber);
 802277c:	79fb      	ldrb	r3, [r7, #7]
 802277e:	4618      	mov	r0, r3
 8022780:	f7ff ffd2 	bl	8022728 <setPlay>
	TIM6_START();
 8022784:	f7ff fac0 	bl	8021d08 <TIM6_START>
	sprintf(buf, "note %s, %s, duration %dms\n", noteNames[noteNumber], octaveNames[octave], duration);
 8022788:	79fb      	ldrb	r3, [r7, #7]
 802278a:	4a0d      	ldr	r2, [pc, #52]	; (80227c0 <playNote+0x60>)
 802278c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022790:	4b0c      	ldr	r3, [pc, #48]	; (80227c4 <playNote+0x64>)
 8022792:	781b      	ldrb	r3, [r3, #0]
 8022794:	4619      	mov	r1, r3
 8022796:	4b0c      	ldr	r3, [pc, #48]	; (80227c8 <playNote+0x68>)
 8022798:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 802279c:	4b0b      	ldr	r3, [pc, #44]	; (80227cc <playNote+0x6c>)
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	9300      	str	r3, [sp, #0]
 80227a2:	460b      	mov	r3, r1
 80227a4:	490a      	ldr	r1, [pc, #40]	; (80227d0 <playNote+0x70>)
 80227a6:	480b      	ldr	r0, [pc, #44]	; (80227d4 <playNote+0x74>)
 80227a8:	f00e fe34 	bl	8031414 <siprintf>
	return buf;
 80227ac:	4b09      	ldr	r3, [pc, #36]	; (80227d4 <playNote+0x74>)
}
 80227ae:	4618      	mov	r0, r3
 80227b0:	3708      	adds	r7, #8
 80227b2:	46bd      	mov	sp, r7
 80227b4:	bd80      	pop	{r7, pc}
 80227b6:	bf00      	nop
 80227b8:	2000030c 	.word	0x2000030c
 80227bc:	080335cc 	.word	0x080335cc
 80227c0:	20000068 	.word	0x20000068
 80227c4:	20000005 	.word	0x20000005
 80227c8:	20000008 	.word	0x20000008
 80227cc:	20000084 	.word	0x20000084
 80227d0:	080335e0 	.word	0x080335e0
 80227d4:	20000310 	.word	0x20000310

080227d8 <playA>:

char* playA() {
 80227d8:	b580      	push	{r7, lr}
 80227da:	af00      	add	r7, sp, #0
	return playNote(0);
 80227dc:	2000      	movs	r0, #0
 80227de:	f7ff ffbf 	bl	8022760 <playNote>
 80227e2:	4603      	mov	r3, r0
}
 80227e4:	4618      	mov	r0, r3
 80227e6:	bd80      	pop	{r7, pc}

080227e8 <playB>:
char* playB() {
 80227e8:	b580      	push	{r7, lr}
 80227ea:	af00      	add	r7, sp, #0
	return playNote(1);
 80227ec:	2001      	movs	r0, #1
 80227ee:	f7ff ffb7 	bl	8022760 <playNote>
 80227f2:	4603      	mov	r3, r0
}
 80227f4:	4618      	mov	r0, r3
 80227f6:	bd80      	pop	{r7, pc}

080227f8 <playC>:
char* playC() {
 80227f8:	b580      	push	{r7, lr}
 80227fa:	af00      	add	r7, sp, #0
	return playNote(2);
 80227fc:	2002      	movs	r0, #2
 80227fe:	f7ff ffaf 	bl	8022760 <playNote>
 8022802:	4603      	mov	r3, r0
}
 8022804:	4618      	mov	r0, r3
 8022806:	bd80      	pop	{r7, pc}

08022808 <playD>:
char* playD() {
 8022808:	b580      	push	{r7, lr}
 802280a:	af00      	add	r7, sp, #0
	return playNote(3);
 802280c:	2003      	movs	r0, #3
 802280e:	f7ff ffa7 	bl	8022760 <playNote>
 8022812:	4603      	mov	r3, r0
}
 8022814:	4618      	mov	r0, r3
 8022816:	bd80      	pop	{r7, pc}

08022818 <playE>:
char* playE() {
 8022818:	b580      	push	{r7, lr}
 802281a:	af00      	add	r7, sp, #0
	return playNote(4);
 802281c:	2004      	movs	r0, #4
 802281e:	f7ff ff9f 	bl	8022760 <playNote>
 8022822:	4603      	mov	r3, r0
}
 8022824:	4618      	mov	r0, r3
 8022826:	bd80      	pop	{r7, pc}

08022828 <playF>:
char* playF() {
 8022828:	b580      	push	{r7, lr}
 802282a:	af00      	add	r7, sp, #0
	return playNote(5);
 802282c:	2005      	movs	r0, #5
 802282e:	f7ff ff97 	bl	8022760 <playNote>
 8022832:	4603      	mov	r3, r0
}
 8022834:	4618      	mov	r0, r3
 8022836:	bd80      	pop	{r7, pc}

08022838 <playG>:
char* playG() {
 8022838:	b580      	push	{r7, lr}
 802283a:	af00      	add	r7, sp, #0
	return playNote(6);
 802283c:	2006      	movs	r0, #6
 802283e:	f7ff ff8f 	bl	8022760 <playNote>
 8022842:	4603      	mov	r3, r0
}
 8022844:	4618      	mov	r0, r3
 8022846:	bd80      	pop	{r7, pc}

08022848 <playAll>:

char* playAll() {
 8022848:	b580      	push	{r7, lr}
 802284a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 802284c:	4b0f      	ldr	r3, [pc, #60]	; (802288c <playAll+0x44>)
 802284e:	781b      	ldrb	r3, [r3, #0]
 8022850:	2b00      	cmp	r3, #0
 8022852:	d001      	beq.n	8022858 <playAll+0x10>
 8022854:	4b0e      	ldr	r3, [pc, #56]	; (8022890 <playAll+0x48>)
 8022856:	e016      	b.n	8022886 <playAll+0x3e>
	isPlaying = 1;
 8022858:	4b0c      	ldr	r3, [pc, #48]	; (802288c <playAll+0x44>)
 802285a:	2201      	movs	r2, #1
 802285c:	701a      	strb	r2, [r3, #0]
	setPlayAllFlag();
 802285e:	f7ff fa67 	bl	8021d30 <setPlayAllFlag>
	setPlay(0);
 8022862:	2000      	movs	r0, #0
 8022864:	f7ff ff60 	bl	8022728 <setPlay>
	TIM6_START();
 8022868:	f7ff fa4e 	bl	8021d08 <TIM6_START>
	sprintf(buf, "notes A,B,C,D,E,F,G, %s, duration %dms\n", octaveNames[octave], duration);
 802286c:	4b09      	ldr	r3, [pc, #36]	; (8022894 <playAll+0x4c>)
 802286e:	781b      	ldrb	r3, [r3, #0]
 8022870:	461a      	mov	r2, r3
 8022872:	4b09      	ldr	r3, [pc, #36]	; (8022898 <playAll+0x50>)
 8022874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022878:	4b08      	ldr	r3, [pc, #32]	; (802289c <playAll+0x54>)
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	4908      	ldr	r1, [pc, #32]	; (80228a0 <playAll+0x58>)
 802287e:	4809      	ldr	r0, [pc, #36]	; (80228a4 <playAll+0x5c>)
 8022880:	f00e fdc8 	bl	8031414 <siprintf>
	return buf;
 8022884:	4b07      	ldr	r3, [pc, #28]	; (80228a4 <playAll+0x5c>)
}
 8022886:	4618      	mov	r0, r3
 8022888:	bd80      	pop	{r7, pc}
 802288a:	bf00      	nop
 802288c:	2000030c 	.word	0x2000030c
 8022890:	080335cc 	.word	0x080335cc
 8022894:	20000005 	.word	0x20000005
 8022898:	20000008 	.word	0x20000008
 802289c:	20000084 	.word	0x20000084
 80228a0:	080335fc 	.word	0x080335fc
 80228a4:	20000310 	.word	0x20000310

080228a8 <upOctave>:

char* upOctave() {
 80228a8:	b580      	push	{r7, lr}
 80228aa:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 80228ac:	4b0f      	ldr	r3, [pc, #60]	; (80228ec <upOctave+0x44>)
 80228ae:	781b      	ldrb	r3, [r3, #0]
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d001      	beq.n	80228b8 <upOctave+0x10>
 80228b4:	4b0e      	ldr	r3, [pc, #56]	; (80228f0 <upOctave+0x48>)
 80228b6:	e017      	b.n	80228e8 <upOctave+0x40>
	if (octave < 8) {
 80228b8:	4b0e      	ldr	r3, [pc, #56]	; (80228f4 <upOctave+0x4c>)
 80228ba:	781b      	ldrb	r3, [r3, #0]
 80228bc:	2b07      	cmp	r3, #7
 80228be:	d812      	bhi.n	80228e6 <upOctave+0x3e>
		octave++;
 80228c0:	4b0c      	ldr	r3, [pc, #48]	; (80228f4 <upOctave+0x4c>)
 80228c2:	781b      	ldrb	r3, [r3, #0]
 80228c4:	3301      	adds	r3, #1
 80228c6:	b2da      	uxtb	r2, r3
 80228c8:	4b0a      	ldr	r3, [pc, #40]	; (80228f4 <upOctave+0x4c>)
 80228ca:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 80228cc:	4b09      	ldr	r3, [pc, #36]	; (80228f4 <upOctave+0x4c>)
 80228ce:	781b      	ldrb	r3, [r3, #0]
 80228d0:	461a      	mov	r2, r3
 80228d2:	4b09      	ldr	r3, [pc, #36]	; (80228f8 <upOctave+0x50>)
 80228d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80228d8:	461a      	mov	r2, r3
 80228da:	4908      	ldr	r1, [pc, #32]	; (80228fc <upOctave+0x54>)
 80228dc:	4808      	ldr	r0, [pc, #32]	; (8022900 <upOctave+0x58>)
 80228de:	f00e fd99 	bl	8031414 <siprintf>
		return buf;
 80228e2:	4b07      	ldr	r3, [pc, #28]	; (8022900 <upOctave+0x58>)
 80228e4:	e000      	b.n	80228e8 <upOctave+0x40>
	}
	return "Octave is maximum\n";
 80228e6:	4b07      	ldr	r3, [pc, #28]	; (8022904 <upOctave+0x5c>)
}
 80228e8:	4618      	mov	r0, r3
 80228ea:	bd80      	pop	{r7, pc}
 80228ec:	2000030c 	.word	0x2000030c
 80228f0:	080335cc 	.word	0x080335cc
 80228f4:	20000005 	.word	0x20000005
 80228f8:	20000008 	.word	0x20000008
 80228fc:	08033624 	.word	0x08033624
 8022900:	20000310 	.word	0x20000310
 8022904:	08033628 	.word	0x08033628

08022908 <downOctave>:

char* downOctave() {
 8022908:	b580      	push	{r7, lr}
 802290a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 802290c:	4b0f      	ldr	r3, [pc, #60]	; (802294c <downOctave+0x44>)
 802290e:	781b      	ldrb	r3, [r3, #0]
 8022910:	2b00      	cmp	r3, #0
 8022912:	d001      	beq.n	8022918 <downOctave+0x10>
 8022914:	4b0e      	ldr	r3, [pc, #56]	; (8022950 <downOctave+0x48>)
 8022916:	e017      	b.n	8022948 <downOctave+0x40>
	if (octave > 0) {
 8022918:	4b0e      	ldr	r3, [pc, #56]	; (8022954 <downOctave+0x4c>)
 802291a:	781b      	ldrb	r3, [r3, #0]
 802291c:	2b00      	cmp	r3, #0
 802291e:	d012      	beq.n	8022946 <downOctave+0x3e>
		octave--;
 8022920:	4b0c      	ldr	r3, [pc, #48]	; (8022954 <downOctave+0x4c>)
 8022922:	781b      	ldrb	r3, [r3, #0]
 8022924:	3b01      	subs	r3, #1
 8022926:	b2da      	uxtb	r2, r3
 8022928:	4b0a      	ldr	r3, [pc, #40]	; (8022954 <downOctave+0x4c>)
 802292a:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 802292c:	4b09      	ldr	r3, [pc, #36]	; (8022954 <downOctave+0x4c>)
 802292e:	781b      	ldrb	r3, [r3, #0]
 8022930:	461a      	mov	r2, r3
 8022932:	4b09      	ldr	r3, [pc, #36]	; (8022958 <downOctave+0x50>)
 8022934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022938:	461a      	mov	r2, r3
 802293a:	4908      	ldr	r1, [pc, #32]	; (802295c <downOctave+0x54>)
 802293c:	4808      	ldr	r0, [pc, #32]	; (8022960 <downOctave+0x58>)
 802293e:	f00e fd69 	bl	8031414 <siprintf>
		return buf;
 8022942:	4b07      	ldr	r3, [pc, #28]	; (8022960 <downOctave+0x58>)
 8022944:	e000      	b.n	8022948 <downOctave+0x40>
	}
	return "Octave is minimum\n";
 8022946:	4b07      	ldr	r3, [pc, #28]	; (8022964 <downOctave+0x5c>)
}
 8022948:	4618      	mov	r0, r3
 802294a:	bd80      	pop	{r7, pc}
 802294c:	2000030c 	.word	0x2000030c
 8022950:	080335cc 	.word	0x080335cc
 8022954:	20000005 	.word	0x20000005
 8022958:	20000008 	.word	0x20000008
 802295c:	08033624 	.word	0x08033624
 8022960:	20000310 	.word	0x20000310
 8022964:	0803363c 	.word	0x0803363c

08022968 <upDuration>:

char* upDuration() {
 8022968:	b580      	push	{r7, lr}
 802296a:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 802296c:	4b10      	ldr	r3, [pc, #64]	; (80229b0 <upDuration+0x48>)
 802296e:	781b      	ldrb	r3, [r3, #0]
 8022970:	2b00      	cmp	r3, #0
 8022972:	d001      	beq.n	8022978 <upDuration+0x10>
 8022974:	4b0f      	ldr	r3, [pc, #60]	; (80229b4 <upDuration+0x4c>)
 8022976:	e019      	b.n	80229ac <upDuration+0x44>
	if (duration < 5000) {
 8022978:	4b0f      	ldr	r3, [pc, #60]	; (80229b8 <upDuration+0x50>)
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	f241 3287 	movw	r2, #4999	; 0x1387
 8022980:	4293      	cmp	r3, r2
 8022982:	dc12      	bgt.n	80229aa <upDuration+0x42>
		TIM6->ARR += 100;
 8022984:	4b0d      	ldr	r3, [pc, #52]	; (80229bc <upDuration+0x54>)
 8022986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022988:	4a0c      	ldr	r2, [pc, #48]	; (80229bc <upDuration+0x54>)
 802298a:	3364      	adds	r3, #100	; 0x64
 802298c:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration += 100;
 802298e:	4b0a      	ldr	r3, [pc, #40]	; (80229b8 <upDuration+0x50>)
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	3364      	adds	r3, #100	; 0x64
 8022994:	4a08      	ldr	r2, [pc, #32]	; (80229b8 <upDuration+0x50>)
 8022996:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 8022998:	4b07      	ldr	r3, [pc, #28]	; (80229b8 <upDuration+0x50>)
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	461a      	mov	r2, r3
 802299e:	4908      	ldr	r1, [pc, #32]	; (80229c0 <upDuration+0x58>)
 80229a0:	4808      	ldr	r0, [pc, #32]	; (80229c4 <upDuration+0x5c>)
 80229a2:	f00e fd37 	bl	8031414 <siprintf>
		return buf;
 80229a6:	4b07      	ldr	r3, [pc, #28]	; (80229c4 <upDuration+0x5c>)
 80229a8:	e000      	b.n	80229ac <upDuration+0x44>
	}
	return "Duration is maximum\n";
 80229aa:	4b07      	ldr	r3, [pc, #28]	; (80229c8 <upDuration+0x60>)
}
 80229ac:	4618      	mov	r0, r3
 80229ae:	bd80      	pop	{r7, pc}
 80229b0:	2000030c 	.word	0x2000030c
 80229b4:	080335cc 	.word	0x080335cc
 80229b8:	20000084 	.word	0x20000084
 80229bc:	40001000 	.word	0x40001000
 80229c0:	08033650 	.word	0x08033650
 80229c4:	20000310 	.word	0x20000310
 80229c8:	08033658 	.word	0x08033658

080229cc <downDuration>:

char* downDuration() {
 80229cc:	b580      	push	{r7, lr}
 80229ce:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 80229d0:	4b0f      	ldr	r3, [pc, #60]	; (8022a10 <downDuration+0x44>)
 80229d2:	781b      	ldrb	r3, [r3, #0]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d001      	beq.n	80229dc <downDuration+0x10>
 80229d8:	4b0e      	ldr	r3, [pc, #56]	; (8022a14 <downDuration+0x48>)
 80229da:	e017      	b.n	8022a0c <downDuration+0x40>
	if (duration > 100) {
 80229dc:	4b0e      	ldr	r3, [pc, #56]	; (8022a18 <downDuration+0x4c>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	2b64      	cmp	r3, #100	; 0x64
 80229e2:	dd12      	ble.n	8022a0a <downDuration+0x3e>
		TIM6->ARR -= 100;
 80229e4:	4b0d      	ldr	r3, [pc, #52]	; (8022a1c <downDuration+0x50>)
 80229e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229e8:	4a0c      	ldr	r2, [pc, #48]	; (8022a1c <downDuration+0x50>)
 80229ea:	3b64      	subs	r3, #100	; 0x64
 80229ec:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration -= 100;
 80229ee:	4b0a      	ldr	r3, [pc, #40]	; (8022a18 <downDuration+0x4c>)
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	3b64      	subs	r3, #100	; 0x64
 80229f4:	4a08      	ldr	r2, [pc, #32]	; (8022a18 <downDuration+0x4c>)
 80229f6:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 80229f8:	4b07      	ldr	r3, [pc, #28]	; (8022a18 <downDuration+0x4c>)
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	461a      	mov	r2, r3
 80229fe:	4908      	ldr	r1, [pc, #32]	; (8022a20 <downDuration+0x54>)
 8022a00:	4808      	ldr	r0, [pc, #32]	; (8022a24 <downDuration+0x58>)
 8022a02:	f00e fd07 	bl	8031414 <siprintf>
		return buf;
 8022a06:	4b07      	ldr	r3, [pc, #28]	; (8022a24 <downDuration+0x58>)
 8022a08:	e000      	b.n	8022a0c <downDuration+0x40>
	}
	return "Duration is minimum\n";
 8022a0a:	4b07      	ldr	r3, [pc, #28]	; (8022a28 <downDuration+0x5c>)
}
 8022a0c:	4618      	mov	r0, r3
 8022a0e:	bd80      	pop	{r7, pc}
 8022a10:	2000030c 	.word	0x2000030c
 8022a14:	080335cc 	.word	0x080335cc
 8022a18:	20000084 	.word	0x20000084
 8022a1c:	40001000 	.word	0x40001000
 8022a20:	08033650 	.word	0x08033650
 8022a24:	20000310 	.word	0x20000310
 8022a28:	08033670 	.word	0x08033670

08022a2c <disableIsPlaying>:

void disableIsPlaying() {
 8022a2c:	b480      	push	{r7}
 8022a2e:	af00      	add	r7, sp, #0
	isPlaying = 0;
 8022a30:	4b03      	ldr	r3, [pc, #12]	; (8022a40 <disableIsPlaying+0x14>)
 8022a32:	2200      	movs	r2, #0
 8022a34:	701a      	strb	r2, [r3, #0]
}
 8022a36:	bf00      	nop
 8022a38:	46bd      	mov	sp, r7
 8022a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a3e:	4770      	bx	lr
 8022a40:	2000030c 	.word	0x2000030c

08022a44 <uartHardwareTransmitPolling>:
#include "usart.h"

uint8_t usartHardwareTransmitBuffer;
uint8_t usartHardwareReceiveBuffer;

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
 8022a44:	b580      	push	{r7, lr}
 8022a46:	b082      	sub	sp, #8
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	4603      	mov	r3, r0
 8022a4c:	460a      	mov	r2, r1
 8022a4e:	71fb      	strb	r3, [r7, #7]
 8022a50:	4613      	mov	r3, r2
 8022a52:	80bb      	strh	r3, [r7, #4]
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
 8022a54:	88bb      	ldrh	r3, [r7, #4]
 8022a56:	1df9      	adds	r1, r7, #7
 8022a58:	2201      	movs	r2, #1
 8022a5a:	4806      	ldr	r0, [pc, #24]	; (8022a74 <uartHardwareTransmitPolling+0x30>)
 8022a5c:	f003 fca9 	bl	80263b2 <HAL_UART_Transmit>
 8022a60:	4603      	mov	r3, r0
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	bf0c      	ite	eq
 8022a66:	2301      	moveq	r3, #1
 8022a68:	2300      	movne	r3, #0
 8022a6a:	b2db      	uxtb	r3, r3
}
 8022a6c:	4618      	mov	r0, r3
 8022a6e:	3708      	adds	r7, #8
 8022a70:	46bd      	mov	sp, r7
 8022a72:	bd80      	pop	{r7, pc}
 8022a74:	200002c4 	.word	0x200002c4

08022a78 <uartHardwareReceivePolling>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	b082      	sub	sp, #8
 8022a7c:	af00      	add	r7, sp, #0
 8022a7e:	6078      	str	r0, [r7, #4]
 8022a80:	460b      	mov	r3, r1
 8022a82:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
 8022a84:	887b      	ldrh	r3, [r7, #2]
 8022a86:	2201      	movs	r2, #1
 8022a88:	6879      	ldr	r1, [r7, #4]
 8022a8a:	4806      	ldr	r0, [pc, #24]	; (8022aa4 <uartHardwareReceivePolling+0x2c>)
 8022a8c:	f003 fd23 	bl	80264d6 <HAL_UART_Receive>
 8022a90:	4603      	mov	r3, r0
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	bf0c      	ite	eq
 8022a96:	2301      	moveq	r3, #1
 8022a98:	2300      	movne	r3, #0
 8022a9a:	b2db      	uxtb	r3, r3
}
 8022a9c:	4618      	mov	r0, r3
 8022a9e:	3708      	adds	r7, #8
 8022aa0:	46bd      	mov	sp, r7
 8022aa2:	bd80      	pop	{r7, pc}
 8022aa4:	200002c4 	.word	0x200002c4

08022aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8022aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8022aac:	480d      	ldr	r0, [pc, #52]	; (8022ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8022aae:	490e      	ldr	r1, [pc, #56]	; (8022ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8022ab0:	4a0e      	ldr	r2, [pc, #56]	; (8022aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8022ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022ab4:	e002      	b.n	8022abc <LoopCopyDataInit>

08022ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8022ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8022ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8022aba:	3304      	adds	r3, #4

08022abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022ac0:	d3f9      	bcc.n	8022ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022ac2:	4a0b      	ldr	r2, [pc, #44]	; (8022af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022ac4:	4c0b      	ldr	r4, [pc, #44]	; (8022af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8022ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8022ac8:	e001      	b.n	8022ace <LoopFillZerobss>

08022aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8022aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022acc:	3204      	adds	r2, #4

08022ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022ad0:	d3fb      	bcc.n	8022aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8022ad2:	f7fe ff65 	bl	80219a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022ad6:	f00e fb43 	bl	8031160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022ada:	f7fe fc13 	bl	8021304 <main>
  bx  lr    
 8022ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8022ae0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8022ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022ae8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8022aec:	08035528 	.word	0x08035528
  ldr r2, =_sbss
 8022af0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8022af4:	20006bac 	.word	0x20006bac

08022af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022af8:	e7fe      	b.n	8022af8 <ADC_IRQHandler>
	...

08022afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022afc:	b580      	push	{r7, lr}
 8022afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022b00:	4b0e      	ldr	r3, [pc, #56]	; (8022b3c <HAL_Init+0x40>)
 8022b02:	681b      	ldr	r3, [r3, #0]
 8022b04:	4a0d      	ldr	r2, [pc, #52]	; (8022b3c <HAL_Init+0x40>)
 8022b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022b0c:	4b0b      	ldr	r3, [pc, #44]	; (8022b3c <HAL_Init+0x40>)
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	4a0a      	ldr	r2, [pc, #40]	; (8022b3c <HAL_Init+0x40>)
 8022b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022b18:	4b08      	ldr	r3, [pc, #32]	; (8022b3c <HAL_Init+0x40>)
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	4a07      	ldr	r2, [pc, #28]	; (8022b3c <HAL_Init+0x40>)
 8022b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022b24:	2003      	movs	r0, #3
 8022b26:	f000 f94f 	bl	8022dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022b2a:	200f      	movs	r0, #15
 8022b2c:	f000 f808 	bl	8022b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022b30:	f7fe fe16 	bl	8021760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022b34:	2300      	movs	r3, #0
}
 8022b36:	4618      	mov	r0, r3
 8022b38:	bd80      	pop	{r7, pc}
 8022b3a:	bf00      	nop
 8022b3c:	40023c00 	.word	0x40023c00

08022b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8022b40:	b580      	push	{r7, lr}
 8022b42:	b082      	sub	sp, #8
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8022b48:	4b12      	ldr	r3, [pc, #72]	; (8022b94 <HAL_InitTick+0x54>)
 8022b4a:	681a      	ldr	r2, [r3, #0]
 8022b4c:	4b12      	ldr	r3, [pc, #72]	; (8022b98 <HAL_InitTick+0x58>)
 8022b4e:	781b      	ldrb	r3, [r3, #0]
 8022b50:	4619      	mov	r1, r3
 8022b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8022b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8022b5e:	4618      	mov	r0, r3
 8022b60:	f000 f967 	bl	8022e32 <HAL_SYSTICK_Config>
 8022b64:	4603      	mov	r3, r0
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d001      	beq.n	8022b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8022b6a:	2301      	movs	r3, #1
 8022b6c:	e00e      	b.n	8022b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	2b0f      	cmp	r3, #15
 8022b72:	d80a      	bhi.n	8022b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8022b74:	2200      	movs	r2, #0
 8022b76:	6879      	ldr	r1, [r7, #4]
 8022b78:	f04f 30ff 	mov.w	r0, #4294967295
 8022b7c:	f000 f92f 	bl	8022dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8022b80:	4a06      	ldr	r2, [pc, #24]	; (8022b9c <HAL_InitTick+0x5c>)
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8022b86:	2300      	movs	r3, #0
 8022b88:	e000      	b.n	8022b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8022b8a:	2301      	movs	r3, #1
}
 8022b8c:	4618      	mov	r0, r3
 8022b8e:	3708      	adds	r7, #8
 8022b90:	46bd      	mov	sp, r7
 8022b92:	bd80      	pop	{r7, pc}
 8022b94:	20000000 	.word	0x20000000
 8022b98:	2000008c 	.word	0x2000008c
 8022b9c:	20000088 	.word	0x20000088

08022ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022ba0:	b480      	push	{r7}
 8022ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022ba4:	4b06      	ldr	r3, [pc, #24]	; (8022bc0 <HAL_IncTick+0x20>)
 8022ba6:	781b      	ldrb	r3, [r3, #0]
 8022ba8:	461a      	mov	r2, r3
 8022baa:	4b06      	ldr	r3, [pc, #24]	; (8022bc4 <HAL_IncTick+0x24>)
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	4413      	add	r3, r2
 8022bb0:	4a04      	ldr	r2, [pc, #16]	; (8022bc4 <HAL_IncTick+0x24>)
 8022bb2:	6013      	str	r3, [r2, #0]
}
 8022bb4:	bf00      	nop
 8022bb6:	46bd      	mov	sp, r7
 8022bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bbc:	4770      	bx	lr
 8022bbe:	bf00      	nop
 8022bc0:	2000008c 	.word	0x2000008c
 8022bc4:	20000390 	.word	0x20000390

08022bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022bc8:	b480      	push	{r7}
 8022bca:	af00      	add	r7, sp, #0
  return uwTick;
 8022bcc:	4b03      	ldr	r3, [pc, #12]	; (8022bdc <HAL_GetTick+0x14>)
 8022bce:	681b      	ldr	r3, [r3, #0]
}
 8022bd0:	4618      	mov	r0, r3
 8022bd2:	46bd      	mov	sp, r7
 8022bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bd8:	4770      	bx	lr
 8022bda:	bf00      	nop
 8022bdc:	20000390 	.word	0x20000390

08022be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022be0:	b580      	push	{r7, lr}
 8022be2:	b084      	sub	sp, #16
 8022be4:	af00      	add	r7, sp, #0
 8022be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022be8:	f7ff ffee 	bl	8022bc8 <HAL_GetTick>
 8022bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022bf2:	68fb      	ldr	r3, [r7, #12]
 8022bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022bf8:	d005      	beq.n	8022c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022bfa:	4b0a      	ldr	r3, [pc, #40]	; (8022c24 <HAL_Delay+0x44>)
 8022bfc:	781b      	ldrb	r3, [r3, #0]
 8022bfe:	461a      	mov	r2, r3
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	4413      	add	r3, r2
 8022c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022c06:	bf00      	nop
 8022c08:	f7ff ffde 	bl	8022bc8 <HAL_GetTick>
 8022c0c:	4602      	mov	r2, r0
 8022c0e:	68bb      	ldr	r3, [r7, #8]
 8022c10:	1ad3      	subs	r3, r2, r3
 8022c12:	68fa      	ldr	r2, [r7, #12]
 8022c14:	429a      	cmp	r2, r3
 8022c16:	d8f7      	bhi.n	8022c08 <HAL_Delay+0x28>
  {
  }
}
 8022c18:	bf00      	nop
 8022c1a:	bf00      	nop
 8022c1c:	3710      	adds	r7, #16
 8022c1e:	46bd      	mov	sp, r7
 8022c20:	bd80      	pop	{r7, pc}
 8022c22:	bf00      	nop
 8022c24:	2000008c 	.word	0x2000008c

08022c28 <__NVIC_SetPriorityGrouping>:
{
 8022c28:	b480      	push	{r7}
 8022c2a:	b085      	sub	sp, #20
 8022c2c:	af00      	add	r7, sp, #0
 8022c2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	f003 0307 	and.w	r3, r3, #7
 8022c36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022c38:	4b0c      	ldr	r3, [pc, #48]	; (8022c6c <__NVIC_SetPriorityGrouping+0x44>)
 8022c3a:	68db      	ldr	r3, [r3, #12]
 8022c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022c3e:	68ba      	ldr	r2, [r7, #8]
 8022c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022c44:	4013      	ands	r3, r2
 8022c46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022c48:	68fb      	ldr	r3, [r7, #12]
 8022c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022c4c:	68bb      	ldr	r3, [r7, #8]
 8022c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8022c5a:	4a04      	ldr	r2, [pc, #16]	; (8022c6c <__NVIC_SetPriorityGrouping+0x44>)
 8022c5c:	68bb      	ldr	r3, [r7, #8]
 8022c5e:	60d3      	str	r3, [r2, #12]
}
 8022c60:	bf00      	nop
 8022c62:	3714      	adds	r7, #20
 8022c64:	46bd      	mov	sp, r7
 8022c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c6a:	4770      	bx	lr
 8022c6c:	e000ed00 	.word	0xe000ed00

08022c70 <__NVIC_GetPriorityGrouping>:
{
 8022c70:	b480      	push	{r7}
 8022c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022c74:	4b04      	ldr	r3, [pc, #16]	; (8022c88 <__NVIC_GetPriorityGrouping+0x18>)
 8022c76:	68db      	ldr	r3, [r3, #12]
 8022c78:	0a1b      	lsrs	r3, r3, #8
 8022c7a:	f003 0307 	and.w	r3, r3, #7
}
 8022c7e:	4618      	mov	r0, r3
 8022c80:	46bd      	mov	sp, r7
 8022c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c86:	4770      	bx	lr
 8022c88:	e000ed00 	.word	0xe000ed00

08022c8c <__NVIC_EnableIRQ>:
{
 8022c8c:	b480      	push	{r7}
 8022c8e:	b083      	sub	sp, #12
 8022c90:	af00      	add	r7, sp, #0
 8022c92:	4603      	mov	r3, r0
 8022c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	db0b      	blt.n	8022cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022c9e:	79fb      	ldrb	r3, [r7, #7]
 8022ca0:	f003 021f 	and.w	r2, r3, #31
 8022ca4:	4907      	ldr	r1, [pc, #28]	; (8022cc4 <__NVIC_EnableIRQ+0x38>)
 8022ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022caa:	095b      	lsrs	r3, r3, #5
 8022cac:	2001      	movs	r0, #1
 8022cae:	fa00 f202 	lsl.w	r2, r0, r2
 8022cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8022cb6:	bf00      	nop
 8022cb8:	370c      	adds	r7, #12
 8022cba:	46bd      	mov	sp, r7
 8022cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cc0:	4770      	bx	lr
 8022cc2:	bf00      	nop
 8022cc4:	e000e100 	.word	0xe000e100

08022cc8 <__NVIC_SetPriority>:
{
 8022cc8:	b480      	push	{r7}
 8022cca:	b083      	sub	sp, #12
 8022ccc:	af00      	add	r7, sp, #0
 8022cce:	4603      	mov	r3, r0
 8022cd0:	6039      	str	r1, [r7, #0]
 8022cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	db0a      	blt.n	8022cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022cdc:	683b      	ldr	r3, [r7, #0]
 8022cde:	b2da      	uxtb	r2, r3
 8022ce0:	490c      	ldr	r1, [pc, #48]	; (8022d14 <__NVIC_SetPriority+0x4c>)
 8022ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022ce6:	0112      	lsls	r2, r2, #4
 8022ce8:	b2d2      	uxtb	r2, r2
 8022cea:	440b      	add	r3, r1
 8022cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8022cf0:	e00a      	b.n	8022d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022cf2:	683b      	ldr	r3, [r7, #0]
 8022cf4:	b2da      	uxtb	r2, r3
 8022cf6:	4908      	ldr	r1, [pc, #32]	; (8022d18 <__NVIC_SetPriority+0x50>)
 8022cf8:	79fb      	ldrb	r3, [r7, #7]
 8022cfa:	f003 030f 	and.w	r3, r3, #15
 8022cfe:	3b04      	subs	r3, #4
 8022d00:	0112      	lsls	r2, r2, #4
 8022d02:	b2d2      	uxtb	r2, r2
 8022d04:	440b      	add	r3, r1
 8022d06:	761a      	strb	r2, [r3, #24]
}
 8022d08:	bf00      	nop
 8022d0a:	370c      	adds	r7, #12
 8022d0c:	46bd      	mov	sp, r7
 8022d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d12:	4770      	bx	lr
 8022d14:	e000e100 	.word	0xe000e100
 8022d18:	e000ed00 	.word	0xe000ed00

08022d1c <NVIC_EncodePriority>:
{
 8022d1c:	b480      	push	{r7}
 8022d1e:	b089      	sub	sp, #36	; 0x24
 8022d20:	af00      	add	r7, sp, #0
 8022d22:	60f8      	str	r0, [r7, #12]
 8022d24:	60b9      	str	r1, [r7, #8]
 8022d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022d28:	68fb      	ldr	r3, [r7, #12]
 8022d2a:	f003 0307 	and.w	r3, r3, #7
 8022d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022d30:	69fb      	ldr	r3, [r7, #28]
 8022d32:	f1c3 0307 	rsb	r3, r3, #7
 8022d36:	2b04      	cmp	r3, #4
 8022d38:	bf28      	it	cs
 8022d3a:	2304      	movcs	r3, #4
 8022d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022d3e:	69fb      	ldr	r3, [r7, #28]
 8022d40:	3304      	adds	r3, #4
 8022d42:	2b06      	cmp	r3, #6
 8022d44:	d902      	bls.n	8022d4c <NVIC_EncodePriority+0x30>
 8022d46:	69fb      	ldr	r3, [r7, #28]
 8022d48:	3b03      	subs	r3, #3
 8022d4a:	e000      	b.n	8022d4e <NVIC_EncodePriority+0x32>
 8022d4c:	2300      	movs	r3, #0
 8022d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d50:	f04f 32ff 	mov.w	r2, #4294967295
 8022d54:	69bb      	ldr	r3, [r7, #24]
 8022d56:	fa02 f303 	lsl.w	r3, r2, r3
 8022d5a:	43da      	mvns	r2, r3
 8022d5c:	68bb      	ldr	r3, [r7, #8]
 8022d5e:	401a      	ands	r2, r3
 8022d60:	697b      	ldr	r3, [r7, #20]
 8022d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022d64:	f04f 31ff 	mov.w	r1, #4294967295
 8022d68:	697b      	ldr	r3, [r7, #20]
 8022d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8022d6e:	43d9      	mvns	r1, r3
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d74:	4313      	orrs	r3, r2
}
 8022d76:	4618      	mov	r0, r3
 8022d78:	3724      	adds	r7, #36	; 0x24
 8022d7a:	46bd      	mov	sp, r7
 8022d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d80:	4770      	bx	lr
	...

08022d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022d84:	b580      	push	{r7, lr}
 8022d86:	b082      	sub	sp, #8
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	3b01      	subs	r3, #1
 8022d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022d94:	d301      	bcc.n	8022d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8022d96:	2301      	movs	r3, #1
 8022d98:	e00f      	b.n	8022dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022d9a:	4a0a      	ldr	r2, [pc, #40]	; (8022dc4 <SysTick_Config+0x40>)
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	3b01      	subs	r3, #1
 8022da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022da2:	210f      	movs	r1, #15
 8022da4:	f04f 30ff 	mov.w	r0, #4294967295
 8022da8:	f7ff ff8e 	bl	8022cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022dac:	4b05      	ldr	r3, [pc, #20]	; (8022dc4 <SysTick_Config+0x40>)
 8022dae:	2200      	movs	r2, #0
 8022db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022db2:	4b04      	ldr	r3, [pc, #16]	; (8022dc4 <SysTick_Config+0x40>)
 8022db4:	2207      	movs	r2, #7
 8022db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022db8:	2300      	movs	r3, #0
}
 8022dba:	4618      	mov	r0, r3
 8022dbc:	3708      	adds	r7, #8
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	bd80      	pop	{r7, pc}
 8022dc2:	bf00      	nop
 8022dc4:	e000e010 	.word	0xe000e010

08022dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022dc8:	b580      	push	{r7, lr}
 8022dca:	b082      	sub	sp, #8
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022dd0:	6878      	ldr	r0, [r7, #4]
 8022dd2:	f7ff ff29 	bl	8022c28 <__NVIC_SetPriorityGrouping>
}
 8022dd6:	bf00      	nop
 8022dd8:	3708      	adds	r7, #8
 8022dda:	46bd      	mov	sp, r7
 8022ddc:	bd80      	pop	{r7, pc}

08022dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8022dde:	b580      	push	{r7, lr}
 8022de0:	b086      	sub	sp, #24
 8022de2:	af00      	add	r7, sp, #0
 8022de4:	4603      	mov	r3, r0
 8022de6:	60b9      	str	r1, [r7, #8]
 8022de8:	607a      	str	r2, [r7, #4]
 8022dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8022dec:	2300      	movs	r3, #0
 8022dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022df0:	f7ff ff3e 	bl	8022c70 <__NVIC_GetPriorityGrouping>
 8022df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022df6:	687a      	ldr	r2, [r7, #4]
 8022df8:	68b9      	ldr	r1, [r7, #8]
 8022dfa:	6978      	ldr	r0, [r7, #20]
 8022dfc:	f7ff ff8e 	bl	8022d1c <NVIC_EncodePriority>
 8022e00:	4602      	mov	r2, r0
 8022e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022e06:	4611      	mov	r1, r2
 8022e08:	4618      	mov	r0, r3
 8022e0a:	f7ff ff5d 	bl	8022cc8 <__NVIC_SetPriority>
}
 8022e0e:	bf00      	nop
 8022e10:	3718      	adds	r7, #24
 8022e12:	46bd      	mov	sp, r7
 8022e14:	bd80      	pop	{r7, pc}

08022e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022e16:	b580      	push	{r7, lr}
 8022e18:	b082      	sub	sp, #8
 8022e1a:	af00      	add	r7, sp, #0
 8022e1c:	4603      	mov	r3, r0
 8022e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8022e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022e24:	4618      	mov	r0, r3
 8022e26:	f7ff ff31 	bl	8022c8c <__NVIC_EnableIRQ>
}
 8022e2a:	bf00      	nop
 8022e2c:	3708      	adds	r7, #8
 8022e2e:	46bd      	mov	sp, r7
 8022e30:	bd80      	pop	{r7, pc}

08022e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8022e32:	b580      	push	{r7, lr}
 8022e34:	b082      	sub	sp, #8
 8022e36:	af00      	add	r7, sp, #0
 8022e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8022e3a:	6878      	ldr	r0, [r7, #4]
 8022e3c:	f7ff ffa2 	bl	8022d84 <SysTick_Config>
 8022e40:	4603      	mov	r3, r0
}
 8022e42:	4618      	mov	r0, r3
 8022e44:	3708      	adds	r7, #8
 8022e46:	46bd      	mov	sp, r7
 8022e48:	bd80      	pop	{r7, pc}

08022e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8022e4a:	b580      	push	{r7, lr}
 8022e4c:	b084      	sub	sp, #16
 8022e4e:	af00      	add	r7, sp, #0
 8022e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8022e52:	687b      	ldr	r3, [r7, #4]
 8022e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8022e58:	f7ff feb6 	bl	8022bc8 <HAL_GetTick>
 8022e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022e64:	b2db      	uxtb	r3, r3
 8022e66:	2b02      	cmp	r3, #2
 8022e68:	d008      	beq.n	8022e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	2280      	movs	r2, #128	; 0x80
 8022e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	2200      	movs	r2, #0
 8022e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8022e78:	2301      	movs	r3, #1
 8022e7a:	e052      	b.n	8022f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	681a      	ldr	r2, [r3, #0]
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	681b      	ldr	r3, [r3, #0]
 8022e86:	f022 0216 	bic.w	r2, r2, #22
 8022e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8022e8c:	687b      	ldr	r3, [r7, #4]
 8022e8e:	681b      	ldr	r3, [r3, #0]
 8022e90:	695a      	ldr	r2, [r3, #20]
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	681b      	ldr	r3, [r3, #0]
 8022e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d103      	bne.n	8022eac <HAL_DMA_Abort+0x62>
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022ea8:	2b00      	cmp	r3, #0
 8022eaa:	d007      	beq.n	8022ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	681a      	ldr	r2, [r3, #0]
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	681b      	ldr	r3, [r3, #0]
 8022eb6:	f022 0208 	bic.w	r2, r2, #8
 8022eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	681b      	ldr	r3, [r3, #0]
 8022ec0:	681a      	ldr	r2, [r3, #0]
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	f022 0201 	bic.w	r2, r2, #1
 8022eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022ecc:	e013      	b.n	8022ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022ece:	f7ff fe7b 	bl	8022bc8 <HAL_GetTick>
 8022ed2:	4602      	mov	r2, r0
 8022ed4:	68bb      	ldr	r3, [r7, #8]
 8022ed6:	1ad3      	subs	r3, r2, r3
 8022ed8:	2b05      	cmp	r3, #5
 8022eda:	d90c      	bls.n	8022ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	2220      	movs	r2, #32
 8022ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	2203      	movs	r2, #3
 8022ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	2200      	movs	r2, #0
 8022eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8022ef2:	2303      	movs	r3, #3
 8022ef4:	e015      	b.n	8022f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	681b      	ldr	r3, [r3, #0]
 8022efc:	f003 0301 	and.w	r3, r3, #1
 8022f00:	2b00      	cmp	r3, #0
 8022f02:	d1e4      	bne.n	8022ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022f04:	687b      	ldr	r3, [r7, #4]
 8022f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022f08:	223f      	movs	r2, #63	; 0x3f
 8022f0a:	409a      	lsls	r2, r3
 8022f0c:	68fb      	ldr	r3, [r7, #12]
 8022f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	2201      	movs	r2, #1
 8022f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	2200      	movs	r2, #0
 8022f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8022f20:	2300      	movs	r3, #0
}
 8022f22:	4618      	mov	r0, r3
 8022f24:	3710      	adds	r7, #16
 8022f26:	46bd      	mov	sp, r7
 8022f28:	bd80      	pop	{r7, pc}

08022f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8022f2a:	b480      	push	{r7}
 8022f2c:	b083      	sub	sp, #12
 8022f2e:	af00      	add	r7, sp, #0
 8022f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022f32:	687b      	ldr	r3, [r7, #4]
 8022f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022f38:	b2db      	uxtb	r3, r3
 8022f3a:	2b02      	cmp	r3, #2
 8022f3c:	d004      	beq.n	8022f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022f3e:	687b      	ldr	r3, [r7, #4]
 8022f40:	2280      	movs	r2, #128	; 0x80
 8022f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8022f44:	2301      	movs	r3, #1
 8022f46:	e00c      	b.n	8022f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	2205      	movs	r2, #5
 8022f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	681b      	ldr	r3, [r3, #0]
 8022f54:	681a      	ldr	r2, [r3, #0]
 8022f56:	687b      	ldr	r3, [r7, #4]
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	f022 0201 	bic.w	r2, r2, #1
 8022f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022f60:	2300      	movs	r3, #0
}
 8022f62:	4618      	mov	r0, r3
 8022f64:	370c      	adds	r7, #12
 8022f66:	46bd      	mov	sp, r7
 8022f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f6c:	4770      	bx	lr
	...

08022f70 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8022f70:	b580      	push	{r7, lr}
 8022f72:	b088      	sub	sp, #32
 8022f74:	af00      	add	r7, sp, #0
 8022f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8022f78:	2300      	movs	r3, #0
 8022f7a:	61fb      	str	r3, [r7, #28]
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8022f80:	4ba1      	ldr	r3, [pc, #644]	; (8023208 <HAL_ETH_Init+0x298>)
 8022f82:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8022f84:	2300      	movs	r3, #0
 8022f86:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8022f88:	2300      	movs	r3, #0
 8022f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	2b00      	cmp	r3, #0
 8022f90:	d101      	bne.n	8022f96 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8022f92:	2301      	movs	r3, #1
 8022f94:	e182      	b.n	802329c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8022f9c:	b2db      	uxtb	r3, r3
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d106      	bne.n	8022fb0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	2200      	movs	r2, #0
 8022fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8022faa:	6878      	ldr	r0, [r7, #4]
 8022fac:	f004 fba2 	bl	80276f4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022fb0:	2300      	movs	r3, #0
 8022fb2:	60bb      	str	r3, [r7, #8]
 8022fb4:	4b95      	ldr	r3, [pc, #596]	; (802320c <HAL_ETH_Init+0x29c>)
 8022fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fb8:	4a94      	ldr	r2, [pc, #592]	; (802320c <HAL_ETH_Init+0x29c>)
 8022fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8022fc0:	4b92      	ldr	r3, [pc, #584]	; (802320c <HAL_ETH_Init+0x29c>)
 8022fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fc8:	60bb      	str	r3, [r7, #8]
 8022fca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8022fcc:	4b90      	ldr	r3, [pc, #576]	; (8023210 <HAL_ETH_Init+0x2a0>)
 8022fce:	685b      	ldr	r3, [r3, #4]
 8022fd0:	4a8f      	ldr	r2, [pc, #572]	; (8023210 <HAL_ETH_Init+0x2a0>)
 8022fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8022fd6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8022fd8:	4b8d      	ldr	r3, [pc, #564]	; (8023210 <HAL_ETH_Init+0x2a0>)
 8022fda:	685a      	ldr	r2, [r3, #4]
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	6a1b      	ldr	r3, [r3, #32]
 8022fe0:	498b      	ldr	r1, [pc, #556]	; (8023210 <HAL_ETH_Init+0x2a0>)
 8022fe2:	4313      	orrs	r3, r2
 8022fe4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8022fe6:	687b      	ldr	r3, [r7, #4]
 8022fe8:	681b      	ldr	r3, [r3, #0]
 8022fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	687a      	ldr	r2, [r7, #4]
 8022ff2:	6812      	ldr	r2, [r2, #0]
 8022ff4:	f043 0301 	orr.w	r3, r3, #1
 8022ff8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022ffc:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8022ffe:	f7ff fde3 	bl	8022bc8 <HAL_GetTick>
 8023002:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8023004:	e011      	b.n	802302a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8023006:	f7ff fddf 	bl	8022bc8 <HAL_GetTick>
 802300a:	4602      	mov	r2, r0
 802300c:	697b      	ldr	r3, [r7, #20]
 802300e:	1ad3      	subs	r3, r2, r3
 8023010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023014:	d909      	bls.n	802302a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	2203      	movs	r2, #3
 802301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	2200      	movs	r2, #0
 8023022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8023026:	2303      	movs	r3, #3
 8023028:	e138      	b.n	802329c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023032:	681b      	ldr	r3, [r3, #0]
 8023034:	f003 0301 	and.w	r3, r3, #1
 8023038:	2b00      	cmp	r3, #0
 802303a:	d1e4      	bne.n	8023006 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	681b      	ldr	r3, [r3, #0]
 8023040:	691b      	ldr	r3, [r3, #16]
 8023042:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8023044:	69fb      	ldr	r3, [r7, #28]
 8023046:	f023 031c 	bic.w	r3, r3, #28
 802304a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 802304c:	f001 ffe4 	bl	8025018 <HAL_RCC_GetHCLKFreq>
 8023050:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8023052:	69bb      	ldr	r3, [r7, #24]
 8023054:	4a6f      	ldr	r2, [pc, #444]	; (8023214 <HAL_ETH_Init+0x2a4>)
 8023056:	4293      	cmp	r3, r2
 8023058:	d908      	bls.n	802306c <HAL_ETH_Init+0xfc>
 802305a:	69bb      	ldr	r3, [r7, #24]
 802305c:	4a6e      	ldr	r2, [pc, #440]	; (8023218 <HAL_ETH_Init+0x2a8>)
 802305e:	4293      	cmp	r3, r2
 8023060:	d804      	bhi.n	802306c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8023062:	69fb      	ldr	r3, [r7, #28]
 8023064:	f043 0308 	orr.w	r3, r3, #8
 8023068:	61fb      	str	r3, [r7, #28]
 802306a:	e027      	b.n	80230bc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 802306c:	69bb      	ldr	r3, [r7, #24]
 802306e:	4a6a      	ldr	r2, [pc, #424]	; (8023218 <HAL_ETH_Init+0x2a8>)
 8023070:	4293      	cmp	r3, r2
 8023072:	d908      	bls.n	8023086 <HAL_ETH_Init+0x116>
 8023074:	69bb      	ldr	r3, [r7, #24]
 8023076:	4a64      	ldr	r2, [pc, #400]	; (8023208 <HAL_ETH_Init+0x298>)
 8023078:	4293      	cmp	r3, r2
 802307a:	d204      	bcs.n	8023086 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 802307c:	69fb      	ldr	r3, [r7, #28]
 802307e:	f043 030c 	orr.w	r3, r3, #12
 8023082:	61fb      	str	r3, [r7, #28]
 8023084:	e01a      	b.n	80230bc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8023086:	69bb      	ldr	r3, [r7, #24]
 8023088:	4a5f      	ldr	r2, [pc, #380]	; (8023208 <HAL_ETH_Init+0x298>)
 802308a:	4293      	cmp	r3, r2
 802308c:	d303      	bcc.n	8023096 <HAL_ETH_Init+0x126>
 802308e:	69bb      	ldr	r3, [r7, #24]
 8023090:	4a62      	ldr	r2, [pc, #392]	; (802321c <HAL_ETH_Init+0x2ac>)
 8023092:	4293      	cmp	r3, r2
 8023094:	d911      	bls.n	80230ba <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8023096:	69bb      	ldr	r3, [r7, #24]
 8023098:	4a60      	ldr	r2, [pc, #384]	; (802321c <HAL_ETH_Init+0x2ac>)
 802309a:	4293      	cmp	r3, r2
 802309c:	d908      	bls.n	80230b0 <HAL_ETH_Init+0x140>
 802309e:	69bb      	ldr	r3, [r7, #24]
 80230a0:	4a5f      	ldr	r2, [pc, #380]	; (8023220 <HAL_ETH_Init+0x2b0>)
 80230a2:	4293      	cmp	r3, r2
 80230a4:	d804      	bhi.n	80230b0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80230a6:	69fb      	ldr	r3, [r7, #28]
 80230a8:	f043 0304 	orr.w	r3, r3, #4
 80230ac:	61fb      	str	r3, [r7, #28]
 80230ae:	e005      	b.n	80230bc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80230b0:	69fb      	ldr	r3, [r7, #28]
 80230b2:	f043 0310 	orr.w	r3, r3, #16
 80230b6:	61fb      	str	r3, [r7, #28]
 80230b8:	e000      	b.n	80230bc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80230ba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	69fa      	ldr	r2, [r7, #28]
 80230c2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80230c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80230c8:	2100      	movs	r1, #0
 80230ca:	6878      	ldr	r0, [r7, #4]
 80230cc:	f000 fc16 	bl	80238fc <HAL_ETH_WritePHYRegister>
 80230d0:	4603      	mov	r3, r0
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d00b      	beq.n	80230ee <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80230d6:	2301      	movs	r3, #1
 80230d8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80230da:	6939      	ldr	r1, [r7, #16]
 80230dc:	6878      	ldr	r0, [r7, #4]
 80230de:	f000 fca3 	bl	8023a28 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	2201      	movs	r2, #1
 80230e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80230ea:	2301      	movs	r3, #1
 80230ec:	e0d6      	b.n	802329c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80230ee:	20ff      	movs	r0, #255	; 0xff
 80230f0:	f7ff fd76 	bl	8022be0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	685b      	ldr	r3, [r3, #4]
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	f000 80a4 	beq.w	8023246 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80230fe:	f7ff fd63 	bl	8022bc8 <HAL_GetTick>
 8023102:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8023104:	f107 030c 	add.w	r3, r7, #12
 8023108:	461a      	mov	r2, r3
 802310a:	2101      	movs	r1, #1
 802310c:	6878      	ldr	r0, [r7, #4]
 802310e:	f000 fb8d 	bl	802382c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8023112:	f7ff fd59 	bl	8022bc8 <HAL_GetTick>
 8023116:	4602      	mov	r2, r0
 8023118:	697b      	ldr	r3, [r7, #20]
 802311a:	1ad3      	subs	r3, r2, r3
 802311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023120:	4293      	cmp	r3, r2
 8023122:	d90f      	bls.n	8023144 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8023124:	2301      	movs	r3, #1
 8023126:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8023128:	6939      	ldr	r1, [r7, #16]
 802312a:	6878      	ldr	r0, [r7, #4]
 802312c:	f000 fc7c 	bl	8023a28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	2201      	movs	r2, #1
 8023134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	2200      	movs	r2, #0
 802313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8023140:	2303      	movs	r3, #3
 8023142:	e0ab      	b.n	802329c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8023144:	68fb      	ldr	r3, [r7, #12]
 8023146:	f003 0304 	and.w	r3, r3, #4
 802314a:	2b00      	cmp	r3, #0
 802314c:	d0da      	beq.n	8023104 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 802314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023152:	2100      	movs	r1, #0
 8023154:	6878      	ldr	r0, [r7, #4]
 8023156:	f000 fbd1 	bl	80238fc <HAL_ETH_WritePHYRegister>
 802315a:	4603      	mov	r3, r0
 802315c:	2b00      	cmp	r3, #0
 802315e:	d00b      	beq.n	8023178 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8023160:	2301      	movs	r3, #1
 8023162:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8023164:	6939      	ldr	r1, [r7, #16]
 8023166:	6878      	ldr	r0, [r7, #4]
 8023168:	f000 fc5e 	bl	8023a28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 802316c:	687b      	ldr	r3, [r7, #4]
 802316e:	2201      	movs	r2, #1
 8023170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8023174:	2301      	movs	r3, #1
 8023176:	e091      	b.n	802329c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8023178:	f7ff fd26 	bl	8022bc8 <HAL_GetTick>
 802317c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 802317e:	f107 030c 	add.w	r3, r7, #12
 8023182:	461a      	mov	r2, r3
 8023184:	2101      	movs	r1, #1
 8023186:	6878      	ldr	r0, [r7, #4]
 8023188:	f000 fb50 	bl	802382c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 802318c:	f7ff fd1c 	bl	8022bc8 <HAL_GetTick>
 8023190:	4602      	mov	r2, r0
 8023192:	697b      	ldr	r3, [r7, #20]
 8023194:	1ad3      	subs	r3, r2, r3
 8023196:	f241 3288 	movw	r2, #5000	; 0x1388
 802319a:	4293      	cmp	r3, r2
 802319c:	d90f      	bls.n	80231be <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 802319e:	2301      	movs	r3, #1
 80231a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80231a2:	6939      	ldr	r1, [r7, #16]
 80231a4:	6878      	ldr	r0, [r7, #4]
 80231a6:	f000 fc3f 	bl	8023a28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	2201      	movs	r2, #1
 80231ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	2200      	movs	r2, #0
 80231b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80231ba:	2303      	movs	r3, #3
 80231bc:	e06e      	b.n	802329c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80231be:	68fb      	ldr	r3, [r7, #12]
 80231c0:	f003 0320 	and.w	r3, r3, #32
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	d0da      	beq.n	802317e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80231c8:	f107 030c 	add.w	r3, r7, #12
 80231cc:	461a      	mov	r2, r3
 80231ce:	2110      	movs	r1, #16
 80231d0:	6878      	ldr	r0, [r7, #4]
 80231d2:	f000 fb2b 	bl	802382c <HAL_ETH_ReadPHYRegister>
 80231d6:	4603      	mov	r3, r0
 80231d8:	2b00      	cmp	r3, #0
 80231da:	d00b      	beq.n	80231f4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80231dc:	2301      	movs	r3, #1
 80231de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80231e0:	6939      	ldr	r1, [r7, #16]
 80231e2:	6878      	ldr	r0, [r7, #4]
 80231e4:	f000 fc20 	bl	8023a28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	2201      	movs	r2, #1
 80231ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80231f0:	2301      	movs	r3, #1
 80231f2:	e053      	b.n	802329c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80231f4:	68fb      	ldr	r3, [r7, #12]
 80231f6:	f003 0304 	and.w	r3, r3, #4
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	d012      	beq.n	8023224 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023204:	60da      	str	r2, [r3, #12]
 8023206:	e010      	b.n	802322a <HAL_ETH_Init+0x2ba>
 8023208:	03938700 	.word	0x03938700
 802320c:	40023800 	.word	0x40023800
 8023210:	40013800 	.word	0x40013800
 8023214:	01312cff 	.word	0x01312cff
 8023218:	02160ebf 	.word	0x02160ebf
 802321c:	05f5e0ff 	.word	0x05f5e0ff
 8023220:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	2200      	movs	r2, #0
 8023228:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	f003 0302 	and.w	r3, r3, #2
 8023230:	2b00      	cmp	r3, #0
 8023232:	d003      	beq.n	802323c <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	2200      	movs	r2, #0
 8023238:	609a      	str	r2, [r3, #8]
 802323a:	e026      	b.n	802328a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023242:	609a      	str	r2, [r3, #8]
 8023244:	e021      	b.n	802328a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	68db      	ldr	r3, [r3, #12]
 802324a:	08db      	lsrs	r3, r3, #3
 802324c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 802324e:	687b      	ldr	r3, [r7, #4]
 8023250:	689b      	ldr	r3, [r3, #8]
 8023252:	085b      	lsrs	r3, r3, #1
 8023254:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8023256:	4313      	orrs	r3, r2
 8023258:	b29b      	uxth	r3, r3
 802325a:	461a      	mov	r2, r3
 802325c:	2100      	movs	r1, #0
 802325e:	6878      	ldr	r0, [r7, #4]
 8023260:	f000 fb4c 	bl	80238fc <HAL_ETH_WritePHYRegister>
 8023264:	4603      	mov	r3, r0
 8023266:	2b00      	cmp	r3, #0
 8023268:	d00b      	beq.n	8023282 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 802326a:	2301      	movs	r3, #1
 802326c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 802326e:	6939      	ldr	r1, [r7, #16]
 8023270:	6878      	ldr	r0, [r7, #4]
 8023272:	f000 fbd9 	bl	8023a28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	2201      	movs	r2, #1
 802327a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 802327e:	2301      	movs	r3, #1
 8023280:	e00c      	b.n	802329c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8023282:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023286:	f7ff fcab 	bl	8022be0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 802328a:	6939      	ldr	r1, [r7, #16]
 802328c:	6878      	ldr	r0, [r7, #4]
 802328e:	f000 fbcb 	bl	8023a28 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8023292:	687b      	ldr	r3, [r7, #4]
 8023294:	2201      	movs	r2, #1
 8023296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 802329a:	2300      	movs	r3, #0
}
 802329c:	4618      	mov	r0, r3
 802329e:	3720      	adds	r7, #32
 80232a0:	46bd      	mov	sp, r7
 80232a2:	bd80      	pop	{r7, pc}

080232a4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80232a4:	b480      	push	{r7}
 80232a6:	b087      	sub	sp, #28
 80232a8:	af00      	add	r7, sp, #0
 80232aa:	60f8      	str	r0, [r7, #12]
 80232ac:	60b9      	str	r1, [r7, #8]
 80232ae:	607a      	str	r2, [r7, #4]
 80232b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80232b2:	2300      	movs	r3, #0
 80232b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80232b6:	68fb      	ldr	r3, [r7, #12]
 80232b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80232bc:	2b01      	cmp	r3, #1
 80232be:	d101      	bne.n	80232c4 <HAL_ETH_DMATxDescListInit+0x20>
 80232c0:	2302      	movs	r3, #2
 80232c2:	e051      	b.n	8023368 <HAL_ETH_DMATxDescListInit+0xc4>
 80232c4:	68fb      	ldr	r3, [r7, #12]
 80232c6:	2201      	movs	r2, #1
 80232c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80232cc:	68fb      	ldr	r3, [r7, #12]
 80232ce:	2202      	movs	r2, #2
 80232d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	68ba      	ldr	r2, [r7, #8]
 80232d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80232da:	2300      	movs	r3, #0
 80232dc:	617b      	str	r3, [r7, #20]
 80232de:	e030      	b.n	8023342 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80232e0:	697b      	ldr	r3, [r7, #20]
 80232e2:	015b      	lsls	r3, r3, #5
 80232e4:	68ba      	ldr	r2, [r7, #8]
 80232e6:	4413      	add	r3, r2
 80232e8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80232ea:	693b      	ldr	r3, [r7, #16]
 80232ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80232f0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80232f2:	697b      	ldr	r3, [r7, #20]
 80232f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80232f8:	fb02 f303 	mul.w	r3, r2, r3
 80232fc:	687a      	ldr	r2, [r7, #4]
 80232fe:	4413      	add	r3, r2
 8023300:	461a      	mov	r2, r3
 8023302:	693b      	ldr	r3, [r7, #16]
 8023304:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8023306:	68fb      	ldr	r3, [r7, #12]
 8023308:	69db      	ldr	r3, [r3, #28]
 802330a:	2b00      	cmp	r3, #0
 802330c:	d105      	bne.n	802331a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 802330e:	693b      	ldr	r3, [r7, #16]
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8023316:	693b      	ldr	r3, [r7, #16]
 8023318:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 802331a:	683b      	ldr	r3, [r7, #0]
 802331c:	3b01      	subs	r3, #1
 802331e:	697a      	ldr	r2, [r7, #20]
 8023320:	429a      	cmp	r2, r3
 8023322:	d208      	bcs.n	8023336 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8023324:	697b      	ldr	r3, [r7, #20]
 8023326:	3301      	adds	r3, #1
 8023328:	015b      	lsls	r3, r3, #5
 802332a:	68ba      	ldr	r2, [r7, #8]
 802332c:	4413      	add	r3, r2
 802332e:	461a      	mov	r2, r3
 8023330:	693b      	ldr	r3, [r7, #16]
 8023332:	60da      	str	r2, [r3, #12]
 8023334:	e002      	b.n	802333c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8023336:	68ba      	ldr	r2, [r7, #8]
 8023338:	693b      	ldr	r3, [r7, #16]
 802333a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 802333c:	697b      	ldr	r3, [r7, #20]
 802333e:	3301      	adds	r3, #1
 8023340:	617b      	str	r3, [r7, #20]
 8023342:	697a      	ldr	r2, [r7, #20]
 8023344:	683b      	ldr	r3, [r7, #0]
 8023346:	429a      	cmp	r2, r3
 8023348:	d3ca      	bcc.n	80232e0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	681a      	ldr	r2, [r3, #0]
 802334e:	68bb      	ldr	r3, [r7, #8]
 8023350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023354:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	2201      	movs	r2, #1
 802335a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 802335e:	68fb      	ldr	r3, [r7, #12]
 8023360:	2200      	movs	r2, #0
 8023362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8023366:	2300      	movs	r3, #0
}
 8023368:	4618      	mov	r0, r3
 802336a:	371c      	adds	r7, #28
 802336c:	46bd      	mov	sp, r7
 802336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023372:	4770      	bx	lr

08023374 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8023374:	b480      	push	{r7}
 8023376:	b087      	sub	sp, #28
 8023378:	af00      	add	r7, sp, #0
 802337a:	60f8      	str	r0, [r7, #12]
 802337c:	60b9      	str	r1, [r7, #8]
 802337e:	607a      	str	r2, [r7, #4]
 8023380:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8023382:	2300      	movs	r3, #0
 8023384:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8023386:	68fb      	ldr	r3, [r7, #12]
 8023388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802338c:	2b01      	cmp	r3, #1
 802338e:	d101      	bne.n	8023394 <HAL_ETH_DMARxDescListInit+0x20>
 8023390:	2302      	movs	r3, #2
 8023392:	e055      	b.n	8023440 <HAL_ETH_DMARxDescListInit+0xcc>
 8023394:	68fb      	ldr	r3, [r7, #12]
 8023396:	2201      	movs	r2, #1
 8023398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 802339c:	68fb      	ldr	r3, [r7, #12]
 802339e:	2202      	movs	r2, #2
 80233a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80233a4:	68fb      	ldr	r3, [r7, #12]
 80233a6:	68ba      	ldr	r2, [r7, #8]
 80233a8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80233aa:	2300      	movs	r3, #0
 80233ac:	617b      	str	r3, [r7, #20]
 80233ae:	e034      	b.n	802341a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80233b0:	697b      	ldr	r3, [r7, #20]
 80233b2:	015b      	lsls	r3, r3, #5
 80233b4:	68ba      	ldr	r2, [r7, #8]
 80233b6:	4413      	add	r3, r2
 80233b8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80233ba:	693b      	ldr	r3, [r7, #16]
 80233bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80233c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80233c2:	693b      	ldr	r3, [r7, #16]
 80233c4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80233c8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80233ca:	697b      	ldr	r3, [r7, #20]
 80233cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80233d0:	fb02 f303 	mul.w	r3, r2, r3
 80233d4:	687a      	ldr	r2, [r7, #4]
 80233d6:	4413      	add	r3, r2
 80233d8:	461a      	mov	r2, r3
 80233da:	693b      	ldr	r3, [r7, #16]
 80233dc:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	699b      	ldr	r3, [r3, #24]
 80233e2:	2b01      	cmp	r3, #1
 80233e4:	d105      	bne.n	80233f2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80233e6:	693b      	ldr	r3, [r7, #16]
 80233e8:	685b      	ldr	r3, [r3, #4]
 80233ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80233ee:	693b      	ldr	r3, [r7, #16]
 80233f0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80233f2:	683b      	ldr	r3, [r7, #0]
 80233f4:	3b01      	subs	r3, #1
 80233f6:	697a      	ldr	r2, [r7, #20]
 80233f8:	429a      	cmp	r2, r3
 80233fa:	d208      	bcs.n	802340e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80233fc:	697b      	ldr	r3, [r7, #20]
 80233fe:	3301      	adds	r3, #1
 8023400:	015b      	lsls	r3, r3, #5
 8023402:	68ba      	ldr	r2, [r7, #8]
 8023404:	4413      	add	r3, r2
 8023406:	461a      	mov	r2, r3
 8023408:	693b      	ldr	r3, [r7, #16]
 802340a:	60da      	str	r2, [r3, #12]
 802340c:	e002      	b.n	8023414 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 802340e:	68ba      	ldr	r2, [r7, #8]
 8023410:	693b      	ldr	r3, [r7, #16]
 8023412:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8023414:	697b      	ldr	r3, [r7, #20]
 8023416:	3301      	adds	r3, #1
 8023418:	617b      	str	r3, [r7, #20]
 802341a:	697a      	ldr	r2, [r7, #20]
 802341c:	683b      	ldr	r3, [r7, #0]
 802341e:	429a      	cmp	r2, r3
 8023420:	d3c6      	bcc.n	80233b0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8023422:	68fb      	ldr	r3, [r7, #12]
 8023424:	681a      	ldr	r2, [r3, #0]
 8023426:	68bb      	ldr	r3, [r7, #8]
 8023428:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 802342c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 802342e:	68fb      	ldr	r3, [r7, #12]
 8023430:	2201      	movs	r2, #1
 8023432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8023436:	68fb      	ldr	r3, [r7, #12]
 8023438:	2200      	movs	r2, #0
 802343a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 802343e:	2300      	movs	r3, #0
}
 8023440:	4618      	mov	r0, r3
 8023442:	371c      	adds	r7, #28
 8023444:	46bd      	mov	sp, r7
 8023446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802344a:	4770      	bx	lr

0802344c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 802344c:	b480      	push	{r7}
 802344e:	b087      	sub	sp, #28
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
 8023454:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8023456:	2300      	movs	r3, #0
 8023458:	617b      	str	r3, [r7, #20]
 802345a:	2300      	movs	r3, #0
 802345c:	60fb      	str	r3, [r7, #12]
 802345e:	2300      	movs	r3, #0
 8023460:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023468:	2b01      	cmp	r3, #1
 802346a:	d101      	bne.n	8023470 <HAL_ETH_TransmitFrame+0x24>
 802346c:	2302      	movs	r3, #2
 802346e:	e0cc      	b.n	802360a <HAL_ETH_TransmitFrame+0x1be>
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	2201      	movs	r2, #1
 8023474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	2202      	movs	r2, #2
 802347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8023480:	683b      	ldr	r3, [r7, #0]
 8023482:	2b00      	cmp	r3, #0
 8023484:	d109      	bne.n	802349a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	2201      	movs	r2, #1
 802348a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 802348e:	687b      	ldr	r3, [r7, #4]
 8023490:	2200      	movs	r2, #0
 8023492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8023496:	2301      	movs	r3, #1
 8023498:	e0b7      	b.n	802360a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	da09      	bge.n	80234b8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	2212      	movs	r2, #18
 80234a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	2200      	movs	r2, #0
 80234b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80234b4:	2301      	movs	r3, #1
 80234b6:	e0a8      	b.n	802360a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80234b8:	683b      	ldr	r3, [r7, #0]
 80234ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80234be:	4293      	cmp	r3, r2
 80234c0:	d915      	bls.n	80234ee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80234c2:	683b      	ldr	r3, [r7, #0]
 80234c4:	4a54      	ldr	r2, [pc, #336]	; (8023618 <HAL_ETH_TransmitFrame+0x1cc>)
 80234c6:	fba2 2303 	umull	r2, r3, r2, r3
 80234ca:	0a9b      	lsrs	r3, r3, #10
 80234cc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80234ce:	683a      	ldr	r2, [r7, #0]
 80234d0:	4b51      	ldr	r3, [pc, #324]	; (8023618 <HAL_ETH_TransmitFrame+0x1cc>)
 80234d2:	fba3 1302 	umull	r1, r3, r3, r2
 80234d6:	0a9b      	lsrs	r3, r3, #10
 80234d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80234dc:	fb01 f303 	mul.w	r3, r1, r3
 80234e0:	1ad3      	subs	r3, r2, r3
 80234e2:	2b00      	cmp	r3, #0
 80234e4:	d005      	beq.n	80234f2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80234e6:	697b      	ldr	r3, [r7, #20]
 80234e8:	3301      	adds	r3, #1
 80234ea:	617b      	str	r3, [r7, #20]
 80234ec:	e001      	b.n	80234f2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80234ee:	2301      	movs	r3, #1
 80234f0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80234f2:	697b      	ldr	r3, [r7, #20]
 80234f4:	2b01      	cmp	r3, #1
 80234f6:	d11c      	bne.n	8023532 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234fc:	681a      	ldr	r2, [r3, #0]
 80234fe:	687b      	ldr	r3, [r7, #4]
 8023500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023502:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8023506:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802350c:	683a      	ldr	r2, [r7, #0]
 802350e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8023512:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023518:	681a      	ldr	r2, [r3, #0]
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802351e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8023522:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023528:	68db      	ldr	r3, [r3, #12]
 802352a:	461a      	mov	r2, r3
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	62da      	str	r2, [r3, #44]	; 0x2c
 8023530:	e04b      	b.n	80235ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8023532:	2300      	movs	r3, #0
 8023534:	613b      	str	r3, [r7, #16]
 8023536:	e044      	b.n	80235c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802353c:	681a      	ldr	r2, [r3, #0]
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023542:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8023546:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8023548:	693b      	ldr	r3, [r7, #16]
 802354a:	2b00      	cmp	r3, #0
 802354c:	d107      	bne.n	802355e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 802354e:	687b      	ldr	r3, [r7, #4]
 8023550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023552:	681a      	ldr	r2, [r3, #0]
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802355c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023562:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8023566:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8023568:	697b      	ldr	r3, [r7, #20]
 802356a:	3b01      	subs	r3, #1
 802356c:	693a      	ldr	r2, [r7, #16]
 802356e:	429a      	cmp	r2, r3
 8023570:	d116      	bne.n	80235a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023576:	681a      	ldr	r2, [r3, #0]
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802357c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8023580:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8023582:	697b      	ldr	r3, [r7, #20]
 8023584:	4a25      	ldr	r2, [pc, #148]	; (802361c <HAL_ETH_TransmitFrame+0x1d0>)
 8023586:	fb03 f202 	mul.w	r2, r3, r2
 802358a:	683b      	ldr	r3, [r7, #0]
 802358c:	4413      	add	r3, r2
 802358e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023592:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8023594:	687b      	ldr	r3, [r7, #4]
 8023596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023598:	68fa      	ldr	r2, [r7, #12]
 802359a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 802359e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235a4:	681a      	ldr	r2, [r3, #0]
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80235ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235b4:	68db      	ldr	r3, [r3, #12]
 80235b6:	461a      	mov	r2, r3
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80235bc:	693b      	ldr	r3, [r7, #16]
 80235be:	3301      	adds	r3, #1
 80235c0:	613b      	str	r3, [r7, #16]
 80235c2:	693a      	ldr	r2, [r7, #16]
 80235c4:	697b      	ldr	r3, [r7, #20]
 80235c6:	429a      	cmp	r2, r3
 80235c8:	d3b6      	bcc.n	8023538 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80235d2:	695b      	ldr	r3, [r3, #20]
 80235d4:	f003 0304 	and.w	r3, r3, #4
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d00d      	beq.n	80235f8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80235e4:	461a      	mov	r2, r3
 80235e6:	2304      	movs	r3, #4
 80235e8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	681b      	ldr	r3, [r3, #0]
 80235ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80235f2:	461a      	mov	r2, r3
 80235f4:	2300      	movs	r3, #0
 80235f6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	2201      	movs	r2, #1
 80235fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	2200      	movs	r2, #0
 8023604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8023608:	2300      	movs	r3, #0
}
 802360a:	4618      	mov	r0, r3
 802360c:	371c      	adds	r7, #28
 802360e:	46bd      	mov	sp, r7
 8023610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023614:	4770      	bx	lr
 8023616:	bf00      	nop
 8023618:	ac02b00b 	.word	0xac02b00b
 802361c:	fffffa0c 	.word	0xfffffa0c

08023620 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8023620:	b480      	push	{r7}
 8023622:	b085      	sub	sp, #20
 8023624:	af00      	add	r7, sp, #0
 8023626:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8023628:	2300      	movs	r3, #0
 802362a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023632:	2b01      	cmp	r3, #1
 8023634:	d101      	bne.n	802363a <HAL_ETH_GetReceivedFrame+0x1a>
 8023636:	2302      	movs	r3, #2
 8023638:	e070      	b.n	802371c <HAL_ETH_GetReceivedFrame+0xfc>
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	2201      	movs	r2, #1
 802363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	2202      	movs	r2, #2
 8023646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	2b00      	cmp	r3, #0
 8023652:	db5a      	blt.n	802370a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802365e:	2b00      	cmp	r3, #0
 8023660:	d030      	beq.n	80236c4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023666:	1c5a      	adds	r2, r3, #1
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023670:	2b01      	cmp	r3, #1
 8023672:	d103      	bne.n	802367c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	0c1b      	lsrs	r3, r3, #16
 802368c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023690:	3b04      	subs	r3, #4
 8023692:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	68fa      	ldr	r2, [r7, #12]
 8023698:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802369e:	689a      	ldr	r2, [r3, #8]
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236a8:	68db      	ldr	r3, [r3, #12]
 80236aa:	461a      	mov	r2, r3
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	2201      	movs	r2, #1
 80236b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	2200      	movs	r2, #0
 80236bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80236c0:	2300      	movs	r3, #0
 80236c2:	e02b      	b.n	802371c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236c8:	681b      	ldr	r3, [r3, #0]
 80236ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	d010      	beq.n	80236f4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	2200      	movs	r2, #0
 80236de:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	2201      	movs	r2, #1
 80236e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236ea:	68db      	ldr	r3, [r3, #12]
 80236ec:	461a      	mov	r2, r3
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	629a      	str	r2, [r3, #40]	; 0x28
 80236f2:	e00a      	b.n	802370a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236f8:	1c5a      	adds	r2, r3, #1
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023702:	68db      	ldr	r3, [r3, #12]
 8023704:	461a      	mov	r2, r3
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	2201      	movs	r2, #1
 802370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	2200      	movs	r2, #0
 8023716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 802371a:	2301      	movs	r3, #1
}
 802371c:	4618      	mov	r0, r3
 802371e:	3714      	adds	r7, #20
 8023720:	46bd      	mov	sp, r7
 8023722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023726:	4770      	bx	lr

08023728 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8023728:	b580      	push	{r7, lr}
 802372a:	b082      	sub	sp, #8
 802372c:	af00      	add	r7, sp, #0
 802372e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023738:	695b      	ldr	r3, [r3, #20]
 802373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802373e:	2b40      	cmp	r3, #64	; 0x40
 8023740:	d112      	bne.n	8023768 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8023742:	6878      	ldr	r0, [r7, #4]
 8023744:	f000 f85e 	bl	8023804 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023750:	461a      	mov	r2, r3
 8023752:	2340      	movs	r3, #64	; 0x40
 8023754:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	2201      	movs	r2, #1
 802375a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	2200      	movs	r2, #0
 8023762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023766:	e01a      	b.n	802379e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023770:	695b      	ldr	r3, [r3, #20]
 8023772:	f003 0301 	and.w	r3, r3, #1
 8023776:	2b01      	cmp	r3, #1
 8023778:	d111      	bne.n	802379e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 802377a:	6878      	ldr	r0, [r7, #4]
 802377c:	f000 f838 	bl	80237f0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	681b      	ldr	r3, [r3, #0]
 8023784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023788:	461a      	mov	r2, r3
 802378a:	2301      	movs	r3, #1
 802378c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 802378e:	687b      	ldr	r3, [r7, #4]
 8023790:	2201      	movs	r2, #1
 8023792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8023796:	687b      	ldr	r3, [r7, #4]
 8023798:	2200      	movs	r2, #0
 802379a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 802379e:	687b      	ldr	r3, [r7, #4]
 80237a0:	681b      	ldr	r3, [r3, #0]
 80237a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80237a6:	461a      	mov	r2, r3
 80237a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80237ac:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80237ae:	687b      	ldr	r3, [r7, #4]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80237b6:	695b      	ldr	r3, [r3, #20]
 80237b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80237bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80237c0:	d112      	bne.n	80237e8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80237c2:	6878      	ldr	r0, [r7, #4]
 80237c4:	f000 f828 	bl	8023818 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80237c8:	687b      	ldr	r3, [r7, #4]
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80237d0:	461a      	mov	r2, r3
 80237d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80237d6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	2201      	movs	r2, #1
 80237dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	2200      	movs	r2, #0
 80237e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80237e8:	bf00      	nop
 80237ea:	3708      	adds	r7, #8
 80237ec:	46bd      	mov	sp, r7
 80237ee:	bd80      	pop	{r7, pc}

080237f0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80237f0:	b480      	push	{r7}
 80237f2:	b083      	sub	sp, #12
 80237f4:	af00      	add	r7, sp, #0
 80237f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80237f8:	bf00      	nop
 80237fa:	370c      	adds	r7, #12
 80237fc:	46bd      	mov	sp, r7
 80237fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023802:	4770      	bx	lr

08023804 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8023804:	b480      	push	{r7}
 8023806:	b083      	sub	sp, #12
 8023808:	af00      	add	r7, sp, #0
 802380a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 802380c:	bf00      	nop
 802380e:	370c      	adds	r7, #12
 8023810:	46bd      	mov	sp, r7
 8023812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023816:	4770      	bx	lr

08023818 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8023818:	b480      	push	{r7}
 802381a:	b083      	sub	sp, #12
 802381c:	af00      	add	r7, sp, #0
 802381e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8023820:	bf00      	nop
 8023822:	370c      	adds	r7, #12
 8023824:	46bd      	mov	sp, r7
 8023826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802382a:	4770      	bx	lr

0802382c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 802382c:	b580      	push	{r7, lr}
 802382e:	b086      	sub	sp, #24
 8023830:	af00      	add	r7, sp, #0
 8023832:	60f8      	str	r0, [r7, #12]
 8023834:	460b      	mov	r3, r1
 8023836:	607a      	str	r2, [r7, #4]
 8023838:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 802383a:	2300      	movs	r3, #0
 802383c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 802383e:	2300      	movs	r3, #0
 8023840:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8023842:	68fb      	ldr	r3, [r7, #12]
 8023844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023848:	b2db      	uxtb	r3, r3
 802384a:	2b82      	cmp	r3, #130	; 0x82
 802384c:	d101      	bne.n	8023852 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 802384e:	2302      	movs	r3, #2
 8023850:	e050      	b.n	80238f4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	2282      	movs	r2, #130	; 0x82
 8023856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 802385a:	68fb      	ldr	r3, [r7, #12]
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	691b      	ldr	r3, [r3, #16]
 8023860:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8023862:	697b      	ldr	r3, [r7, #20]
 8023864:	f003 031c 	and.w	r3, r3, #28
 8023868:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 802386a:	68fb      	ldr	r3, [r7, #12]
 802386c:	8a1b      	ldrh	r3, [r3, #16]
 802386e:	02db      	lsls	r3, r3, #11
 8023870:	b29b      	uxth	r3, r3
 8023872:	697a      	ldr	r2, [r7, #20]
 8023874:	4313      	orrs	r3, r2
 8023876:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8023878:	897b      	ldrh	r3, [r7, #10]
 802387a:	019b      	lsls	r3, r3, #6
 802387c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8023880:	697a      	ldr	r2, [r7, #20]
 8023882:	4313      	orrs	r3, r2
 8023884:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8023886:	697b      	ldr	r3, [r7, #20]
 8023888:	f023 0302 	bic.w	r3, r3, #2
 802388c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 802388e:	697b      	ldr	r3, [r7, #20]
 8023890:	f043 0301 	orr.w	r3, r3, #1
 8023894:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8023896:	68fb      	ldr	r3, [r7, #12]
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	697a      	ldr	r2, [r7, #20]
 802389c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 802389e:	f7ff f993 	bl	8022bc8 <HAL_GetTick>
 80238a2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80238a4:	e015      	b.n	80238d2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80238a6:	f7ff f98f 	bl	8022bc8 <HAL_GetTick>
 80238aa:	4602      	mov	r2, r0
 80238ac:	693b      	ldr	r3, [r7, #16]
 80238ae:	1ad3      	subs	r3, r2, r3
 80238b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80238b4:	d309      	bcc.n	80238ca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80238b6:	68fb      	ldr	r3, [r7, #12]
 80238b8:	2201      	movs	r2, #1
 80238ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80238be:	68fb      	ldr	r3, [r7, #12]
 80238c0:	2200      	movs	r2, #0
 80238c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80238c6:	2303      	movs	r3, #3
 80238c8:	e014      	b.n	80238f4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	691b      	ldr	r3, [r3, #16]
 80238d0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80238d2:	697b      	ldr	r3, [r7, #20]
 80238d4:	f003 0301 	and.w	r3, r3, #1
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d1e4      	bne.n	80238a6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80238dc:	68fb      	ldr	r3, [r7, #12]
 80238de:	681b      	ldr	r3, [r3, #0]
 80238e0:	695b      	ldr	r3, [r3, #20]
 80238e2:	b29b      	uxth	r3, r3
 80238e4:	461a      	mov	r2, r3
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80238ea:	68fb      	ldr	r3, [r7, #12]
 80238ec:	2201      	movs	r2, #1
 80238ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80238f2:	2300      	movs	r3, #0
}
 80238f4:	4618      	mov	r0, r3
 80238f6:	3718      	adds	r7, #24
 80238f8:	46bd      	mov	sp, r7
 80238fa:	bd80      	pop	{r7, pc}

080238fc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80238fc:	b580      	push	{r7, lr}
 80238fe:	b086      	sub	sp, #24
 8023900:	af00      	add	r7, sp, #0
 8023902:	60f8      	str	r0, [r7, #12]
 8023904:	460b      	mov	r3, r1
 8023906:	607a      	str	r2, [r7, #4]
 8023908:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 802390a:	2300      	movs	r3, #0
 802390c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 802390e:	2300      	movs	r3, #0
 8023910:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8023912:	68fb      	ldr	r3, [r7, #12]
 8023914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023918:	b2db      	uxtb	r3, r3
 802391a:	2b42      	cmp	r3, #66	; 0x42
 802391c:	d101      	bne.n	8023922 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 802391e:	2302      	movs	r3, #2
 8023920:	e04e      	b.n	80239c0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8023922:	68fb      	ldr	r3, [r7, #12]
 8023924:	2242      	movs	r2, #66	; 0x42
 8023926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 802392a:	68fb      	ldr	r3, [r7, #12]
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	691b      	ldr	r3, [r3, #16]
 8023930:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8023932:	697b      	ldr	r3, [r7, #20]
 8023934:	f003 031c 	and.w	r3, r3, #28
 8023938:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	8a1b      	ldrh	r3, [r3, #16]
 802393e:	02db      	lsls	r3, r3, #11
 8023940:	b29b      	uxth	r3, r3
 8023942:	697a      	ldr	r2, [r7, #20]
 8023944:	4313      	orrs	r3, r2
 8023946:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8023948:	897b      	ldrh	r3, [r7, #10]
 802394a:	019b      	lsls	r3, r3, #6
 802394c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8023950:	697a      	ldr	r2, [r7, #20]
 8023952:	4313      	orrs	r3, r2
 8023954:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8023956:	697b      	ldr	r3, [r7, #20]
 8023958:	f043 0302 	orr.w	r3, r3, #2
 802395c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 802395e:	697b      	ldr	r3, [r7, #20]
 8023960:	f043 0301 	orr.w	r3, r3, #1
 8023964:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	b29a      	uxth	r2, r3
 802396a:	68fb      	ldr	r3, [r7, #12]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8023970:	68fb      	ldr	r3, [r7, #12]
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	697a      	ldr	r2, [r7, #20]
 8023976:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8023978:	f7ff f926 	bl	8022bc8 <HAL_GetTick>
 802397c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 802397e:	e015      	b.n	80239ac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8023980:	f7ff f922 	bl	8022bc8 <HAL_GetTick>
 8023984:	4602      	mov	r2, r0
 8023986:	693b      	ldr	r3, [r7, #16]
 8023988:	1ad3      	subs	r3, r2, r3
 802398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802398e:	d309      	bcc.n	80239a4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8023990:	68fb      	ldr	r3, [r7, #12]
 8023992:	2201      	movs	r2, #1
 8023994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8023998:	68fb      	ldr	r3, [r7, #12]
 802399a:	2200      	movs	r2, #0
 802399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80239a0:	2303      	movs	r3, #3
 80239a2:	e00d      	b.n	80239c0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80239a4:	68fb      	ldr	r3, [r7, #12]
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	691b      	ldr	r3, [r3, #16]
 80239aa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80239ac:	697b      	ldr	r3, [r7, #20]
 80239ae:	f003 0301 	and.w	r3, r3, #1
 80239b2:	2b00      	cmp	r3, #0
 80239b4:	d1e4      	bne.n	8023980 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80239b6:	68fb      	ldr	r3, [r7, #12]
 80239b8:	2201      	movs	r2, #1
 80239ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80239be:	2300      	movs	r3, #0
}
 80239c0:	4618      	mov	r0, r3
 80239c2:	3718      	adds	r7, #24
 80239c4:	46bd      	mov	sp, r7
 80239c6:	bd80      	pop	{r7, pc}

080239c8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b082      	sub	sp, #8
 80239cc:	af00      	add	r7, sp, #0
 80239ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80239d6:	2b01      	cmp	r3, #1
 80239d8:	d101      	bne.n	80239de <HAL_ETH_Start+0x16>
 80239da:	2302      	movs	r3, #2
 80239dc:	e01f      	b.n	8023a1e <HAL_ETH_Start+0x56>
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	2201      	movs	r2, #1
 80239e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	2202      	movs	r2, #2
 80239ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80239ee:	6878      	ldr	r0, [r7, #4]
 80239f0:	f000 fa18 	bl	8023e24 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80239f4:	6878      	ldr	r0, [r7, #4]
 80239f6:	f000 fa32 	bl	8023e5e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80239fa:	6878      	ldr	r0, [r7, #4]
 80239fc:	f000 fa78 	bl	8023ef0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8023a00:	6878      	ldr	r0, [r7, #4]
 8023a02:	f000 fa49 	bl	8023e98 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8023a06:	6878      	ldr	r0, [r7, #4]
 8023a08:	f000 fa5c 	bl	8023ec4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	2201      	movs	r2, #1
 8023a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	2200      	movs	r2, #0
 8023a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8023a1c:	2300      	movs	r3, #0
}
 8023a1e:	4618      	mov	r0, r3
 8023a20:	3708      	adds	r7, #8
 8023a22:	46bd      	mov	sp, r7
 8023a24:	bd80      	pop	{r7, pc}
	...

08023a28 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b0b0      	sub	sp, #192	; 0xc0
 8023a2c:	af00      	add	r7, sp, #0
 8023a2e:	6078      	str	r0, [r7, #4]
 8023a30:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8023a32:	2300      	movs	r3, #0
 8023a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8023a38:	683b      	ldr	r3, [r7, #0]
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	d007      	beq.n	8023a4e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023a44:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8023a4e:	2300      	movs	r3, #0
 8023a50:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8023a52:	2300      	movs	r3, #0
 8023a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8023a56:	2300      	movs	r3, #0
 8023a58:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8023a5a:	2300      	movs	r3, #0
 8023a5c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8023a5e:	2300      	movs	r3, #0
 8023a60:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8023a62:	2300      	movs	r3, #0
 8023a64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	69db      	ldr	r3, [r3, #28]
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d103      	bne.n	8023a76 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8023a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023a72:	663b      	str	r3, [r7, #96]	; 0x60
 8023a74:	e001      	b.n	8023a7a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8023a76:	2300      	movs	r3, #0
 8023a78:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8023a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023a7e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8023a80:	2300      	movs	r3, #0
 8023a82:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8023a84:	2300      	movs	r3, #0
 8023a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8023a88:	2300      	movs	r3, #0
 8023a8a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8023a8c:	2300      	movs	r3, #0
 8023a8e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8023a90:	2300      	movs	r3, #0
 8023a92:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8023a94:	2340      	movs	r3, #64	; 0x40
 8023a96:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8023a98:	2300      	movs	r3, #0
 8023a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8023a9e:	2300      	movs	r3, #0
 8023aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8023aa4:	2300      	movs	r3, #0
 8023aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8023aaa:	2300      	movs	r3, #0
 8023aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8023abc:	2300      	movs	r3, #0
 8023abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8023ac2:	2300      	movs	r3, #0
 8023ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8023ac8:	2380      	movs	r3, #128	; 0x80
 8023aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8023ace:	2300      	movs	r3, #0
 8023ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8023ad4:	2300      	movs	r3, #0
 8023ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8023ada:	2300      	movs	r3, #0
 8023adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8023ae6:	2300      	movs	r3, #0
 8023ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8023aec:	2300      	movs	r3, #0
 8023aee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	681b      	ldr	r3, [r3, #0]
 8023af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8023afc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023b00:	4baa      	ldr	r3, [pc, #680]	; (8023dac <ETH_MACDMAConfig+0x384>)
 8023b02:	4013      	ands	r3, r2
 8023b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8023b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8023b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8023b0c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8023b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8023b10:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8023b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8023b14:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8023b16:	687b      	ldr	r3, [r7, #4]
 8023b18:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8023b1a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8023b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8023b1e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8023b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8023b22:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8023b28:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8023b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8023b2c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8023b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8023b30:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8023b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8023b34:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8023b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8023b38:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8023b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8023b3c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8023b3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023b42:	4313      	orrs	r3, r2
 8023b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023b50:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	681b      	ldr	r3, [r3, #0]
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8023b5c:	2001      	movs	r0, #1
 8023b5e:	f7ff f83f 	bl	8022be0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	681b      	ldr	r3, [r3, #0]
 8023b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023b6a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8023b6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8023b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8023b70:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8023b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8023b74:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8023b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8023b7a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8023b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8023b80:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8023b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8023b86:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8023b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8023b8c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8023b90:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8023b98:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8023b9a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8023b9c:	687b      	ldr	r3, [r7, #4]
 8023b9e:	681b      	ldr	r3, [r3, #0]
 8023ba0:	685b      	ldr	r3, [r3, #4]
 8023ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8023ba6:	2001      	movs	r0, #1
 8023ba8:	f7ff f81a 	bl	8022be0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	681b      	ldr	r3, [r3, #0]
 8023bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023bb4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8023bbe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8023bc8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	681b      	ldr	r3, [r3, #0]
 8023bce:	699b      	ldr	r3, [r3, #24]
 8023bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8023bd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023bd8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8023bdc:	4013      	ands	r3, r2
 8023bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8023be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8023be6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8023be8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8023bec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8023bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8023bf2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8023bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8023bf8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8023bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8023bfe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8023c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8023c04:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8023c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023c0a:	4313      	orrs	r3, r2
 8023c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023c18:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	681b      	ldr	r3, [r3, #0]
 8023c1e:	699b      	ldr	r3, [r3, #24]
 8023c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8023c24:	2001      	movs	r0, #1
 8023c26:	f7fe ffdb 	bl	8022be0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	681b      	ldr	r3, [r3, #0]
 8023c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023c32:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8023c34:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8023c38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	430a      	orrs	r2, r1
 8023c42:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	69db      	ldr	r3, [r3, #28]
 8023c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8023c4e:	2001      	movs	r0, #1
 8023c50:	f7fe ffc6 	bl	8022be0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8023c54:	687b      	ldr	r3, [r7, #4]
 8023c56:	681b      	ldr	r3, [r3, #0]
 8023c58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023c5c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8023c5e:	2300      	movs	r3, #0
 8023c60:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8023c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8023c66:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8023c68:	2300      	movs	r3, #0
 8023c6a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8023c6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8023c70:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8023c72:	2300      	movs	r3, #0
 8023c74:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8023c76:	2300      	movs	r3, #0
 8023c78:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8023c7a:	2300      	movs	r3, #0
 8023c7c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8023c7e:	2300      	movs	r3, #0
 8023c80:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8023c82:	2304      	movs	r3, #4
 8023c84:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8023c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8023c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8023c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023c90:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8023c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023c96:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8023c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8023c9e:	2380      	movs	r3, #128	; 0x80
 8023ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8023ca2:	2300      	movs	r3, #0
 8023ca4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023cb2:	699b      	ldr	r3, [r3, #24]
 8023cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8023cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023cbc:	4b3c      	ldr	r3, [pc, #240]	; (8023db0 <ETH_MACDMAConfig+0x388>)
 8023cbe:	4013      	ands	r3, r2
 8023cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8023cc4:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8023cc6:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8023cc8:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8023cca:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8023ccc:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8023cce:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8023cd0:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8023cd2:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8023cd4:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8023cd6:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8023cd8:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8023cda:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8023cdc:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8023cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8023ce0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8023ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8023ce4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8023ce6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8023cea:	4313      	orrs	r3, r2
 8023cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023cf8:	461a      	mov	r2, r3
 8023cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8023cfe:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	681b      	ldr	r3, [r3, #0]
 8023d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d08:	699b      	ldr	r3, [r3, #24]
 8023d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8023d0e:	2001      	movs	r0, #1
 8023d10:	f7fe ff66 	bl	8022be0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d1c:	461a      	mov	r2, r3
 8023d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8023d22:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8023d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8023d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8023d28:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8023d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8023d2c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8023d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8023d30:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8023d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8023d34:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8023d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023d38:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8023d3a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8023d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8023d3e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8023d40:	687a      	ldr	r2, [r7, #4]
 8023d42:	6812      	ldr	r2, [r2, #0]
 8023d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8023d48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023d4c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	681b      	ldr	r3, [r3, #0]
 8023d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d56:	681b      	ldr	r3, [r3, #0]
 8023d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8023d5c:	2001      	movs	r0, #1
 8023d5e:	f7fe ff3f 	bl	8022be0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d6a:	461a      	mov	r2, r3
 8023d6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8023d70:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	699b      	ldr	r3, [r3, #24]
 8023d76:	2b01      	cmp	r3, #1
 8023d78:	d10d      	bne.n	8023d96 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	681b      	ldr	r3, [r3, #0]
 8023d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d82:	69db      	ldr	r3, [r3, #28]
 8023d84:	687a      	ldr	r2, [r7, #4]
 8023d86:	6812      	ldr	r2, [r2, #0]
 8023d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023d94:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	695b      	ldr	r3, [r3, #20]
 8023d9a:	461a      	mov	r2, r3
 8023d9c:	2100      	movs	r1, #0
 8023d9e:	6878      	ldr	r0, [r7, #4]
 8023da0:	f000 f808 	bl	8023db4 <ETH_MACAddressConfig>
}
 8023da4:	bf00      	nop
 8023da6:	37c0      	adds	r7, #192	; 0xc0
 8023da8:	46bd      	mov	sp, r7
 8023daa:	bd80      	pop	{r7, pc}
 8023dac:	ff20810f 	.word	0xff20810f
 8023db0:	f8de3f23 	.word	0xf8de3f23

08023db4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8023db4:	b480      	push	{r7}
 8023db6:	b087      	sub	sp, #28
 8023db8:	af00      	add	r7, sp, #0
 8023dba:	60f8      	str	r0, [r7, #12]
 8023dbc:	60b9      	str	r1, [r7, #8]
 8023dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	3305      	adds	r3, #5
 8023dc4:	781b      	ldrb	r3, [r3, #0]
 8023dc6:	021b      	lsls	r3, r3, #8
 8023dc8:	687a      	ldr	r2, [r7, #4]
 8023dca:	3204      	adds	r2, #4
 8023dcc:	7812      	ldrb	r2, [r2, #0]
 8023dce:	4313      	orrs	r3, r2
 8023dd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8023dd2:	68ba      	ldr	r2, [r7, #8]
 8023dd4:	4b11      	ldr	r3, [pc, #68]	; (8023e1c <ETH_MACAddressConfig+0x68>)
 8023dd6:	4413      	add	r3, r2
 8023dd8:	461a      	mov	r2, r3
 8023dda:	697b      	ldr	r3, [r7, #20]
 8023ddc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	3303      	adds	r3, #3
 8023de2:	781b      	ldrb	r3, [r3, #0]
 8023de4:	061a      	lsls	r2, r3, #24
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	3302      	adds	r3, #2
 8023dea:	781b      	ldrb	r3, [r3, #0]
 8023dec:	041b      	lsls	r3, r3, #16
 8023dee:	431a      	orrs	r2, r3
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	3301      	adds	r3, #1
 8023df4:	781b      	ldrb	r3, [r3, #0]
 8023df6:	021b      	lsls	r3, r3, #8
 8023df8:	4313      	orrs	r3, r2
 8023dfa:	687a      	ldr	r2, [r7, #4]
 8023dfc:	7812      	ldrb	r2, [r2, #0]
 8023dfe:	4313      	orrs	r3, r2
 8023e00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8023e02:	68ba      	ldr	r2, [r7, #8]
 8023e04:	4b06      	ldr	r3, [pc, #24]	; (8023e20 <ETH_MACAddressConfig+0x6c>)
 8023e06:	4413      	add	r3, r2
 8023e08:	461a      	mov	r2, r3
 8023e0a:	697b      	ldr	r3, [r7, #20]
 8023e0c:	6013      	str	r3, [r2, #0]
}
 8023e0e:	bf00      	nop
 8023e10:	371c      	adds	r7, #28
 8023e12:	46bd      	mov	sp, r7
 8023e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e18:	4770      	bx	lr
 8023e1a:	bf00      	nop
 8023e1c:	40028040 	.word	0x40028040
 8023e20:	40028044 	.word	0x40028044

08023e24 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8023e24:	b580      	push	{r7, lr}
 8023e26:	b084      	sub	sp, #16
 8023e28:	af00      	add	r7, sp, #0
 8023e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	681a      	ldr	r2, [r3, #0]
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	681b      	ldr	r3, [r3, #0]
 8023e3a:	f042 0208 	orr.w	r2, r2, #8
 8023e3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	681b      	ldr	r3, [r3, #0]
 8023e44:	681b      	ldr	r3, [r3, #0]
 8023e46:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8023e48:	2001      	movs	r0, #1
 8023e4a:	f000 f877 	bl	8023f3c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	68fa      	ldr	r2, [r7, #12]
 8023e54:	601a      	str	r2, [r3, #0]
}
 8023e56:	bf00      	nop
 8023e58:	3710      	adds	r7, #16
 8023e5a:	46bd      	mov	sp, r7
 8023e5c:	bd80      	pop	{r7, pc}

08023e5e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8023e5e:	b580      	push	{r7, lr}
 8023e60:	b084      	sub	sp, #16
 8023e62:	af00      	add	r7, sp, #0
 8023e64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8023e66:	2300      	movs	r3, #0
 8023e68:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8023e6a:	687b      	ldr	r3, [r7, #4]
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	681a      	ldr	r2, [r3, #0]
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	f042 0204 	orr.w	r2, r2, #4
 8023e78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	681b      	ldr	r3, [r3, #0]
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8023e82:	2001      	movs	r0, #1
 8023e84:	f000 f85a 	bl	8023f3c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8023e88:	687b      	ldr	r3, [r7, #4]
 8023e8a:	681b      	ldr	r3, [r3, #0]
 8023e8c:	68fa      	ldr	r2, [r7, #12]
 8023e8e:	601a      	str	r2, [r3, #0]
}
 8023e90:	bf00      	nop
 8023e92:	3710      	adds	r7, #16
 8023e94:	46bd      	mov	sp, r7
 8023e96:	bd80      	pop	{r7, pc}

08023e98 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8023e98:	b480      	push	{r7}
 8023e9a:	b083      	sub	sp, #12
 8023e9c:	af00      	add	r7, sp, #0
 8023e9e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8023ea0:	687b      	ldr	r3, [r7, #4]
 8023ea2:	681b      	ldr	r3, [r3, #0]
 8023ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023ea8:	699b      	ldr	r3, [r3, #24]
 8023eaa:	687a      	ldr	r2, [r7, #4]
 8023eac:	6812      	ldr	r2, [r2, #0]
 8023eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8023eb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023eb6:	6193      	str	r3, [r2, #24]
}
 8023eb8:	bf00      	nop
 8023eba:	370c      	adds	r7, #12
 8023ebc:	46bd      	mov	sp, r7
 8023ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ec2:	4770      	bx	lr

08023ec4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8023ec4:	b480      	push	{r7}
 8023ec6:	b083      	sub	sp, #12
 8023ec8:	af00      	add	r7, sp, #0
 8023eca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	681b      	ldr	r3, [r3, #0]
 8023ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023ed4:	699b      	ldr	r3, [r3, #24]
 8023ed6:	687a      	ldr	r2, [r7, #4]
 8023ed8:	6812      	ldr	r2, [r2, #0]
 8023eda:	f043 0302 	orr.w	r3, r3, #2
 8023ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023ee2:	6193      	str	r3, [r2, #24]
}
 8023ee4:	bf00      	nop
 8023ee6:	370c      	adds	r7, #12
 8023ee8:	46bd      	mov	sp, r7
 8023eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eee:	4770      	bx	lr

08023ef0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8023ef0:	b580      	push	{r7, lr}
 8023ef2:	b084      	sub	sp, #16
 8023ef4:	af00      	add	r7, sp, #0
 8023ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8023ef8:	2300      	movs	r3, #0
 8023efa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f04:	699b      	ldr	r3, [r3, #24]
 8023f06:	687a      	ldr	r2, [r7, #4]
 8023f08:	6812      	ldr	r2, [r2, #0]
 8023f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023f0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023f12:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8023f14:	687b      	ldr	r3, [r7, #4]
 8023f16:	681b      	ldr	r3, [r3, #0]
 8023f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f1c:	699b      	ldr	r3, [r3, #24]
 8023f1e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8023f20:	2001      	movs	r0, #1
 8023f22:	f000 f80b 	bl	8023f3c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	681a      	ldr	r2, [r3, #0]
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8023f30:	6193      	str	r3, [r2, #24]
}
 8023f32:	bf00      	nop
 8023f34:	3710      	adds	r7, #16
 8023f36:	46bd      	mov	sp, r7
 8023f38:	bd80      	pop	{r7, pc}
	...

08023f3c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8023f3c:	b480      	push	{r7}
 8023f3e:	b085      	sub	sp, #20
 8023f40:	af00      	add	r7, sp, #0
 8023f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8023f44:	4b0b      	ldr	r3, [pc, #44]	; (8023f74 <ETH_Delay+0x38>)
 8023f46:	681b      	ldr	r3, [r3, #0]
 8023f48:	4a0b      	ldr	r2, [pc, #44]	; (8023f78 <ETH_Delay+0x3c>)
 8023f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8023f4e:	0a5b      	lsrs	r3, r3, #9
 8023f50:	687a      	ldr	r2, [r7, #4]
 8023f52:	fb02 f303 	mul.w	r3, r2, r3
 8023f56:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8023f58:	bf00      	nop
  } 
  while (Delay --);
 8023f5a:	68fb      	ldr	r3, [r7, #12]
 8023f5c:	1e5a      	subs	r2, r3, #1
 8023f5e:	60fa      	str	r2, [r7, #12]
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	d1f9      	bne.n	8023f58 <ETH_Delay+0x1c>
}
 8023f64:	bf00      	nop
 8023f66:	bf00      	nop
 8023f68:	3714      	adds	r7, #20
 8023f6a:	46bd      	mov	sp, r7
 8023f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f70:	4770      	bx	lr
 8023f72:	bf00      	nop
 8023f74:	20000000 	.word	0x20000000
 8023f78:	10624dd3 	.word	0x10624dd3

08023f7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8023f7c:	b580      	push	{r7, lr}
 8023f7e:	b086      	sub	sp, #24
 8023f80:	af00      	add	r7, sp, #0
 8023f82:	60f8      	str	r0, [r7, #12]
 8023f84:	60b9      	str	r1, [r7, #8]
 8023f86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8023f8e:	4b23      	ldr	r3, [pc, #140]	; (802401c <HAL_FLASH_Program+0xa0>)
 8023f90:	7e1b      	ldrb	r3, [r3, #24]
 8023f92:	2b01      	cmp	r3, #1
 8023f94:	d101      	bne.n	8023f9a <HAL_FLASH_Program+0x1e>
 8023f96:	2302      	movs	r3, #2
 8023f98:	e03b      	b.n	8024012 <HAL_FLASH_Program+0x96>
 8023f9a:	4b20      	ldr	r3, [pc, #128]	; (802401c <HAL_FLASH_Program+0xa0>)
 8023f9c:	2201      	movs	r2, #1
 8023f9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023fa4:	f000 f870 	bl	8024088 <FLASH_WaitForLastOperation>
 8023fa8:	4603      	mov	r3, r0
 8023faa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8023fac:	7dfb      	ldrb	r3, [r7, #23]
 8023fae:	2b00      	cmp	r3, #0
 8023fb0:	d12b      	bne.n	802400a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8023fb2:	68fb      	ldr	r3, [r7, #12]
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d105      	bne.n	8023fc4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8023fb8:	783b      	ldrb	r3, [r7, #0]
 8023fba:	4619      	mov	r1, r3
 8023fbc:	68b8      	ldr	r0, [r7, #8]
 8023fbe:	f000 f91b 	bl	80241f8 <FLASH_Program_Byte>
 8023fc2:	e016      	b.n	8023ff2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	2b01      	cmp	r3, #1
 8023fc8:	d105      	bne.n	8023fd6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8023fca:	883b      	ldrh	r3, [r7, #0]
 8023fcc:	4619      	mov	r1, r3
 8023fce:	68b8      	ldr	r0, [r7, #8]
 8023fd0:	f000 f8ee 	bl	80241b0 <FLASH_Program_HalfWord>
 8023fd4:	e00d      	b.n	8023ff2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8023fd6:	68fb      	ldr	r3, [r7, #12]
 8023fd8:	2b02      	cmp	r3, #2
 8023fda:	d105      	bne.n	8023fe8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8023fdc:	683b      	ldr	r3, [r7, #0]
 8023fde:	4619      	mov	r1, r3
 8023fe0:	68b8      	ldr	r0, [r7, #8]
 8023fe2:	f000 f8c3 	bl	802416c <FLASH_Program_Word>
 8023fe6:	e004      	b.n	8023ff2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8023fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023fec:	68b8      	ldr	r0, [r7, #8]
 8023fee:	f000 f88b 	bl	8024108 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023ff2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023ff6:	f000 f847 	bl	8024088 <FLASH_WaitForLastOperation>
 8023ffa:	4603      	mov	r3, r0
 8023ffc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8023ffe:	4b08      	ldr	r3, [pc, #32]	; (8024020 <HAL_FLASH_Program+0xa4>)
 8024000:	691b      	ldr	r3, [r3, #16]
 8024002:	4a07      	ldr	r2, [pc, #28]	; (8024020 <HAL_FLASH_Program+0xa4>)
 8024004:	f023 0301 	bic.w	r3, r3, #1
 8024008:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802400a:	4b04      	ldr	r3, [pc, #16]	; (802401c <HAL_FLASH_Program+0xa0>)
 802400c:	2200      	movs	r2, #0
 802400e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8024010:	7dfb      	ldrb	r3, [r7, #23]
}
 8024012:	4618      	mov	r0, r3
 8024014:	3718      	adds	r7, #24
 8024016:	46bd      	mov	sp, r7
 8024018:	bd80      	pop	{r7, pc}
 802401a:	bf00      	nop
 802401c:	20000394 	.word	0x20000394
 8024020:	40023c00 	.word	0x40023c00

08024024 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8024024:	b480      	push	{r7}
 8024026:	b083      	sub	sp, #12
 8024028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802402a:	2300      	movs	r3, #0
 802402c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802402e:	4b0b      	ldr	r3, [pc, #44]	; (802405c <HAL_FLASH_Unlock+0x38>)
 8024030:	691b      	ldr	r3, [r3, #16]
 8024032:	2b00      	cmp	r3, #0
 8024034:	da0b      	bge.n	802404e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8024036:	4b09      	ldr	r3, [pc, #36]	; (802405c <HAL_FLASH_Unlock+0x38>)
 8024038:	4a09      	ldr	r2, [pc, #36]	; (8024060 <HAL_FLASH_Unlock+0x3c>)
 802403a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802403c:	4b07      	ldr	r3, [pc, #28]	; (802405c <HAL_FLASH_Unlock+0x38>)
 802403e:	4a09      	ldr	r2, [pc, #36]	; (8024064 <HAL_FLASH_Unlock+0x40>)
 8024040:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8024042:	4b06      	ldr	r3, [pc, #24]	; (802405c <HAL_FLASH_Unlock+0x38>)
 8024044:	691b      	ldr	r3, [r3, #16]
 8024046:	2b00      	cmp	r3, #0
 8024048:	da01      	bge.n	802404e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802404a:	2301      	movs	r3, #1
 802404c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802404e:	79fb      	ldrb	r3, [r7, #7]
}
 8024050:	4618      	mov	r0, r3
 8024052:	370c      	adds	r7, #12
 8024054:	46bd      	mov	sp, r7
 8024056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802405a:	4770      	bx	lr
 802405c:	40023c00 	.word	0x40023c00
 8024060:	45670123 	.word	0x45670123
 8024064:	cdef89ab 	.word	0xcdef89ab

08024068 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8024068:	b480      	push	{r7}
 802406a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802406c:	4b05      	ldr	r3, [pc, #20]	; (8024084 <HAL_FLASH_Lock+0x1c>)
 802406e:	691b      	ldr	r3, [r3, #16]
 8024070:	4a04      	ldr	r2, [pc, #16]	; (8024084 <HAL_FLASH_Lock+0x1c>)
 8024072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024076:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8024078:	2300      	movs	r3, #0
}
 802407a:	4618      	mov	r0, r3
 802407c:	46bd      	mov	sp, r7
 802407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024082:	4770      	bx	lr
 8024084:	40023c00 	.word	0x40023c00

08024088 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8024088:	b580      	push	{r7, lr}
 802408a:	b084      	sub	sp, #16
 802408c:	af00      	add	r7, sp, #0
 802408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8024090:	2300      	movs	r3, #0
 8024092:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8024094:	4b1a      	ldr	r3, [pc, #104]	; (8024100 <FLASH_WaitForLastOperation+0x78>)
 8024096:	2200      	movs	r2, #0
 8024098:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802409a:	f7fe fd95 	bl	8022bc8 <HAL_GetTick>
 802409e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80240a0:	e010      	b.n	80240c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240a8:	d00c      	beq.n	80240c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	2b00      	cmp	r3, #0
 80240ae:	d007      	beq.n	80240c0 <FLASH_WaitForLastOperation+0x38>
 80240b0:	f7fe fd8a 	bl	8022bc8 <HAL_GetTick>
 80240b4:	4602      	mov	r2, r0
 80240b6:	68fb      	ldr	r3, [r7, #12]
 80240b8:	1ad3      	subs	r3, r2, r3
 80240ba:	687a      	ldr	r2, [r7, #4]
 80240bc:	429a      	cmp	r2, r3
 80240be:	d201      	bcs.n	80240c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80240c0:	2303      	movs	r3, #3
 80240c2:	e019      	b.n	80240f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80240c4:	4b0f      	ldr	r3, [pc, #60]	; (8024104 <FLASH_WaitForLastOperation+0x7c>)
 80240c6:	68db      	ldr	r3, [r3, #12]
 80240c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	d1e8      	bne.n	80240a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80240d0:	4b0c      	ldr	r3, [pc, #48]	; (8024104 <FLASH_WaitForLastOperation+0x7c>)
 80240d2:	68db      	ldr	r3, [r3, #12]
 80240d4:	f003 0301 	and.w	r3, r3, #1
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d002      	beq.n	80240e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80240dc:	4b09      	ldr	r3, [pc, #36]	; (8024104 <FLASH_WaitForLastOperation+0x7c>)
 80240de:	2201      	movs	r2, #1
 80240e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80240e2:	4b08      	ldr	r3, [pc, #32]	; (8024104 <FLASH_WaitForLastOperation+0x7c>)
 80240e4:	68db      	ldr	r3, [r3, #12]
 80240e6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d003      	beq.n	80240f6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80240ee:	f000 f8a5 	bl	802423c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80240f2:	2301      	movs	r3, #1
 80240f4:	e000      	b.n	80240f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80240f6:	2300      	movs	r3, #0
  
}  
 80240f8:	4618      	mov	r0, r3
 80240fa:	3710      	adds	r7, #16
 80240fc:	46bd      	mov	sp, r7
 80240fe:	bd80      	pop	{r7, pc}
 8024100:	20000394 	.word	0x20000394
 8024104:	40023c00 	.word	0x40023c00

08024108 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8024108:	b480      	push	{r7}
 802410a:	b085      	sub	sp, #20
 802410c:	af00      	add	r7, sp, #0
 802410e:	60f8      	str	r0, [r7, #12]
 8024110:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024114:	4b14      	ldr	r3, [pc, #80]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 8024116:	691b      	ldr	r3, [r3, #16]
 8024118:	4a13      	ldr	r2, [pc, #76]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 802411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802411e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8024120:	4b11      	ldr	r3, [pc, #68]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 8024122:	691b      	ldr	r3, [r3, #16]
 8024124:	4a10      	ldr	r2, [pc, #64]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 8024126:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802412a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802412c:	4b0e      	ldr	r3, [pc, #56]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 802412e:	691b      	ldr	r3, [r3, #16]
 8024130:	4a0d      	ldr	r2, [pc, #52]	; (8024168 <FLASH_Program_DoubleWord+0x60>)
 8024132:	f043 0301 	orr.w	r3, r3, #1
 8024136:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8024138:	68fb      	ldr	r3, [r7, #12]
 802413a:	683a      	ldr	r2, [r7, #0]
 802413c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802413e:	f3bf 8f6f 	isb	sy
}
 8024142:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8024144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024148:	f04f 0200 	mov.w	r2, #0
 802414c:	f04f 0300 	mov.w	r3, #0
 8024150:	000a      	movs	r2, r1
 8024152:	2300      	movs	r3, #0
 8024154:	68f9      	ldr	r1, [r7, #12]
 8024156:	3104      	adds	r1, #4
 8024158:	4613      	mov	r3, r2
 802415a:	600b      	str	r3, [r1, #0]
}
 802415c:	bf00      	nop
 802415e:	3714      	adds	r7, #20
 8024160:	46bd      	mov	sp, r7
 8024162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024166:	4770      	bx	lr
 8024168:	40023c00 	.word	0x40023c00

0802416c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802416c:	b480      	push	{r7}
 802416e:	b083      	sub	sp, #12
 8024170:	af00      	add	r7, sp, #0
 8024172:	6078      	str	r0, [r7, #4]
 8024174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024176:	4b0d      	ldr	r3, [pc, #52]	; (80241ac <FLASH_Program_Word+0x40>)
 8024178:	691b      	ldr	r3, [r3, #16]
 802417a:	4a0c      	ldr	r2, [pc, #48]	; (80241ac <FLASH_Program_Word+0x40>)
 802417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024180:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8024182:	4b0a      	ldr	r3, [pc, #40]	; (80241ac <FLASH_Program_Word+0x40>)
 8024184:	691b      	ldr	r3, [r3, #16]
 8024186:	4a09      	ldr	r2, [pc, #36]	; (80241ac <FLASH_Program_Word+0x40>)
 8024188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802418c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802418e:	4b07      	ldr	r3, [pc, #28]	; (80241ac <FLASH_Program_Word+0x40>)
 8024190:	691b      	ldr	r3, [r3, #16]
 8024192:	4a06      	ldr	r2, [pc, #24]	; (80241ac <FLASH_Program_Word+0x40>)
 8024194:	f043 0301 	orr.w	r3, r3, #1
 8024198:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	683a      	ldr	r2, [r7, #0]
 802419e:	601a      	str	r2, [r3, #0]
}
 80241a0:	bf00      	nop
 80241a2:	370c      	adds	r7, #12
 80241a4:	46bd      	mov	sp, r7
 80241a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241aa:	4770      	bx	lr
 80241ac:	40023c00 	.word	0x40023c00

080241b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80241b0:	b480      	push	{r7}
 80241b2:	b083      	sub	sp, #12
 80241b4:	af00      	add	r7, sp, #0
 80241b6:	6078      	str	r0, [r7, #4]
 80241b8:	460b      	mov	r3, r1
 80241ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80241bc:	4b0d      	ldr	r3, [pc, #52]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241be:	691b      	ldr	r3, [r3, #16]
 80241c0:	4a0c      	ldr	r2, [pc, #48]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80241c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80241c8:	4b0a      	ldr	r3, [pc, #40]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241ca:	691b      	ldr	r3, [r3, #16]
 80241cc:	4a09      	ldr	r2, [pc, #36]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80241d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80241d4:	4b07      	ldr	r3, [pc, #28]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241d6:	691b      	ldr	r3, [r3, #16]
 80241d8:	4a06      	ldr	r2, [pc, #24]	; (80241f4 <FLASH_Program_HalfWord+0x44>)
 80241da:	f043 0301 	orr.w	r3, r3, #1
 80241de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	887a      	ldrh	r2, [r7, #2]
 80241e4:	801a      	strh	r2, [r3, #0]
}
 80241e6:	bf00      	nop
 80241e8:	370c      	adds	r7, #12
 80241ea:	46bd      	mov	sp, r7
 80241ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241f0:	4770      	bx	lr
 80241f2:	bf00      	nop
 80241f4:	40023c00 	.word	0x40023c00

080241f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80241f8:	b480      	push	{r7}
 80241fa:	b083      	sub	sp, #12
 80241fc:	af00      	add	r7, sp, #0
 80241fe:	6078      	str	r0, [r7, #4]
 8024200:	460b      	mov	r3, r1
 8024202:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024204:	4b0c      	ldr	r3, [pc, #48]	; (8024238 <FLASH_Program_Byte+0x40>)
 8024206:	691b      	ldr	r3, [r3, #16]
 8024208:	4a0b      	ldr	r2, [pc, #44]	; (8024238 <FLASH_Program_Byte+0x40>)
 802420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802420e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8024210:	4b09      	ldr	r3, [pc, #36]	; (8024238 <FLASH_Program_Byte+0x40>)
 8024212:	4a09      	ldr	r2, [pc, #36]	; (8024238 <FLASH_Program_Byte+0x40>)
 8024214:	691b      	ldr	r3, [r3, #16]
 8024216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024218:	4b07      	ldr	r3, [pc, #28]	; (8024238 <FLASH_Program_Byte+0x40>)
 802421a:	691b      	ldr	r3, [r3, #16]
 802421c:	4a06      	ldr	r2, [pc, #24]	; (8024238 <FLASH_Program_Byte+0x40>)
 802421e:	f043 0301 	orr.w	r3, r3, #1
 8024222:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	78fa      	ldrb	r2, [r7, #3]
 8024228:	701a      	strb	r2, [r3, #0]
}
 802422a:	bf00      	nop
 802422c:	370c      	adds	r7, #12
 802422e:	46bd      	mov	sp, r7
 8024230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024234:	4770      	bx	lr
 8024236:	bf00      	nop
 8024238:	40023c00 	.word	0x40023c00

0802423c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802423c:	b480      	push	{r7}
 802423e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8024240:	4b2f      	ldr	r3, [pc, #188]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 8024242:	68db      	ldr	r3, [r3, #12]
 8024244:	f003 0310 	and.w	r3, r3, #16
 8024248:	2b00      	cmp	r3, #0
 802424a:	d008      	beq.n	802425e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802424c:	4b2d      	ldr	r3, [pc, #180]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 802424e:	69db      	ldr	r3, [r3, #28]
 8024250:	f043 0310 	orr.w	r3, r3, #16
 8024254:	4a2b      	ldr	r2, [pc, #172]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 8024256:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8024258:	4b29      	ldr	r3, [pc, #164]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 802425a:	2210      	movs	r2, #16
 802425c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802425e:	4b28      	ldr	r3, [pc, #160]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 8024260:	68db      	ldr	r3, [r3, #12]
 8024262:	f003 0320 	and.w	r3, r3, #32
 8024266:	2b00      	cmp	r3, #0
 8024268:	d008      	beq.n	802427c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802426a:	4b26      	ldr	r3, [pc, #152]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 802426c:	69db      	ldr	r3, [r3, #28]
 802426e:	f043 0308 	orr.w	r3, r3, #8
 8024272:	4a24      	ldr	r2, [pc, #144]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 8024274:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8024276:	4b22      	ldr	r3, [pc, #136]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 8024278:	2220      	movs	r2, #32
 802427a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802427c:	4b20      	ldr	r3, [pc, #128]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 802427e:	68db      	ldr	r3, [r3, #12]
 8024280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024284:	2b00      	cmp	r3, #0
 8024286:	d008      	beq.n	802429a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8024288:	4b1e      	ldr	r3, [pc, #120]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 802428a:	69db      	ldr	r3, [r3, #28]
 802428c:	f043 0304 	orr.w	r3, r3, #4
 8024290:	4a1c      	ldr	r2, [pc, #112]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 8024292:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8024294:	4b1a      	ldr	r3, [pc, #104]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 8024296:	2240      	movs	r2, #64	; 0x40
 8024298:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802429a:	4b19      	ldr	r3, [pc, #100]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 802429c:	68db      	ldr	r3, [r3, #12]
 802429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80242a2:	2b00      	cmp	r3, #0
 80242a4:	d008      	beq.n	80242b8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80242a6:	4b17      	ldr	r3, [pc, #92]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242a8:	69db      	ldr	r3, [r3, #28]
 80242aa:	f043 0302 	orr.w	r3, r3, #2
 80242ae:	4a15      	ldr	r2, [pc, #84]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80242b2:	4b13      	ldr	r3, [pc, #76]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 80242b4:	2280      	movs	r2, #128	; 0x80
 80242b6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80242b8:	4b11      	ldr	r3, [pc, #68]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 80242ba:	68db      	ldr	r3, [r3, #12]
 80242bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80242c0:	2b00      	cmp	r3, #0
 80242c2:	d009      	beq.n	80242d8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80242c4:	4b0f      	ldr	r3, [pc, #60]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242c6:	69db      	ldr	r3, [r3, #28]
 80242c8:	f043 0301 	orr.w	r3, r3, #1
 80242cc:	4a0d      	ldr	r2, [pc, #52]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80242d0:	4b0b      	ldr	r3, [pc, #44]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 80242d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80242d6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80242d8:	4b09      	ldr	r3, [pc, #36]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 80242da:	68db      	ldr	r3, [r3, #12]
 80242dc:	f003 0302 	and.w	r3, r3, #2
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d008      	beq.n	80242f6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80242e4:	4b07      	ldr	r3, [pc, #28]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242e6:	69db      	ldr	r3, [r3, #28]
 80242e8:	f043 0320 	orr.w	r3, r3, #32
 80242ec:	4a05      	ldr	r2, [pc, #20]	; (8024304 <FLASH_SetErrorCode+0xc8>)
 80242ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80242f0:	4b03      	ldr	r3, [pc, #12]	; (8024300 <FLASH_SetErrorCode+0xc4>)
 80242f2:	2202      	movs	r2, #2
 80242f4:	60da      	str	r2, [r3, #12]
  }
}
 80242f6:	bf00      	nop
 80242f8:	46bd      	mov	sp, r7
 80242fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242fe:	4770      	bx	lr
 8024300:	40023c00 	.word	0x40023c00
 8024304:	20000394 	.word	0x20000394

08024308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024308:	b480      	push	{r7}
 802430a:	b089      	sub	sp, #36	; 0x24
 802430c:	af00      	add	r7, sp, #0
 802430e:	6078      	str	r0, [r7, #4]
 8024310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024312:	2300      	movs	r3, #0
 8024314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024316:	2300      	movs	r3, #0
 8024318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802431a:	2300      	movs	r3, #0
 802431c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802431e:	2300      	movs	r3, #0
 8024320:	61fb      	str	r3, [r7, #28]
 8024322:	e177      	b.n	8024614 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024324:	2201      	movs	r2, #1
 8024326:	69fb      	ldr	r3, [r7, #28]
 8024328:	fa02 f303 	lsl.w	r3, r2, r3
 802432c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802432e:	683b      	ldr	r3, [r7, #0]
 8024330:	681b      	ldr	r3, [r3, #0]
 8024332:	697a      	ldr	r2, [r7, #20]
 8024334:	4013      	ands	r3, r2
 8024336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024338:	693a      	ldr	r2, [r7, #16]
 802433a:	697b      	ldr	r3, [r7, #20]
 802433c:	429a      	cmp	r2, r3
 802433e:	f040 8166 	bne.w	802460e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024342:	683b      	ldr	r3, [r7, #0]
 8024344:	685b      	ldr	r3, [r3, #4]
 8024346:	f003 0303 	and.w	r3, r3, #3
 802434a:	2b01      	cmp	r3, #1
 802434c:	d005      	beq.n	802435a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802434e:	683b      	ldr	r3, [r7, #0]
 8024350:	685b      	ldr	r3, [r3, #4]
 8024352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024356:	2b02      	cmp	r3, #2
 8024358:	d130      	bne.n	80243bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	689b      	ldr	r3, [r3, #8]
 802435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024360:	69fb      	ldr	r3, [r7, #28]
 8024362:	005b      	lsls	r3, r3, #1
 8024364:	2203      	movs	r2, #3
 8024366:	fa02 f303 	lsl.w	r3, r2, r3
 802436a:	43db      	mvns	r3, r3
 802436c:	69ba      	ldr	r2, [r7, #24]
 802436e:	4013      	ands	r3, r2
 8024370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024372:	683b      	ldr	r3, [r7, #0]
 8024374:	68da      	ldr	r2, [r3, #12]
 8024376:	69fb      	ldr	r3, [r7, #28]
 8024378:	005b      	lsls	r3, r3, #1
 802437a:	fa02 f303 	lsl.w	r3, r2, r3
 802437e:	69ba      	ldr	r2, [r7, #24]
 8024380:	4313      	orrs	r3, r2
 8024382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	69ba      	ldr	r2, [r7, #24]
 8024388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	685b      	ldr	r3, [r3, #4]
 802438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024390:	2201      	movs	r2, #1
 8024392:	69fb      	ldr	r3, [r7, #28]
 8024394:	fa02 f303 	lsl.w	r3, r2, r3
 8024398:	43db      	mvns	r3, r3
 802439a:	69ba      	ldr	r2, [r7, #24]
 802439c:	4013      	ands	r3, r2
 802439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80243a0:	683b      	ldr	r3, [r7, #0]
 80243a2:	685b      	ldr	r3, [r3, #4]
 80243a4:	091b      	lsrs	r3, r3, #4
 80243a6:	f003 0201 	and.w	r2, r3, #1
 80243aa:	69fb      	ldr	r3, [r7, #28]
 80243ac:	fa02 f303 	lsl.w	r3, r2, r3
 80243b0:	69ba      	ldr	r2, [r7, #24]
 80243b2:	4313      	orrs	r3, r2
 80243b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	69ba      	ldr	r2, [r7, #24]
 80243ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80243bc:	683b      	ldr	r3, [r7, #0]
 80243be:	685b      	ldr	r3, [r3, #4]
 80243c0:	f003 0303 	and.w	r3, r3, #3
 80243c4:	2b03      	cmp	r3, #3
 80243c6:	d017      	beq.n	80243f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	68db      	ldr	r3, [r3, #12]
 80243cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80243ce:	69fb      	ldr	r3, [r7, #28]
 80243d0:	005b      	lsls	r3, r3, #1
 80243d2:	2203      	movs	r2, #3
 80243d4:	fa02 f303 	lsl.w	r3, r2, r3
 80243d8:	43db      	mvns	r3, r3
 80243da:	69ba      	ldr	r2, [r7, #24]
 80243dc:	4013      	ands	r3, r2
 80243de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80243e0:	683b      	ldr	r3, [r7, #0]
 80243e2:	689a      	ldr	r2, [r3, #8]
 80243e4:	69fb      	ldr	r3, [r7, #28]
 80243e6:	005b      	lsls	r3, r3, #1
 80243e8:	fa02 f303 	lsl.w	r3, r2, r3
 80243ec:	69ba      	ldr	r2, [r7, #24]
 80243ee:	4313      	orrs	r3, r2
 80243f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	69ba      	ldr	r2, [r7, #24]
 80243f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80243f8:	683b      	ldr	r3, [r7, #0]
 80243fa:	685b      	ldr	r3, [r3, #4]
 80243fc:	f003 0303 	and.w	r3, r3, #3
 8024400:	2b02      	cmp	r3, #2
 8024402:	d123      	bne.n	802444c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024404:	69fb      	ldr	r3, [r7, #28]
 8024406:	08da      	lsrs	r2, r3, #3
 8024408:	687b      	ldr	r3, [r7, #4]
 802440a:	3208      	adds	r2, #8
 802440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024412:	69fb      	ldr	r3, [r7, #28]
 8024414:	f003 0307 	and.w	r3, r3, #7
 8024418:	009b      	lsls	r3, r3, #2
 802441a:	220f      	movs	r2, #15
 802441c:	fa02 f303 	lsl.w	r3, r2, r3
 8024420:	43db      	mvns	r3, r3
 8024422:	69ba      	ldr	r2, [r7, #24]
 8024424:	4013      	ands	r3, r2
 8024426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024428:	683b      	ldr	r3, [r7, #0]
 802442a:	691a      	ldr	r2, [r3, #16]
 802442c:	69fb      	ldr	r3, [r7, #28]
 802442e:	f003 0307 	and.w	r3, r3, #7
 8024432:	009b      	lsls	r3, r3, #2
 8024434:	fa02 f303 	lsl.w	r3, r2, r3
 8024438:	69ba      	ldr	r2, [r7, #24]
 802443a:	4313      	orrs	r3, r2
 802443c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802443e:	69fb      	ldr	r3, [r7, #28]
 8024440:	08da      	lsrs	r2, r3, #3
 8024442:	687b      	ldr	r3, [r7, #4]
 8024444:	3208      	adds	r2, #8
 8024446:	69b9      	ldr	r1, [r7, #24]
 8024448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	681b      	ldr	r3, [r3, #0]
 8024450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024452:	69fb      	ldr	r3, [r7, #28]
 8024454:	005b      	lsls	r3, r3, #1
 8024456:	2203      	movs	r2, #3
 8024458:	fa02 f303 	lsl.w	r3, r2, r3
 802445c:	43db      	mvns	r3, r3
 802445e:	69ba      	ldr	r2, [r7, #24]
 8024460:	4013      	ands	r3, r2
 8024462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024464:	683b      	ldr	r3, [r7, #0]
 8024466:	685b      	ldr	r3, [r3, #4]
 8024468:	f003 0203 	and.w	r2, r3, #3
 802446c:	69fb      	ldr	r3, [r7, #28]
 802446e:	005b      	lsls	r3, r3, #1
 8024470:	fa02 f303 	lsl.w	r3, r2, r3
 8024474:	69ba      	ldr	r2, [r7, #24]
 8024476:	4313      	orrs	r3, r2
 8024478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	69ba      	ldr	r2, [r7, #24]
 802447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024480:	683b      	ldr	r3, [r7, #0]
 8024482:	685b      	ldr	r3, [r3, #4]
 8024484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024488:	2b00      	cmp	r3, #0
 802448a:	f000 80c0 	beq.w	802460e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802448e:	2300      	movs	r3, #0
 8024490:	60fb      	str	r3, [r7, #12]
 8024492:	4b66      	ldr	r3, [pc, #408]	; (802462c <HAL_GPIO_Init+0x324>)
 8024494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024496:	4a65      	ldr	r2, [pc, #404]	; (802462c <HAL_GPIO_Init+0x324>)
 8024498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802449c:	6453      	str	r3, [r2, #68]	; 0x44
 802449e:	4b63      	ldr	r3, [pc, #396]	; (802462c <HAL_GPIO_Init+0x324>)
 80244a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80244a6:	60fb      	str	r3, [r7, #12]
 80244a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80244aa:	4a61      	ldr	r2, [pc, #388]	; (8024630 <HAL_GPIO_Init+0x328>)
 80244ac:	69fb      	ldr	r3, [r7, #28]
 80244ae:	089b      	lsrs	r3, r3, #2
 80244b0:	3302      	adds	r3, #2
 80244b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80244b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80244b8:	69fb      	ldr	r3, [r7, #28]
 80244ba:	f003 0303 	and.w	r3, r3, #3
 80244be:	009b      	lsls	r3, r3, #2
 80244c0:	220f      	movs	r2, #15
 80244c2:	fa02 f303 	lsl.w	r3, r2, r3
 80244c6:	43db      	mvns	r3, r3
 80244c8:	69ba      	ldr	r2, [r7, #24]
 80244ca:	4013      	ands	r3, r2
 80244cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80244ce:	687b      	ldr	r3, [r7, #4]
 80244d0:	4a58      	ldr	r2, [pc, #352]	; (8024634 <HAL_GPIO_Init+0x32c>)
 80244d2:	4293      	cmp	r3, r2
 80244d4:	d037      	beq.n	8024546 <HAL_GPIO_Init+0x23e>
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	4a57      	ldr	r2, [pc, #348]	; (8024638 <HAL_GPIO_Init+0x330>)
 80244da:	4293      	cmp	r3, r2
 80244dc:	d031      	beq.n	8024542 <HAL_GPIO_Init+0x23a>
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	4a56      	ldr	r2, [pc, #344]	; (802463c <HAL_GPIO_Init+0x334>)
 80244e2:	4293      	cmp	r3, r2
 80244e4:	d02b      	beq.n	802453e <HAL_GPIO_Init+0x236>
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	4a55      	ldr	r2, [pc, #340]	; (8024640 <HAL_GPIO_Init+0x338>)
 80244ea:	4293      	cmp	r3, r2
 80244ec:	d025      	beq.n	802453a <HAL_GPIO_Init+0x232>
 80244ee:	687b      	ldr	r3, [r7, #4]
 80244f0:	4a54      	ldr	r2, [pc, #336]	; (8024644 <HAL_GPIO_Init+0x33c>)
 80244f2:	4293      	cmp	r3, r2
 80244f4:	d01f      	beq.n	8024536 <HAL_GPIO_Init+0x22e>
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	4a53      	ldr	r2, [pc, #332]	; (8024648 <HAL_GPIO_Init+0x340>)
 80244fa:	4293      	cmp	r3, r2
 80244fc:	d019      	beq.n	8024532 <HAL_GPIO_Init+0x22a>
 80244fe:	687b      	ldr	r3, [r7, #4]
 8024500:	4a52      	ldr	r2, [pc, #328]	; (802464c <HAL_GPIO_Init+0x344>)
 8024502:	4293      	cmp	r3, r2
 8024504:	d013      	beq.n	802452e <HAL_GPIO_Init+0x226>
 8024506:	687b      	ldr	r3, [r7, #4]
 8024508:	4a51      	ldr	r2, [pc, #324]	; (8024650 <HAL_GPIO_Init+0x348>)
 802450a:	4293      	cmp	r3, r2
 802450c:	d00d      	beq.n	802452a <HAL_GPIO_Init+0x222>
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	4a50      	ldr	r2, [pc, #320]	; (8024654 <HAL_GPIO_Init+0x34c>)
 8024512:	4293      	cmp	r3, r2
 8024514:	d007      	beq.n	8024526 <HAL_GPIO_Init+0x21e>
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	4a4f      	ldr	r2, [pc, #316]	; (8024658 <HAL_GPIO_Init+0x350>)
 802451a:	4293      	cmp	r3, r2
 802451c:	d101      	bne.n	8024522 <HAL_GPIO_Init+0x21a>
 802451e:	2309      	movs	r3, #9
 8024520:	e012      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024522:	230a      	movs	r3, #10
 8024524:	e010      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024526:	2308      	movs	r3, #8
 8024528:	e00e      	b.n	8024548 <HAL_GPIO_Init+0x240>
 802452a:	2307      	movs	r3, #7
 802452c:	e00c      	b.n	8024548 <HAL_GPIO_Init+0x240>
 802452e:	2306      	movs	r3, #6
 8024530:	e00a      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024532:	2305      	movs	r3, #5
 8024534:	e008      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024536:	2304      	movs	r3, #4
 8024538:	e006      	b.n	8024548 <HAL_GPIO_Init+0x240>
 802453a:	2303      	movs	r3, #3
 802453c:	e004      	b.n	8024548 <HAL_GPIO_Init+0x240>
 802453e:	2302      	movs	r3, #2
 8024540:	e002      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024542:	2301      	movs	r3, #1
 8024544:	e000      	b.n	8024548 <HAL_GPIO_Init+0x240>
 8024546:	2300      	movs	r3, #0
 8024548:	69fa      	ldr	r2, [r7, #28]
 802454a:	f002 0203 	and.w	r2, r2, #3
 802454e:	0092      	lsls	r2, r2, #2
 8024550:	4093      	lsls	r3, r2
 8024552:	69ba      	ldr	r2, [r7, #24]
 8024554:	4313      	orrs	r3, r2
 8024556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024558:	4935      	ldr	r1, [pc, #212]	; (8024630 <HAL_GPIO_Init+0x328>)
 802455a:	69fb      	ldr	r3, [r7, #28]
 802455c:	089b      	lsrs	r3, r3, #2
 802455e:	3302      	adds	r3, #2
 8024560:	69ba      	ldr	r2, [r7, #24]
 8024562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024566:	4b3d      	ldr	r3, [pc, #244]	; (802465c <HAL_GPIO_Init+0x354>)
 8024568:	689b      	ldr	r3, [r3, #8]
 802456a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802456c:	693b      	ldr	r3, [r7, #16]
 802456e:	43db      	mvns	r3, r3
 8024570:	69ba      	ldr	r2, [r7, #24]
 8024572:	4013      	ands	r3, r2
 8024574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024576:	683b      	ldr	r3, [r7, #0]
 8024578:	685b      	ldr	r3, [r3, #4]
 802457a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802457e:	2b00      	cmp	r3, #0
 8024580:	d003      	beq.n	802458a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024582:	69ba      	ldr	r2, [r7, #24]
 8024584:	693b      	ldr	r3, [r7, #16]
 8024586:	4313      	orrs	r3, r2
 8024588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802458a:	4a34      	ldr	r2, [pc, #208]	; (802465c <HAL_GPIO_Init+0x354>)
 802458c:	69bb      	ldr	r3, [r7, #24]
 802458e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024590:	4b32      	ldr	r3, [pc, #200]	; (802465c <HAL_GPIO_Init+0x354>)
 8024592:	68db      	ldr	r3, [r3, #12]
 8024594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024596:	693b      	ldr	r3, [r7, #16]
 8024598:	43db      	mvns	r3, r3
 802459a:	69ba      	ldr	r2, [r7, #24]
 802459c:	4013      	ands	r3, r2
 802459e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80245a0:	683b      	ldr	r3, [r7, #0]
 80245a2:	685b      	ldr	r3, [r3, #4]
 80245a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d003      	beq.n	80245b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80245ac:	69ba      	ldr	r2, [r7, #24]
 80245ae:	693b      	ldr	r3, [r7, #16]
 80245b0:	4313      	orrs	r3, r2
 80245b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80245b4:	4a29      	ldr	r2, [pc, #164]	; (802465c <HAL_GPIO_Init+0x354>)
 80245b6:	69bb      	ldr	r3, [r7, #24]
 80245b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80245ba:	4b28      	ldr	r3, [pc, #160]	; (802465c <HAL_GPIO_Init+0x354>)
 80245bc:	685b      	ldr	r3, [r3, #4]
 80245be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80245c0:	693b      	ldr	r3, [r7, #16]
 80245c2:	43db      	mvns	r3, r3
 80245c4:	69ba      	ldr	r2, [r7, #24]
 80245c6:	4013      	ands	r3, r2
 80245c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80245ca:	683b      	ldr	r3, [r7, #0]
 80245cc:	685b      	ldr	r3, [r3, #4]
 80245ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d003      	beq.n	80245de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80245d6:	69ba      	ldr	r2, [r7, #24]
 80245d8:	693b      	ldr	r3, [r7, #16]
 80245da:	4313      	orrs	r3, r2
 80245dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80245de:	4a1f      	ldr	r2, [pc, #124]	; (802465c <HAL_GPIO_Init+0x354>)
 80245e0:	69bb      	ldr	r3, [r7, #24]
 80245e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80245e4:	4b1d      	ldr	r3, [pc, #116]	; (802465c <HAL_GPIO_Init+0x354>)
 80245e6:	681b      	ldr	r3, [r3, #0]
 80245e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80245ea:	693b      	ldr	r3, [r7, #16]
 80245ec:	43db      	mvns	r3, r3
 80245ee:	69ba      	ldr	r2, [r7, #24]
 80245f0:	4013      	ands	r3, r2
 80245f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80245f4:	683b      	ldr	r3, [r7, #0]
 80245f6:	685b      	ldr	r3, [r3, #4]
 80245f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d003      	beq.n	8024608 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024600:	69ba      	ldr	r2, [r7, #24]
 8024602:	693b      	ldr	r3, [r7, #16]
 8024604:	4313      	orrs	r3, r2
 8024606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024608:	4a14      	ldr	r2, [pc, #80]	; (802465c <HAL_GPIO_Init+0x354>)
 802460a:	69bb      	ldr	r3, [r7, #24]
 802460c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802460e:	69fb      	ldr	r3, [r7, #28]
 8024610:	3301      	adds	r3, #1
 8024612:	61fb      	str	r3, [r7, #28]
 8024614:	69fb      	ldr	r3, [r7, #28]
 8024616:	2b0f      	cmp	r3, #15
 8024618:	f67f ae84 	bls.w	8024324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802461c:	bf00      	nop
 802461e:	bf00      	nop
 8024620:	3724      	adds	r7, #36	; 0x24
 8024622:	46bd      	mov	sp, r7
 8024624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024628:	4770      	bx	lr
 802462a:	bf00      	nop
 802462c:	40023800 	.word	0x40023800
 8024630:	40013800 	.word	0x40013800
 8024634:	40020000 	.word	0x40020000
 8024638:	40020400 	.word	0x40020400
 802463c:	40020800 	.word	0x40020800
 8024640:	40020c00 	.word	0x40020c00
 8024644:	40021000 	.word	0x40021000
 8024648:	40021400 	.word	0x40021400
 802464c:	40021800 	.word	0x40021800
 8024650:	40021c00 	.word	0x40021c00
 8024654:	40022000 	.word	0x40022000
 8024658:	40022400 	.word	0x40022400
 802465c:	40013c00 	.word	0x40013c00

08024660 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8024660:	b580      	push	{r7, lr}
 8024662:	b082      	sub	sp, #8
 8024664:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8024666:	2300      	movs	r3, #0
 8024668:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 802466a:	2300      	movs	r3, #0
 802466c:	603b      	str	r3, [r7, #0]
 802466e:	4b20      	ldr	r3, [pc, #128]	; (80246f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8024670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024672:	4a1f      	ldr	r2, [pc, #124]	; (80246f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8024674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024678:	6413      	str	r3, [r2, #64]	; 0x40
 802467a:	4b1d      	ldr	r3, [pc, #116]	; (80246f0 <HAL_PWREx_EnableOverDrive+0x90>)
 802467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024682:	603b      	str	r3, [r7, #0]
 8024684:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8024686:	4b1b      	ldr	r3, [pc, #108]	; (80246f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8024688:	2201      	movs	r2, #1
 802468a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802468c:	f7fe fa9c 	bl	8022bc8 <HAL_GetTick>
 8024690:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8024692:	e009      	b.n	80246a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8024694:	f7fe fa98 	bl	8022bc8 <HAL_GetTick>
 8024698:	4602      	mov	r2, r0
 802469a:	687b      	ldr	r3, [r7, #4]
 802469c:	1ad3      	subs	r3, r2, r3
 802469e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80246a2:	d901      	bls.n	80246a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80246a4:	2303      	movs	r3, #3
 80246a6:	e01f      	b.n	80246e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80246a8:	4b13      	ldr	r3, [pc, #76]	; (80246f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80246aa:	685b      	ldr	r3, [r3, #4]
 80246ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80246b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80246b4:	d1ee      	bne.n	8024694 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80246b6:	4b11      	ldr	r3, [pc, #68]	; (80246fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80246b8:	2201      	movs	r2, #1
 80246ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80246bc:	f7fe fa84 	bl	8022bc8 <HAL_GetTick>
 80246c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80246c2:	e009      	b.n	80246d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80246c4:	f7fe fa80 	bl	8022bc8 <HAL_GetTick>
 80246c8:	4602      	mov	r2, r0
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	1ad3      	subs	r3, r2, r3
 80246ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80246d2:	d901      	bls.n	80246d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80246d4:	2303      	movs	r3, #3
 80246d6:	e007      	b.n	80246e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80246d8:	4b07      	ldr	r3, [pc, #28]	; (80246f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80246da:	685b      	ldr	r3, [r3, #4]
 80246dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80246e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80246e4:	d1ee      	bne.n	80246c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80246e6:	2300      	movs	r3, #0
}
 80246e8:	4618      	mov	r0, r3
 80246ea:	3708      	adds	r7, #8
 80246ec:	46bd      	mov	sp, r7
 80246ee:	bd80      	pop	{r7, pc}
 80246f0:	40023800 	.word	0x40023800
 80246f4:	420e0040 	.word	0x420e0040
 80246f8:	40007000 	.word	0x40007000
 80246fc:	420e0044 	.word	0x420e0044

08024700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8024700:	b580      	push	{r7, lr}
 8024702:	b086      	sub	sp, #24
 8024704:	af00      	add	r7, sp, #0
 8024706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	2b00      	cmp	r3, #0
 802470c:	d101      	bne.n	8024712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802470e:	2301      	movs	r3, #1
 8024710:	e267      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8024712:	687b      	ldr	r3, [r7, #4]
 8024714:	681b      	ldr	r3, [r3, #0]
 8024716:	f003 0301 	and.w	r3, r3, #1
 802471a:	2b00      	cmp	r3, #0
 802471c:	d075      	beq.n	802480a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802471e:	4b88      	ldr	r3, [pc, #544]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024720:	689b      	ldr	r3, [r3, #8]
 8024722:	f003 030c 	and.w	r3, r3, #12
 8024726:	2b04      	cmp	r3, #4
 8024728:	d00c      	beq.n	8024744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802472a:	4b85      	ldr	r3, [pc, #532]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802472c:	689b      	ldr	r3, [r3, #8]
 802472e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8024732:	2b08      	cmp	r3, #8
 8024734:	d112      	bne.n	802475c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8024736:	4b82      	ldr	r3, [pc, #520]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024738:	685b      	ldr	r3, [r3, #4]
 802473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802473e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8024742:	d10b      	bne.n	802475c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024744:	4b7e      	ldr	r3, [pc, #504]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802474c:	2b00      	cmp	r3, #0
 802474e:	d05b      	beq.n	8024808 <HAL_RCC_OscConfig+0x108>
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	685b      	ldr	r3, [r3, #4]
 8024754:	2b00      	cmp	r3, #0
 8024756:	d157      	bne.n	8024808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8024758:	2301      	movs	r3, #1
 802475a:	e242      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	685b      	ldr	r3, [r3, #4]
 8024760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024764:	d106      	bne.n	8024774 <HAL_RCC_OscConfig+0x74>
 8024766:	4b76      	ldr	r3, [pc, #472]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024768:	681b      	ldr	r3, [r3, #0]
 802476a:	4a75      	ldr	r2, [pc, #468]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024770:	6013      	str	r3, [r2, #0]
 8024772:	e01d      	b.n	80247b0 <HAL_RCC_OscConfig+0xb0>
 8024774:	687b      	ldr	r3, [r7, #4]
 8024776:	685b      	ldr	r3, [r3, #4]
 8024778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802477c:	d10c      	bne.n	8024798 <HAL_RCC_OscConfig+0x98>
 802477e:	4b70      	ldr	r3, [pc, #448]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	4a6f      	ldr	r2, [pc, #444]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024788:	6013      	str	r3, [r2, #0]
 802478a:	4b6d      	ldr	r3, [pc, #436]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	4a6c      	ldr	r2, [pc, #432]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024794:	6013      	str	r3, [r2, #0]
 8024796:	e00b      	b.n	80247b0 <HAL_RCC_OscConfig+0xb0>
 8024798:	4b69      	ldr	r3, [pc, #420]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802479a:	681b      	ldr	r3, [r3, #0]
 802479c:	4a68      	ldr	r2, [pc, #416]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802479e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80247a2:	6013      	str	r3, [r2, #0]
 80247a4:	4b66      	ldr	r3, [pc, #408]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80247a6:	681b      	ldr	r3, [r3, #0]
 80247a8:	4a65      	ldr	r2, [pc, #404]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80247aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80247ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	685b      	ldr	r3, [r3, #4]
 80247b4:	2b00      	cmp	r3, #0
 80247b6:	d013      	beq.n	80247e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80247b8:	f7fe fa06 	bl	8022bc8 <HAL_GetTick>
 80247bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80247be:	e008      	b.n	80247d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80247c0:	f7fe fa02 	bl	8022bc8 <HAL_GetTick>
 80247c4:	4602      	mov	r2, r0
 80247c6:	693b      	ldr	r3, [r7, #16]
 80247c8:	1ad3      	subs	r3, r2, r3
 80247ca:	2b64      	cmp	r3, #100	; 0x64
 80247cc:	d901      	bls.n	80247d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80247ce:	2303      	movs	r3, #3
 80247d0:	e207      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80247d2:	4b5b      	ldr	r3, [pc, #364]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80247d4:	681b      	ldr	r3, [r3, #0]
 80247d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80247da:	2b00      	cmp	r3, #0
 80247dc:	d0f0      	beq.n	80247c0 <HAL_RCC_OscConfig+0xc0>
 80247de:	e014      	b.n	802480a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80247e0:	f7fe f9f2 	bl	8022bc8 <HAL_GetTick>
 80247e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80247e6:	e008      	b.n	80247fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80247e8:	f7fe f9ee 	bl	8022bc8 <HAL_GetTick>
 80247ec:	4602      	mov	r2, r0
 80247ee:	693b      	ldr	r3, [r7, #16]
 80247f0:	1ad3      	subs	r3, r2, r3
 80247f2:	2b64      	cmp	r3, #100	; 0x64
 80247f4:	d901      	bls.n	80247fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80247f6:	2303      	movs	r3, #3
 80247f8:	e1f3      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80247fa:	4b51      	ldr	r3, [pc, #324]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024802:	2b00      	cmp	r3, #0
 8024804:	d1f0      	bne.n	80247e8 <HAL_RCC_OscConfig+0xe8>
 8024806:	e000      	b.n	802480a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	f003 0302 	and.w	r3, r3, #2
 8024812:	2b00      	cmp	r3, #0
 8024814:	d063      	beq.n	80248de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8024816:	4b4a      	ldr	r3, [pc, #296]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024818:	689b      	ldr	r3, [r3, #8]
 802481a:	f003 030c 	and.w	r3, r3, #12
 802481e:	2b00      	cmp	r3, #0
 8024820:	d00b      	beq.n	802483a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8024822:	4b47      	ldr	r3, [pc, #284]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024824:	689b      	ldr	r3, [r3, #8]
 8024826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802482a:	2b08      	cmp	r3, #8
 802482c:	d11c      	bne.n	8024868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802482e:	4b44      	ldr	r3, [pc, #272]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024830:	685b      	ldr	r3, [r3, #4]
 8024832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024836:	2b00      	cmp	r3, #0
 8024838:	d116      	bne.n	8024868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802483a:	4b41      	ldr	r3, [pc, #260]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802483c:	681b      	ldr	r3, [r3, #0]
 802483e:	f003 0302 	and.w	r3, r3, #2
 8024842:	2b00      	cmp	r3, #0
 8024844:	d005      	beq.n	8024852 <HAL_RCC_OscConfig+0x152>
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	68db      	ldr	r3, [r3, #12]
 802484a:	2b01      	cmp	r3, #1
 802484c:	d001      	beq.n	8024852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802484e:	2301      	movs	r3, #1
 8024850:	e1c7      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024852:	4b3b      	ldr	r3, [pc, #236]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024854:	681b      	ldr	r3, [r3, #0]
 8024856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	691b      	ldr	r3, [r3, #16]
 802485e:	00db      	lsls	r3, r3, #3
 8024860:	4937      	ldr	r1, [pc, #220]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024862:	4313      	orrs	r3, r2
 8024864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8024866:	e03a      	b.n	80248de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	68db      	ldr	r3, [r3, #12]
 802486c:	2b00      	cmp	r3, #0
 802486e:	d020      	beq.n	80248b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8024870:	4b34      	ldr	r3, [pc, #208]	; (8024944 <HAL_RCC_OscConfig+0x244>)
 8024872:	2201      	movs	r2, #1
 8024874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024876:	f7fe f9a7 	bl	8022bc8 <HAL_GetTick>
 802487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802487c:	e008      	b.n	8024890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802487e:	f7fe f9a3 	bl	8022bc8 <HAL_GetTick>
 8024882:	4602      	mov	r2, r0
 8024884:	693b      	ldr	r3, [r7, #16]
 8024886:	1ad3      	subs	r3, r2, r3
 8024888:	2b02      	cmp	r3, #2
 802488a:	d901      	bls.n	8024890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802488c:	2303      	movs	r3, #3
 802488e:	e1a8      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024890:	4b2b      	ldr	r3, [pc, #172]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024892:	681b      	ldr	r3, [r3, #0]
 8024894:	f003 0302 	and.w	r3, r3, #2
 8024898:	2b00      	cmp	r3, #0
 802489a:	d0f0      	beq.n	802487e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802489c:	4b28      	ldr	r3, [pc, #160]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 802489e:	681b      	ldr	r3, [r3, #0]
 80248a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	691b      	ldr	r3, [r3, #16]
 80248a8:	00db      	lsls	r3, r3, #3
 80248aa:	4925      	ldr	r1, [pc, #148]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80248ac:	4313      	orrs	r3, r2
 80248ae:	600b      	str	r3, [r1, #0]
 80248b0:	e015      	b.n	80248de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80248b2:	4b24      	ldr	r3, [pc, #144]	; (8024944 <HAL_RCC_OscConfig+0x244>)
 80248b4:	2200      	movs	r2, #0
 80248b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80248b8:	f7fe f986 	bl	8022bc8 <HAL_GetTick>
 80248bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80248be:	e008      	b.n	80248d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80248c0:	f7fe f982 	bl	8022bc8 <HAL_GetTick>
 80248c4:	4602      	mov	r2, r0
 80248c6:	693b      	ldr	r3, [r7, #16]
 80248c8:	1ad3      	subs	r3, r2, r3
 80248ca:	2b02      	cmp	r3, #2
 80248cc:	d901      	bls.n	80248d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80248ce:	2303      	movs	r3, #3
 80248d0:	e187      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80248d2:	4b1b      	ldr	r3, [pc, #108]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	f003 0302 	and.w	r3, r3, #2
 80248da:	2b00      	cmp	r3, #0
 80248dc:	d1f0      	bne.n	80248c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	f003 0308 	and.w	r3, r3, #8
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	d036      	beq.n	8024958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	695b      	ldr	r3, [r3, #20]
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	d016      	beq.n	8024920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80248f2:	4b15      	ldr	r3, [pc, #84]	; (8024948 <HAL_RCC_OscConfig+0x248>)
 80248f4:	2201      	movs	r2, #1
 80248f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80248f8:	f7fe f966 	bl	8022bc8 <HAL_GetTick>
 80248fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80248fe:	e008      	b.n	8024912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8024900:	f7fe f962 	bl	8022bc8 <HAL_GetTick>
 8024904:	4602      	mov	r2, r0
 8024906:	693b      	ldr	r3, [r7, #16]
 8024908:	1ad3      	subs	r3, r2, r3
 802490a:	2b02      	cmp	r3, #2
 802490c:	d901      	bls.n	8024912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802490e:	2303      	movs	r3, #3
 8024910:	e167      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8024912:	4b0b      	ldr	r3, [pc, #44]	; (8024940 <HAL_RCC_OscConfig+0x240>)
 8024914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8024916:	f003 0302 	and.w	r3, r3, #2
 802491a:	2b00      	cmp	r3, #0
 802491c:	d0f0      	beq.n	8024900 <HAL_RCC_OscConfig+0x200>
 802491e:	e01b      	b.n	8024958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8024920:	4b09      	ldr	r3, [pc, #36]	; (8024948 <HAL_RCC_OscConfig+0x248>)
 8024922:	2200      	movs	r2, #0
 8024924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024926:	f7fe f94f 	bl	8022bc8 <HAL_GetTick>
 802492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802492c:	e00e      	b.n	802494c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802492e:	f7fe f94b 	bl	8022bc8 <HAL_GetTick>
 8024932:	4602      	mov	r2, r0
 8024934:	693b      	ldr	r3, [r7, #16]
 8024936:	1ad3      	subs	r3, r2, r3
 8024938:	2b02      	cmp	r3, #2
 802493a:	d907      	bls.n	802494c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802493c:	2303      	movs	r3, #3
 802493e:	e150      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
 8024940:	40023800 	.word	0x40023800
 8024944:	42470000 	.word	0x42470000
 8024948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802494c:	4b88      	ldr	r3, [pc, #544]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 802494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8024950:	f003 0302 	and.w	r3, r3, #2
 8024954:	2b00      	cmp	r3, #0
 8024956:	d1ea      	bne.n	802492e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	f003 0304 	and.w	r3, r3, #4
 8024960:	2b00      	cmp	r3, #0
 8024962:	f000 8097 	beq.w	8024a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8024966:	2300      	movs	r3, #0
 8024968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802496a:	4b81      	ldr	r3, [pc, #516]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 802496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024972:	2b00      	cmp	r3, #0
 8024974:	d10f      	bne.n	8024996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8024976:	2300      	movs	r3, #0
 8024978:	60bb      	str	r3, [r7, #8]
 802497a:	4b7d      	ldr	r3, [pc, #500]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 802497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802497e:	4a7c      	ldr	r2, [pc, #496]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024984:	6413      	str	r3, [r2, #64]	; 0x40
 8024986:	4b7a      	ldr	r3, [pc, #488]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802498e:	60bb      	str	r3, [r7, #8]
 8024990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024992:	2301      	movs	r3, #1
 8024994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024996:	4b77      	ldr	r3, [pc, #476]	; (8024b74 <HAL_RCC_OscConfig+0x474>)
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802499e:	2b00      	cmp	r3, #0
 80249a0:	d118      	bne.n	80249d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80249a2:	4b74      	ldr	r3, [pc, #464]	; (8024b74 <HAL_RCC_OscConfig+0x474>)
 80249a4:	681b      	ldr	r3, [r3, #0]
 80249a6:	4a73      	ldr	r2, [pc, #460]	; (8024b74 <HAL_RCC_OscConfig+0x474>)
 80249a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80249ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80249ae:	f7fe f90b 	bl	8022bc8 <HAL_GetTick>
 80249b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80249b4:	e008      	b.n	80249c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80249b6:	f7fe f907 	bl	8022bc8 <HAL_GetTick>
 80249ba:	4602      	mov	r2, r0
 80249bc:	693b      	ldr	r3, [r7, #16]
 80249be:	1ad3      	subs	r3, r2, r3
 80249c0:	2b02      	cmp	r3, #2
 80249c2:	d901      	bls.n	80249c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80249c4:	2303      	movs	r3, #3
 80249c6:	e10c      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80249c8:	4b6a      	ldr	r3, [pc, #424]	; (8024b74 <HAL_RCC_OscConfig+0x474>)
 80249ca:	681b      	ldr	r3, [r3, #0]
 80249cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d0f0      	beq.n	80249b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	689b      	ldr	r3, [r3, #8]
 80249d8:	2b01      	cmp	r3, #1
 80249da:	d106      	bne.n	80249ea <HAL_RCC_OscConfig+0x2ea>
 80249dc:	4b64      	ldr	r3, [pc, #400]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 80249de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80249e0:	4a63      	ldr	r2, [pc, #396]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 80249e2:	f043 0301 	orr.w	r3, r3, #1
 80249e6:	6713      	str	r3, [r2, #112]	; 0x70
 80249e8:	e01c      	b.n	8024a24 <HAL_RCC_OscConfig+0x324>
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	689b      	ldr	r3, [r3, #8]
 80249ee:	2b05      	cmp	r3, #5
 80249f0:	d10c      	bne.n	8024a0c <HAL_RCC_OscConfig+0x30c>
 80249f2:	4b5f      	ldr	r3, [pc, #380]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 80249f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80249f6:	4a5e      	ldr	r2, [pc, #376]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 80249f8:	f043 0304 	orr.w	r3, r3, #4
 80249fc:	6713      	str	r3, [r2, #112]	; 0x70
 80249fe:	4b5c      	ldr	r3, [pc, #368]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a02:	4a5b      	ldr	r2, [pc, #364]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a04:	f043 0301 	orr.w	r3, r3, #1
 8024a08:	6713      	str	r3, [r2, #112]	; 0x70
 8024a0a:	e00b      	b.n	8024a24 <HAL_RCC_OscConfig+0x324>
 8024a0c:	4b58      	ldr	r3, [pc, #352]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a10:	4a57      	ldr	r2, [pc, #348]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a12:	f023 0301 	bic.w	r3, r3, #1
 8024a16:	6713      	str	r3, [r2, #112]	; 0x70
 8024a18:	4b55      	ldr	r3, [pc, #340]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a1c:	4a54      	ldr	r2, [pc, #336]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a1e:	f023 0304 	bic.w	r3, r3, #4
 8024a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8024a24:	687b      	ldr	r3, [r7, #4]
 8024a26:	689b      	ldr	r3, [r3, #8]
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d015      	beq.n	8024a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024a2c:	f7fe f8cc 	bl	8022bc8 <HAL_GetTick>
 8024a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024a32:	e00a      	b.n	8024a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024a34:	f7fe f8c8 	bl	8022bc8 <HAL_GetTick>
 8024a38:	4602      	mov	r2, r0
 8024a3a:	693b      	ldr	r3, [r7, #16]
 8024a3c:	1ad3      	subs	r3, r2, r3
 8024a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a42:	4293      	cmp	r3, r2
 8024a44:	d901      	bls.n	8024a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8024a46:	2303      	movs	r3, #3
 8024a48:	e0cb      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024a4a:	4b49      	ldr	r3, [pc, #292]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a4e:	f003 0302 	and.w	r3, r3, #2
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	d0ee      	beq.n	8024a34 <HAL_RCC_OscConfig+0x334>
 8024a56:	e014      	b.n	8024a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024a58:	f7fe f8b6 	bl	8022bc8 <HAL_GetTick>
 8024a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024a5e:	e00a      	b.n	8024a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024a60:	f7fe f8b2 	bl	8022bc8 <HAL_GetTick>
 8024a64:	4602      	mov	r2, r0
 8024a66:	693b      	ldr	r3, [r7, #16]
 8024a68:	1ad3      	subs	r3, r2, r3
 8024a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a6e:	4293      	cmp	r3, r2
 8024a70:	d901      	bls.n	8024a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8024a72:	2303      	movs	r3, #3
 8024a74:	e0b5      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024a76:	4b3e      	ldr	r3, [pc, #248]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a7a:	f003 0302 	and.w	r3, r3, #2
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	d1ee      	bne.n	8024a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024a82:	7dfb      	ldrb	r3, [r7, #23]
 8024a84:	2b01      	cmp	r3, #1
 8024a86:	d105      	bne.n	8024a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024a88:	4b39      	ldr	r3, [pc, #228]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a8c:	4a38      	ldr	r2, [pc, #224]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8024a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8024a94:	687b      	ldr	r3, [r7, #4]
 8024a96:	699b      	ldr	r3, [r3, #24]
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	f000 80a1 	beq.w	8024be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024a9e:	4b34      	ldr	r3, [pc, #208]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024aa0:	689b      	ldr	r3, [r3, #8]
 8024aa2:	f003 030c 	and.w	r3, r3, #12
 8024aa6:	2b08      	cmp	r3, #8
 8024aa8:	d05c      	beq.n	8024b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	699b      	ldr	r3, [r3, #24]
 8024aae:	2b02      	cmp	r3, #2
 8024ab0:	d141      	bne.n	8024b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024ab2:	4b31      	ldr	r3, [pc, #196]	; (8024b78 <HAL_RCC_OscConfig+0x478>)
 8024ab4:	2200      	movs	r2, #0
 8024ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024ab8:	f7fe f886 	bl	8022bc8 <HAL_GetTick>
 8024abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024abe:	e008      	b.n	8024ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024ac0:	f7fe f882 	bl	8022bc8 <HAL_GetTick>
 8024ac4:	4602      	mov	r2, r0
 8024ac6:	693b      	ldr	r3, [r7, #16]
 8024ac8:	1ad3      	subs	r3, r2, r3
 8024aca:	2b02      	cmp	r3, #2
 8024acc:	d901      	bls.n	8024ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8024ace:	2303      	movs	r3, #3
 8024ad0:	e087      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024ad2:	4b27      	ldr	r3, [pc, #156]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024ada:	2b00      	cmp	r3, #0
 8024adc:	d1f0      	bne.n	8024ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	69da      	ldr	r2, [r3, #28]
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	6a1b      	ldr	r3, [r3, #32]
 8024ae6:	431a      	orrs	r2, r3
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024aec:	019b      	lsls	r3, r3, #6
 8024aee:	431a      	orrs	r2, r3
 8024af0:	687b      	ldr	r3, [r7, #4]
 8024af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024af4:	085b      	lsrs	r3, r3, #1
 8024af6:	3b01      	subs	r3, #1
 8024af8:	041b      	lsls	r3, r3, #16
 8024afa:	431a      	orrs	r2, r3
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b00:	061b      	lsls	r3, r3, #24
 8024b02:	491b      	ldr	r1, [pc, #108]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024b04:	4313      	orrs	r3, r2
 8024b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8024b08:	4b1b      	ldr	r3, [pc, #108]	; (8024b78 <HAL_RCC_OscConfig+0x478>)
 8024b0a:	2201      	movs	r2, #1
 8024b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024b0e:	f7fe f85b 	bl	8022bc8 <HAL_GetTick>
 8024b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024b14:	e008      	b.n	8024b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024b16:	f7fe f857 	bl	8022bc8 <HAL_GetTick>
 8024b1a:	4602      	mov	r2, r0
 8024b1c:	693b      	ldr	r3, [r7, #16]
 8024b1e:	1ad3      	subs	r3, r2, r3
 8024b20:	2b02      	cmp	r3, #2
 8024b22:	d901      	bls.n	8024b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8024b24:	2303      	movs	r3, #3
 8024b26:	e05c      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024b28:	4b11      	ldr	r3, [pc, #68]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d0f0      	beq.n	8024b16 <HAL_RCC_OscConfig+0x416>
 8024b34:	e054      	b.n	8024be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024b36:	4b10      	ldr	r3, [pc, #64]	; (8024b78 <HAL_RCC_OscConfig+0x478>)
 8024b38:	2200      	movs	r2, #0
 8024b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024b3c:	f7fe f844 	bl	8022bc8 <HAL_GetTick>
 8024b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b42:	e008      	b.n	8024b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024b44:	f7fe f840 	bl	8022bc8 <HAL_GetTick>
 8024b48:	4602      	mov	r2, r0
 8024b4a:	693b      	ldr	r3, [r7, #16]
 8024b4c:	1ad3      	subs	r3, r2, r3
 8024b4e:	2b02      	cmp	r3, #2
 8024b50:	d901      	bls.n	8024b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8024b52:	2303      	movs	r3, #3
 8024b54:	e045      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b56:	4b06      	ldr	r3, [pc, #24]	; (8024b70 <HAL_RCC_OscConfig+0x470>)
 8024b58:	681b      	ldr	r3, [r3, #0]
 8024b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d1f0      	bne.n	8024b44 <HAL_RCC_OscConfig+0x444>
 8024b62:	e03d      	b.n	8024be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	699b      	ldr	r3, [r3, #24]
 8024b68:	2b01      	cmp	r3, #1
 8024b6a:	d107      	bne.n	8024b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8024b6c:	2301      	movs	r3, #1
 8024b6e:	e038      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
 8024b70:	40023800 	.word	0x40023800
 8024b74:	40007000 	.word	0x40007000
 8024b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024b7c:	4b1b      	ldr	r3, [pc, #108]	; (8024bec <HAL_RCC_OscConfig+0x4ec>)
 8024b7e:	685b      	ldr	r3, [r3, #4]
 8024b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024b82:	687b      	ldr	r3, [r7, #4]
 8024b84:	699b      	ldr	r3, [r3, #24]
 8024b86:	2b01      	cmp	r3, #1
 8024b88:	d028      	beq.n	8024bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024b8a:	68fb      	ldr	r3, [r7, #12]
 8024b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8024b90:	687b      	ldr	r3, [r7, #4]
 8024b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8024b94:	429a      	cmp	r2, r3
 8024b96:	d121      	bne.n	8024bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8024b98:	68fb      	ldr	r3, [r7, #12]
 8024b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024ba2:	429a      	cmp	r2, r3
 8024ba4:	d11a      	bne.n	8024bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024ba6:	68fa      	ldr	r2, [r7, #12]
 8024ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8024bac:	4013      	ands	r3, r2
 8024bae:	687a      	ldr	r2, [r7, #4]
 8024bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8024bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8024bb4:	4293      	cmp	r3, r2
 8024bb6:	d111      	bne.n	8024bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8024bb8:	68fb      	ldr	r3, [r7, #12]
 8024bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8024bbe:	687b      	ldr	r3, [r7, #4]
 8024bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024bc2:	085b      	lsrs	r3, r3, #1
 8024bc4:	3b01      	subs	r3, #1
 8024bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024bc8:	429a      	cmp	r2, r3
 8024bca:	d107      	bne.n	8024bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8024bd8:	429a      	cmp	r2, r3
 8024bda:	d001      	beq.n	8024be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8024bdc:	2301      	movs	r3, #1
 8024bde:	e000      	b.n	8024be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8024be0:	2300      	movs	r3, #0
}
 8024be2:	4618      	mov	r0, r3
 8024be4:	3718      	adds	r7, #24
 8024be6:	46bd      	mov	sp, r7
 8024be8:	bd80      	pop	{r7, pc}
 8024bea:	bf00      	nop
 8024bec:	40023800 	.word	0x40023800

08024bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8024bf0:	b580      	push	{r7, lr}
 8024bf2:	b084      	sub	sp, #16
 8024bf4:	af00      	add	r7, sp, #0
 8024bf6:	6078      	str	r0, [r7, #4]
 8024bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d101      	bne.n	8024c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8024c00:	2301      	movs	r3, #1
 8024c02:	e0cc      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8024c04:	4b68      	ldr	r3, [pc, #416]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024c06:	681b      	ldr	r3, [r3, #0]
 8024c08:	f003 030f 	and.w	r3, r3, #15
 8024c0c:	683a      	ldr	r2, [r7, #0]
 8024c0e:	429a      	cmp	r2, r3
 8024c10:	d90c      	bls.n	8024c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024c12:	4b65      	ldr	r3, [pc, #404]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024c14:	683a      	ldr	r2, [r7, #0]
 8024c16:	b2d2      	uxtb	r2, r2
 8024c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024c1a:	4b63      	ldr	r3, [pc, #396]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024c1c:	681b      	ldr	r3, [r3, #0]
 8024c1e:	f003 030f 	and.w	r3, r3, #15
 8024c22:	683a      	ldr	r2, [r7, #0]
 8024c24:	429a      	cmp	r2, r3
 8024c26:	d001      	beq.n	8024c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8024c28:	2301      	movs	r3, #1
 8024c2a:	e0b8      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	f003 0302 	and.w	r3, r3, #2
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	d020      	beq.n	8024c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	681b      	ldr	r3, [r3, #0]
 8024c3c:	f003 0304 	and.w	r3, r3, #4
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d005      	beq.n	8024c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024c44:	4b59      	ldr	r3, [pc, #356]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c46:	689b      	ldr	r3, [r3, #8]
 8024c48:	4a58      	ldr	r2, [pc, #352]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8024c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024c50:	687b      	ldr	r3, [r7, #4]
 8024c52:	681b      	ldr	r3, [r3, #0]
 8024c54:	f003 0308 	and.w	r3, r3, #8
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	d005      	beq.n	8024c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8024c5c:	4b53      	ldr	r3, [pc, #332]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c5e:	689b      	ldr	r3, [r3, #8]
 8024c60:	4a52      	ldr	r2, [pc, #328]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024c68:	4b50      	ldr	r3, [pc, #320]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c6a:	689b      	ldr	r3, [r3, #8]
 8024c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	689b      	ldr	r3, [r3, #8]
 8024c74:	494d      	ldr	r1, [pc, #308]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c76:	4313      	orrs	r3, r2
 8024c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024c7a:	687b      	ldr	r3, [r7, #4]
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	f003 0301 	and.w	r3, r3, #1
 8024c82:	2b00      	cmp	r3, #0
 8024c84:	d044      	beq.n	8024d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	685b      	ldr	r3, [r3, #4]
 8024c8a:	2b01      	cmp	r3, #1
 8024c8c:	d107      	bne.n	8024c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024c8e:	4b47      	ldr	r3, [pc, #284]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	d119      	bne.n	8024cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024c9a:	2301      	movs	r3, #1
 8024c9c:	e07f      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	685b      	ldr	r3, [r3, #4]
 8024ca2:	2b02      	cmp	r3, #2
 8024ca4:	d003      	beq.n	8024cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024caa:	2b03      	cmp	r3, #3
 8024cac:	d107      	bne.n	8024cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024cae:	4b3f      	ldr	r3, [pc, #252]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024cb0:	681b      	ldr	r3, [r3, #0]
 8024cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024cb6:	2b00      	cmp	r3, #0
 8024cb8:	d109      	bne.n	8024cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024cba:	2301      	movs	r3, #1
 8024cbc:	e06f      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024cbe:	4b3b      	ldr	r3, [pc, #236]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	f003 0302 	and.w	r3, r3, #2
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	d101      	bne.n	8024cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024cca:	2301      	movs	r3, #1
 8024ccc:	e067      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8024cce:	4b37      	ldr	r3, [pc, #220]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024cd0:	689b      	ldr	r3, [r3, #8]
 8024cd2:	f023 0203 	bic.w	r2, r3, #3
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	685b      	ldr	r3, [r3, #4]
 8024cda:	4934      	ldr	r1, [pc, #208]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024cdc:	4313      	orrs	r3, r2
 8024cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8024ce0:	f7fd ff72 	bl	8022bc8 <HAL_GetTick>
 8024ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024ce6:	e00a      	b.n	8024cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024ce8:	f7fd ff6e 	bl	8022bc8 <HAL_GetTick>
 8024cec:	4602      	mov	r2, r0
 8024cee:	68fb      	ldr	r3, [r7, #12]
 8024cf0:	1ad3      	subs	r3, r2, r3
 8024cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8024cf6:	4293      	cmp	r3, r2
 8024cf8:	d901      	bls.n	8024cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8024cfa:	2303      	movs	r3, #3
 8024cfc:	e04f      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024cfe:	4b2b      	ldr	r3, [pc, #172]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d00:	689b      	ldr	r3, [r3, #8]
 8024d02:	f003 020c 	and.w	r2, r3, #12
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	685b      	ldr	r3, [r3, #4]
 8024d0a:	009b      	lsls	r3, r3, #2
 8024d0c:	429a      	cmp	r2, r3
 8024d0e:	d1eb      	bne.n	8024ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8024d10:	4b25      	ldr	r3, [pc, #148]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	f003 030f 	and.w	r3, r3, #15
 8024d18:	683a      	ldr	r2, [r7, #0]
 8024d1a:	429a      	cmp	r2, r3
 8024d1c:	d20c      	bcs.n	8024d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024d1e:	4b22      	ldr	r3, [pc, #136]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024d20:	683a      	ldr	r2, [r7, #0]
 8024d22:	b2d2      	uxtb	r2, r2
 8024d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024d26:	4b20      	ldr	r3, [pc, #128]	; (8024da8 <HAL_RCC_ClockConfig+0x1b8>)
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	f003 030f 	and.w	r3, r3, #15
 8024d2e:	683a      	ldr	r2, [r7, #0]
 8024d30:	429a      	cmp	r2, r3
 8024d32:	d001      	beq.n	8024d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024d34:	2301      	movs	r3, #1
 8024d36:	e032      	b.n	8024d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024d38:	687b      	ldr	r3, [r7, #4]
 8024d3a:	681b      	ldr	r3, [r3, #0]
 8024d3c:	f003 0304 	and.w	r3, r3, #4
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d008      	beq.n	8024d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024d44:	4b19      	ldr	r3, [pc, #100]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d46:	689b      	ldr	r3, [r3, #8]
 8024d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	68db      	ldr	r3, [r3, #12]
 8024d50:	4916      	ldr	r1, [pc, #88]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d52:	4313      	orrs	r3, r2
 8024d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	681b      	ldr	r3, [r3, #0]
 8024d5a:	f003 0308 	and.w	r3, r3, #8
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d009      	beq.n	8024d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024d62:	4b12      	ldr	r3, [pc, #72]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d64:	689b      	ldr	r3, [r3, #8]
 8024d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	691b      	ldr	r3, [r3, #16]
 8024d6e:	00db      	lsls	r3, r3, #3
 8024d70:	490e      	ldr	r1, [pc, #56]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d72:	4313      	orrs	r3, r2
 8024d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024d76:	f000 f889 	bl	8024e8c <HAL_RCC_GetSysClockFreq>
 8024d7a:	4602      	mov	r2, r0
 8024d7c:	4b0b      	ldr	r3, [pc, #44]	; (8024dac <HAL_RCC_ClockConfig+0x1bc>)
 8024d7e:	689b      	ldr	r3, [r3, #8]
 8024d80:	091b      	lsrs	r3, r3, #4
 8024d82:	f003 030f 	and.w	r3, r3, #15
 8024d86:	490a      	ldr	r1, [pc, #40]	; (8024db0 <HAL_RCC_ClockConfig+0x1c0>)
 8024d88:	5ccb      	ldrb	r3, [r1, r3]
 8024d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8024d8e:	4a09      	ldr	r2, [pc, #36]	; (8024db4 <HAL_RCC_ClockConfig+0x1c4>)
 8024d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024d92:	4b09      	ldr	r3, [pc, #36]	; (8024db8 <HAL_RCC_ClockConfig+0x1c8>)
 8024d94:	681b      	ldr	r3, [r3, #0]
 8024d96:	4618      	mov	r0, r3
 8024d98:	f7fd fed2 	bl	8022b40 <HAL_InitTick>

  return HAL_OK;
 8024d9c:	2300      	movs	r3, #0
}
 8024d9e:	4618      	mov	r0, r3
 8024da0:	3710      	adds	r7, #16
 8024da2:	46bd      	mov	sp, r7
 8024da4:	bd80      	pop	{r7, pc}
 8024da6:	bf00      	nop
 8024da8:	40023c00 	.word	0x40023c00
 8024dac:	40023800 	.word	0x40023800
 8024db0:	08035340 	.word	0x08035340
 8024db4:	20000000 	.word	0x20000000
 8024db8:	20000088 	.word	0x20000088

08024dbc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8024dbc:	b580      	push	{r7, lr}
 8024dbe:	b08c      	sub	sp, #48	; 0x30
 8024dc0:	af00      	add	r7, sp, #0
 8024dc2:	60f8      	str	r0, [r7, #12]
 8024dc4:	60b9      	str	r1, [r7, #8]
 8024dc6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d129      	bne.n	8024e22 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8024dce:	2300      	movs	r3, #0
 8024dd0:	61bb      	str	r3, [r7, #24]
 8024dd2:	4b2b      	ldr	r3, [pc, #172]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024dd6:	4a2a      	ldr	r2, [pc, #168]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024dd8:	f043 0301 	orr.w	r3, r3, #1
 8024ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8024dde:	4b28      	ldr	r3, [pc, #160]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024de2:	f003 0301 	and.w	r3, r3, #1
 8024de6:	61bb      	str	r3, [r7, #24]
 8024de8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8024dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024df0:	2302      	movs	r3, #2
 8024df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024df4:	2303      	movs	r3, #3
 8024df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024df8:	2300      	movs	r3, #0
 8024dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8024e00:	f107 031c 	add.w	r3, r7, #28
 8024e04:	4619      	mov	r1, r3
 8024e06:	481f      	ldr	r0, [pc, #124]	; (8024e84 <HAL_RCC_MCOConfig+0xc8>)
 8024e08:	f7ff fa7e 	bl	8024308 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8024e0c:	4b1c      	ldr	r3, [pc, #112]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e0e:	689b      	ldr	r3, [r3, #8]
 8024e10:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8024e14:	68b9      	ldr	r1, [r7, #8]
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	430b      	orrs	r3, r1
 8024e1a:	4919      	ldr	r1, [pc, #100]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e1c:	4313      	orrs	r3, r2
 8024e1e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8024e20:	e029      	b.n	8024e76 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8024e22:	2300      	movs	r3, #0
 8024e24:	617b      	str	r3, [r7, #20]
 8024e26:	4b16      	ldr	r3, [pc, #88]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024e2a:	4a15      	ldr	r2, [pc, #84]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e2c:	f043 0304 	orr.w	r3, r3, #4
 8024e30:	6313      	str	r3, [r2, #48]	; 0x30
 8024e32:	4b13      	ldr	r3, [pc, #76]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024e36:	f003 0304 	and.w	r3, r3, #4
 8024e3a:	617b      	str	r3, [r7, #20]
 8024e3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8024e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024e44:	2302      	movs	r3, #2
 8024e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024e48:	2303      	movs	r3, #3
 8024e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8024e50:	2300      	movs	r3, #0
 8024e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8024e54:	f107 031c 	add.w	r3, r7, #28
 8024e58:	4619      	mov	r1, r3
 8024e5a:	480b      	ldr	r0, [pc, #44]	; (8024e88 <HAL_RCC_MCOConfig+0xcc>)
 8024e5c:	f7ff fa54 	bl	8024308 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8024e60:	4b07      	ldr	r3, [pc, #28]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e62:	689b      	ldr	r3, [r3, #8]
 8024e64:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	00d9      	lsls	r1, r3, #3
 8024e6c:	68bb      	ldr	r3, [r7, #8]
 8024e6e:	430b      	orrs	r3, r1
 8024e70:	4903      	ldr	r1, [pc, #12]	; (8024e80 <HAL_RCC_MCOConfig+0xc4>)
 8024e72:	4313      	orrs	r3, r2
 8024e74:	608b      	str	r3, [r1, #8]
}
 8024e76:	bf00      	nop
 8024e78:	3730      	adds	r7, #48	; 0x30
 8024e7a:	46bd      	mov	sp, r7
 8024e7c:	bd80      	pop	{r7, pc}
 8024e7e:	bf00      	nop
 8024e80:	40023800 	.word	0x40023800
 8024e84:	40020000 	.word	0x40020000
 8024e88:	40020800 	.word	0x40020800

08024e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024e90:	b090      	sub	sp, #64	; 0x40
 8024e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024e94:	2300      	movs	r3, #0
 8024e96:	637b      	str	r3, [r7, #52]	; 0x34
 8024e98:	2300      	movs	r3, #0
 8024e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024e9c:	2300      	movs	r3, #0
 8024e9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8024ea0:	2300      	movs	r3, #0
 8024ea2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8024ea4:	4b59      	ldr	r3, [pc, #356]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024ea6:	689b      	ldr	r3, [r3, #8]
 8024ea8:	f003 030c 	and.w	r3, r3, #12
 8024eac:	2b08      	cmp	r3, #8
 8024eae:	d00d      	beq.n	8024ecc <HAL_RCC_GetSysClockFreq+0x40>
 8024eb0:	2b08      	cmp	r3, #8
 8024eb2:	f200 80a1 	bhi.w	8024ff8 <HAL_RCC_GetSysClockFreq+0x16c>
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d002      	beq.n	8024ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8024eba:	2b04      	cmp	r3, #4
 8024ebc:	d003      	beq.n	8024ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8024ebe:	e09b      	b.n	8024ff8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8024ec0:	4b53      	ldr	r3, [pc, #332]	; (8025010 <HAL_RCC_GetSysClockFreq+0x184>)
 8024ec2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8024ec4:	e09b      	b.n	8024ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8024ec6:	4b53      	ldr	r3, [pc, #332]	; (8025014 <HAL_RCC_GetSysClockFreq+0x188>)
 8024ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8024eca:	e098      	b.n	8024ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024ecc:	4b4f      	ldr	r3, [pc, #316]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024ece:	685b      	ldr	r3, [r3, #4]
 8024ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024ed4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024ed6:	4b4d      	ldr	r3, [pc, #308]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024ed8:	685b      	ldr	r3, [r3, #4]
 8024eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	d028      	beq.n	8024f34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024ee2:	4b4a      	ldr	r3, [pc, #296]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024ee4:	685b      	ldr	r3, [r3, #4]
 8024ee6:	099b      	lsrs	r3, r3, #6
 8024ee8:	2200      	movs	r2, #0
 8024eea:	623b      	str	r3, [r7, #32]
 8024eec:	627a      	str	r2, [r7, #36]	; 0x24
 8024eee:	6a3b      	ldr	r3, [r7, #32]
 8024ef0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8024ef4:	2100      	movs	r1, #0
 8024ef6:	4b47      	ldr	r3, [pc, #284]	; (8025014 <HAL_RCC_GetSysClockFreq+0x188>)
 8024ef8:	fb03 f201 	mul.w	r2, r3, r1
 8024efc:	2300      	movs	r3, #0
 8024efe:	fb00 f303 	mul.w	r3, r0, r3
 8024f02:	4413      	add	r3, r2
 8024f04:	4a43      	ldr	r2, [pc, #268]	; (8025014 <HAL_RCC_GetSysClockFreq+0x188>)
 8024f06:	fba0 1202 	umull	r1, r2, r0, r2
 8024f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024f0c:	460a      	mov	r2, r1
 8024f0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8024f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024f12:	4413      	add	r3, r2
 8024f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f18:	2200      	movs	r2, #0
 8024f1a:	61bb      	str	r3, [r7, #24]
 8024f1c:	61fa      	str	r2, [r7, #28]
 8024f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8024f26:	f7fb fe57 	bl	8020bd8 <__aeabi_uldivmod>
 8024f2a:	4602      	mov	r2, r0
 8024f2c:	460b      	mov	r3, r1
 8024f2e:	4613      	mov	r3, r2
 8024f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024f32:	e053      	b.n	8024fdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024f34:	4b35      	ldr	r3, [pc, #212]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024f36:	685b      	ldr	r3, [r3, #4]
 8024f38:	099b      	lsrs	r3, r3, #6
 8024f3a:	2200      	movs	r2, #0
 8024f3c:	613b      	str	r3, [r7, #16]
 8024f3e:	617a      	str	r2, [r7, #20]
 8024f40:	693b      	ldr	r3, [r7, #16]
 8024f42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8024f46:	f04f 0b00 	mov.w	fp, #0
 8024f4a:	4652      	mov	r2, sl
 8024f4c:	465b      	mov	r3, fp
 8024f4e:	f04f 0000 	mov.w	r0, #0
 8024f52:	f04f 0100 	mov.w	r1, #0
 8024f56:	0159      	lsls	r1, r3, #5
 8024f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8024f5c:	0150      	lsls	r0, r2, #5
 8024f5e:	4602      	mov	r2, r0
 8024f60:	460b      	mov	r3, r1
 8024f62:	ebb2 080a 	subs.w	r8, r2, sl
 8024f66:	eb63 090b 	sbc.w	r9, r3, fp
 8024f6a:	f04f 0200 	mov.w	r2, #0
 8024f6e:	f04f 0300 	mov.w	r3, #0
 8024f72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8024f76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8024f7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8024f7e:	ebb2 0408 	subs.w	r4, r2, r8
 8024f82:	eb63 0509 	sbc.w	r5, r3, r9
 8024f86:	f04f 0200 	mov.w	r2, #0
 8024f8a:	f04f 0300 	mov.w	r3, #0
 8024f8e:	00eb      	lsls	r3, r5, #3
 8024f90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8024f94:	00e2      	lsls	r2, r4, #3
 8024f96:	4614      	mov	r4, r2
 8024f98:	461d      	mov	r5, r3
 8024f9a:	eb14 030a 	adds.w	r3, r4, sl
 8024f9e:	603b      	str	r3, [r7, #0]
 8024fa0:	eb45 030b 	adc.w	r3, r5, fp
 8024fa4:	607b      	str	r3, [r7, #4]
 8024fa6:	f04f 0200 	mov.w	r2, #0
 8024faa:	f04f 0300 	mov.w	r3, #0
 8024fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8024fb2:	4629      	mov	r1, r5
 8024fb4:	028b      	lsls	r3, r1, #10
 8024fb6:	4621      	mov	r1, r4
 8024fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8024fbc:	4621      	mov	r1, r4
 8024fbe:	028a      	lsls	r2, r1, #10
 8024fc0:	4610      	mov	r0, r2
 8024fc2:	4619      	mov	r1, r3
 8024fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024fc6:	2200      	movs	r2, #0
 8024fc8:	60bb      	str	r3, [r7, #8]
 8024fca:	60fa      	str	r2, [r7, #12]
 8024fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024fd0:	f7fb fe02 	bl	8020bd8 <__aeabi_uldivmod>
 8024fd4:	4602      	mov	r2, r0
 8024fd6:	460b      	mov	r3, r1
 8024fd8:	4613      	mov	r3, r2
 8024fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8024fdc:	4b0b      	ldr	r3, [pc, #44]	; (802500c <HAL_RCC_GetSysClockFreq+0x180>)
 8024fde:	685b      	ldr	r3, [r3, #4]
 8024fe0:	0c1b      	lsrs	r3, r3, #16
 8024fe2:	f003 0303 	and.w	r3, r3, #3
 8024fe6:	3301      	adds	r3, #1
 8024fe8:	005b      	lsls	r3, r3, #1
 8024fea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8024fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8024ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8024ff6:	e002      	b.n	8024ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8024ff8:	4b05      	ldr	r3, [pc, #20]	; (8025010 <HAL_RCC_GetSysClockFreq+0x184>)
 8024ffa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8024ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8025000:	4618      	mov	r0, r3
 8025002:	3740      	adds	r7, #64	; 0x40
 8025004:	46bd      	mov	sp, r7
 8025006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802500a:	bf00      	nop
 802500c:	40023800 	.word	0x40023800
 8025010:	00f42400 	.word	0x00f42400
 8025014:	017d7840 	.word	0x017d7840

08025018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8025018:	b480      	push	{r7}
 802501a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802501c:	4b03      	ldr	r3, [pc, #12]	; (802502c <HAL_RCC_GetHCLKFreq+0x14>)
 802501e:	681b      	ldr	r3, [r3, #0]
}
 8025020:	4618      	mov	r0, r3
 8025022:	46bd      	mov	sp, r7
 8025024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025028:	4770      	bx	lr
 802502a:	bf00      	nop
 802502c:	20000000 	.word	0x20000000

08025030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8025030:	b580      	push	{r7, lr}
 8025032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8025034:	f7ff fff0 	bl	8025018 <HAL_RCC_GetHCLKFreq>
 8025038:	4602      	mov	r2, r0
 802503a:	4b05      	ldr	r3, [pc, #20]	; (8025050 <HAL_RCC_GetPCLK1Freq+0x20>)
 802503c:	689b      	ldr	r3, [r3, #8]
 802503e:	0a9b      	lsrs	r3, r3, #10
 8025040:	f003 0307 	and.w	r3, r3, #7
 8025044:	4903      	ldr	r1, [pc, #12]	; (8025054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8025046:	5ccb      	ldrb	r3, [r1, r3]
 8025048:	fa22 f303 	lsr.w	r3, r2, r3
}
 802504c:	4618      	mov	r0, r3
 802504e:	bd80      	pop	{r7, pc}
 8025050:	40023800 	.word	0x40023800
 8025054:	08035350 	.word	0x08035350

08025058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8025058:	b580      	push	{r7, lr}
 802505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802505c:	f7ff ffdc 	bl	8025018 <HAL_RCC_GetHCLKFreq>
 8025060:	4602      	mov	r2, r0
 8025062:	4b05      	ldr	r3, [pc, #20]	; (8025078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8025064:	689b      	ldr	r3, [r3, #8]
 8025066:	0b5b      	lsrs	r3, r3, #13
 8025068:	f003 0307 	and.w	r3, r3, #7
 802506c:	4903      	ldr	r1, [pc, #12]	; (802507c <HAL_RCC_GetPCLK2Freq+0x24>)
 802506e:	5ccb      	ldrb	r3, [r1, r3]
 8025070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8025074:	4618      	mov	r0, r3
 8025076:	bd80      	pop	{r7, pc}
 8025078:	40023800 	.word	0x40023800
 802507c:	08035350 	.word	0x08035350

08025080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8025080:	b580      	push	{r7, lr}
 8025082:	b082      	sub	sp, #8
 8025084:	af00      	add	r7, sp, #0
 8025086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025088:	687b      	ldr	r3, [r7, #4]
 802508a:	2b00      	cmp	r3, #0
 802508c:	d101      	bne.n	8025092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802508e:	2301      	movs	r3, #1
 8025090:	e041      	b.n	8025116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025098:	b2db      	uxtb	r3, r3
 802509a:	2b00      	cmp	r3, #0
 802509c:	d106      	bne.n	80250ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	2200      	movs	r2, #0
 80250a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80250a6:	6878      	ldr	r0, [r7, #4]
 80250a8:	f7fc fd98 	bl	8021bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	2202      	movs	r2, #2
 80250b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	681a      	ldr	r2, [r3, #0]
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	3304      	adds	r3, #4
 80250bc:	4619      	mov	r1, r3
 80250be:	4610      	mov	r0, r2
 80250c0:	f000 fd38 	bl	8025b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	2201      	movs	r2, #1
 80250c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	2201      	movs	r2, #1
 80250d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	2201      	movs	r2, #1
 80250d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	2201      	movs	r2, #1
 80250e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	2201      	movs	r2, #1
 80250e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	2201      	movs	r2, #1
 80250f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	2201      	movs	r2, #1
 80250f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	2201      	movs	r2, #1
 8025100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	2201      	movs	r2, #1
 8025108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802510c:	687b      	ldr	r3, [r7, #4]
 802510e:	2201      	movs	r2, #1
 8025110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025114:	2300      	movs	r3, #0
}
 8025116:	4618      	mov	r0, r3
 8025118:	3708      	adds	r7, #8
 802511a:	46bd      	mov	sp, r7
 802511c:	bd80      	pop	{r7, pc}
	...

08025120 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8025120:	b480      	push	{r7}
 8025122:	b085      	sub	sp, #20
 8025124:	af00      	add	r7, sp, #0
 8025126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8025128:	687b      	ldr	r3, [r7, #4]
 802512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802512e:	b2db      	uxtb	r3, r3
 8025130:	2b01      	cmp	r3, #1
 8025132:	d001      	beq.n	8025138 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8025134:	2301      	movs	r3, #1
 8025136:	e046      	b.n	80251c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	2202      	movs	r2, #2
 802513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	4a23      	ldr	r2, [pc, #140]	; (80251d4 <HAL_TIM_Base_Start+0xb4>)
 8025146:	4293      	cmp	r3, r2
 8025148:	d022      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	681b      	ldr	r3, [r3, #0]
 802514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025152:	d01d      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	681b      	ldr	r3, [r3, #0]
 8025158:	4a1f      	ldr	r2, [pc, #124]	; (80251d8 <HAL_TIM_Base_Start+0xb8>)
 802515a:	4293      	cmp	r3, r2
 802515c:	d018      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	681b      	ldr	r3, [r3, #0]
 8025162:	4a1e      	ldr	r2, [pc, #120]	; (80251dc <HAL_TIM_Base_Start+0xbc>)
 8025164:	4293      	cmp	r3, r2
 8025166:	d013      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	681b      	ldr	r3, [r3, #0]
 802516c:	4a1c      	ldr	r2, [pc, #112]	; (80251e0 <HAL_TIM_Base_Start+0xc0>)
 802516e:	4293      	cmp	r3, r2
 8025170:	d00e      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 8025172:	687b      	ldr	r3, [r7, #4]
 8025174:	681b      	ldr	r3, [r3, #0]
 8025176:	4a1b      	ldr	r2, [pc, #108]	; (80251e4 <HAL_TIM_Base_Start+0xc4>)
 8025178:	4293      	cmp	r3, r2
 802517a:	d009      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	4a19      	ldr	r2, [pc, #100]	; (80251e8 <HAL_TIM_Base_Start+0xc8>)
 8025182:	4293      	cmp	r3, r2
 8025184:	d004      	beq.n	8025190 <HAL_TIM_Base_Start+0x70>
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	681b      	ldr	r3, [r3, #0]
 802518a:	4a18      	ldr	r2, [pc, #96]	; (80251ec <HAL_TIM_Base_Start+0xcc>)
 802518c:	4293      	cmp	r3, r2
 802518e:	d111      	bne.n	80251b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	689b      	ldr	r3, [r3, #8]
 8025196:	f003 0307 	and.w	r3, r3, #7
 802519a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802519c:	68fb      	ldr	r3, [r7, #12]
 802519e:	2b06      	cmp	r3, #6
 80251a0:	d010      	beq.n	80251c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80251a2:	687b      	ldr	r3, [r7, #4]
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	681a      	ldr	r2, [r3, #0]
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	681b      	ldr	r3, [r3, #0]
 80251ac:	f042 0201 	orr.w	r2, r2, #1
 80251b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80251b2:	e007      	b.n	80251c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	681b      	ldr	r3, [r3, #0]
 80251b8:	681a      	ldr	r2, [r3, #0]
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	681b      	ldr	r3, [r3, #0]
 80251be:	f042 0201 	orr.w	r2, r2, #1
 80251c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80251c4:	2300      	movs	r3, #0
}
 80251c6:	4618      	mov	r0, r3
 80251c8:	3714      	adds	r7, #20
 80251ca:	46bd      	mov	sp, r7
 80251cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251d0:	4770      	bx	lr
 80251d2:	bf00      	nop
 80251d4:	40010000 	.word	0x40010000
 80251d8:	40000400 	.word	0x40000400
 80251dc:	40000800 	.word	0x40000800
 80251e0:	40000c00 	.word	0x40000c00
 80251e4:	40010400 	.word	0x40010400
 80251e8:	40014000 	.word	0x40014000
 80251ec:	40001800 	.word	0x40001800

080251f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80251f0:	b480      	push	{r7}
 80251f2:	b083      	sub	sp, #12
 80251f4:	af00      	add	r7, sp, #0
 80251f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	681b      	ldr	r3, [r3, #0]
 80251fc:	6a1a      	ldr	r2, [r3, #32]
 80251fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8025202:	4013      	ands	r3, r2
 8025204:	2b00      	cmp	r3, #0
 8025206:	d10f      	bne.n	8025228 <HAL_TIM_Base_Stop+0x38>
 8025208:	687b      	ldr	r3, [r7, #4]
 802520a:	681b      	ldr	r3, [r3, #0]
 802520c:	6a1a      	ldr	r2, [r3, #32]
 802520e:	f240 4344 	movw	r3, #1092	; 0x444
 8025212:	4013      	ands	r3, r2
 8025214:	2b00      	cmp	r3, #0
 8025216:	d107      	bne.n	8025228 <HAL_TIM_Base_Stop+0x38>
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	681b      	ldr	r3, [r3, #0]
 802521c:	681a      	ldr	r2, [r3, #0]
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	f022 0201 	bic.w	r2, r2, #1
 8025226:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8025228:	687b      	ldr	r3, [r7, #4]
 802522a:	2201      	movs	r2, #1
 802522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8025230:	2300      	movs	r3, #0
}
 8025232:	4618      	mov	r0, r3
 8025234:	370c      	adds	r7, #12
 8025236:	46bd      	mov	sp, r7
 8025238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802523c:	4770      	bx	lr
	...

08025240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8025240:	b480      	push	{r7}
 8025242:	b085      	sub	sp, #20
 8025244:	af00      	add	r7, sp, #0
 8025246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802524e:	b2db      	uxtb	r3, r3
 8025250:	2b01      	cmp	r3, #1
 8025252:	d001      	beq.n	8025258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8025254:	2301      	movs	r3, #1
 8025256:	e04e      	b.n	80252f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	2202      	movs	r2, #2
 802525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	681b      	ldr	r3, [r3, #0]
 8025264:	68da      	ldr	r2, [r3, #12]
 8025266:	687b      	ldr	r3, [r7, #4]
 8025268:	681b      	ldr	r3, [r3, #0]
 802526a:	f042 0201 	orr.w	r2, r2, #1
 802526e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025270:	687b      	ldr	r3, [r7, #4]
 8025272:	681b      	ldr	r3, [r3, #0]
 8025274:	4a23      	ldr	r2, [pc, #140]	; (8025304 <HAL_TIM_Base_Start_IT+0xc4>)
 8025276:	4293      	cmp	r3, r2
 8025278:	d022      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 802527a:	687b      	ldr	r3, [r7, #4]
 802527c:	681b      	ldr	r3, [r3, #0]
 802527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025282:	d01d      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	4a1f      	ldr	r2, [pc, #124]	; (8025308 <HAL_TIM_Base_Start_IT+0xc8>)
 802528a:	4293      	cmp	r3, r2
 802528c:	d018      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 802528e:	687b      	ldr	r3, [r7, #4]
 8025290:	681b      	ldr	r3, [r3, #0]
 8025292:	4a1e      	ldr	r2, [pc, #120]	; (802530c <HAL_TIM_Base_Start_IT+0xcc>)
 8025294:	4293      	cmp	r3, r2
 8025296:	d013      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	681b      	ldr	r3, [r3, #0]
 802529c:	4a1c      	ldr	r2, [pc, #112]	; (8025310 <HAL_TIM_Base_Start_IT+0xd0>)
 802529e:	4293      	cmp	r3, r2
 80252a0:	d00e      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	681b      	ldr	r3, [r3, #0]
 80252a6:	4a1b      	ldr	r2, [pc, #108]	; (8025314 <HAL_TIM_Base_Start_IT+0xd4>)
 80252a8:	4293      	cmp	r3, r2
 80252aa:	d009      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	681b      	ldr	r3, [r3, #0]
 80252b0:	4a19      	ldr	r2, [pc, #100]	; (8025318 <HAL_TIM_Base_Start_IT+0xd8>)
 80252b2:	4293      	cmp	r3, r2
 80252b4:	d004      	beq.n	80252c0 <HAL_TIM_Base_Start_IT+0x80>
 80252b6:	687b      	ldr	r3, [r7, #4]
 80252b8:	681b      	ldr	r3, [r3, #0]
 80252ba:	4a18      	ldr	r2, [pc, #96]	; (802531c <HAL_TIM_Base_Start_IT+0xdc>)
 80252bc:	4293      	cmp	r3, r2
 80252be:	d111      	bne.n	80252e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	681b      	ldr	r3, [r3, #0]
 80252c4:	689b      	ldr	r3, [r3, #8]
 80252c6:	f003 0307 	and.w	r3, r3, #7
 80252ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80252cc:	68fb      	ldr	r3, [r7, #12]
 80252ce:	2b06      	cmp	r3, #6
 80252d0:	d010      	beq.n	80252f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	681a      	ldr	r2, [r3, #0]
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	f042 0201 	orr.w	r2, r2, #1
 80252e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80252e2:	e007      	b.n	80252f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	681a      	ldr	r2, [r3, #0]
 80252ea:	687b      	ldr	r3, [r7, #4]
 80252ec:	681b      	ldr	r3, [r3, #0]
 80252ee:	f042 0201 	orr.w	r2, r2, #1
 80252f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80252f4:	2300      	movs	r3, #0
}
 80252f6:	4618      	mov	r0, r3
 80252f8:	3714      	adds	r7, #20
 80252fa:	46bd      	mov	sp, r7
 80252fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025300:	4770      	bx	lr
 8025302:	bf00      	nop
 8025304:	40010000 	.word	0x40010000
 8025308:	40000400 	.word	0x40000400
 802530c:	40000800 	.word	0x40000800
 8025310:	40000c00 	.word	0x40000c00
 8025314:	40010400 	.word	0x40010400
 8025318:	40014000 	.word	0x40014000
 802531c:	40001800 	.word	0x40001800

08025320 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8025320:	b480      	push	{r7}
 8025322:	b083      	sub	sp, #12
 8025324:	af00      	add	r7, sp, #0
 8025326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	68da      	ldr	r2, [r3, #12]
 802532e:	687b      	ldr	r3, [r7, #4]
 8025330:	681b      	ldr	r3, [r3, #0]
 8025332:	f022 0201 	bic.w	r2, r2, #1
 8025336:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	6a1a      	ldr	r2, [r3, #32]
 802533e:	f241 1311 	movw	r3, #4369	; 0x1111
 8025342:	4013      	ands	r3, r2
 8025344:	2b00      	cmp	r3, #0
 8025346:	d10f      	bne.n	8025368 <HAL_TIM_Base_Stop_IT+0x48>
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	681b      	ldr	r3, [r3, #0]
 802534c:	6a1a      	ldr	r2, [r3, #32]
 802534e:	f240 4344 	movw	r3, #1092	; 0x444
 8025352:	4013      	ands	r3, r2
 8025354:	2b00      	cmp	r3, #0
 8025356:	d107      	bne.n	8025368 <HAL_TIM_Base_Stop_IT+0x48>
 8025358:	687b      	ldr	r3, [r7, #4]
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	681a      	ldr	r2, [r3, #0]
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	681b      	ldr	r3, [r3, #0]
 8025362:	f022 0201 	bic.w	r2, r2, #1
 8025366:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8025368:	687b      	ldr	r3, [r7, #4]
 802536a:	2201      	movs	r2, #1
 802536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8025370:	2300      	movs	r3, #0
}
 8025372:	4618      	mov	r0, r3
 8025374:	370c      	adds	r7, #12
 8025376:	46bd      	mov	sp, r7
 8025378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802537c:	4770      	bx	lr

0802537e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802537e:	b580      	push	{r7, lr}
 8025380:	b082      	sub	sp, #8
 8025382:	af00      	add	r7, sp, #0
 8025384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	2b00      	cmp	r3, #0
 802538a:	d101      	bne.n	8025390 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802538c:	2301      	movs	r3, #1
 802538e:	e041      	b.n	8025414 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025396:	b2db      	uxtb	r3, r3
 8025398:	2b00      	cmp	r3, #0
 802539a:	d106      	bne.n	80253aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	2200      	movs	r2, #0
 80253a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80253a4:	6878      	ldr	r0, [r7, #4]
 80253a6:	f000 f839 	bl	802541c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	2202      	movs	r2, #2
 80253ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	681a      	ldr	r2, [r3, #0]
 80253b6:	687b      	ldr	r3, [r7, #4]
 80253b8:	3304      	adds	r3, #4
 80253ba:	4619      	mov	r1, r3
 80253bc:	4610      	mov	r0, r2
 80253be:	f000 fbb9 	bl	8025b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80253c2:	687b      	ldr	r3, [r7, #4]
 80253c4:	2201      	movs	r2, #1
 80253c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80253ca:	687b      	ldr	r3, [r7, #4]
 80253cc:	2201      	movs	r2, #1
 80253ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80253d2:	687b      	ldr	r3, [r7, #4]
 80253d4:	2201      	movs	r2, #1
 80253d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	2201      	movs	r2, #1
 80253de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	2201      	movs	r2, #1
 80253e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80253ea:	687b      	ldr	r3, [r7, #4]
 80253ec:	2201      	movs	r2, #1
 80253ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	2201      	movs	r2, #1
 80253f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	2201      	movs	r2, #1
 80253fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	2201      	movs	r2, #1
 8025406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	2201      	movs	r2, #1
 802540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025412:	2300      	movs	r3, #0
}
 8025414:	4618      	mov	r0, r3
 8025416:	3708      	adds	r7, #8
 8025418:	46bd      	mov	sp, r7
 802541a:	bd80      	pop	{r7, pc}

0802541c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 802541c:	b480      	push	{r7}
 802541e:	b083      	sub	sp, #12
 8025420:	af00      	add	r7, sp, #0
 8025422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8025424:	bf00      	nop
 8025426:	370c      	adds	r7, #12
 8025428:	46bd      	mov	sp, r7
 802542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802542e:	4770      	bx	lr

08025430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025430:	b580      	push	{r7, lr}
 8025432:	b084      	sub	sp, #16
 8025434:	af00      	add	r7, sp, #0
 8025436:	6078      	str	r0, [r7, #4]
 8025438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 802543a:	683b      	ldr	r3, [r7, #0]
 802543c:	2b00      	cmp	r3, #0
 802543e:	d109      	bne.n	8025454 <HAL_TIM_PWM_Start+0x24>
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8025446:	b2db      	uxtb	r3, r3
 8025448:	2b01      	cmp	r3, #1
 802544a:	bf14      	ite	ne
 802544c:	2301      	movne	r3, #1
 802544e:	2300      	moveq	r3, #0
 8025450:	b2db      	uxtb	r3, r3
 8025452:	e022      	b.n	802549a <HAL_TIM_PWM_Start+0x6a>
 8025454:	683b      	ldr	r3, [r7, #0]
 8025456:	2b04      	cmp	r3, #4
 8025458:	d109      	bne.n	802546e <HAL_TIM_PWM_Start+0x3e>
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8025460:	b2db      	uxtb	r3, r3
 8025462:	2b01      	cmp	r3, #1
 8025464:	bf14      	ite	ne
 8025466:	2301      	movne	r3, #1
 8025468:	2300      	moveq	r3, #0
 802546a:	b2db      	uxtb	r3, r3
 802546c:	e015      	b.n	802549a <HAL_TIM_PWM_Start+0x6a>
 802546e:	683b      	ldr	r3, [r7, #0]
 8025470:	2b08      	cmp	r3, #8
 8025472:	d109      	bne.n	8025488 <HAL_TIM_PWM_Start+0x58>
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802547a:	b2db      	uxtb	r3, r3
 802547c:	2b01      	cmp	r3, #1
 802547e:	bf14      	ite	ne
 8025480:	2301      	movne	r3, #1
 8025482:	2300      	moveq	r3, #0
 8025484:	b2db      	uxtb	r3, r3
 8025486:	e008      	b.n	802549a <HAL_TIM_PWM_Start+0x6a>
 8025488:	687b      	ldr	r3, [r7, #4]
 802548a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802548e:	b2db      	uxtb	r3, r3
 8025490:	2b01      	cmp	r3, #1
 8025492:	bf14      	ite	ne
 8025494:	2301      	movne	r3, #1
 8025496:	2300      	moveq	r3, #0
 8025498:	b2db      	uxtb	r3, r3
 802549a:	2b00      	cmp	r3, #0
 802549c:	d001      	beq.n	80254a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 802549e:	2301      	movs	r3, #1
 80254a0:	e07c      	b.n	802559c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80254a2:	683b      	ldr	r3, [r7, #0]
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d104      	bne.n	80254b2 <HAL_TIM_PWM_Start+0x82>
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	2202      	movs	r2, #2
 80254ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80254b0:	e013      	b.n	80254da <HAL_TIM_PWM_Start+0xaa>
 80254b2:	683b      	ldr	r3, [r7, #0]
 80254b4:	2b04      	cmp	r3, #4
 80254b6:	d104      	bne.n	80254c2 <HAL_TIM_PWM_Start+0x92>
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	2202      	movs	r2, #2
 80254bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80254c0:	e00b      	b.n	80254da <HAL_TIM_PWM_Start+0xaa>
 80254c2:	683b      	ldr	r3, [r7, #0]
 80254c4:	2b08      	cmp	r3, #8
 80254c6:	d104      	bne.n	80254d2 <HAL_TIM_PWM_Start+0xa2>
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	2202      	movs	r2, #2
 80254cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80254d0:	e003      	b.n	80254da <HAL_TIM_PWM_Start+0xaa>
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	2202      	movs	r2, #2
 80254d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	681b      	ldr	r3, [r3, #0]
 80254de:	2201      	movs	r2, #1
 80254e0:	6839      	ldr	r1, [r7, #0]
 80254e2:	4618      	mov	r0, r3
 80254e4:	f000 fe10 	bl	8026108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	681b      	ldr	r3, [r3, #0]
 80254ec:	4a2d      	ldr	r2, [pc, #180]	; (80255a4 <HAL_TIM_PWM_Start+0x174>)
 80254ee:	4293      	cmp	r3, r2
 80254f0:	d004      	beq.n	80254fc <HAL_TIM_PWM_Start+0xcc>
 80254f2:	687b      	ldr	r3, [r7, #4]
 80254f4:	681b      	ldr	r3, [r3, #0]
 80254f6:	4a2c      	ldr	r2, [pc, #176]	; (80255a8 <HAL_TIM_PWM_Start+0x178>)
 80254f8:	4293      	cmp	r3, r2
 80254fa:	d101      	bne.n	8025500 <HAL_TIM_PWM_Start+0xd0>
 80254fc:	2301      	movs	r3, #1
 80254fe:	e000      	b.n	8025502 <HAL_TIM_PWM_Start+0xd2>
 8025500:	2300      	movs	r3, #0
 8025502:	2b00      	cmp	r3, #0
 8025504:	d007      	beq.n	8025516 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8025506:	687b      	ldr	r3, [r7, #4]
 8025508:	681b      	ldr	r3, [r3, #0]
 802550a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802550c:	687b      	ldr	r3, [r7, #4]
 802550e:	681b      	ldr	r3, [r3, #0]
 8025510:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025514:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	681b      	ldr	r3, [r3, #0]
 802551a:	4a22      	ldr	r2, [pc, #136]	; (80255a4 <HAL_TIM_PWM_Start+0x174>)
 802551c:	4293      	cmp	r3, r2
 802551e:	d022      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	681b      	ldr	r3, [r3, #0]
 8025524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025528:	d01d      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 802552a:	687b      	ldr	r3, [r7, #4]
 802552c:	681b      	ldr	r3, [r3, #0]
 802552e:	4a1f      	ldr	r2, [pc, #124]	; (80255ac <HAL_TIM_PWM_Start+0x17c>)
 8025530:	4293      	cmp	r3, r2
 8025532:	d018      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 8025534:	687b      	ldr	r3, [r7, #4]
 8025536:	681b      	ldr	r3, [r3, #0]
 8025538:	4a1d      	ldr	r2, [pc, #116]	; (80255b0 <HAL_TIM_PWM_Start+0x180>)
 802553a:	4293      	cmp	r3, r2
 802553c:	d013      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	4a1c      	ldr	r2, [pc, #112]	; (80255b4 <HAL_TIM_PWM_Start+0x184>)
 8025544:	4293      	cmp	r3, r2
 8025546:	d00e      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 8025548:	687b      	ldr	r3, [r7, #4]
 802554a:	681b      	ldr	r3, [r3, #0]
 802554c:	4a16      	ldr	r2, [pc, #88]	; (80255a8 <HAL_TIM_PWM_Start+0x178>)
 802554e:	4293      	cmp	r3, r2
 8025550:	d009      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 8025552:	687b      	ldr	r3, [r7, #4]
 8025554:	681b      	ldr	r3, [r3, #0]
 8025556:	4a18      	ldr	r2, [pc, #96]	; (80255b8 <HAL_TIM_PWM_Start+0x188>)
 8025558:	4293      	cmp	r3, r2
 802555a:	d004      	beq.n	8025566 <HAL_TIM_PWM_Start+0x136>
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	681b      	ldr	r3, [r3, #0]
 8025560:	4a16      	ldr	r2, [pc, #88]	; (80255bc <HAL_TIM_PWM_Start+0x18c>)
 8025562:	4293      	cmp	r3, r2
 8025564:	d111      	bne.n	802558a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025566:	687b      	ldr	r3, [r7, #4]
 8025568:	681b      	ldr	r3, [r3, #0]
 802556a:	689b      	ldr	r3, [r3, #8]
 802556c:	f003 0307 	and.w	r3, r3, #7
 8025570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025572:	68fb      	ldr	r3, [r7, #12]
 8025574:	2b06      	cmp	r3, #6
 8025576:	d010      	beq.n	802559a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	681b      	ldr	r3, [r3, #0]
 802557c:	681a      	ldr	r2, [r3, #0]
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	681b      	ldr	r3, [r3, #0]
 8025582:	f042 0201 	orr.w	r2, r2, #1
 8025586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025588:	e007      	b.n	802559a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802558a:	687b      	ldr	r3, [r7, #4]
 802558c:	681b      	ldr	r3, [r3, #0]
 802558e:	681a      	ldr	r2, [r3, #0]
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	f042 0201 	orr.w	r2, r2, #1
 8025598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802559a:	2300      	movs	r3, #0
}
 802559c:	4618      	mov	r0, r3
 802559e:	3710      	adds	r7, #16
 80255a0:	46bd      	mov	sp, r7
 80255a2:	bd80      	pop	{r7, pc}
 80255a4:	40010000 	.word	0x40010000
 80255a8:	40010400 	.word	0x40010400
 80255ac:	40000400 	.word	0x40000400
 80255b0:	40000800 	.word	0x40000800
 80255b4:	40000c00 	.word	0x40000c00
 80255b8:	40014000 	.word	0x40014000
 80255bc:	40001800 	.word	0x40001800

080255c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80255c0:	b580      	push	{r7, lr}
 80255c2:	b082      	sub	sp, #8
 80255c4:	af00      	add	r7, sp, #0
 80255c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80255c8:	687b      	ldr	r3, [r7, #4]
 80255ca:	681b      	ldr	r3, [r3, #0]
 80255cc:	691b      	ldr	r3, [r3, #16]
 80255ce:	f003 0302 	and.w	r3, r3, #2
 80255d2:	2b02      	cmp	r3, #2
 80255d4:	d122      	bne.n	802561c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	681b      	ldr	r3, [r3, #0]
 80255da:	68db      	ldr	r3, [r3, #12]
 80255dc:	f003 0302 	and.w	r3, r3, #2
 80255e0:	2b02      	cmp	r3, #2
 80255e2:	d11b      	bne.n	802561c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80255e4:	687b      	ldr	r3, [r7, #4]
 80255e6:	681b      	ldr	r3, [r3, #0]
 80255e8:	f06f 0202 	mvn.w	r2, #2
 80255ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80255ee:	687b      	ldr	r3, [r7, #4]
 80255f0:	2201      	movs	r2, #1
 80255f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80255f4:	687b      	ldr	r3, [r7, #4]
 80255f6:	681b      	ldr	r3, [r3, #0]
 80255f8:	699b      	ldr	r3, [r3, #24]
 80255fa:	f003 0303 	and.w	r3, r3, #3
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d003      	beq.n	802560a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8025602:	6878      	ldr	r0, [r7, #4]
 8025604:	f000 fa77 	bl	8025af6 <HAL_TIM_IC_CaptureCallback>
 8025608:	e005      	b.n	8025616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802560a:	6878      	ldr	r0, [r7, #4]
 802560c:	f000 fa69 	bl	8025ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025610:	6878      	ldr	r0, [r7, #4]
 8025612:	f000 fa7a 	bl	8025b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	2200      	movs	r2, #0
 802561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	681b      	ldr	r3, [r3, #0]
 8025620:	691b      	ldr	r3, [r3, #16]
 8025622:	f003 0304 	and.w	r3, r3, #4
 8025626:	2b04      	cmp	r3, #4
 8025628:	d122      	bne.n	8025670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	681b      	ldr	r3, [r3, #0]
 802562e:	68db      	ldr	r3, [r3, #12]
 8025630:	f003 0304 	and.w	r3, r3, #4
 8025634:	2b04      	cmp	r3, #4
 8025636:	d11b      	bne.n	8025670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8025638:	687b      	ldr	r3, [r7, #4]
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	f06f 0204 	mvn.w	r2, #4
 8025640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	2202      	movs	r2, #2
 8025646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	681b      	ldr	r3, [r3, #0]
 802564c:	699b      	ldr	r3, [r3, #24]
 802564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025652:	2b00      	cmp	r3, #0
 8025654:	d003      	beq.n	802565e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025656:	6878      	ldr	r0, [r7, #4]
 8025658:	f000 fa4d 	bl	8025af6 <HAL_TIM_IC_CaptureCallback>
 802565c:	e005      	b.n	802566a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802565e:	6878      	ldr	r0, [r7, #4]
 8025660:	f000 fa3f 	bl	8025ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025664:	6878      	ldr	r0, [r7, #4]
 8025666:	f000 fa50 	bl	8025b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	2200      	movs	r2, #0
 802566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8025670:	687b      	ldr	r3, [r7, #4]
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	691b      	ldr	r3, [r3, #16]
 8025676:	f003 0308 	and.w	r3, r3, #8
 802567a:	2b08      	cmp	r3, #8
 802567c:	d122      	bne.n	80256c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802567e:	687b      	ldr	r3, [r7, #4]
 8025680:	681b      	ldr	r3, [r3, #0]
 8025682:	68db      	ldr	r3, [r3, #12]
 8025684:	f003 0308 	and.w	r3, r3, #8
 8025688:	2b08      	cmp	r3, #8
 802568a:	d11b      	bne.n	80256c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802568c:	687b      	ldr	r3, [r7, #4]
 802568e:	681b      	ldr	r3, [r3, #0]
 8025690:	f06f 0208 	mvn.w	r2, #8
 8025694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	2204      	movs	r2, #4
 802569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802569c:	687b      	ldr	r3, [r7, #4]
 802569e:	681b      	ldr	r3, [r3, #0]
 80256a0:	69db      	ldr	r3, [r3, #28]
 80256a2:	f003 0303 	and.w	r3, r3, #3
 80256a6:	2b00      	cmp	r3, #0
 80256a8:	d003      	beq.n	80256b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80256aa:	6878      	ldr	r0, [r7, #4]
 80256ac:	f000 fa23 	bl	8025af6 <HAL_TIM_IC_CaptureCallback>
 80256b0:	e005      	b.n	80256be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80256b2:	6878      	ldr	r0, [r7, #4]
 80256b4:	f000 fa15 	bl	8025ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80256b8:	6878      	ldr	r0, [r7, #4]
 80256ba:	f000 fa26 	bl	8025b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80256be:	687b      	ldr	r3, [r7, #4]
 80256c0:	2200      	movs	r2, #0
 80256c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	681b      	ldr	r3, [r3, #0]
 80256c8:	691b      	ldr	r3, [r3, #16]
 80256ca:	f003 0310 	and.w	r3, r3, #16
 80256ce:	2b10      	cmp	r3, #16
 80256d0:	d122      	bne.n	8025718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	681b      	ldr	r3, [r3, #0]
 80256d6:	68db      	ldr	r3, [r3, #12]
 80256d8:	f003 0310 	and.w	r3, r3, #16
 80256dc:	2b10      	cmp	r3, #16
 80256de:	d11b      	bne.n	8025718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	681b      	ldr	r3, [r3, #0]
 80256e4:	f06f 0210 	mvn.w	r2, #16
 80256e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	2208      	movs	r2, #8
 80256ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	69db      	ldr	r3, [r3, #28]
 80256f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	d003      	beq.n	8025706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80256fe:	6878      	ldr	r0, [r7, #4]
 8025700:	f000 f9f9 	bl	8025af6 <HAL_TIM_IC_CaptureCallback>
 8025704:	e005      	b.n	8025712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025706:	6878      	ldr	r0, [r7, #4]
 8025708:	f000 f9eb 	bl	8025ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f000 f9fc 	bl	8025b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025712:	687b      	ldr	r3, [r7, #4]
 8025714:	2200      	movs	r2, #0
 8025716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	681b      	ldr	r3, [r3, #0]
 802571c:	691b      	ldr	r3, [r3, #16]
 802571e:	f003 0301 	and.w	r3, r3, #1
 8025722:	2b01      	cmp	r3, #1
 8025724:	d10e      	bne.n	8025744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	681b      	ldr	r3, [r3, #0]
 802572a:	68db      	ldr	r3, [r3, #12]
 802572c:	f003 0301 	and.w	r3, r3, #1
 8025730:	2b01      	cmp	r3, #1
 8025732:	d107      	bne.n	8025744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8025734:	687b      	ldr	r3, [r7, #4]
 8025736:	681b      	ldr	r3, [r3, #0]
 8025738:	f06f 0201 	mvn.w	r2, #1
 802573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802573e:	6878      	ldr	r0, [r7, #4]
 8025740:	f7fc fb0e 	bl	8021d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8025744:	687b      	ldr	r3, [r7, #4]
 8025746:	681b      	ldr	r3, [r3, #0]
 8025748:	691b      	ldr	r3, [r3, #16]
 802574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802574e:	2b80      	cmp	r3, #128	; 0x80
 8025750:	d10e      	bne.n	8025770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	681b      	ldr	r3, [r3, #0]
 8025756:	68db      	ldr	r3, [r3, #12]
 8025758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802575c:	2b80      	cmp	r3, #128	; 0x80
 802575e:	d107      	bne.n	8025770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8025760:	687b      	ldr	r3, [r7, #4]
 8025762:	681b      	ldr	r3, [r3, #0]
 8025764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8025768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802576a:	6878      	ldr	r0, [r7, #4]
 802576c:	f000 fdca 	bl	8026304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8025770:	687b      	ldr	r3, [r7, #4]
 8025772:	681b      	ldr	r3, [r3, #0]
 8025774:	691b      	ldr	r3, [r3, #16]
 8025776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802577a:	2b40      	cmp	r3, #64	; 0x40
 802577c:	d10e      	bne.n	802579c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802577e:	687b      	ldr	r3, [r7, #4]
 8025780:	681b      	ldr	r3, [r3, #0]
 8025782:	68db      	ldr	r3, [r3, #12]
 8025784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025788:	2b40      	cmp	r3, #64	; 0x40
 802578a:	d107      	bne.n	802579c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802578c:	687b      	ldr	r3, [r7, #4]
 802578e:	681b      	ldr	r3, [r3, #0]
 8025790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8025794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8025796:	6878      	ldr	r0, [r7, #4]
 8025798:	f000 f9c1 	bl	8025b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	681b      	ldr	r3, [r3, #0]
 80257a0:	691b      	ldr	r3, [r3, #16]
 80257a2:	f003 0320 	and.w	r3, r3, #32
 80257a6:	2b20      	cmp	r3, #32
 80257a8:	d10e      	bne.n	80257c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80257aa:	687b      	ldr	r3, [r7, #4]
 80257ac:	681b      	ldr	r3, [r3, #0]
 80257ae:	68db      	ldr	r3, [r3, #12]
 80257b0:	f003 0320 	and.w	r3, r3, #32
 80257b4:	2b20      	cmp	r3, #32
 80257b6:	d107      	bne.n	80257c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	681b      	ldr	r3, [r3, #0]
 80257bc:	f06f 0220 	mvn.w	r2, #32
 80257c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80257c2:	6878      	ldr	r0, [r7, #4]
 80257c4:	f000 fd94 	bl	80262f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80257c8:	bf00      	nop
 80257ca:	3708      	adds	r7, #8
 80257cc:	46bd      	mov	sp, r7
 80257ce:	bd80      	pop	{r7, pc}

080257d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80257d0:	b580      	push	{r7, lr}
 80257d2:	b086      	sub	sp, #24
 80257d4:	af00      	add	r7, sp, #0
 80257d6:	60f8      	str	r0, [r7, #12]
 80257d8:	60b9      	str	r1, [r7, #8]
 80257da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80257dc:	2300      	movs	r3, #0
 80257de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80257e0:	68fb      	ldr	r3, [r7, #12]
 80257e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80257e6:	2b01      	cmp	r3, #1
 80257e8:	d101      	bne.n	80257ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80257ea:	2302      	movs	r3, #2
 80257ec:	e0ae      	b.n	802594c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80257ee:	68fb      	ldr	r3, [r7, #12]
 80257f0:	2201      	movs	r2, #1
 80257f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80257f6:	687b      	ldr	r3, [r7, #4]
 80257f8:	2b0c      	cmp	r3, #12
 80257fa:	f200 809f 	bhi.w	802593c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80257fe:	a201      	add	r2, pc, #4	; (adr r2, 8025804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8025800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025804:	08025839 	.word	0x08025839
 8025808:	0802593d 	.word	0x0802593d
 802580c:	0802593d 	.word	0x0802593d
 8025810:	0802593d 	.word	0x0802593d
 8025814:	08025879 	.word	0x08025879
 8025818:	0802593d 	.word	0x0802593d
 802581c:	0802593d 	.word	0x0802593d
 8025820:	0802593d 	.word	0x0802593d
 8025824:	080258bb 	.word	0x080258bb
 8025828:	0802593d 	.word	0x0802593d
 802582c:	0802593d 	.word	0x0802593d
 8025830:	0802593d 	.word	0x0802593d
 8025834:	080258fb 	.word	0x080258fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8025838:	68fb      	ldr	r3, [r7, #12]
 802583a:	681b      	ldr	r3, [r3, #0]
 802583c:	68b9      	ldr	r1, [r7, #8]
 802583e:	4618      	mov	r0, r3
 8025840:	f000 fa18 	bl	8025c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8025844:	68fb      	ldr	r3, [r7, #12]
 8025846:	681b      	ldr	r3, [r3, #0]
 8025848:	699a      	ldr	r2, [r3, #24]
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	681b      	ldr	r3, [r3, #0]
 802584e:	f042 0208 	orr.w	r2, r2, #8
 8025852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8025854:	68fb      	ldr	r3, [r7, #12]
 8025856:	681b      	ldr	r3, [r3, #0]
 8025858:	699a      	ldr	r2, [r3, #24]
 802585a:	68fb      	ldr	r3, [r7, #12]
 802585c:	681b      	ldr	r3, [r3, #0]
 802585e:	f022 0204 	bic.w	r2, r2, #4
 8025862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8025864:	68fb      	ldr	r3, [r7, #12]
 8025866:	681b      	ldr	r3, [r3, #0]
 8025868:	6999      	ldr	r1, [r3, #24]
 802586a:	68bb      	ldr	r3, [r7, #8]
 802586c:	691a      	ldr	r2, [r3, #16]
 802586e:	68fb      	ldr	r3, [r7, #12]
 8025870:	681b      	ldr	r3, [r3, #0]
 8025872:	430a      	orrs	r2, r1
 8025874:	619a      	str	r2, [r3, #24]
      break;
 8025876:	e064      	b.n	8025942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8025878:	68fb      	ldr	r3, [r7, #12]
 802587a:	681b      	ldr	r3, [r3, #0]
 802587c:	68b9      	ldr	r1, [r7, #8]
 802587e:	4618      	mov	r0, r3
 8025880:	f000 fa68 	bl	8025d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	681b      	ldr	r3, [r3, #0]
 8025888:	699a      	ldr	r2, [r3, #24]
 802588a:	68fb      	ldr	r3, [r7, #12]
 802588c:	681b      	ldr	r3, [r3, #0]
 802588e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8025894:	68fb      	ldr	r3, [r7, #12]
 8025896:	681b      	ldr	r3, [r3, #0]
 8025898:	699a      	ldr	r2, [r3, #24]
 802589a:	68fb      	ldr	r3, [r7, #12]
 802589c:	681b      	ldr	r3, [r3, #0]
 802589e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80258a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80258a4:	68fb      	ldr	r3, [r7, #12]
 80258a6:	681b      	ldr	r3, [r3, #0]
 80258a8:	6999      	ldr	r1, [r3, #24]
 80258aa:	68bb      	ldr	r3, [r7, #8]
 80258ac:	691b      	ldr	r3, [r3, #16]
 80258ae:	021a      	lsls	r2, r3, #8
 80258b0:	68fb      	ldr	r3, [r7, #12]
 80258b2:	681b      	ldr	r3, [r3, #0]
 80258b4:	430a      	orrs	r2, r1
 80258b6:	619a      	str	r2, [r3, #24]
      break;
 80258b8:	e043      	b.n	8025942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80258ba:	68fb      	ldr	r3, [r7, #12]
 80258bc:	681b      	ldr	r3, [r3, #0]
 80258be:	68b9      	ldr	r1, [r7, #8]
 80258c0:	4618      	mov	r0, r3
 80258c2:	f000 fabd 	bl	8025e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80258c6:	68fb      	ldr	r3, [r7, #12]
 80258c8:	681b      	ldr	r3, [r3, #0]
 80258ca:	69da      	ldr	r2, [r3, #28]
 80258cc:	68fb      	ldr	r3, [r7, #12]
 80258ce:	681b      	ldr	r3, [r3, #0]
 80258d0:	f042 0208 	orr.w	r2, r2, #8
 80258d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80258d6:	68fb      	ldr	r3, [r7, #12]
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	69da      	ldr	r2, [r3, #28]
 80258dc:	68fb      	ldr	r3, [r7, #12]
 80258de:	681b      	ldr	r3, [r3, #0]
 80258e0:	f022 0204 	bic.w	r2, r2, #4
 80258e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80258e6:	68fb      	ldr	r3, [r7, #12]
 80258e8:	681b      	ldr	r3, [r3, #0]
 80258ea:	69d9      	ldr	r1, [r3, #28]
 80258ec:	68bb      	ldr	r3, [r7, #8]
 80258ee:	691a      	ldr	r2, [r3, #16]
 80258f0:	68fb      	ldr	r3, [r7, #12]
 80258f2:	681b      	ldr	r3, [r3, #0]
 80258f4:	430a      	orrs	r2, r1
 80258f6:	61da      	str	r2, [r3, #28]
      break;
 80258f8:	e023      	b.n	8025942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80258fa:	68fb      	ldr	r3, [r7, #12]
 80258fc:	681b      	ldr	r3, [r3, #0]
 80258fe:	68b9      	ldr	r1, [r7, #8]
 8025900:	4618      	mov	r0, r3
 8025902:	f000 fb11 	bl	8025f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8025906:	68fb      	ldr	r3, [r7, #12]
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	69da      	ldr	r2, [r3, #28]
 802590c:	68fb      	ldr	r3, [r7, #12]
 802590e:	681b      	ldr	r3, [r3, #0]
 8025910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8025916:	68fb      	ldr	r3, [r7, #12]
 8025918:	681b      	ldr	r3, [r3, #0]
 802591a:	69da      	ldr	r2, [r3, #28]
 802591c:	68fb      	ldr	r3, [r7, #12]
 802591e:	681b      	ldr	r3, [r3, #0]
 8025920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8025924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8025926:	68fb      	ldr	r3, [r7, #12]
 8025928:	681b      	ldr	r3, [r3, #0]
 802592a:	69d9      	ldr	r1, [r3, #28]
 802592c:	68bb      	ldr	r3, [r7, #8]
 802592e:	691b      	ldr	r3, [r3, #16]
 8025930:	021a      	lsls	r2, r3, #8
 8025932:	68fb      	ldr	r3, [r7, #12]
 8025934:	681b      	ldr	r3, [r3, #0]
 8025936:	430a      	orrs	r2, r1
 8025938:	61da      	str	r2, [r3, #28]
      break;
 802593a:	e002      	b.n	8025942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 802593c:	2301      	movs	r3, #1
 802593e:	75fb      	strb	r3, [r7, #23]
      break;
 8025940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8025942:	68fb      	ldr	r3, [r7, #12]
 8025944:	2200      	movs	r2, #0
 8025946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802594a:	7dfb      	ldrb	r3, [r7, #23]
}
 802594c:	4618      	mov	r0, r3
 802594e:	3718      	adds	r7, #24
 8025950:	46bd      	mov	sp, r7
 8025952:	bd80      	pop	{r7, pc}

08025954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8025954:	b580      	push	{r7, lr}
 8025956:	b084      	sub	sp, #16
 8025958:	af00      	add	r7, sp, #0
 802595a:	6078      	str	r0, [r7, #4]
 802595c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802595e:	2300      	movs	r3, #0
 8025960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8025962:	687b      	ldr	r3, [r7, #4]
 8025964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025968:	2b01      	cmp	r3, #1
 802596a:	d101      	bne.n	8025970 <HAL_TIM_ConfigClockSource+0x1c>
 802596c:	2302      	movs	r3, #2
 802596e:	e0b4      	b.n	8025ada <HAL_TIM_ConfigClockSource+0x186>
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	2201      	movs	r2, #1
 8025974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	2202      	movs	r2, #2
 802597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	681b      	ldr	r3, [r3, #0]
 8025984:	689b      	ldr	r3, [r3, #8]
 8025986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8025988:	68bb      	ldr	r3, [r7, #8]
 802598a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802598e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8025990:	68bb      	ldr	r3, [r7, #8]
 8025992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8025998:	687b      	ldr	r3, [r7, #4]
 802599a:	681b      	ldr	r3, [r3, #0]
 802599c:	68ba      	ldr	r2, [r7, #8]
 802599e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80259a0:	683b      	ldr	r3, [r7, #0]
 80259a2:	681b      	ldr	r3, [r3, #0]
 80259a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80259a8:	d03e      	beq.n	8025a28 <HAL_TIM_ConfigClockSource+0xd4>
 80259aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80259ae:	f200 8087 	bhi.w	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80259b6:	f000 8086 	beq.w	8025ac6 <HAL_TIM_ConfigClockSource+0x172>
 80259ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80259be:	d87f      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259c0:	2b70      	cmp	r3, #112	; 0x70
 80259c2:	d01a      	beq.n	80259fa <HAL_TIM_ConfigClockSource+0xa6>
 80259c4:	2b70      	cmp	r3, #112	; 0x70
 80259c6:	d87b      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259c8:	2b60      	cmp	r3, #96	; 0x60
 80259ca:	d050      	beq.n	8025a6e <HAL_TIM_ConfigClockSource+0x11a>
 80259cc:	2b60      	cmp	r3, #96	; 0x60
 80259ce:	d877      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259d0:	2b50      	cmp	r3, #80	; 0x50
 80259d2:	d03c      	beq.n	8025a4e <HAL_TIM_ConfigClockSource+0xfa>
 80259d4:	2b50      	cmp	r3, #80	; 0x50
 80259d6:	d873      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259d8:	2b40      	cmp	r3, #64	; 0x40
 80259da:	d058      	beq.n	8025a8e <HAL_TIM_ConfigClockSource+0x13a>
 80259dc:	2b40      	cmp	r3, #64	; 0x40
 80259de:	d86f      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259e0:	2b30      	cmp	r3, #48	; 0x30
 80259e2:	d064      	beq.n	8025aae <HAL_TIM_ConfigClockSource+0x15a>
 80259e4:	2b30      	cmp	r3, #48	; 0x30
 80259e6:	d86b      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259e8:	2b20      	cmp	r3, #32
 80259ea:	d060      	beq.n	8025aae <HAL_TIM_ConfigClockSource+0x15a>
 80259ec:	2b20      	cmp	r3, #32
 80259ee:	d867      	bhi.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80259f0:	2b00      	cmp	r3, #0
 80259f2:	d05c      	beq.n	8025aae <HAL_TIM_ConfigClockSource+0x15a>
 80259f4:	2b10      	cmp	r3, #16
 80259f6:	d05a      	beq.n	8025aae <HAL_TIM_ConfigClockSource+0x15a>
 80259f8:	e062      	b.n	8025ac0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80259fa:	687b      	ldr	r3, [r7, #4]
 80259fc:	6818      	ldr	r0, [r3, #0]
 80259fe:	683b      	ldr	r3, [r7, #0]
 8025a00:	6899      	ldr	r1, [r3, #8]
 8025a02:	683b      	ldr	r3, [r7, #0]
 8025a04:	685a      	ldr	r2, [r3, #4]
 8025a06:	683b      	ldr	r3, [r7, #0]
 8025a08:	68db      	ldr	r3, [r3, #12]
 8025a0a:	f000 fb5d 	bl	80260c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	681b      	ldr	r3, [r3, #0]
 8025a12:	689b      	ldr	r3, [r3, #8]
 8025a14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8025a16:	68bb      	ldr	r3, [r7, #8]
 8025a18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8025a1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8025a1e:	687b      	ldr	r3, [r7, #4]
 8025a20:	681b      	ldr	r3, [r3, #0]
 8025a22:	68ba      	ldr	r2, [r7, #8]
 8025a24:	609a      	str	r2, [r3, #8]
      break;
 8025a26:	e04f      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8025a28:	687b      	ldr	r3, [r7, #4]
 8025a2a:	6818      	ldr	r0, [r3, #0]
 8025a2c:	683b      	ldr	r3, [r7, #0]
 8025a2e:	6899      	ldr	r1, [r3, #8]
 8025a30:	683b      	ldr	r3, [r7, #0]
 8025a32:	685a      	ldr	r2, [r3, #4]
 8025a34:	683b      	ldr	r3, [r7, #0]
 8025a36:	68db      	ldr	r3, [r3, #12]
 8025a38:	f000 fb46 	bl	80260c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8025a3c:	687b      	ldr	r3, [r7, #4]
 8025a3e:	681b      	ldr	r3, [r3, #0]
 8025a40:	689a      	ldr	r2, [r3, #8]
 8025a42:	687b      	ldr	r3, [r7, #4]
 8025a44:	681b      	ldr	r3, [r3, #0]
 8025a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8025a4a:	609a      	str	r2, [r3, #8]
      break;
 8025a4c:	e03c      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8025a4e:	687b      	ldr	r3, [r7, #4]
 8025a50:	6818      	ldr	r0, [r3, #0]
 8025a52:	683b      	ldr	r3, [r7, #0]
 8025a54:	6859      	ldr	r1, [r3, #4]
 8025a56:	683b      	ldr	r3, [r7, #0]
 8025a58:	68db      	ldr	r3, [r3, #12]
 8025a5a:	461a      	mov	r2, r3
 8025a5c:	f000 faba 	bl	8025fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	681b      	ldr	r3, [r3, #0]
 8025a64:	2150      	movs	r1, #80	; 0x50
 8025a66:	4618      	mov	r0, r3
 8025a68:	f000 fb13 	bl	8026092 <TIM_ITRx_SetConfig>
      break;
 8025a6c:	e02c      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	6818      	ldr	r0, [r3, #0]
 8025a72:	683b      	ldr	r3, [r7, #0]
 8025a74:	6859      	ldr	r1, [r3, #4]
 8025a76:	683b      	ldr	r3, [r7, #0]
 8025a78:	68db      	ldr	r3, [r3, #12]
 8025a7a:	461a      	mov	r2, r3
 8025a7c:	f000 fad9 	bl	8026032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	681b      	ldr	r3, [r3, #0]
 8025a84:	2160      	movs	r1, #96	; 0x60
 8025a86:	4618      	mov	r0, r3
 8025a88:	f000 fb03 	bl	8026092 <TIM_ITRx_SetConfig>
      break;
 8025a8c:	e01c      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8025a8e:	687b      	ldr	r3, [r7, #4]
 8025a90:	6818      	ldr	r0, [r3, #0]
 8025a92:	683b      	ldr	r3, [r7, #0]
 8025a94:	6859      	ldr	r1, [r3, #4]
 8025a96:	683b      	ldr	r3, [r7, #0]
 8025a98:	68db      	ldr	r3, [r3, #12]
 8025a9a:	461a      	mov	r2, r3
 8025a9c:	f000 fa9a 	bl	8025fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8025aa0:	687b      	ldr	r3, [r7, #4]
 8025aa2:	681b      	ldr	r3, [r3, #0]
 8025aa4:	2140      	movs	r1, #64	; 0x40
 8025aa6:	4618      	mov	r0, r3
 8025aa8:	f000 faf3 	bl	8026092 <TIM_ITRx_SetConfig>
      break;
 8025aac:	e00c      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681a      	ldr	r2, [r3, #0]
 8025ab2:	683b      	ldr	r3, [r7, #0]
 8025ab4:	681b      	ldr	r3, [r3, #0]
 8025ab6:	4619      	mov	r1, r3
 8025ab8:	4610      	mov	r0, r2
 8025aba:	f000 faea 	bl	8026092 <TIM_ITRx_SetConfig>
      break;
 8025abe:	e003      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8025ac0:	2301      	movs	r3, #1
 8025ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8025ac4:	e000      	b.n	8025ac8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8025ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8025ac8:	687b      	ldr	r3, [r7, #4]
 8025aca:	2201      	movs	r2, #1
 8025acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	2200      	movs	r2, #0
 8025ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8025ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8025ada:	4618      	mov	r0, r3
 8025adc:	3710      	adds	r7, #16
 8025ade:	46bd      	mov	sp, r7
 8025ae0:	bd80      	pop	{r7, pc}

08025ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8025ae2:	b480      	push	{r7}
 8025ae4:	b083      	sub	sp, #12
 8025ae6:	af00      	add	r7, sp, #0
 8025ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8025aea:	bf00      	nop
 8025aec:	370c      	adds	r7, #12
 8025aee:	46bd      	mov	sp, r7
 8025af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025af4:	4770      	bx	lr

08025af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8025af6:	b480      	push	{r7}
 8025af8:	b083      	sub	sp, #12
 8025afa:	af00      	add	r7, sp, #0
 8025afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8025afe:	bf00      	nop
 8025b00:	370c      	adds	r7, #12
 8025b02:	46bd      	mov	sp, r7
 8025b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b08:	4770      	bx	lr

08025b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8025b0a:	b480      	push	{r7}
 8025b0c:	b083      	sub	sp, #12
 8025b0e:	af00      	add	r7, sp, #0
 8025b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8025b12:	bf00      	nop
 8025b14:	370c      	adds	r7, #12
 8025b16:	46bd      	mov	sp, r7
 8025b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b1c:	4770      	bx	lr

08025b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8025b1e:	b480      	push	{r7}
 8025b20:	b083      	sub	sp, #12
 8025b22:	af00      	add	r7, sp, #0
 8025b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8025b26:	bf00      	nop
 8025b28:	370c      	adds	r7, #12
 8025b2a:	46bd      	mov	sp, r7
 8025b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b30:	4770      	bx	lr
	...

08025b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8025b34:	b480      	push	{r7}
 8025b36:	b085      	sub	sp, #20
 8025b38:	af00      	add	r7, sp, #0
 8025b3a:	6078      	str	r0, [r7, #4]
 8025b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8025b3e:	687b      	ldr	r3, [r7, #4]
 8025b40:	681b      	ldr	r3, [r3, #0]
 8025b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	4a40      	ldr	r2, [pc, #256]	; (8025c48 <TIM_Base_SetConfig+0x114>)
 8025b48:	4293      	cmp	r3, r2
 8025b4a:	d013      	beq.n	8025b74 <TIM_Base_SetConfig+0x40>
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025b52:	d00f      	beq.n	8025b74 <TIM_Base_SetConfig+0x40>
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	4a3d      	ldr	r2, [pc, #244]	; (8025c4c <TIM_Base_SetConfig+0x118>)
 8025b58:	4293      	cmp	r3, r2
 8025b5a:	d00b      	beq.n	8025b74 <TIM_Base_SetConfig+0x40>
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	4a3c      	ldr	r2, [pc, #240]	; (8025c50 <TIM_Base_SetConfig+0x11c>)
 8025b60:	4293      	cmp	r3, r2
 8025b62:	d007      	beq.n	8025b74 <TIM_Base_SetConfig+0x40>
 8025b64:	687b      	ldr	r3, [r7, #4]
 8025b66:	4a3b      	ldr	r2, [pc, #236]	; (8025c54 <TIM_Base_SetConfig+0x120>)
 8025b68:	4293      	cmp	r3, r2
 8025b6a:	d003      	beq.n	8025b74 <TIM_Base_SetConfig+0x40>
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	4a3a      	ldr	r2, [pc, #232]	; (8025c58 <TIM_Base_SetConfig+0x124>)
 8025b70:	4293      	cmp	r3, r2
 8025b72:	d108      	bne.n	8025b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8025b74:	68fb      	ldr	r3, [r7, #12]
 8025b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8025b7c:	683b      	ldr	r3, [r7, #0]
 8025b7e:	685b      	ldr	r3, [r3, #4]
 8025b80:	68fa      	ldr	r2, [r7, #12]
 8025b82:	4313      	orrs	r3, r2
 8025b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8025b86:	687b      	ldr	r3, [r7, #4]
 8025b88:	4a2f      	ldr	r2, [pc, #188]	; (8025c48 <TIM_Base_SetConfig+0x114>)
 8025b8a:	4293      	cmp	r3, r2
 8025b8c:	d02b      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025b8e:	687b      	ldr	r3, [r7, #4]
 8025b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025b94:	d027      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	4a2c      	ldr	r2, [pc, #176]	; (8025c4c <TIM_Base_SetConfig+0x118>)
 8025b9a:	4293      	cmp	r3, r2
 8025b9c:	d023      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	4a2b      	ldr	r2, [pc, #172]	; (8025c50 <TIM_Base_SetConfig+0x11c>)
 8025ba2:	4293      	cmp	r3, r2
 8025ba4:	d01f      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	4a2a      	ldr	r2, [pc, #168]	; (8025c54 <TIM_Base_SetConfig+0x120>)
 8025baa:	4293      	cmp	r3, r2
 8025bac:	d01b      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bae:	687b      	ldr	r3, [r7, #4]
 8025bb0:	4a29      	ldr	r2, [pc, #164]	; (8025c58 <TIM_Base_SetConfig+0x124>)
 8025bb2:	4293      	cmp	r3, r2
 8025bb4:	d017      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	4a28      	ldr	r2, [pc, #160]	; (8025c5c <TIM_Base_SetConfig+0x128>)
 8025bba:	4293      	cmp	r3, r2
 8025bbc:	d013      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bbe:	687b      	ldr	r3, [r7, #4]
 8025bc0:	4a27      	ldr	r2, [pc, #156]	; (8025c60 <TIM_Base_SetConfig+0x12c>)
 8025bc2:	4293      	cmp	r3, r2
 8025bc4:	d00f      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	4a26      	ldr	r2, [pc, #152]	; (8025c64 <TIM_Base_SetConfig+0x130>)
 8025bca:	4293      	cmp	r3, r2
 8025bcc:	d00b      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	4a25      	ldr	r2, [pc, #148]	; (8025c68 <TIM_Base_SetConfig+0x134>)
 8025bd2:	4293      	cmp	r3, r2
 8025bd4:	d007      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	4a24      	ldr	r2, [pc, #144]	; (8025c6c <TIM_Base_SetConfig+0x138>)
 8025bda:	4293      	cmp	r3, r2
 8025bdc:	d003      	beq.n	8025be6 <TIM_Base_SetConfig+0xb2>
 8025bde:	687b      	ldr	r3, [r7, #4]
 8025be0:	4a23      	ldr	r2, [pc, #140]	; (8025c70 <TIM_Base_SetConfig+0x13c>)
 8025be2:	4293      	cmp	r3, r2
 8025be4:	d108      	bne.n	8025bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8025be6:	68fb      	ldr	r3, [r7, #12]
 8025be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8025bee:	683b      	ldr	r3, [r7, #0]
 8025bf0:	68db      	ldr	r3, [r3, #12]
 8025bf2:	68fa      	ldr	r2, [r7, #12]
 8025bf4:	4313      	orrs	r3, r2
 8025bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8025bf8:	68fb      	ldr	r3, [r7, #12]
 8025bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8025bfe:	683b      	ldr	r3, [r7, #0]
 8025c00:	695b      	ldr	r3, [r3, #20]
 8025c02:	4313      	orrs	r3, r2
 8025c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8025c06:	687b      	ldr	r3, [r7, #4]
 8025c08:	68fa      	ldr	r2, [r7, #12]
 8025c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8025c0c:	683b      	ldr	r3, [r7, #0]
 8025c0e:	689a      	ldr	r2, [r3, #8]
 8025c10:	687b      	ldr	r3, [r7, #4]
 8025c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8025c14:	683b      	ldr	r3, [r7, #0]
 8025c16:	681a      	ldr	r2, [r3, #0]
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	4a0a      	ldr	r2, [pc, #40]	; (8025c48 <TIM_Base_SetConfig+0x114>)
 8025c20:	4293      	cmp	r3, r2
 8025c22:	d003      	beq.n	8025c2c <TIM_Base_SetConfig+0xf8>
 8025c24:	687b      	ldr	r3, [r7, #4]
 8025c26:	4a0c      	ldr	r2, [pc, #48]	; (8025c58 <TIM_Base_SetConfig+0x124>)
 8025c28:	4293      	cmp	r3, r2
 8025c2a:	d103      	bne.n	8025c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8025c2c:	683b      	ldr	r3, [r7, #0]
 8025c2e:	691a      	ldr	r2, [r3, #16]
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8025c34:	687b      	ldr	r3, [r7, #4]
 8025c36:	2201      	movs	r2, #1
 8025c38:	615a      	str	r2, [r3, #20]
}
 8025c3a:	bf00      	nop
 8025c3c:	3714      	adds	r7, #20
 8025c3e:	46bd      	mov	sp, r7
 8025c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c44:	4770      	bx	lr
 8025c46:	bf00      	nop
 8025c48:	40010000 	.word	0x40010000
 8025c4c:	40000400 	.word	0x40000400
 8025c50:	40000800 	.word	0x40000800
 8025c54:	40000c00 	.word	0x40000c00
 8025c58:	40010400 	.word	0x40010400
 8025c5c:	40014000 	.word	0x40014000
 8025c60:	40014400 	.word	0x40014400
 8025c64:	40014800 	.word	0x40014800
 8025c68:	40001800 	.word	0x40001800
 8025c6c:	40001c00 	.word	0x40001c00
 8025c70:	40002000 	.word	0x40002000

08025c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025c74:	b480      	push	{r7}
 8025c76:	b087      	sub	sp, #28
 8025c78:	af00      	add	r7, sp, #0
 8025c7a:	6078      	str	r0, [r7, #4]
 8025c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	6a1b      	ldr	r3, [r3, #32]
 8025c82:	f023 0201 	bic.w	r2, r3, #1
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	6a1b      	ldr	r3, [r3, #32]
 8025c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	685b      	ldr	r3, [r3, #4]
 8025c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	699b      	ldr	r3, [r3, #24]
 8025c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8025ca4:	68fb      	ldr	r3, [r7, #12]
 8025ca6:	f023 0303 	bic.w	r3, r3, #3
 8025caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8025cac:	683b      	ldr	r3, [r7, #0]
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	68fa      	ldr	r2, [r7, #12]
 8025cb2:	4313      	orrs	r3, r2
 8025cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8025cb6:	697b      	ldr	r3, [r7, #20]
 8025cb8:	f023 0302 	bic.w	r3, r3, #2
 8025cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8025cbe:	683b      	ldr	r3, [r7, #0]
 8025cc0:	689b      	ldr	r3, [r3, #8]
 8025cc2:	697a      	ldr	r2, [r7, #20]
 8025cc4:	4313      	orrs	r3, r2
 8025cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	4a20      	ldr	r2, [pc, #128]	; (8025d4c <TIM_OC1_SetConfig+0xd8>)
 8025ccc:	4293      	cmp	r3, r2
 8025cce:	d003      	beq.n	8025cd8 <TIM_OC1_SetConfig+0x64>
 8025cd0:	687b      	ldr	r3, [r7, #4]
 8025cd2:	4a1f      	ldr	r2, [pc, #124]	; (8025d50 <TIM_OC1_SetConfig+0xdc>)
 8025cd4:	4293      	cmp	r3, r2
 8025cd6:	d10c      	bne.n	8025cf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8025cd8:	697b      	ldr	r3, [r7, #20]
 8025cda:	f023 0308 	bic.w	r3, r3, #8
 8025cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8025ce0:	683b      	ldr	r3, [r7, #0]
 8025ce2:	68db      	ldr	r3, [r3, #12]
 8025ce4:	697a      	ldr	r2, [r7, #20]
 8025ce6:	4313      	orrs	r3, r2
 8025ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8025cea:	697b      	ldr	r3, [r7, #20]
 8025cec:	f023 0304 	bic.w	r3, r3, #4
 8025cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025cf2:	687b      	ldr	r3, [r7, #4]
 8025cf4:	4a15      	ldr	r2, [pc, #84]	; (8025d4c <TIM_OC1_SetConfig+0xd8>)
 8025cf6:	4293      	cmp	r3, r2
 8025cf8:	d003      	beq.n	8025d02 <TIM_OC1_SetConfig+0x8e>
 8025cfa:	687b      	ldr	r3, [r7, #4]
 8025cfc:	4a14      	ldr	r2, [pc, #80]	; (8025d50 <TIM_OC1_SetConfig+0xdc>)
 8025cfe:	4293      	cmp	r3, r2
 8025d00:	d111      	bne.n	8025d26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8025d02:	693b      	ldr	r3, [r7, #16]
 8025d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8025d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8025d0a:	693b      	ldr	r3, [r7, #16]
 8025d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8025d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8025d12:	683b      	ldr	r3, [r7, #0]
 8025d14:	695b      	ldr	r3, [r3, #20]
 8025d16:	693a      	ldr	r2, [r7, #16]
 8025d18:	4313      	orrs	r3, r2
 8025d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8025d1c:	683b      	ldr	r3, [r7, #0]
 8025d1e:	699b      	ldr	r3, [r3, #24]
 8025d20:	693a      	ldr	r2, [r7, #16]
 8025d22:	4313      	orrs	r3, r2
 8025d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	693a      	ldr	r2, [r7, #16]
 8025d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8025d2c:	687b      	ldr	r3, [r7, #4]
 8025d2e:	68fa      	ldr	r2, [r7, #12]
 8025d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8025d32:	683b      	ldr	r3, [r7, #0]
 8025d34:	685a      	ldr	r2, [r3, #4]
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	697a      	ldr	r2, [r7, #20]
 8025d3e:	621a      	str	r2, [r3, #32]
}
 8025d40:	bf00      	nop
 8025d42:	371c      	adds	r7, #28
 8025d44:	46bd      	mov	sp, r7
 8025d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d4a:	4770      	bx	lr
 8025d4c:	40010000 	.word	0x40010000
 8025d50:	40010400 	.word	0x40010400

08025d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025d54:	b480      	push	{r7}
 8025d56:	b087      	sub	sp, #28
 8025d58:	af00      	add	r7, sp, #0
 8025d5a:	6078      	str	r0, [r7, #4]
 8025d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8025d5e:	687b      	ldr	r3, [r7, #4]
 8025d60:	6a1b      	ldr	r3, [r3, #32]
 8025d62:	f023 0210 	bic.w	r2, r3, #16
 8025d66:	687b      	ldr	r3, [r7, #4]
 8025d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025d6a:	687b      	ldr	r3, [r7, #4]
 8025d6c:	6a1b      	ldr	r3, [r3, #32]
 8025d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025d70:	687b      	ldr	r3, [r7, #4]
 8025d72:	685b      	ldr	r3, [r3, #4]
 8025d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8025d76:	687b      	ldr	r3, [r7, #4]
 8025d78:	699b      	ldr	r3, [r3, #24]
 8025d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8025d7c:	68fb      	ldr	r3, [r7, #12]
 8025d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8025d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8025d8c:	683b      	ldr	r3, [r7, #0]
 8025d8e:	681b      	ldr	r3, [r3, #0]
 8025d90:	021b      	lsls	r3, r3, #8
 8025d92:	68fa      	ldr	r2, [r7, #12]
 8025d94:	4313      	orrs	r3, r2
 8025d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8025d98:	697b      	ldr	r3, [r7, #20]
 8025d9a:	f023 0320 	bic.w	r3, r3, #32
 8025d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8025da0:	683b      	ldr	r3, [r7, #0]
 8025da2:	689b      	ldr	r3, [r3, #8]
 8025da4:	011b      	lsls	r3, r3, #4
 8025da6:	697a      	ldr	r2, [r7, #20]
 8025da8:	4313      	orrs	r3, r2
 8025daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8025dac:	687b      	ldr	r3, [r7, #4]
 8025dae:	4a22      	ldr	r2, [pc, #136]	; (8025e38 <TIM_OC2_SetConfig+0xe4>)
 8025db0:	4293      	cmp	r3, r2
 8025db2:	d003      	beq.n	8025dbc <TIM_OC2_SetConfig+0x68>
 8025db4:	687b      	ldr	r3, [r7, #4]
 8025db6:	4a21      	ldr	r2, [pc, #132]	; (8025e3c <TIM_OC2_SetConfig+0xe8>)
 8025db8:	4293      	cmp	r3, r2
 8025dba:	d10d      	bne.n	8025dd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8025dbc:	697b      	ldr	r3, [r7, #20]
 8025dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8025dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8025dc4:	683b      	ldr	r3, [r7, #0]
 8025dc6:	68db      	ldr	r3, [r3, #12]
 8025dc8:	011b      	lsls	r3, r3, #4
 8025dca:	697a      	ldr	r2, [r7, #20]
 8025dcc:	4313      	orrs	r3, r2
 8025dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8025dd0:	697b      	ldr	r3, [r7, #20]
 8025dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025dd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	4a17      	ldr	r2, [pc, #92]	; (8025e38 <TIM_OC2_SetConfig+0xe4>)
 8025ddc:	4293      	cmp	r3, r2
 8025dde:	d003      	beq.n	8025de8 <TIM_OC2_SetConfig+0x94>
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	4a16      	ldr	r2, [pc, #88]	; (8025e3c <TIM_OC2_SetConfig+0xe8>)
 8025de4:	4293      	cmp	r3, r2
 8025de6:	d113      	bne.n	8025e10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8025de8:	693b      	ldr	r3, [r7, #16]
 8025dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8025dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8025df0:	693b      	ldr	r3, [r7, #16]
 8025df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8025df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8025df8:	683b      	ldr	r3, [r7, #0]
 8025dfa:	695b      	ldr	r3, [r3, #20]
 8025dfc:	009b      	lsls	r3, r3, #2
 8025dfe:	693a      	ldr	r2, [r7, #16]
 8025e00:	4313      	orrs	r3, r2
 8025e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8025e04:	683b      	ldr	r3, [r7, #0]
 8025e06:	699b      	ldr	r3, [r3, #24]
 8025e08:	009b      	lsls	r3, r3, #2
 8025e0a:	693a      	ldr	r2, [r7, #16]
 8025e0c:	4313      	orrs	r3, r2
 8025e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025e10:	687b      	ldr	r3, [r7, #4]
 8025e12:	693a      	ldr	r2, [r7, #16]
 8025e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8025e16:	687b      	ldr	r3, [r7, #4]
 8025e18:	68fa      	ldr	r2, [r7, #12]
 8025e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8025e1c:	683b      	ldr	r3, [r7, #0]
 8025e1e:	685a      	ldr	r2, [r3, #4]
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025e24:	687b      	ldr	r3, [r7, #4]
 8025e26:	697a      	ldr	r2, [r7, #20]
 8025e28:	621a      	str	r2, [r3, #32]
}
 8025e2a:	bf00      	nop
 8025e2c:	371c      	adds	r7, #28
 8025e2e:	46bd      	mov	sp, r7
 8025e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e34:	4770      	bx	lr
 8025e36:	bf00      	nop
 8025e38:	40010000 	.word	0x40010000
 8025e3c:	40010400 	.word	0x40010400

08025e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025e40:	b480      	push	{r7}
 8025e42:	b087      	sub	sp, #28
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
 8025e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8025e4a:	687b      	ldr	r3, [r7, #4]
 8025e4c:	6a1b      	ldr	r3, [r3, #32]
 8025e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8025e52:	687b      	ldr	r3, [r7, #4]
 8025e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	6a1b      	ldr	r3, [r3, #32]
 8025e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025e5c:	687b      	ldr	r3, [r7, #4]
 8025e5e:	685b      	ldr	r3, [r3, #4]
 8025e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8025e62:	687b      	ldr	r3, [r7, #4]
 8025e64:	69db      	ldr	r3, [r3, #28]
 8025e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8025e68:	68fb      	ldr	r3, [r7, #12]
 8025e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8025e70:	68fb      	ldr	r3, [r7, #12]
 8025e72:	f023 0303 	bic.w	r3, r3, #3
 8025e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8025e78:	683b      	ldr	r3, [r7, #0]
 8025e7a:	681b      	ldr	r3, [r3, #0]
 8025e7c:	68fa      	ldr	r2, [r7, #12]
 8025e7e:	4313      	orrs	r3, r2
 8025e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8025e82:	697b      	ldr	r3, [r7, #20]
 8025e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8025e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8025e8a:	683b      	ldr	r3, [r7, #0]
 8025e8c:	689b      	ldr	r3, [r3, #8]
 8025e8e:	021b      	lsls	r3, r3, #8
 8025e90:	697a      	ldr	r2, [r7, #20]
 8025e92:	4313      	orrs	r3, r2
 8025e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	4a21      	ldr	r2, [pc, #132]	; (8025f20 <TIM_OC3_SetConfig+0xe0>)
 8025e9a:	4293      	cmp	r3, r2
 8025e9c:	d003      	beq.n	8025ea6 <TIM_OC3_SetConfig+0x66>
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	4a20      	ldr	r2, [pc, #128]	; (8025f24 <TIM_OC3_SetConfig+0xe4>)
 8025ea2:	4293      	cmp	r3, r2
 8025ea4:	d10d      	bne.n	8025ec2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8025ea6:	697b      	ldr	r3, [r7, #20]
 8025ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8025eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8025eae:	683b      	ldr	r3, [r7, #0]
 8025eb0:	68db      	ldr	r3, [r3, #12]
 8025eb2:	021b      	lsls	r3, r3, #8
 8025eb4:	697a      	ldr	r2, [r7, #20]
 8025eb6:	4313      	orrs	r3, r2
 8025eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8025eba:	697b      	ldr	r3, [r7, #20]
 8025ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8025ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	4a16      	ldr	r2, [pc, #88]	; (8025f20 <TIM_OC3_SetConfig+0xe0>)
 8025ec6:	4293      	cmp	r3, r2
 8025ec8:	d003      	beq.n	8025ed2 <TIM_OC3_SetConfig+0x92>
 8025eca:	687b      	ldr	r3, [r7, #4]
 8025ecc:	4a15      	ldr	r2, [pc, #84]	; (8025f24 <TIM_OC3_SetConfig+0xe4>)
 8025ece:	4293      	cmp	r3, r2
 8025ed0:	d113      	bne.n	8025efa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8025ed2:	693b      	ldr	r3, [r7, #16]
 8025ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8025eda:	693b      	ldr	r3, [r7, #16]
 8025edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8025ee2:	683b      	ldr	r3, [r7, #0]
 8025ee4:	695b      	ldr	r3, [r3, #20]
 8025ee6:	011b      	lsls	r3, r3, #4
 8025ee8:	693a      	ldr	r2, [r7, #16]
 8025eea:	4313      	orrs	r3, r2
 8025eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8025eee:	683b      	ldr	r3, [r7, #0]
 8025ef0:	699b      	ldr	r3, [r3, #24]
 8025ef2:	011b      	lsls	r3, r3, #4
 8025ef4:	693a      	ldr	r2, [r7, #16]
 8025ef6:	4313      	orrs	r3, r2
 8025ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025efa:	687b      	ldr	r3, [r7, #4]
 8025efc:	693a      	ldr	r2, [r7, #16]
 8025efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	68fa      	ldr	r2, [r7, #12]
 8025f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8025f06:	683b      	ldr	r3, [r7, #0]
 8025f08:	685a      	ldr	r2, [r3, #4]
 8025f0a:	687b      	ldr	r3, [r7, #4]
 8025f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025f0e:	687b      	ldr	r3, [r7, #4]
 8025f10:	697a      	ldr	r2, [r7, #20]
 8025f12:	621a      	str	r2, [r3, #32]
}
 8025f14:	bf00      	nop
 8025f16:	371c      	adds	r7, #28
 8025f18:	46bd      	mov	sp, r7
 8025f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f1e:	4770      	bx	lr
 8025f20:	40010000 	.word	0x40010000
 8025f24:	40010400 	.word	0x40010400

08025f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025f28:	b480      	push	{r7}
 8025f2a:	b087      	sub	sp, #28
 8025f2c:	af00      	add	r7, sp, #0
 8025f2e:	6078      	str	r0, [r7, #4]
 8025f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	6a1b      	ldr	r3, [r3, #32]
 8025f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8025f3a:	687b      	ldr	r3, [r7, #4]
 8025f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	6a1b      	ldr	r3, [r3, #32]
 8025f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025f44:	687b      	ldr	r3, [r7, #4]
 8025f46:	685b      	ldr	r3, [r3, #4]
 8025f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	69db      	ldr	r3, [r3, #28]
 8025f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8025f50:	68fb      	ldr	r3, [r7, #12]
 8025f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8025f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8025f58:	68fb      	ldr	r3, [r7, #12]
 8025f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8025f60:	683b      	ldr	r3, [r7, #0]
 8025f62:	681b      	ldr	r3, [r3, #0]
 8025f64:	021b      	lsls	r3, r3, #8
 8025f66:	68fa      	ldr	r2, [r7, #12]
 8025f68:	4313      	orrs	r3, r2
 8025f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8025f6c:	693b      	ldr	r3, [r7, #16]
 8025f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8025f74:	683b      	ldr	r3, [r7, #0]
 8025f76:	689b      	ldr	r3, [r3, #8]
 8025f78:	031b      	lsls	r3, r3, #12
 8025f7a:	693a      	ldr	r2, [r7, #16]
 8025f7c:	4313      	orrs	r3, r2
 8025f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	4a12      	ldr	r2, [pc, #72]	; (8025fcc <TIM_OC4_SetConfig+0xa4>)
 8025f84:	4293      	cmp	r3, r2
 8025f86:	d003      	beq.n	8025f90 <TIM_OC4_SetConfig+0x68>
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	4a11      	ldr	r2, [pc, #68]	; (8025fd0 <TIM_OC4_SetConfig+0xa8>)
 8025f8c:	4293      	cmp	r3, r2
 8025f8e:	d109      	bne.n	8025fa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8025f90:	697b      	ldr	r3, [r7, #20]
 8025f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8025f98:	683b      	ldr	r3, [r7, #0]
 8025f9a:	695b      	ldr	r3, [r3, #20]
 8025f9c:	019b      	lsls	r3, r3, #6
 8025f9e:	697a      	ldr	r2, [r7, #20]
 8025fa0:	4313      	orrs	r3, r2
 8025fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025fa4:	687b      	ldr	r3, [r7, #4]
 8025fa6:	697a      	ldr	r2, [r7, #20]
 8025fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	68fa      	ldr	r2, [r7, #12]
 8025fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8025fb0:	683b      	ldr	r3, [r7, #0]
 8025fb2:	685a      	ldr	r2, [r3, #4]
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	693a      	ldr	r2, [r7, #16]
 8025fbc:	621a      	str	r2, [r3, #32]
}
 8025fbe:	bf00      	nop
 8025fc0:	371c      	adds	r7, #28
 8025fc2:	46bd      	mov	sp, r7
 8025fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fc8:	4770      	bx	lr
 8025fca:	bf00      	nop
 8025fcc:	40010000 	.word	0x40010000
 8025fd0:	40010400 	.word	0x40010400

08025fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8025fd4:	b480      	push	{r7}
 8025fd6:	b087      	sub	sp, #28
 8025fd8:	af00      	add	r7, sp, #0
 8025fda:	60f8      	str	r0, [r7, #12]
 8025fdc:	60b9      	str	r1, [r7, #8]
 8025fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8025fe0:	68fb      	ldr	r3, [r7, #12]
 8025fe2:	6a1b      	ldr	r3, [r3, #32]
 8025fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8025fe6:	68fb      	ldr	r3, [r7, #12]
 8025fe8:	6a1b      	ldr	r3, [r3, #32]
 8025fea:	f023 0201 	bic.w	r2, r3, #1
 8025fee:	68fb      	ldr	r3, [r7, #12]
 8025ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8025ff2:	68fb      	ldr	r3, [r7, #12]
 8025ff4:	699b      	ldr	r3, [r3, #24]
 8025ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8025ff8:	693b      	ldr	r3, [r7, #16]
 8025ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8025ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8026000:	687b      	ldr	r3, [r7, #4]
 8026002:	011b      	lsls	r3, r3, #4
 8026004:	693a      	ldr	r2, [r7, #16]
 8026006:	4313      	orrs	r3, r2
 8026008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802600a:	697b      	ldr	r3, [r7, #20]
 802600c:	f023 030a 	bic.w	r3, r3, #10
 8026010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8026012:	697a      	ldr	r2, [r7, #20]
 8026014:	68bb      	ldr	r3, [r7, #8]
 8026016:	4313      	orrs	r3, r2
 8026018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802601a:	68fb      	ldr	r3, [r7, #12]
 802601c:	693a      	ldr	r2, [r7, #16]
 802601e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8026020:	68fb      	ldr	r3, [r7, #12]
 8026022:	697a      	ldr	r2, [r7, #20]
 8026024:	621a      	str	r2, [r3, #32]
}
 8026026:	bf00      	nop
 8026028:	371c      	adds	r7, #28
 802602a:	46bd      	mov	sp, r7
 802602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026030:	4770      	bx	lr

08026032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8026032:	b480      	push	{r7}
 8026034:	b087      	sub	sp, #28
 8026036:	af00      	add	r7, sp, #0
 8026038:	60f8      	str	r0, [r7, #12]
 802603a:	60b9      	str	r1, [r7, #8]
 802603c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802603e:	68fb      	ldr	r3, [r7, #12]
 8026040:	6a1b      	ldr	r3, [r3, #32]
 8026042:	f023 0210 	bic.w	r2, r3, #16
 8026046:	68fb      	ldr	r3, [r7, #12]
 8026048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802604a:	68fb      	ldr	r3, [r7, #12]
 802604c:	699b      	ldr	r3, [r3, #24]
 802604e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8026050:	68fb      	ldr	r3, [r7, #12]
 8026052:	6a1b      	ldr	r3, [r3, #32]
 8026054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8026056:	697b      	ldr	r3, [r7, #20]
 8026058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802605c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802605e:	687b      	ldr	r3, [r7, #4]
 8026060:	031b      	lsls	r3, r3, #12
 8026062:	697a      	ldr	r2, [r7, #20]
 8026064:	4313      	orrs	r3, r2
 8026066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8026068:	693b      	ldr	r3, [r7, #16]
 802606a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802606e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8026070:	68bb      	ldr	r3, [r7, #8]
 8026072:	011b      	lsls	r3, r3, #4
 8026074:	693a      	ldr	r2, [r7, #16]
 8026076:	4313      	orrs	r3, r2
 8026078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802607a:	68fb      	ldr	r3, [r7, #12]
 802607c:	697a      	ldr	r2, [r7, #20]
 802607e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8026080:	68fb      	ldr	r3, [r7, #12]
 8026082:	693a      	ldr	r2, [r7, #16]
 8026084:	621a      	str	r2, [r3, #32]
}
 8026086:	bf00      	nop
 8026088:	371c      	adds	r7, #28
 802608a:	46bd      	mov	sp, r7
 802608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026090:	4770      	bx	lr

08026092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8026092:	b480      	push	{r7}
 8026094:	b085      	sub	sp, #20
 8026096:	af00      	add	r7, sp, #0
 8026098:	6078      	str	r0, [r7, #4]
 802609a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802609c:	687b      	ldr	r3, [r7, #4]
 802609e:	689b      	ldr	r3, [r3, #8]
 80260a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80260a2:	68fb      	ldr	r3, [r7, #12]
 80260a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80260a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80260aa:	683a      	ldr	r2, [r7, #0]
 80260ac:	68fb      	ldr	r3, [r7, #12]
 80260ae:	4313      	orrs	r3, r2
 80260b0:	f043 0307 	orr.w	r3, r3, #7
 80260b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80260b6:	687b      	ldr	r3, [r7, #4]
 80260b8:	68fa      	ldr	r2, [r7, #12]
 80260ba:	609a      	str	r2, [r3, #8]
}
 80260bc:	bf00      	nop
 80260be:	3714      	adds	r7, #20
 80260c0:	46bd      	mov	sp, r7
 80260c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260c6:	4770      	bx	lr

080260c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80260c8:	b480      	push	{r7}
 80260ca:	b087      	sub	sp, #28
 80260cc:	af00      	add	r7, sp, #0
 80260ce:	60f8      	str	r0, [r7, #12]
 80260d0:	60b9      	str	r1, [r7, #8]
 80260d2:	607a      	str	r2, [r7, #4]
 80260d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80260d6:	68fb      	ldr	r3, [r7, #12]
 80260d8:	689b      	ldr	r3, [r3, #8]
 80260da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80260dc:	697b      	ldr	r3, [r7, #20]
 80260de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80260e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80260e4:	683b      	ldr	r3, [r7, #0]
 80260e6:	021a      	lsls	r2, r3, #8
 80260e8:	687b      	ldr	r3, [r7, #4]
 80260ea:	431a      	orrs	r2, r3
 80260ec:	68bb      	ldr	r3, [r7, #8]
 80260ee:	4313      	orrs	r3, r2
 80260f0:	697a      	ldr	r2, [r7, #20]
 80260f2:	4313      	orrs	r3, r2
 80260f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80260f6:	68fb      	ldr	r3, [r7, #12]
 80260f8:	697a      	ldr	r2, [r7, #20]
 80260fa:	609a      	str	r2, [r3, #8]
}
 80260fc:	bf00      	nop
 80260fe:	371c      	adds	r7, #28
 8026100:	46bd      	mov	sp, r7
 8026102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026106:	4770      	bx	lr

08026108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8026108:	b480      	push	{r7}
 802610a:	b087      	sub	sp, #28
 802610c:	af00      	add	r7, sp, #0
 802610e:	60f8      	str	r0, [r7, #12]
 8026110:	60b9      	str	r1, [r7, #8]
 8026112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8026114:	68bb      	ldr	r3, [r7, #8]
 8026116:	f003 031f 	and.w	r3, r3, #31
 802611a:	2201      	movs	r2, #1
 802611c:	fa02 f303 	lsl.w	r3, r2, r3
 8026120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8026122:	68fb      	ldr	r3, [r7, #12]
 8026124:	6a1a      	ldr	r2, [r3, #32]
 8026126:	697b      	ldr	r3, [r7, #20]
 8026128:	43db      	mvns	r3, r3
 802612a:	401a      	ands	r2, r3
 802612c:	68fb      	ldr	r3, [r7, #12]
 802612e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8026130:	68fb      	ldr	r3, [r7, #12]
 8026132:	6a1a      	ldr	r2, [r3, #32]
 8026134:	68bb      	ldr	r3, [r7, #8]
 8026136:	f003 031f 	and.w	r3, r3, #31
 802613a:	6879      	ldr	r1, [r7, #4]
 802613c:	fa01 f303 	lsl.w	r3, r1, r3
 8026140:	431a      	orrs	r2, r3
 8026142:	68fb      	ldr	r3, [r7, #12]
 8026144:	621a      	str	r2, [r3, #32]
}
 8026146:	bf00      	nop
 8026148:	371c      	adds	r7, #28
 802614a:	46bd      	mov	sp, r7
 802614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026150:	4770      	bx	lr
	...

08026154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8026154:	b480      	push	{r7}
 8026156:	b085      	sub	sp, #20
 8026158:	af00      	add	r7, sp, #0
 802615a:	6078      	str	r0, [r7, #4]
 802615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802615e:	687b      	ldr	r3, [r7, #4]
 8026160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026164:	2b01      	cmp	r3, #1
 8026166:	d101      	bne.n	802616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8026168:	2302      	movs	r3, #2
 802616a:	e05a      	b.n	8026222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802616c:	687b      	ldr	r3, [r7, #4]
 802616e:	2201      	movs	r2, #1
 8026170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	2202      	movs	r2, #2
 8026178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	681b      	ldr	r3, [r3, #0]
 8026180:	685b      	ldr	r3, [r3, #4]
 8026182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8026184:	687b      	ldr	r3, [r7, #4]
 8026186:	681b      	ldr	r3, [r3, #0]
 8026188:	689b      	ldr	r3, [r3, #8]
 802618a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802618c:	68fb      	ldr	r3, [r7, #12]
 802618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8026194:	683b      	ldr	r3, [r7, #0]
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	68fa      	ldr	r2, [r7, #12]
 802619a:	4313      	orrs	r3, r2
 802619c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802619e:	687b      	ldr	r3, [r7, #4]
 80261a0:	681b      	ldr	r3, [r3, #0]
 80261a2:	68fa      	ldr	r2, [r7, #12]
 80261a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80261a6:	687b      	ldr	r3, [r7, #4]
 80261a8:	681b      	ldr	r3, [r3, #0]
 80261aa:	4a21      	ldr	r2, [pc, #132]	; (8026230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80261ac:	4293      	cmp	r3, r2
 80261ae:	d022      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	681b      	ldr	r3, [r3, #0]
 80261b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80261b8:	d01d      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261ba:	687b      	ldr	r3, [r7, #4]
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	4a1d      	ldr	r2, [pc, #116]	; (8026234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80261c0:	4293      	cmp	r3, r2
 80261c2:	d018      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261c4:	687b      	ldr	r3, [r7, #4]
 80261c6:	681b      	ldr	r3, [r3, #0]
 80261c8:	4a1b      	ldr	r2, [pc, #108]	; (8026238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80261ca:	4293      	cmp	r3, r2
 80261cc:	d013      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	681b      	ldr	r3, [r3, #0]
 80261d2:	4a1a      	ldr	r2, [pc, #104]	; (802623c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80261d4:	4293      	cmp	r3, r2
 80261d6:	d00e      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	681b      	ldr	r3, [r3, #0]
 80261dc:	4a18      	ldr	r2, [pc, #96]	; (8026240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80261de:	4293      	cmp	r3, r2
 80261e0:	d009      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261e2:	687b      	ldr	r3, [r7, #4]
 80261e4:	681b      	ldr	r3, [r3, #0]
 80261e6:	4a17      	ldr	r2, [pc, #92]	; (8026244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80261e8:	4293      	cmp	r3, r2
 80261ea:	d004      	beq.n	80261f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	4a15      	ldr	r2, [pc, #84]	; (8026248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80261f2:	4293      	cmp	r3, r2
 80261f4:	d10c      	bne.n	8026210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80261f6:	68bb      	ldr	r3, [r7, #8]
 80261f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80261fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80261fe:	683b      	ldr	r3, [r7, #0]
 8026200:	685b      	ldr	r3, [r3, #4]
 8026202:	68ba      	ldr	r2, [r7, #8]
 8026204:	4313      	orrs	r3, r2
 8026206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8026208:	687b      	ldr	r3, [r7, #4]
 802620a:	681b      	ldr	r3, [r3, #0]
 802620c:	68ba      	ldr	r2, [r7, #8]
 802620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8026210:	687b      	ldr	r3, [r7, #4]
 8026212:	2201      	movs	r2, #1
 8026214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026218:	687b      	ldr	r3, [r7, #4]
 802621a:	2200      	movs	r2, #0
 802621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026220:	2300      	movs	r3, #0
}
 8026222:	4618      	mov	r0, r3
 8026224:	3714      	adds	r7, #20
 8026226:	46bd      	mov	sp, r7
 8026228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802622c:	4770      	bx	lr
 802622e:	bf00      	nop
 8026230:	40010000 	.word	0x40010000
 8026234:	40000400 	.word	0x40000400
 8026238:	40000800 	.word	0x40000800
 802623c:	40000c00 	.word	0x40000c00
 8026240:	40010400 	.word	0x40010400
 8026244:	40014000 	.word	0x40014000
 8026248:	40001800 	.word	0x40001800

0802624c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802624c:	b480      	push	{r7}
 802624e:	b085      	sub	sp, #20
 8026250:	af00      	add	r7, sp, #0
 8026252:	6078      	str	r0, [r7, #4]
 8026254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8026256:	2300      	movs	r3, #0
 8026258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026260:	2b01      	cmp	r3, #1
 8026262:	d101      	bne.n	8026268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8026264:	2302      	movs	r3, #2
 8026266:	e03d      	b.n	80262e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	2201      	movs	r2, #1
 802626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8026270:	68fb      	ldr	r3, [r7, #12]
 8026272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8026276:	683b      	ldr	r3, [r7, #0]
 8026278:	68db      	ldr	r3, [r3, #12]
 802627a:	4313      	orrs	r3, r2
 802627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802627e:	68fb      	ldr	r3, [r7, #12]
 8026280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026284:	683b      	ldr	r3, [r7, #0]
 8026286:	689b      	ldr	r3, [r3, #8]
 8026288:	4313      	orrs	r3, r2
 802628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802628c:	68fb      	ldr	r3, [r7, #12]
 802628e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8026292:	683b      	ldr	r3, [r7, #0]
 8026294:	685b      	ldr	r3, [r3, #4]
 8026296:	4313      	orrs	r3, r2
 8026298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802629a:	68fb      	ldr	r3, [r7, #12]
 802629c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80262a0:	683b      	ldr	r3, [r7, #0]
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	4313      	orrs	r3, r2
 80262a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80262a8:	68fb      	ldr	r3, [r7, #12]
 80262aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80262ae:	683b      	ldr	r3, [r7, #0]
 80262b0:	691b      	ldr	r3, [r3, #16]
 80262b2:	4313      	orrs	r3, r2
 80262b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80262b6:	68fb      	ldr	r3, [r7, #12]
 80262b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80262bc:	683b      	ldr	r3, [r7, #0]
 80262be:	695b      	ldr	r3, [r3, #20]
 80262c0:	4313      	orrs	r3, r2
 80262c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80262c4:	68fb      	ldr	r3, [r7, #12]
 80262c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80262ca:	683b      	ldr	r3, [r7, #0]
 80262cc:	69db      	ldr	r3, [r3, #28]
 80262ce:	4313      	orrs	r3, r2
 80262d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	681b      	ldr	r3, [r3, #0]
 80262d6:	68fa      	ldr	r2, [r7, #12]
 80262d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	2200      	movs	r2, #0
 80262de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80262e2:	2300      	movs	r3, #0
}
 80262e4:	4618      	mov	r0, r3
 80262e6:	3714      	adds	r7, #20
 80262e8:	46bd      	mov	sp, r7
 80262ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262ee:	4770      	bx	lr

080262f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80262f0:	b480      	push	{r7}
 80262f2:	b083      	sub	sp, #12
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80262f8:	bf00      	nop
 80262fa:	370c      	adds	r7, #12
 80262fc:	46bd      	mov	sp, r7
 80262fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026302:	4770      	bx	lr

08026304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8026304:	b480      	push	{r7}
 8026306:	b083      	sub	sp, #12
 8026308:	af00      	add	r7, sp, #0
 802630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802630c:	bf00      	nop
 802630e:	370c      	adds	r7, #12
 8026310:	46bd      	mov	sp, r7
 8026312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026316:	4770      	bx	lr

08026318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8026318:	b580      	push	{r7, lr}
 802631a:	b082      	sub	sp, #8
 802631c:	af00      	add	r7, sp, #0
 802631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8026320:	687b      	ldr	r3, [r7, #4]
 8026322:	2b00      	cmp	r3, #0
 8026324:	d101      	bne.n	802632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8026326:	2301      	movs	r3, #1
 8026328:	e03f      	b.n	80263aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026330:	b2db      	uxtb	r3, r3
 8026332:	2b00      	cmp	r3, #0
 8026334:	d106      	bne.n	8026344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	2200      	movs	r2, #0
 802633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802633e:	6878      	ldr	r0, [r7, #4]
 8026340:	f7fb fda2 	bl	8021e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	2224      	movs	r2, #36	; 0x24
 8026348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802634c:	687b      	ldr	r3, [r7, #4]
 802634e:	681b      	ldr	r3, [r3, #0]
 8026350:	68da      	ldr	r2, [r3, #12]
 8026352:	687b      	ldr	r3, [r7, #4]
 8026354:	681b      	ldr	r3, [r3, #0]
 8026356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802635a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802635c:	6878      	ldr	r0, [r7, #4]
 802635e:	f000 fe1d 	bl	8026f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	681b      	ldr	r3, [r3, #0]
 8026366:	691a      	ldr	r2, [r3, #16]
 8026368:	687b      	ldr	r3, [r7, #4]
 802636a:	681b      	ldr	r3, [r3, #0]
 802636c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8026370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	681b      	ldr	r3, [r3, #0]
 8026376:	695a      	ldr	r2, [r3, #20]
 8026378:	687b      	ldr	r3, [r7, #4]
 802637a:	681b      	ldr	r3, [r3, #0]
 802637c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8026380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8026382:	687b      	ldr	r3, [r7, #4]
 8026384:	681b      	ldr	r3, [r3, #0]
 8026386:	68da      	ldr	r2, [r3, #12]
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	681b      	ldr	r3, [r3, #0]
 802638c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8026390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8026392:	687b      	ldr	r3, [r7, #4]
 8026394:	2200      	movs	r2, #0
 8026396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	2220      	movs	r2, #32
 802639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80263a0:	687b      	ldr	r3, [r7, #4]
 80263a2:	2220      	movs	r2, #32
 80263a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80263a8:	2300      	movs	r3, #0
}
 80263aa:	4618      	mov	r0, r3
 80263ac:	3708      	adds	r7, #8
 80263ae:	46bd      	mov	sp, r7
 80263b0:	bd80      	pop	{r7, pc}

080263b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80263b2:	b580      	push	{r7, lr}
 80263b4:	b08a      	sub	sp, #40	; 0x28
 80263b6:	af02      	add	r7, sp, #8
 80263b8:	60f8      	str	r0, [r7, #12]
 80263ba:	60b9      	str	r1, [r7, #8]
 80263bc:	603b      	str	r3, [r7, #0]
 80263be:	4613      	mov	r3, r2
 80263c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80263c2:	2300      	movs	r3, #0
 80263c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80263c6:	68fb      	ldr	r3, [r7, #12]
 80263c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80263cc:	b2db      	uxtb	r3, r3
 80263ce:	2b20      	cmp	r3, #32
 80263d0:	d17c      	bne.n	80264cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80263d2:	68bb      	ldr	r3, [r7, #8]
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d002      	beq.n	80263de <HAL_UART_Transmit+0x2c>
 80263d8:	88fb      	ldrh	r3, [r7, #6]
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d101      	bne.n	80263e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80263de:	2301      	movs	r3, #1
 80263e0:	e075      	b.n	80264ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80263e8:	2b01      	cmp	r3, #1
 80263ea:	d101      	bne.n	80263f0 <HAL_UART_Transmit+0x3e>
 80263ec:	2302      	movs	r3, #2
 80263ee:	e06e      	b.n	80264ce <HAL_UART_Transmit+0x11c>
 80263f0:	68fb      	ldr	r3, [r7, #12]
 80263f2:	2201      	movs	r2, #1
 80263f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80263f8:	68fb      	ldr	r3, [r7, #12]
 80263fa:	2200      	movs	r2, #0
 80263fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80263fe:	68fb      	ldr	r3, [r7, #12]
 8026400:	2221      	movs	r2, #33	; 0x21
 8026402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8026406:	f7fc fbdf 	bl	8022bc8 <HAL_GetTick>
 802640a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802640c:	68fb      	ldr	r3, [r7, #12]
 802640e:	88fa      	ldrh	r2, [r7, #6]
 8026410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	88fa      	ldrh	r2, [r7, #6]
 8026416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8026418:	68fb      	ldr	r3, [r7, #12]
 802641a:	689b      	ldr	r3, [r3, #8]
 802641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026420:	d108      	bne.n	8026434 <HAL_UART_Transmit+0x82>
 8026422:	68fb      	ldr	r3, [r7, #12]
 8026424:	691b      	ldr	r3, [r3, #16]
 8026426:	2b00      	cmp	r3, #0
 8026428:	d104      	bne.n	8026434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802642a:	2300      	movs	r3, #0
 802642c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802642e:	68bb      	ldr	r3, [r7, #8]
 8026430:	61bb      	str	r3, [r7, #24]
 8026432:	e003      	b.n	802643c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8026434:	68bb      	ldr	r3, [r7, #8]
 8026436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8026438:	2300      	movs	r3, #0
 802643a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802643c:	68fb      	ldr	r3, [r7, #12]
 802643e:	2200      	movs	r2, #0
 8026440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8026444:	e02a      	b.n	802649c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8026446:	683b      	ldr	r3, [r7, #0]
 8026448:	9300      	str	r3, [sp, #0]
 802644a:	697b      	ldr	r3, [r7, #20]
 802644c:	2200      	movs	r2, #0
 802644e:	2180      	movs	r1, #128	; 0x80
 8026450:	68f8      	ldr	r0, [r7, #12]
 8026452:	f000 fb9b 	bl	8026b8c <UART_WaitOnFlagUntilTimeout>
 8026456:	4603      	mov	r3, r0
 8026458:	2b00      	cmp	r3, #0
 802645a:	d001      	beq.n	8026460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802645c:	2303      	movs	r3, #3
 802645e:	e036      	b.n	80264ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8026460:	69fb      	ldr	r3, [r7, #28]
 8026462:	2b00      	cmp	r3, #0
 8026464:	d10b      	bne.n	802647e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8026466:	69bb      	ldr	r3, [r7, #24]
 8026468:	881b      	ldrh	r3, [r3, #0]
 802646a:	461a      	mov	r2, r3
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	681b      	ldr	r3, [r3, #0]
 8026470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8026474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8026476:	69bb      	ldr	r3, [r7, #24]
 8026478:	3302      	adds	r3, #2
 802647a:	61bb      	str	r3, [r7, #24]
 802647c:	e007      	b.n	802648e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802647e:	69fb      	ldr	r3, [r7, #28]
 8026480:	781a      	ldrb	r2, [r3, #0]
 8026482:	68fb      	ldr	r3, [r7, #12]
 8026484:	681b      	ldr	r3, [r3, #0]
 8026486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8026488:	69fb      	ldr	r3, [r7, #28]
 802648a:	3301      	adds	r3, #1
 802648c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8026492:	b29b      	uxth	r3, r3
 8026494:	3b01      	subs	r3, #1
 8026496:	b29a      	uxth	r2, r3
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802649c:	68fb      	ldr	r3, [r7, #12]
 802649e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80264a0:	b29b      	uxth	r3, r3
 80264a2:	2b00      	cmp	r3, #0
 80264a4:	d1cf      	bne.n	8026446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80264a6:	683b      	ldr	r3, [r7, #0]
 80264a8:	9300      	str	r3, [sp, #0]
 80264aa:	697b      	ldr	r3, [r7, #20]
 80264ac:	2200      	movs	r2, #0
 80264ae:	2140      	movs	r1, #64	; 0x40
 80264b0:	68f8      	ldr	r0, [r7, #12]
 80264b2:	f000 fb6b 	bl	8026b8c <UART_WaitOnFlagUntilTimeout>
 80264b6:	4603      	mov	r3, r0
 80264b8:	2b00      	cmp	r3, #0
 80264ba:	d001      	beq.n	80264c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80264bc:	2303      	movs	r3, #3
 80264be:	e006      	b.n	80264ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	2220      	movs	r2, #32
 80264c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80264c8:	2300      	movs	r3, #0
 80264ca:	e000      	b.n	80264ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80264cc:	2302      	movs	r3, #2
  }
}
 80264ce:	4618      	mov	r0, r3
 80264d0:	3720      	adds	r7, #32
 80264d2:	46bd      	mov	sp, r7
 80264d4:	bd80      	pop	{r7, pc}

080264d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80264d6:	b580      	push	{r7, lr}
 80264d8:	b08a      	sub	sp, #40	; 0x28
 80264da:	af02      	add	r7, sp, #8
 80264dc:	60f8      	str	r0, [r7, #12]
 80264de:	60b9      	str	r1, [r7, #8]
 80264e0:	603b      	str	r3, [r7, #0]
 80264e2:	4613      	mov	r3, r2
 80264e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80264e6:	2300      	movs	r3, #0
 80264e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80264ea:	68fb      	ldr	r3, [r7, #12]
 80264ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80264f0:	b2db      	uxtb	r3, r3
 80264f2:	2b20      	cmp	r3, #32
 80264f4:	f040 808c 	bne.w	8026610 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80264f8:	68bb      	ldr	r3, [r7, #8]
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	d002      	beq.n	8026504 <HAL_UART_Receive+0x2e>
 80264fe:	88fb      	ldrh	r3, [r7, #6]
 8026500:	2b00      	cmp	r3, #0
 8026502:	d101      	bne.n	8026508 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8026504:	2301      	movs	r3, #1
 8026506:	e084      	b.n	8026612 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8026508:	68fb      	ldr	r3, [r7, #12]
 802650a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802650e:	2b01      	cmp	r3, #1
 8026510:	d101      	bne.n	8026516 <HAL_UART_Receive+0x40>
 8026512:	2302      	movs	r3, #2
 8026514:	e07d      	b.n	8026612 <HAL_UART_Receive+0x13c>
 8026516:	68fb      	ldr	r3, [r7, #12]
 8026518:	2201      	movs	r2, #1
 802651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802651e:	68fb      	ldr	r3, [r7, #12]
 8026520:	2200      	movs	r2, #0
 8026522:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8026524:	68fb      	ldr	r3, [r7, #12]
 8026526:	2222      	movs	r2, #34	; 0x22
 8026528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802652c:	68fb      	ldr	r3, [r7, #12]
 802652e:	2200      	movs	r2, #0
 8026530:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8026532:	f7fc fb49 	bl	8022bc8 <HAL_GetTick>
 8026536:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	88fa      	ldrh	r2, [r7, #6]
 802653c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 802653e:	68fb      	ldr	r3, [r7, #12]
 8026540:	88fa      	ldrh	r2, [r7, #6]
 8026542:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8026544:	68fb      	ldr	r3, [r7, #12]
 8026546:	689b      	ldr	r3, [r3, #8]
 8026548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802654c:	d108      	bne.n	8026560 <HAL_UART_Receive+0x8a>
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	691b      	ldr	r3, [r3, #16]
 8026552:	2b00      	cmp	r3, #0
 8026554:	d104      	bne.n	8026560 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8026556:	2300      	movs	r3, #0
 8026558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802655a:	68bb      	ldr	r3, [r7, #8]
 802655c:	61bb      	str	r3, [r7, #24]
 802655e:	e003      	b.n	8026568 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8026560:	68bb      	ldr	r3, [r7, #8]
 8026562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8026564:	2300      	movs	r3, #0
 8026566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8026568:	68fb      	ldr	r3, [r7, #12]
 802656a:	2200      	movs	r2, #0
 802656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8026570:	e043      	b.n	80265fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8026572:	683b      	ldr	r3, [r7, #0]
 8026574:	9300      	str	r3, [sp, #0]
 8026576:	697b      	ldr	r3, [r7, #20]
 8026578:	2200      	movs	r2, #0
 802657a:	2120      	movs	r1, #32
 802657c:	68f8      	ldr	r0, [r7, #12]
 802657e:	f000 fb05 	bl	8026b8c <UART_WaitOnFlagUntilTimeout>
 8026582:	4603      	mov	r3, r0
 8026584:	2b00      	cmp	r3, #0
 8026586:	d001      	beq.n	802658c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8026588:	2303      	movs	r3, #3
 802658a:	e042      	b.n	8026612 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 802658c:	69fb      	ldr	r3, [r7, #28]
 802658e:	2b00      	cmp	r3, #0
 8026590:	d10c      	bne.n	80265ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	681b      	ldr	r3, [r3, #0]
 8026596:	685b      	ldr	r3, [r3, #4]
 8026598:	b29b      	uxth	r3, r3
 802659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802659e:	b29a      	uxth	r2, r3
 80265a0:	69bb      	ldr	r3, [r7, #24]
 80265a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80265a4:	69bb      	ldr	r3, [r7, #24]
 80265a6:	3302      	adds	r3, #2
 80265a8:	61bb      	str	r3, [r7, #24]
 80265aa:	e01f      	b.n	80265ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80265ac:	68fb      	ldr	r3, [r7, #12]
 80265ae:	689b      	ldr	r3, [r3, #8]
 80265b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80265b4:	d007      	beq.n	80265c6 <HAL_UART_Receive+0xf0>
 80265b6:	68fb      	ldr	r3, [r7, #12]
 80265b8:	689b      	ldr	r3, [r3, #8]
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	d10a      	bne.n	80265d4 <HAL_UART_Receive+0xfe>
 80265be:	68fb      	ldr	r3, [r7, #12]
 80265c0:	691b      	ldr	r3, [r3, #16]
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	d106      	bne.n	80265d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80265c6:	68fb      	ldr	r3, [r7, #12]
 80265c8:	681b      	ldr	r3, [r3, #0]
 80265ca:	685b      	ldr	r3, [r3, #4]
 80265cc:	b2da      	uxtb	r2, r3
 80265ce:	69fb      	ldr	r3, [r7, #28]
 80265d0:	701a      	strb	r2, [r3, #0]
 80265d2:	e008      	b.n	80265e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80265d4:	68fb      	ldr	r3, [r7, #12]
 80265d6:	681b      	ldr	r3, [r3, #0]
 80265d8:	685b      	ldr	r3, [r3, #4]
 80265da:	b2db      	uxtb	r3, r3
 80265dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80265e0:	b2da      	uxtb	r2, r3
 80265e2:	69fb      	ldr	r3, [r7, #28]
 80265e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80265e6:	69fb      	ldr	r3, [r7, #28]
 80265e8:	3301      	adds	r3, #1
 80265ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80265ec:	68fb      	ldr	r3, [r7, #12]
 80265ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80265f0:	b29b      	uxth	r3, r3
 80265f2:	3b01      	subs	r3, #1
 80265f4:	b29a      	uxth	r2, r3
 80265f6:	68fb      	ldr	r3, [r7, #12]
 80265f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80265fe:	b29b      	uxth	r3, r3
 8026600:	2b00      	cmp	r3, #0
 8026602:	d1b6      	bne.n	8026572 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8026604:	68fb      	ldr	r3, [r7, #12]
 8026606:	2220      	movs	r2, #32
 8026608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 802660c:	2300      	movs	r3, #0
 802660e:	e000      	b.n	8026612 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8026610:	2302      	movs	r3, #2
  }
}
 8026612:	4618      	mov	r0, r3
 8026614:	3720      	adds	r7, #32
 8026616:	46bd      	mov	sp, r7
 8026618:	bd80      	pop	{r7, pc}
	...

0802661c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802661c:	b580      	push	{r7, lr}
 802661e:	b0ba      	sub	sp, #232	; 0xe8
 8026620:	af00      	add	r7, sp, #0
 8026622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	681b      	ldr	r3, [r3, #0]
 802662a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	681b      	ldr	r3, [r3, #0]
 8026632:	68db      	ldr	r3, [r3, #12]
 8026634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8026638:	687b      	ldr	r3, [r7, #4]
 802663a:	681b      	ldr	r3, [r3, #0]
 802663c:	695b      	ldr	r3, [r3, #20]
 802663e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8026642:	2300      	movs	r3, #0
 8026644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8026648:	2300      	movs	r3, #0
 802664a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026652:	f003 030f 	and.w	r3, r3, #15
 8026656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802665a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802665e:	2b00      	cmp	r3, #0
 8026660:	d10f      	bne.n	8026682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8026662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026666:	f003 0320 	and.w	r3, r3, #32
 802666a:	2b00      	cmp	r3, #0
 802666c:	d009      	beq.n	8026682 <HAL_UART_IRQHandler+0x66>
 802666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8026672:	f003 0320 	and.w	r3, r3, #32
 8026676:	2b00      	cmp	r3, #0
 8026678:	d003      	beq.n	8026682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802667a:	6878      	ldr	r0, [r7, #4]
 802667c:	f000 fbd3 	bl	8026e26 <UART_Receive_IT>
      return;
 8026680:	e256      	b.n	8026b30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8026682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026686:	2b00      	cmp	r3, #0
 8026688:	f000 80de 	beq.w	8026848 <HAL_UART_IRQHandler+0x22c>
 802668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026690:	f003 0301 	and.w	r3, r3, #1
 8026694:	2b00      	cmp	r3, #0
 8026696:	d106      	bne.n	80266a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8026698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802669c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	f000 80d1 	beq.w	8026848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80266a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80266aa:	f003 0301 	and.w	r3, r3, #1
 80266ae:	2b00      	cmp	r3, #0
 80266b0:	d00b      	beq.n	80266ca <HAL_UART_IRQHandler+0xae>
 80266b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80266b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80266ba:	2b00      	cmp	r3, #0
 80266bc:	d005      	beq.n	80266ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266c2:	f043 0201 	orr.w	r2, r3, #1
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80266ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80266ce:	f003 0304 	and.w	r3, r3, #4
 80266d2:	2b00      	cmp	r3, #0
 80266d4:	d00b      	beq.n	80266ee <HAL_UART_IRQHandler+0xd2>
 80266d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80266da:	f003 0301 	and.w	r3, r3, #1
 80266de:	2b00      	cmp	r3, #0
 80266e0:	d005      	beq.n	80266ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266e6:	f043 0202 	orr.w	r2, r3, #2
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80266ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80266f2:	f003 0302 	and.w	r3, r3, #2
 80266f6:	2b00      	cmp	r3, #0
 80266f8:	d00b      	beq.n	8026712 <HAL_UART_IRQHandler+0xf6>
 80266fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80266fe:	f003 0301 	and.w	r3, r3, #1
 8026702:	2b00      	cmp	r3, #0
 8026704:	d005      	beq.n	8026712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802670a:	f043 0204 	orr.w	r2, r3, #4
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8026712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026716:	f003 0308 	and.w	r3, r3, #8
 802671a:	2b00      	cmp	r3, #0
 802671c:	d011      	beq.n	8026742 <HAL_UART_IRQHandler+0x126>
 802671e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8026722:	f003 0320 	and.w	r3, r3, #32
 8026726:	2b00      	cmp	r3, #0
 8026728:	d105      	bne.n	8026736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802672a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802672e:	f003 0301 	and.w	r3, r3, #1
 8026732:	2b00      	cmp	r3, #0
 8026734:	d005      	beq.n	8026742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8026736:	687b      	ldr	r3, [r7, #4]
 8026738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802673a:	f043 0208 	orr.w	r2, r3, #8
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8026742:	687b      	ldr	r3, [r7, #4]
 8026744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026746:	2b00      	cmp	r3, #0
 8026748:	f000 81ed 	beq.w	8026b26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026750:	f003 0320 	and.w	r3, r3, #32
 8026754:	2b00      	cmp	r3, #0
 8026756:	d008      	beq.n	802676a <HAL_UART_IRQHandler+0x14e>
 8026758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802675c:	f003 0320 	and.w	r3, r3, #32
 8026760:	2b00      	cmp	r3, #0
 8026762:	d002      	beq.n	802676a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8026764:	6878      	ldr	r0, [r7, #4]
 8026766:	f000 fb5e 	bl	8026e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	681b      	ldr	r3, [r3, #0]
 802676e:	695b      	ldr	r3, [r3, #20]
 8026770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026774:	2b40      	cmp	r3, #64	; 0x40
 8026776:	bf0c      	ite	eq
 8026778:	2301      	moveq	r3, #1
 802677a:	2300      	movne	r3, #0
 802677c:	b2db      	uxtb	r3, r3
 802677e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026786:	f003 0308 	and.w	r3, r3, #8
 802678a:	2b00      	cmp	r3, #0
 802678c:	d103      	bne.n	8026796 <HAL_UART_IRQHandler+0x17a>
 802678e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8026792:	2b00      	cmp	r3, #0
 8026794:	d04f      	beq.n	8026836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8026796:	6878      	ldr	r0, [r7, #4]
 8026798:	f000 fa66 	bl	8026c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	681b      	ldr	r3, [r3, #0]
 80267a0:	695b      	ldr	r3, [r3, #20]
 80267a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80267a6:	2b40      	cmp	r3, #64	; 0x40
 80267a8:	d141      	bne.n	802682e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	3314      	adds	r3, #20
 80267b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80267b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80267b8:	e853 3f00 	ldrex	r3, [r3]
 80267bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80267c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80267c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80267c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	681b      	ldr	r3, [r3, #0]
 80267d0:	3314      	adds	r3, #20
 80267d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80267d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80267da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80267de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80267e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80267e6:	e841 2300 	strex	r3, r2, [r1]
 80267ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80267ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d1d9      	bne.n	80267aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80267fa:	2b00      	cmp	r3, #0
 80267fc:	d013      	beq.n	8026826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026802:	4a7d      	ldr	r2, [pc, #500]	; (80269f8 <HAL_UART_IRQHandler+0x3dc>)
 8026804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802680a:	4618      	mov	r0, r3
 802680c:	f7fc fb8d 	bl	8022f2a <HAL_DMA_Abort_IT>
 8026810:	4603      	mov	r3, r0
 8026812:	2b00      	cmp	r3, #0
 8026814:	d016      	beq.n	8026844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802681c:	687a      	ldr	r2, [r7, #4]
 802681e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8026820:	4610      	mov	r0, r2
 8026822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026824:	e00e      	b.n	8026844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8026826:	6878      	ldr	r0, [r7, #4]
 8026828:	f000 f99a 	bl	8026b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802682c:	e00a      	b.n	8026844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802682e:	6878      	ldr	r0, [r7, #4]
 8026830:	f000 f996 	bl	8026b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026834:	e006      	b.n	8026844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8026836:	6878      	ldr	r0, [r7, #4]
 8026838:	f000 f992 	bl	8026b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	2200      	movs	r2, #0
 8026840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8026842:	e170      	b.n	8026b26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026844:	bf00      	nop
    return;
 8026846:	e16e      	b.n	8026b26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026848:	687b      	ldr	r3, [r7, #4]
 802684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802684c:	2b01      	cmp	r3, #1
 802684e:	f040 814a 	bne.w	8026ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8026852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026856:	f003 0310 	and.w	r3, r3, #16
 802685a:	2b00      	cmp	r3, #0
 802685c:	f000 8143 	beq.w	8026ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8026860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8026864:	f003 0310 	and.w	r3, r3, #16
 8026868:	2b00      	cmp	r3, #0
 802686a:	f000 813c 	beq.w	8026ae6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802686e:	2300      	movs	r3, #0
 8026870:	60bb      	str	r3, [r7, #8]
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	681b      	ldr	r3, [r3, #0]
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	60bb      	str	r3, [r7, #8]
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	681b      	ldr	r3, [r3, #0]
 802687e:	685b      	ldr	r3, [r3, #4]
 8026880:	60bb      	str	r3, [r7, #8]
 8026882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026884:	687b      	ldr	r3, [r7, #4]
 8026886:	681b      	ldr	r3, [r3, #0]
 8026888:	695b      	ldr	r3, [r3, #20]
 802688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802688e:	2b40      	cmp	r3, #64	; 0x40
 8026890:	f040 80b4 	bne.w	80269fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8026894:	687b      	ldr	r3, [r7, #4]
 8026896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026898:	681b      	ldr	r3, [r3, #0]
 802689a:	685b      	ldr	r3, [r3, #4]
 802689c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80268a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80268a4:	2b00      	cmp	r3, #0
 80268a6:	f000 8140 	beq.w	8026b2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80268aa:	687b      	ldr	r3, [r7, #4]
 80268ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80268ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80268b2:	429a      	cmp	r2, r3
 80268b4:	f080 8139 	bcs.w	8026b2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80268be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80268c4:	69db      	ldr	r3, [r3, #28]
 80268c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80268ca:	f000 8088 	beq.w	80269de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	330c      	adds	r3, #12
 80268d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80268d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80268dc:	e853 3f00 	ldrex	r3, [r3]
 80268e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80268e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80268e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80268ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80268f0:	687b      	ldr	r3, [r7, #4]
 80268f2:	681b      	ldr	r3, [r3, #0]
 80268f4:	330c      	adds	r3, #12
 80268f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80268fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80268fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8026906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802690a:	e841 2300 	strex	r3, r2, [r1]
 802690e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8026912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026916:	2b00      	cmp	r3, #0
 8026918:	d1d9      	bne.n	80268ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802691a:	687b      	ldr	r3, [r7, #4]
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	3314      	adds	r3, #20
 8026920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026924:	e853 3f00 	ldrex	r3, [r3]
 8026928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802692a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802692c:	f023 0301 	bic.w	r3, r3, #1
 8026930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	681b      	ldr	r3, [r3, #0]
 8026938:	3314      	adds	r3, #20
 802693a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802693e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8026942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8026946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802694a:	e841 2300 	strex	r3, r2, [r1]
 802694e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8026950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8026952:	2b00      	cmp	r3, #0
 8026954:	d1e1      	bne.n	802691a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	681b      	ldr	r3, [r3, #0]
 802695a:	3314      	adds	r3, #20
 802695c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802695e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026960:	e853 3f00 	ldrex	r3, [r3]
 8026964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8026966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802696c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	681b      	ldr	r3, [r3, #0]
 8026974:	3314      	adds	r3, #20
 8026976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802697a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802697c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802697e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8026980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8026982:	e841 2300 	strex	r3, r2, [r1]
 8026986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8026988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802698a:	2b00      	cmp	r3, #0
 802698c:	d1e3      	bne.n	8026956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	2220      	movs	r2, #32
 8026992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	2200      	movs	r2, #0
 802699a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	330c      	adds	r3, #12
 80269a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80269a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80269a6:	e853 3f00 	ldrex	r3, [r3]
 80269aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80269ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80269ae:	f023 0310 	bic.w	r3, r3, #16
 80269b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80269b6:	687b      	ldr	r3, [r7, #4]
 80269b8:	681b      	ldr	r3, [r3, #0]
 80269ba:	330c      	adds	r3, #12
 80269bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80269c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80269c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80269c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80269c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80269c8:	e841 2300 	strex	r3, r2, [r1]
 80269cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80269ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d1e3      	bne.n	802699c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80269d8:	4618      	mov	r0, r3
 80269da:	f7fc fa36 	bl	8022e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80269de:	687b      	ldr	r3, [r7, #4]
 80269e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80269e6:	b29b      	uxth	r3, r3
 80269e8:	1ad3      	subs	r3, r2, r3
 80269ea:	b29b      	uxth	r3, r3
 80269ec:	4619      	mov	r1, r3
 80269ee:	6878      	ldr	r0, [r7, #4]
 80269f0:	f000 f8c0 	bl	8026b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80269f4:	e099      	b.n	8026b2a <HAL_UART_IRQHandler+0x50e>
 80269f6:	bf00      	nop
 80269f8:	08026d2f 	.word	0x08026d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8026a04:	b29b      	uxth	r3, r3
 8026a06:	1ad3      	subs	r3, r2, r3
 8026a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8026a10:	b29b      	uxth	r3, r3
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	f000 808b 	beq.w	8026b2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8026a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8026a1c:	2b00      	cmp	r3, #0
 8026a1e:	f000 8086 	beq.w	8026b2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	681b      	ldr	r3, [r3, #0]
 8026a26:	330c      	adds	r3, #12
 8026a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026a2c:	e853 3f00 	ldrex	r3, [r3]
 8026a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8026a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8026a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8026a3c:	687b      	ldr	r3, [r7, #4]
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	330c      	adds	r3, #12
 8026a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8026a46:	647a      	str	r2, [r7, #68]	; 0x44
 8026a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026a4e:	e841 2300 	strex	r3, r2, [r1]
 8026a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8026a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	d1e3      	bne.n	8026a22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	3314      	adds	r3, #20
 8026a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a64:	e853 3f00 	ldrex	r3, [r3]
 8026a68:	623b      	str	r3, [r7, #32]
   return(result);
 8026a6a:	6a3b      	ldr	r3, [r7, #32]
 8026a6c:	f023 0301 	bic.w	r3, r3, #1
 8026a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8026a74:	687b      	ldr	r3, [r7, #4]
 8026a76:	681b      	ldr	r3, [r3, #0]
 8026a78:	3314      	adds	r3, #20
 8026a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8026a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8026a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026a86:	e841 2300 	strex	r3, r2, [r1]
 8026a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8026a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026a8e:	2b00      	cmp	r3, #0
 8026a90:	d1e3      	bne.n	8026a5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	2220      	movs	r2, #32
 8026a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	2200      	movs	r2, #0
 8026a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	681b      	ldr	r3, [r3, #0]
 8026aa4:	330c      	adds	r3, #12
 8026aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026aa8:	693b      	ldr	r3, [r7, #16]
 8026aaa:	e853 3f00 	ldrex	r3, [r3]
 8026aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8026ab0:	68fb      	ldr	r3, [r7, #12]
 8026ab2:	f023 0310 	bic.w	r3, r3, #16
 8026ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	330c      	adds	r3, #12
 8026ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8026ac4:	61fa      	str	r2, [r7, #28]
 8026ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026ac8:	69b9      	ldr	r1, [r7, #24]
 8026aca:	69fa      	ldr	r2, [r7, #28]
 8026acc:	e841 2300 	strex	r3, r2, [r1]
 8026ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8026ad2:	697b      	ldr	r3, [r7, #20]
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	d1e3      	bne.n	8026aa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8026ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8026adc:	4619      	mov	r1, r3
 8026ade:	6878      	ldr	r0, [r7, #4]
 8026ae0:	f000 f848 	bl	8026b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8026ae4:	e023      	b.n	8026b2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8026ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d009      	beq.n	8026b06 <HAL_UART_IRQHandler+0x4ea>
 8026af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8026af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	d003      	beq.n	8026b06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8026afe:	6878      	ldr	r0, [r7, #4]
 8026b00:	f000 f929 	bl	8026d56 <UART_Transmit_IT>
    return;
 8026b04:	e014      	b.n	8026b30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8026b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8026b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	d00e      	beq.n	8026b30 <HAL_UART_IRQHandler+0x514>
 8026b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8026b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d008      	beq.n	8026b30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8026b1e:	6878      	ldr	r0, [r7, #4]
 8026b20:	f000 f969 	bl	8026df6 <UART_EndTransmit_IT>
    return;
 8026b24:	e004      	b.n	8026b30 <HAL_UART_IRQHandler+0x514>
    return;
 8026b26:	bf00      	nop
 8026b28:	e002      	b.n	8026b30 <HAL_UART_IRQHandler+0x514>
      return;
 8026b2a:	bf00      	nop
 8026b2c:	e000      	b.n	8026b30 <HAL_UART_IRQHandler+0x514>
      return;
 8026b2e:	bf00      	nop
  }
}
 8026b30:	37e8      	adds	r7, #232	; 0xe8
 8026b32:	46bd      	mov	sp, r7
 8026b34:	bd80      	pop	{r7, pc}
 8026b36:	bf00      	nop

08026b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8026b38:	b480      	push	{r7}
 8026b3a:	b083      	sub	sp, #12
 8026b3c:	af00      	add	r7, sp, #0
 8026b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8026b40:	bf00      	nop
 8026b42:	370c      	adds	r7, #12
 8026b44:	46bd      	mov	sp, r7
 8026b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b4a:	4770      	bx	lr

08026b4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8026b4c:	b480      	push	{r7}
 8026b4e:	b083      	sub	sp, #12
 8026b50:	af00      	add	r7, sp, #0
 8026b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8026b54:	bf00      	nop
 8026b56:	370c      	adds	r7, #12
 8026b58:	46bd      	mov	sp, r7
 8026b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b5e:	4770      	bx	lr

08026b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8026b60:	b480      	push	{r7}
 8026b62:	b083      	sub	sp, #12
 8026b64:	af00      	add	r7, sp, #0
 8026b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8026b68:	bf00      	nop
 8026b6a:	370c      	adds	r7, #12
 8026b6c:	46bd      	mov	sp, r7
 8026b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b72:	4770      	bx	lr

08026b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8026b74:	b480      	push	{r7}
 8026b76:	b083      	sub	sp, #12
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	6078      	str	r0, [r7, #4]
 8026b7c:	460b      	mov	r3, r1
 8026b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8026b80:	bf00      	nop
 8026b82:	370c      	adds	r7, #12
 8026b84:	46bd      	mov	sp, r7
 8026b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b8a:	4770      	bx	lr

08026b8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8026b8c:	b580      	push	{r7, lr}
 8026b8e:	b090      	sub	sp, #64	; 0x40
 8026b90:	af00      	add	r7, sp, #0
 8026b92:	60f8      	str	r0, [r7, #12]
 8026b94:	60b9      	str	r1, [r7, #8]
 8026b96:	603b      	str	r3, [r7, #0]
 8026b98:	4613      	mov	r3, r2
 8026b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026b9c:	e050      	b.n	8026c40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8026b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026ba4:	d04c      	beq.n	8026c40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8026ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026ba8:	2b00      	cmp	r3, #0
 8026baa:	d007      	beq.n	8026bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8026bac:	f7fc f80c 	bl	8022bc8 <HAL_GetTick>
 8026bb0:	4602      	mov	r2, r0
 8026bb2:	683b      	ldr	r3, [r7, #0]
 8026bb4:	1ad3      	subs	r3, r2, r3
 8026bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8026bb8:	429a      	cmp	r2, r3
 8026bba:	d241      	bcs.n	8026c40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8026bbc:	68fb      	ldr	r3, [r7, #12]
 8026bbe:	681b      	ldr	r3, [r3, #0]
 8026bc0:	330c      	adds	r3, #12
 8026bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bc6:	e853 3f00 	ldrex	r3, [r3]
 8026bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8026bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8026bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026bd4:	68fb      	ldr	r3, [r7, #12]
 8026bd6:	681b      	ldr	r3, [r3, #0]
 8026bd8:	330c      	adds	r3, #12
 8026bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026bdc:	637a      	str	r2, [r7, #52]	; 0x34
 8026bde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8026be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026be4:	e841 2300 	strex	r3, r2, [r1]
 8026be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8026bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026bec:	2b00      	cmp	r3, #0
 8026bee:	d1e5      	bne.n	8026bbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026bf0:	68fb      	ldr	r3, [r7, #12]
 8026bf2:	681b      	ldr	r3, [r3, #0]
 8026bf4:	3314      	adds	r3, #20
 8026bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026bf8:	697b      	ldr	r3, [r7, #20]
 8026bfa:	e853 3f00 	ldrex	r3, [r3]
 8026bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8026c00:	693b      	ldr	r3, [r7, #16]
 8026c02:	f023 0301 	bic.w	r3, r3, #1
 8026c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8026c08:	68fb      	ldr	r3, [r7, #12]
 8026c0a:	681b      	ldr	r3, [r3, #0]
 8026c0c:	3314      	adds	r3, #20
 8026c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026c10:	623a      	str	r2, [r7, #32]
 8026c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026c14:	69f9      	ldr	r1, [r7, #28]
 8026c16:	6a3a      	ldr	r2, [r7, #32]
 8026c18:	e841 2300 	strex	r3, r2, [r1]
 8026c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8026c1e:	69bb      	ldr	r3, [r7, #24]
 8026c20:	2b00      	cmp	r3, #0
 8026c22:	d1e5      	bne.n	8026bf0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8026c24:	68fb      	ldr	r3, [r7, #12]
 8026c26:	2220      	movs	r2, #32
 8026c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8026c2c:	68fb      	ldr	r3, [r7, #12]
 8026c2e:	2220      	movs	r2, #32
 8026c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8026c34:	68fb      	ldr	r3, [r7, #12]
 8026c36:	2200      	movs	r2, #0
 8026c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8026c3c:	2303      	movs	r3, #3
 8026c3e:	e00f      	b.n	8026c60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026c40:	68fb      	ldr	r3, [r7, #12]
 8026c42:	681b      	ldr	r3, [r3, #0]
 8026c44:	681a      	ldr	r2, [r3, #0]
 8026c46:	68bb      	ldr	r3, [r7, #8]
 8026c48:	4013      	ands	r3, r2
 8026c4a:	68ba      	ldr	r2, [r7, #8]
 8026c4c:	429a      	cmp	r2, r3
 8026c4e:	bf0c      	ite	eq
 8026c50:	2301      	moveq	r3, #1
 8026c52:	2300      	movne	r3, #0
 8026c54:	b2db      	uxtb	r3, r3
 8026c56:	461a      	mov	r2, r3
 8026c58:	79fb      	ldrb	r3, [r7, #7]
 8026c5a:	429a      	cmp	r2, r3
 8026c5c:	d09f      	beq.n	8026b9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8026c5e:	2300      	movs	r3, #0
}
 8026c60:	4618      	mov	r0, r3
 8026c62:	3740      	adds	r7, #64	; 0x40
 8026c64:	46bd      	mov	sp, r7
 8026c66:	bd80      	pop	{r7, pc}

08026c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8026c68:	b480      	push	{r7}
 8026c6a:	b095      	sub	sp, #84	; 0x54
 8026c6c:	af00      	add	r7, sp, #0
 8026c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	681b      	ldr	r3, [r3, #0]
 8026c74:	330c      	adds	r3, #12
 8026c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026c7a:	e853 3f00 	ldrex	r3, [r3]
 8026c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8026c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8026c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	330c      	adds	r3, #12
 8026c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026c90:	643a      	str	r2, [r7, #64]	; 0x40
 8026c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8026c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026c98:	e841 2300 	strex	r3, r2, [r1]
 8026c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8026c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ca0:	2b00      	cmp	r3, #0
 8026ca2:	d1e5      	bne.n	8026c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	681b      	ldr	r3, [r3, #0]
 8026ca8:	3314      	adds	r3, #20
 8026caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026cac:	6a3b      	ldr	r3, [r7, #32]
 8026cae:	e853 3f00 	ldrex	r3, [r3]
 8026cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8026cb4:	69fb      	ldr	r3, [r7, #28]
 8026cb6:	f023 0301 	bic.w	r3, r3, #1
 8026cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	3314      	adds	r3, #20
 8026cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8026cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026ccc:	e841 2300 	strex	r3, r2, [r1]
 8026cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8026cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	d1e5      	bne.n	8026ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026cd8:	687b      	ldr	r3, [r7, #4]
 8026cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026cdc:	2b01      	cmp	r3, #1
 8026cde:	d119      	bne.n	8026d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026ce0:	687b      	ldr	r3, [r7, #4]
 8026ce2:	681b      	ldr	r3, [r3, #0]
 8026ce4:	330c      	adds	r3, #12
 8026ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026ce8:	68fb      	ldr	r3, [r7, #12]
 8026cea:	e853 3f00 	ldrex	r3, [r3]
 8026cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8026cf0:	68bb      	ldr	r3, [r7, #8]
 8026cf2:	f023 0310 	bic.w	r3, r3, #16
 8026cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8026cf8:	687b      	ldr	r3, [r7, #4]
 8026cfa:	681b      	ldr	r3, [r3, #0]
 8026cfc:	330c      	adds	r3, #12
 8026cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026d00:	61ba      	str	r2, [r7, #24]
 8026d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026d04:	6979      	ldr	r1, [r7, #20]
 8026d06:	69ba      	ldr	r2, [r7, #24]
 8026d08:	e841 2300 	strex	r3, r2, [r1]
 8026d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8026d0e:	693b      	ldr	r3, [r7, #16]
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	d1e5      	bne.n	8026ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	2220      	movs	r2, #32
 8026d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8026d1c:	687b      	ldr	r3, [r7, #4]
 8026d1e:	2200      	movs	r2, #0
 8026d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8026d22:	bf00      	nop
 8026d24:	3754      	adds	r7, #84	; 0x54
 8026d26:	46bd      	mov	sp, r7
 8026d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d2c:	4770      	bx	lr

08026d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8026d2e:	b580      	push	{r7, lr}
 8026d30:	b084      	sub	sp, #16
 8026d32:	af00      	add	r7, sp, #0
 8026d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8026d3c:	68fb      	ldr	r3, [r7, #12]
 8026d3e:	2200      	movs	r2, #0
 8026d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8026d42:	68fb      	ldr	r3, [r7, #12]
 8026d44:	2200      	movs	r2, #0
 8026d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8026d48:	68f8      	ldr	r0, [r7, #12]
 8026d4a:	f7ff ff09 	bl	8026b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8026d4e:	bf00      	nop
 8026d50:	3710      	adds	r7, #16
 8026d52:	46bd      	mov	sp, r7
 8026d54:	bd80      	pop	{r7, pc}

08026d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8026d56:	b480      	push	{r7}
 8026d58:	b085      	sub	sp, #20
 8026d5a:	af00      	add	r7, sp, #0
 8026d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026d64:	b2db      	uxtb	r3, r3
 8026d66:	2b21      	cmp	r3, #33	; 0x21
 8026d68:	d13e      	bne.n	8026de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8026d6a:	687b      	ldr	r3, [r7, #4]
 8026d6c:	689b      	ldr	r3, [r3, #8]
 8026d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026d72:	d114      	bne.n	8026d9e <UART_Transmit_IT+0x48>
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	691b      	ldr	r3, [r3, #16]
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	d110      	bne.n	8026d9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8026d7c:	687b      	ldr	r3, [r7, #4]
 8026d7e:	6a1b      	ldr	r3, [r3, #32]
 8026d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8026d82:	68fb      	ldr	r3, [r7, #12]
 8026d84:	881b      	ldrh	r3, [r3, #0]
 8026d86:	461a      	mov	r2, r3
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	681b      	ldr	r3, [r3, #0]
 8026d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8026d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	6a1b      	ldr	r3, [r3, #32]
 8026d96:	1c9a      	adds	r2, r3, #2
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	621a      	str	r2, [r3, #32]
 8026d9c:	e008      	b.n	8026db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8026d9e:	687b      	ldr	r3, [r7, #4]
 8026da0:	6a1b      	ldr	r3, [r3, #32]
 8026da2:	1c59      	adds	r1, r3, #1
 8026da4:	687a      	ldr	r2, [r7, #4]
 8026da6:	6211      	str	r1, [r2, #32]
 8026da8:	781a      	ldrb	r2, [r3, #0]
 8026daa:	687b      	ldr	r3, [r7, #4]
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8026db4:	b29b      	uxth	r3, r3
 8026db6:	3b01      	subs	r3, #1
 8026db8:	b29b      	uxth	r3, r3
 8026dba:	687a      	ldr	r2, [r7, #4]
 8026dbc:	4619      	mov	r1, r3
 8026dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d10f      	bne.n	8026de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	68da      	ldr	r2, [r3, #12]
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	681b      	ldr	r3, [r3, #0]
 8026dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	68da      	ldr	r2, [r3, #12]
 8026dda:	687b      	ldr	r3, [r7, #4]
 8026ddc:	681b      	ldr	r3, [r3, #0]
 8026dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8026de4:	2300      	movs	r3, #0
 8026de6:	e000      	b.n	8026dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8026de8:	2302      	movs	r3, #2
  }
}
 8026dea:	4618      	mov	r0, r3
 8026dec:	3714      	adds	r7, #20
 8026dee:	46bd      	mov	sp, r7
 8026df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026df4:	4770      	bx	lr

08026df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8026df6:	b580      	push	{r7, lr}
 8026df8:	b082      	sub	sp, #8
 8026dfa:	af00      	add	r7, sp, #0
 8026dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8026dfe:	687b      	ldr	r3, [r7, #4]
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	68da      	ldr	r2, [r3, #12]
 8026e04:	687b      	ldr	r3, [r7, #4]
 8026e06:	681b      	ldr	r3, [r3, #0]
 8026e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8026e0e:	687b      	ldr	r3, [r7, #4]
 8026e10:	2220      	movs	r2, #32
 8026e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8026e16:	6878      	ldr	r0, [r7, #4]
 8026e18:	f7ff fe8e 	bl	8026b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8026e1c:	2300      	movs	r3, #0
}
 8026e1e:	4618      	mov	r0, r3
 8026e20:	3708      	adds	r7, #8
 8026e22:	46bd      	mov	sp, r7
 8026e24:	bd80      	pop	{r7, pc}

08026e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8026e26:	b580      	push	{r7, lr}
 8026e28:	b08c      	sub	sp, #48	; 0x30
 8026e2a:	af00      	add	r7, sp, #0
 8026e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8026e2e:	687b      	ldr	r3, [r7, #4]
 8026e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8026e34:	b2db      	uxtb	r3, r3
 8026e36:	2b22      	cmp	r3, #34	; 0x22
 8026e38:	f040 80ab 	bne.w	8026f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8026e3c:	687b      	ldr	r3, [r7, #4]
 8026e3e:	689b      	ldr	r3, [r3, #8]
 8026e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026e44:	d117      	bne.n	8026e76 <UART_Receive_IT+0x50>
 8026e46:	687b      	ldr	r3, [r7, #4]
 8026e48:	691b      	ldr	r3, [r3, #16]
 8026e4a:	2b00      	cmp	r3, #0
 8026e4c:	d113      	bne.n	8026e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8026e4e:	2300      	movs	r3, #0
 8026e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8026e52:	687b      	ldr	r3, [r7, #4]
 8026e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	681b      	ldr	r3, [r3, #0]
 8026e5c:	685b      	ldr	r3, [r3, #4]
 8026e5e:	b29b      	uxth	r3, r3
 8026e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026e64:	b29a      	uxth	r2, r3
 8026e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e6e:	1c9a      	adds	r2, r3, #2
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	629a      	str	r2, [r3, #40]	; 0x28
 8026e74:	e026      	b.n	8026ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8026e7c:	2300      	movs	r3, #0
 8026e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8026e80:	687b      	ldr	r3, [r7, #4]
 8026e82:	689b      	ldr	r3, [r3, #8]
 8026e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026e88:	d007      	beq.n	8026e9a <UART_Receive_IT+0x74>
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	689b      	ldr	r3, [r3, #8]
 8026e8e:	2b00      	cmp	r3, #0
 8026e90:	d10a      	bne.n	8026ea8 <UART_Receive_IT+0x82>
 8026e92:	687b      	ldr	r3, [r7, #4]
 8026e94:	691b      	ldr	r3, [r3, #16]
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	d106      	bne.n	8026ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8026e9a:	687b      	ldr	r3, [r7, #4]
 8026e9c:	681b      	ldr	r3, [r3, #0]
 8026e9e:	685b      	ldr	r3, [r3, #4]
 8026ea0:	b2da      	uxtb	r2, r3
 8026ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026ea4:	701a      	strb	r2, [r3, #0]
 8026ea6:	e008      	b.n	8026eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	681b      	ldr	r3, [r3, #0]
 8026eac:	685b      	ldr	r3, [r3, #4]
 8026eae:	b2db      	uxtb	r3, r3
 8026eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8026eb4:	b2da      	uxtb	r2, r3
 8026eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026ebe:	1c5a      	adds	r2, r3, #1
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8026ec8:	b29b      	uxth	r3, r3
 8026eca:	3b01      	subs	r3, #1
 8026ecc:	b29b      	uxth	r3, r3
 8026ece:	687a      	ldr	r2, [r7, #4]
 8026ed0:	4619      	mov	r1, r3
 8026ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8026ed4:	2b00      	cmp	r3, #0
 8026ed6:	d15a      	bne.n	8026f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8026ed8:	687b      	ldr	r3, [r7, #4]
 8026eda:	681b      	ldr	r3, [r3, #0]
 8026edc:	68da      	ldr	r2, [r3, #12]
 8026ede:	687b      	ldr	r3, [r7, #4]
 8026ee0:	681b      	ldr	r3, [r3, #0]
 8026ee2:	f022 0220 	bic.w	r2, r2, #32
 8026ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	681b      	ldr	r3, [r3, #0]
 8026eec:	68da      	ldr	r2, [r3, #12]
 8026eee:	687b      	ldr	r3, [r7, #4]
 8026ef0:	681b      	ldr	r3, [r3, #0]
 8026ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	681b      	ldr	r3, [r3, #0]
 8026efc:	695a      	ldr	r2, [r3, #20]
 8026efe:	687b      	ldr	r3, [r7, #4]
 8026f00:	681b      	ldr	r3, [r3, #0]
 8026f02:	f022 0201 	bic.w	r2, r2, #1
 8026f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8026f08:	687b      	ldr	r3, [r7, #4]
 8026f0a:	2220      	movs	r2, #32
 8026f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026f10:	687b      	ldr	r3, [r7, #4]
 8026f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026f14:	2b01      	cmp	r3, #1
 8026f16:	d135      	bne.n	8026f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8026f18:	687b      	ldr	r3, [r7, #4]
 8026f1a:	2200      	movs	r2, #0
 8026f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026f1e:	687b      	ldr	r3, [r7, #4]
 8026f20:	681b      	ldr	r3, [r3, #0]
 8026f22:	330c      	adds	r3, #12
 8026f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026f26:	697b      	ldr	r3, [r7, #20]
 8026f28:	e853 3f00 	ldrex	r3, [r3]
 8026f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8026f2e:	693b      	ldr	r3, [r7, #16]
 8026f30:	f023 0310 	bic.w	r3, r3, #16
 8026f34:	627b      	str	r3, [r7, #36]	; 0x24
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	681b      	ldr	r3, [r3, #0]
 8026f3a:	330c      	adds	r3, #12
 8026f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f3e:	623a      	str	r2, [r7, #32]
 8026f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026f42:	69f9      	ldr	r1, [r7, #28]
 8026f44:	6a3a      	ldr	r2, [r7, #32]
 8026f46:	e841 2300 	strex	r3, r2, [r1]
 8026f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8026f4c:	69bb      	ldr	r3, [r7, #24]
 8026f4e:	2b00      	cmp	r3, #0
 8026f50:	d1e5      	bne.n	8026f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8026f52:	687b      	ldr	r3, [r7, #4]
 8026f54:	681b      	ldr	r3, [r3, #0]
 8026f56:	681b      	ldr	r3, [r3, #0]
 8026f58:	f003 0310 	and.w	r3, r3, #16
 8026f5c:	2b10      	cmp	r3, #16
 8026f5e:	d10a      	bne.n	8026f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8026f60:	2300      	movs	r3, #0
 8026f62:	60fb      	str	r3, [r7, #12]
 8026f64:	687b      	ldr	r3, [r7, #4]
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	681b      	ldr	r3, [r3, #0]
 8026f6a:	60fb      	str	r3, [r7, #12]
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	681b      	ldr	r3, [r3, #0]
 8026f70:	685b      	ldr	r3, [r3, #4]
 8026f72:	60fb      	str	r3, [r7, #12]
 8026f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8026f76:	687b      	ldr	r3, [r7, #4]
 8026f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8026f7a:	4619      	mov	r1, r3
 8026f7c:	6878      	ldr	r0, [r7, #4]
 8026f7e:	f7ff fdf9 	bl	8026b74 <HAL_UARTEx_RxEventCallback>
 8026f82:	e002      	b.n	8026f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8026f84:	6878      	ldr	r0, [r7, #4]
 8026f86:	f7ff fde1 	bl	8026b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8026f8a:	2300      	movs	r3, #0
 8026f8c:	e002      	b.n	8026f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8026f8e:	2300      	movs	r3, #0
 8026f90:	e000      	b.n	8026f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8026f92:	2302      	movs	r3, #2
  }
}
 8026f94:	4618      	mov	r0, r3
 8026f96:	3730      	adds	r7, #48	; 0x30
 8026f98:	46bd      	mov	sp, r7
 8026f9a:	bd80      	pop	{r7, pc}

08026f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8026f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026fa0:	b0c0      	sub	sp, #256	; 0x100
 8026fa2:	af00      	add	r7, sp, #0
 8026fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8026fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fac:	681b      	ldr	r3, [r3, #0]
 8026fae:	691b      	ldr	r3, [r3, #16]
 8026fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8026fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fb8:	68d9      	ldr	r1, [r3, #12]
 8026fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fbe:	681a      	ldr	r2, [r3, #0]
 8026fc0:	ea40 0301 	orr.w	r3, r0, r1
 8026fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8026fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fca:	689a      	ldr	r2, [r3, #8]
 8026fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fd0:	691b      	ldr	r3, [r3, #16]
 8026fd2:	431a      	orrs	r2, r3
 8026fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fd8:	695b      	ldr	r3, [r3, #20]
 8026fda:	431a      	orrs	r2, r3
 8026fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fe0:	69db      	ldr	r3, [r3, #28]
 8026fe2:	4313      	orrs	r3, r2
 8026fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8026fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026fec:	681b      	ldr	r3, [r3, #0]
 8026fee:	68db      	ldr	r3, [r3, #12]
 8026ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8026ff4:	f021 010c 	bic.w	r1, r1, #12
 8026ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8026ffc:	681a      	ldr	r2, [r3, #0]
 8026ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8027002:	430b      	orrs	r3, r1
 8027004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8027006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802700a:	681b      	ldr	r3, [r3, #0]
 802700c:	695b      	ldr	r3, [r3, #20]
 802700e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8027012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027016:	6999      	ldr	r1, [r3, #24]
 8027018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802701c:	681a      	ldr	r2, [r3, #0]
 802701e:	ea40 0301 	orr.w	r3, r0, r1
 8027022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8027024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027028:	681a      	ldr	r2, [r3, #0]
 802702a:	4b8f      	ldr	r3, [pc, #572]	; (8027268 <UART_SetConfig+0x2cc>)
 802702c:	429a      	cmp	r2, r3
 802702e:	d005      	beq.n	802703c <UART_SetConfig+0xa0>
 8027030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027034:	681a      	ldr	r2, [r3, #0]
 8027036:	4b8d      	ldr	r3, [pc, #564]	; (802726c <UART_SetConfig+0x2d0>)
 8027038:	429a      	cmp	r2, r3
 802703a:	d104      	bne.n	8027046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802703c:	f7fe f80c 	bl	8025058 <HAL_RCC_GetPCLK2Freq>
 8027040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8027044:	e003      	b.n	802704e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8027046:	f7fd fff3 	bl	8025030 <HAL_RCC_GetPCLK1Freq>
 802704a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027052:	69db      	ldr	r3, [r3, #28]
 8027054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027058:	f040 810c 	bne.w	8027274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802705c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8027060:	2200      	movs	r2, #0
 8027062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8027066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802706a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802706e:	4622      	mov	r2, r4
 8027070:	462b      	mov	r3, r5
 8027072:	1891      	adds	r1, r2, r2
 8027074:	65b9      	str	r1, [r7, #88]	; 0x58
 8027076:	415b      	adcs	r3, r3
 8027078:	65fb      	str	r3, [r7, #92]	; 0x5c
 802707a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802707e:	4621      	mov	r1, r4
 8027080:	eb12 0801 	adds.w	r8, r2, r1
 8027084:	4629      	mov	r1, r5
 8027086:	eb43 0901 	adc.w	r9, r3, r1
 802708a:	f04f 0200 	mov.w	r2, #0
 802708e:	f04f 0300 	mov.w	r3, #0
 8027092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802709a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802709e:	4690      	mov	r8, r2
 80270a0:	4699      	mov	r9, r3
 80270a2:	4623      	mov	r3, r4
 80270a4:	eb18 0303 	adds.w	r3, r8, r3
 80270a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80270ac:	462b      	mov	r3, r5
 80270ae:	eb49 0303 	adc.w	r3, r9, r3
 80270b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80270b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80270ba:	685b      	ldr	r3, [r3, #4]
 80270bc:	2200      	movs	r2, #0
 80270be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80270c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80270c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80270ca:	460b      	mov	r3, r1
 80270cc:	18db      	adds	r3, r3, r3
 80270ce:	653b      	str	r3, [r7, #80]	; 0x50
 80270d0:	4613      	mov	r3, r2
 80270d2:	eb42 0303 	adc.w	r3, r2, r3
 80270d6:	657b      	str	r3, [r7, #84]	; 0x54
 80270d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80270dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80270e0:	f7f9 fd7a 	bl	8020bd8 <__aeabi_uldivmod>
 80270e4:	4602      	mov	r2, r0
 80270e6:	460b      	mov	r3, r1
 80270e8:	4b61      	ldr	r3, [pc, #388]	; (8027270 <UART_SetConfig+0x2d4>)
 80270ea:	fba3 2302 	umull	r2, r3, r3, r2
 80270ee:	095b      	lsrs	r3, r3, #5
 80270f0:	011c      	lsls	r4, r3, #4
 80270f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80270f6:	2200      	movs	r2, #0
 80270f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80270fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8027100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8027104:	4642      	mov	r2, r8
 8027106:	464b      	mov	r3, r9
 8027108:	1891      	adds	r1, r2, r2
 802710a:	64b9      	str	r1, [r7, #72]	; 0x48
 802710c:	415b      	adcs	r3, r3
 802710e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8027114:	4641      	mov	r1, r8
 8027116:	eb12 0a01 	adds.w	sl, r2, r1
 802711a:	4649      	mov	r1, r9
 802711c:	eb43 0b01 	adc.w	fp, r3, r1
 8027120:	f04f 0200 	mov.w	r2, #0
 8027124:	f04f 0300 	mov.w	r3, #0
 8027128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802712c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8027130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8027134:	4692      	mov	sl, r2
 8027136:	469b      	mov	fp, r3
 8027138:	4643      	mov	r3, r8
 802713a:	eb1a 0303 	adds.w	r3, sl, r3
 802713e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8027142:	464b      	mov	r3, r9
 8027144:	eb4b 0303 	adc.w	r3, fp, r3
 8027148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027150:	685b      	ldr	r3, [r3, #4]
 8027152:	2200      	movs	r2, #0
 8027154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8027158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802715c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8027160:	460b      	mov	r3, r1
 8027162:	18db      	adds	r3, r3, r3
 8027164:	643b      	str	r3, [r7, #64]	; 0x40
 8027166:	4613      	mov	r3, r2
 8027168:	eb42 0303 	adc.w	r3, r2, r3
 802716c:	647b      	str	r3, [r7, #68]	; 0x44
 802716e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8027172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8027176:	f7f9 fd2f 	bl	8020bd8 <__aeabi_uldivmod>
 802717a:	4602      	mov	r2, r0
 802717c:	460b      	mov	r3, r1
 802717e:	4611      	mov	r1, r2
 8027180:	4b3b      	ldr	r3, [pc, #236]	; (8027270 <UART_SetConfig+0x2d4>)
 8027182:	fba3 2301 	umull	r2, r3, r3, r1
 8027186:	095b      	lsrs	r3, r3, #5
 8027188:	2264      	movs	r2, #100	; 0x64
 802718a:	fb02 f303 	mul.w	r3, r2, r3
 802718e:	1acb      	subs	r3, r1, r3
 8027190:	00db      	lsls	r3, r3, #3
 8027192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8027196:	4b36      	ldr	r3, [pc, #216]	; (8027270 <UART_SetConfig+0x2d4>)
 8027198:	fba3 2302 	umull	r2, r3, r3, r2
 802719c:	095b      	lsrs	r3, r3, #5
 802719e:	005b      	lsls	r3, r3, #1
 80271a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80271a4:	441c      	add	r4, r3
 80271a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80271aa:	2200      	movs	r2, #0
 80271ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80271b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80271b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80271b8:	4642      	mov	r2, r8
 80271ba:	464b      	mov	r3, r9
 80271bc:	1891      	adds	r1, r2, r2
 80271be:	63b9      	str	r1, [r7, #56]	; 0x38
 80271c0:	415b      	adcs	r3, r3
 80271c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80271c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80271c8:	4641      	mov	r1, r8
 80271ca:	1851      	adds	r1, r2, r1
 80271cc:	6339      	str	r1, [r7, #48]	; 0x30
 80271ce:	4649      	mov	r1, r9
 80271d0:	414b      	adcs	r3, r1
 80271d2:	637b      	str	r3, [r7, #52]	; 0x34
 80271d4:	f04f 0200 	mov.w	r2, #0
 80271d8:	f04f 0300 	mov.w	r3, #0
 80271dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80271e0:	4659      	mov	r1, fp
 80271e2:	00cb      	lsls	r3, r1, #3
 80271e4:	4651      	mov	r1, sl
 80271e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80271ea:	4651      	mov	r1, sl
 80271ec:	00ca      	lsls	r2, r1, #3
 80271ee:	4610      	mov	r0, r2
 80271f0:	4619      	mov	r1, r3
 80271f2:	4603      	mov	r3, r0
 80271f4:	4642      	mov	r2, r8
 80271f6:	189b      	adds	r3, r3, r2
 80271f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80271fc:	464b      	mov	r3, r9
 80271fe:	460a      	mov	r2, r1
 8027200:	eb42 0303 	adc.w	r3, r2, r3
 8027204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8027208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802720c:	685b      	ldr	r3, [r3, #4]
 802720e:	2200      	movs	r2, #0
 8027210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8027214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8027218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802721c:	460b      	mov	r3, r1
 802721e:	18db      	adds	r3, r3, r3
 8027220:	62bb      	str	r3, [r7, #40]	; 0x28
 8027222:	4613      	mov	r3, r2
 8027224:	eb42 0303 	adc.w	r3, r2, r3
 8027228:	62fb      	str	r3, [r7, #44]	; 0x2c
 802722a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802722e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8027232:	f7f9 fcd1 	bl	8020bd8 <__aeabi_uldivmod>
 8027236:	4602      	mov	r2, r0
 8027238:	460b      	mov	r3, r1
 802723a:	4b0d      	ldr	r3, [pc, #52]	; (8027270 <UART_SetConfig+0x2d4>)
 802723c:	fba3 1302 	umull	r1, r3, r3, r2
 8027240:	095b      	lsrs	r3, r3, #5
 8027242:	2164      	movs	r1, #100	; 0x64
 8027244:	fb01 f303 	mul.w	r3, r1, r3
 8027248:	1ad3      	subs	r3, r2, r3
 802724a:	00db      	lsls	r3, r3, #3
 802724c:	3332      	adds	r3, #50	; 0x32
 802724e:	4a08      	ldr	r2, [pc, #32]	; (8027270 <UART_SetConfig+0x2d4>)
 8027250:	fba2 2303 	umull	r2, r3, r2, r3
 8027254:	095b      	lsrs	r3, r3, #5
 8027256:	f003 0207 	and.w	r2, r3, #7
 802725a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	4422      	add	r2, r4
 8027262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8027264:	e105      	b.n	8027472 <UART_SetConfig+0x4d6>
 8027266:	bf00      	nop
 8027268:	40011000 	.word	0x40011000
 802726c:	40011400 	.word	0x40011400
 8027270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8027274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8027278:	2200      	movs	r2, #0
 802727a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802727e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8027282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8027286:	4642      	mov	r2, r8
 8027288:	464b      	mov	r3, r9
 802728a:	1891      	adds	r1, r2, r2
 802728c:	6239      	str	r1, [r7, #32]
 802728e:	415b      	adcs	r3, r3
 8027290:	627b      	str	r3, [r7, #36]	; 0x24
 8027292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8027296:	4641      	mov	r1, r8
 8027298:	1854      	adds	r4, r2, r1
 802729a:	4649      	mov	r1, r9
 802729c:	eb43 0501 	adc.w	r5, r3, r1
 80272a0:	f04f 0200 	mov.w	r2, #0
 80272a4:	f04f 0300 	mov.w	r3, #0
 80272a8:	00eb      	lsls	r3, r5, #3
 80272aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80272ae:	00e2      	lsls	r2, r4, #3
 80272b0:	4614      	mov	r4, r2
 80272b2:	461d      	mov	r5, r3
 80272b4:	4643      	mov	r3, r8
 80272b6:	18e3      	adds	r3, r4, r3
 80272b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80272bc:	464b      	mov	r3, r9
 80272be:	eb45 0303 	adc.w	r3, r5, r3
 80272c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80272c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80272ca:	685b      	ldr	r3, [r3, #4]
 80272cc:	2200      	movs	r2, #0
 80272ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80272d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80272d6:	f04f 0200 	mov.w	r2, #0
 80272da:	f04f 0300 	mov.w	r3, #0
 80272de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80272e2:	4629      	mov	r1, r5
 80272e4:	008b      	lsls	r3, r1, #2
 80272e6:	4621      	mov	r1, r4
 80272e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80272ec:	4621      	mov	r1, r4
 80272ee:	008a      	lsls	r2, r1, #2
 80272f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80272f4:	f7f9 fc70 	bl	8020bd8 <__aeabi_uldivmod>
 80272f8:	4602      	mov	r2, r0
 80272fa:	460b      	mov	r3, r1
 80272fc:	4b60      	ldr	r3, [pc, #384]	; (8027480 <UART_SetConfig+0x4e4>)
 80272fe:	fba3 2302 	umull	r2, r3, r3, r2
 8027302:	095b      	lsrs	r3, r3, #5
 8027304:	011c      	lsls	r4, r3, #4
 8027306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802730a:	2200      	movs	r2, #0
 802730c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8027310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8027314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8027318:	4642      	mov	r2, r8
 802731a:	464b      	mov	r3, r9
 802731c:	1891      	adds	r1, r2, r2
 802731e:	61b9      	str	r1, [r7, #24]
 8027320:	415b      	adcs	r3, r3
 8027322:	61fb      	str	r3, [r7, #28]
 8027324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027328:	4641      	mov	r1, r8
 802732a:	1851      	adds	r1, r2, r1
 802732c:	6139      	str	r1, [r7, #16]
 802732e:	4649      	mov	r1, r9
 8027330:	414b      	adcs	r3, r1
 8027332:	617b      	str	r3, [r7, #20]
 8027334:	f04f 0200 	mov.w	r2, #0
 8027338:	f04f 0300 	mov.w	r3, #0
 802733c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027340:	4659      	mov	r1, fp
 8027342:	00cb      	lsls	r3, r1, #3
 8027344:	4651      	mov	r1, sl
 8027346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802734a:	4651      	mov	r1, sl
 802734c:	00ca      	lsls	r2, r1, #3
 802734e:	4610      	mov	r0, r2
 8027350:	4619      	mov	r1, r3
 8027352:	4603      	mov	r3, r0
 8027354:	4642      	mov	r2, r8
 8027356:	189b      	adds	r3, r3, r2
 8027358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802735c:	464b      	mov	r3, r9
 802735e:	460a      	mov	r2, r1
 8027360:	eb42 0303 	adc.w	r3, r2, r3
 8027364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8027368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802736c:	685b      	ldr	r3, [r3, #4]
 802736e:	2200      	movs	r2, #0
 8027370:	67bb      	str	r3, [r7, #120]	; 0x78
 8027372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8027374:	f04f 0200 	mov.w	r2, #0
 8027378:	f04f 0300 	mov.w	r3, #0
 802737c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8027380:	4649      	mov	r1, r9
 8027382:	008b      	lsls	r3, r1, #2
 8027384:	4641      	mov	r1, r8
 8027386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802738a:	4641      	mov	r1, r8
 802738c:	008a      	lsls	r2, r1, #2
 802738e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8027392:	f7f9 fc21 	bl	8020bd8 <__aeabi_uldivmod>
 8027396:	4602      	mov	r2, r0
 8027398:	460b      	mov	r3, r1
 802739a:	4b39      	ldr	r3, [pc, #228]	; (8027480 <UART_SetConfig+0x4e4>)
 802739c:	fba3 1302 	umull	r1, r3, r3, r2
 80273a0:	095b      	lsrs	r3, r3, #5
 80273a2:	2164      	movs	r1, #100	; 0x64
 80273a4:	fb01 f303 	mul.w	r3, r1, r3
 80273a8:	1ad3      	subs	r3, r2, r3
 80273aa:	011b      	lsls	r3, r3, #4
 80273ac:	3332      	adds	r3, #50	; 0x32
 80273ae:	4a34      	ldr	r2, [pc, #208]	; (8027480 <UART_SetConfig+0x4e4>)
 80273b0:	fba2 2303 	umull	r2, r3, r2, r3
 80273b4:	095b      	lsrs	r3, r3, #5
 80273b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80273ba:	441c      	add	r4, r3
 80273bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80273c0:	2200      	movs	r2, #0
 80273c2:	673b      	str	r3, [r7, #112]	; 0x70
 80273c4:	677a      	str	r2, [r7, #116]	; 0x74
 80273c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80273ca:	4642      	mov	r2, r8
 80273cc:	464b      	mov	r3, r9
 80273ce:	1891      	adds	r1, r2, r2
 80273d0:	60b9      	str	r1, [r7, #8]
 80273d2:	415b      	adcs	r3, r3
 80273d4:	60fb      	str	r3, [r7, #12]
 80273d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80273da:	4641      	mov	r1, r8
 80273dc:	1851      	adds	r1, r2, r1
 80273de:	6039      	str	r1, [r7, #0]
 80273e0:	4649      	mov	r1, r9
 80273e2:	414b      	adcs	r3, r1
 80273e4:	607b      	str	r3, [r7, #4]
 80273e6:	f04f 0200 	mov.w	r2, #0
 80273ea:	f04f 0300 	mov.w	r3, #0
 80273ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80273f2:	4659      	mov	r1, fp
 80273f4:	00cb      	lsls	r3, r1, #3
 80273f6:	4651      	mov	r1, sl
 80273f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80273fc:	4651      	mov	r1, sl
 80273fe:	00ca      	lsls	r2, r1, #3
 8027400:	4610      	mov	r0, r2
 8027402:	4619      	mov	r1, r3
 8027404:	4603      	mov	r3, r0
 8027406:	4642      	mov	r2, r8
 8027408:	189b      	adds	r3, r3, r2
 802740a:	66bb      	str	r3, [r7, #104]	; 0x68
 802740c:	464b      	mov	r3, r9
 802740e:	460a      	mov	r2, r1
 8027410:	eb42 0303 	adc.w	r3, r2, r3
 8027414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8027416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802741a:	685b      	ldr	r3, [r3, #4]
 802741c:	2200      	movs	r2, #0
 802741e:	663b      	str	r3, [r7, #96]	; 0x60
 8027420:	667a      	str	r2, [r7, #100]	; 0x64
 8027422:	f04f 0200 	mov.w	r2, #0
 8027426:	f04f 0300 	mov.w	r3, #0
 802742a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802742e:	4649      	mov	r1, r9
 8027430:	008b      	lsls	r3, r1, #2
 8027432:	4641      	mov	r1, r8
 8027434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8027438:	4641      	mov	r1, r8
 802743a:	008a      	lsls	r2, r1, #2
 802743c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8027440:	f7f9 fbca 	bl	8020bd8 <__aeabi_uldivmod>
 8027444:	4602      	mov	r2, r0
 8027446:	460b      	mov	r3, r1
 8027448:	4b0d      	ldr	r3, [pc, #52]	; (8027480 <UART_SetConfig+0x4e4>)
 802744a:	fba3 1302 	umull	r1, r3, r3, r2
 802744e:	095b      	lsrs	r3, r3, #5
 8027450:	2164      	movs	r1, #100	; 0x64
 8027452:	fb01 f303 	mul.w	r3, r1, r3
 8027456:	1ad3      	subs	r3, r2, r3
 8027458:	011b      	lsls	r3, r3, #4
 802745a:	3332      	adds	r3, #50	; 0x32
 802745c:	4a08      	ldr	r2, [pc, #32]	; (8027480 <UART_SetConfig+0x4e4>)
 802745e:	fba2 2303 	umull	r2, r3, r2, r3
 8027462:	095b      	lsrs	r3, r3, #5
 8027464:	f003 020f 	and.w	r2, r3, #15
 8027468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802746c:	681b      	ldr	r3, [r3, #0]
 802746e:	4422      	add	r2, r4
 8027470:	609a      	str	r2, [r3, #8]
}
 8027472:	bf00      	nop
 8027474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8027478:	46bd      	mov	sp, r7
 802747a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802747e:	bf00      	nop
 8027480:	51eb851f 	.word	0x51eb851f

08027484 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8027484:	b580      	push	{r7, lr}
 8027486:	b084      	sub	sp, #16
 8027488:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 802748a:	4b8b      	ldr	r3, [pc, #556]	; (80276b8 <MX_LWIP_Init+0x234>)
 802748c:	22a9      	movs	r2, #169	; 0xa9
 802748e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8027490:	4b89      	ldr	r3, [pc, #548]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027492:	22fe      	movs	r2, #254	; 0xfe
 8027494:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 8027496:	4b88      	ldr	r3, [pc, #544]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027498:	2208      	movs	r2, #8
 802749a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 45;
 802749c:	4b86      	ldr	r3, [pc, #536]	; (80276b8 <MX_LWIP_Init+0x234>)
 802749e:	222d      	movs	r2, #45	; 0x2d
 80274a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80274a2:	4b86      	ldr	r3, [pc, #536]	; (80276bc <MX_LWIP_Init+0x238>)
 80274a4:	22ff      	movs	r2, #255	; 0xff
 80274a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80274a8:	4b84      	ldr	r3, [pc, #528]	; (80276bc <MX_LWIP_Init+0x238>)
 80274aa:	22ff      	movs	r2, #255	; 0xff
 80274ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80274ae:	4b83      	ldr	r3, [pc, #524]	; (80276bc <MX_LWIP_Init+0x238>)
 80274b0:	2200      	movs	r2, #0
 80274b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80274b4:	4b81      	ldr	r3, [pc, #516]	; (80276bc <MX_LWIP_Init+0x238>)
 80274b6:	2200      	movs	r2, #0
 80274b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80274ba:	4b81      	ldr	r3, [pc, #516]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80274bc:	22c0      	movs	r2, #192	; 0xc0
 80274be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80274c0:	4b7f      	ldr	r3, [pc, #508]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80274c2:	22a8      	movs	r2, #168	; 0xa8
 80274c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80274c6:	4b7e      	ldr	r3, [pc, #504]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80274c8:	2200      	movs	r2, #0
 80274ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80274cc:	4b7c      	ldr	r3, [pc, #496]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80274ce:	2201      	movs	r2, #1
 80274d0:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80274d2:	f000 fc27 	bl	8027d24 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80274d6:	4b78      	ldr	r3, [pc, #480]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274d8:	781b      	ldrb	r3, [r3, #0]
 80274da:	061a      	lsls	r2, r3, #24
 80274dc:	4b76      	ldr	r3, [pc, #472]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274de:	785b      	ldrb	r3, [r3, #1]
 80274e0:	041b      	lsls	r3, r3, #16
 80274e2:	431a      	orrs	r2, r3
 80274e4:	4b74      	ldr	r3, [pc, #464]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274e6:	789b      	ldrb	r3, [r3, #2]
 80274e8:	021b      	lsls	r3, r3, #8
 80274ea:	4313      	orrs	r3, r2
 80274ec:	4a72      	ldr	r2, [pc, #456]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274ee:	78d2      	ldrb	r2, [r2, #3]
 80274f0:	4313      	orrs	r3, r2
 80274f2:	061a      	lsls	r2, r3, #24
 80274f4:	4b70      	ldr	r3, [pc, #448]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274f6:	781b      	ldrb	r3, [r3, #0]
 80274f8:	0619      	lsls	r1, r3, #24
 80274fa:	4b6f      	ldr	r3, [pc, #444]	; (80276b8 <MX_LWIP_Init+0x234>)
 80274fc:	785b      	ldrb	r3, [r3, #1]
 80274fe:	041b      	lsls	r3, r3, #16
 8027500:	4319      	orrs	r1, r3
 8027502:	4b6d      	ldr	r3, [pc, #436]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027504:	789b      	ldrb	r3, [r3, #2]
 8027506:	021b      	lsls	r3, r3, #8
 8027508:	430b      	orrs	r3, r1
 802750a:	496b      	ldr	r1, [pc, #428]	; (80276b8 <MX_LWIP_Init+0x234>)
 802750c:	78c9      	ldrb	r1, [r1, #3]
 802750e:	430b      	orrs	r3, r1
 8027510:	021b      	lsls	r3, r3, #8
 8027512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8027516:	431a      	orrs	r2, r3
 8027518:	4b67      	ldr	r3, [pc, #412]	; (80276b8 <MX_LWIP_Init+0x234>)
 802751a:	781b      	ldrb	r3, [r3, #0]
 802751c:	0619      	lsls	r1, r3, #24
 802751e:	4b66      	ldr	r3, [pc, #408]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027520:	785b      	ldrb	r3, [r3, #1]
 8027522:	041b      	lsls	r3, r3, #16
 8027524:	4319      	orrs	r1, r3
 8027526:	4b64      	ldr	r3, [pc, #400]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027528:	789b      	ldrb	r3, [r3, #2]
 802752a:	021b      	lsls	r3, r3, #8
 802752c:	430b      	orrs	r3, r1
 802752e:	4962      	ldr	r1, [pc, #392]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027530:	78c9      	ldrb	r1, [r1, #3]
 8027532:	430b      	orrs	r3, r1
 8027534:	0a1b      	lsrs	r3, r3, #8
 8027536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802753a:	431a      	orrs	r2, r3
 802753c:	4b5e      	ldr	r3, [pc, #376]	; (80276b8 <MX_LWIP_Init+0x234>)
 802753e:	781b      	ldrb	r3, [r3, #0]
 8027540:	0619      	lsls	r1, r3, #24
 8027542:	4b5d      	ldr	r3, [pc, #372]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027544:	785b      	ldrb	r3, [r3, #1]
 8027546:	041b      	lsls	r3, r3, #16
 8027548:	4319      	orrs	r1, r3
 802754a:	4b5b      	ldr	r3, [pc, #364]	; (80276b8 <MX_LWIP_Init+0x234>)
 802754c:	789b      	ldrb	r3, [r3, #2]
 802754e:	021b      	lsls	r3, r3, #8
 8027550:	430b      	orrs	r3, r1
 8027552:	4959      	ldr	r1, [pc, #356]	; (80276b8 <MX_LWIP_Init+0x234>)
 8027554:	78c9      	ldrb	r1, [r1, #3]
 8027556:	430b      	orrs	r3, r1
 8027558:	0e1b      	lsrs	r3, r3, #24
 802755a:	4313      	orrs	r3, r2
 802755c:	4a59      	ldr	r2, [pc, #356]	; (80276c4 <MX_LWIP_Init+0x240>)
 802755e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8027560:	4b56      	ldr	r3, [pc, #344]	; (80276bc <MX_LWIP_Init+0x238>)
 8027562:	781b      	ldrb	r3, [r3, #0]
 8027564:	061a      	lsls	r2, r3, #24
 8027566:	4b55      	ldr	r3, [pc, #340]	; (80276bc <MX_LWIP_Init+0x238>)
 8027568:	785b      	ldrb	r3, [r3, #1]
 802756a:	041b      	lsls	r3, r3, #16
 802756c:	431a      	orrs	r2, r3
 802756e:	4b53      	ldr	r3, [pc, #332]	; (80276bc <MX_LWIP_Init+0x238>)
 8027570:	789b      	ldrb	r3, [r3, #2]
 8027572:	021b      	lsls	r3, r3, #8
 8027574:	4313      	orrs	r3, r2
 8027576:	4a51      	ldr	r2, [pc, #324]	; (80276bc <MX_LWIP_Init+0x238>)
 8027578:	78d2      	ldrb	r2, [r2, #3]
 802757a:	4313      	orrs	r3, r2
 802757c:	061a      	lsls	r2, r3, #24
 802757e:	4b4f      	ldr	r3, [pc, #316]	; (80276bc <MX_LWIP_Init+0x238>)
 8027580:	781b      	ldrb	r3, [r3, #0]
 8027582:	0619      	lsls	r1, r3, #24
 8027584:	4b4d      	ldr	r3, [pc, #308]	; (80276bc <MX_LWIP_Init+0x238>)
 8027586:	785b      	ldrb	r3, [r3, #1]
 8027588:	041b      	lsls	r3, r3, #16
 802758a:	4319      	orrs	r1, r3
 802758c:	4b4b      	ldr	r3, [pc, #300]	; (80276bc <MX_LWIP_Init+0x238>)
 802758e:	789b      	ldrb	r3, [r3, #2]
 8027590:	021b      	lsls	r3, r3, #8
 8027592:	430b      	orrs	r3, r1
 8027594:	4949      	ldr	r1, [pc, #292]	; (80276bc <MX_LWIP_Init+0x238>)
 8027596:	78c9      	ldrb	r1, [r1, #3]
 8027598:	430b      	orrs	r3, r1
 802759a:	021b      	lsls	r3, r3, #8
 802759c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80275a0:	431a      	orrs	r2, r3
 80275a2:	4b46      	ldr	r3, [pc, #280]	; (80276bc <MX_LWIP_Init+0x238>)
 80275a4:	781b      	ldrb	r3, [r3, #0]
 80275a6:	0619      	lsls	r1, r3, #24
 80275a8:	4b44      	ldr	r3, [pc, #272]	; (80276bc <MX_LWIP_Init+0x238>)
 80275aa:	785b      	ldrb	r3, [r3, #1]
 80275ac:	041b      	lsls	r3, r3, #16
 80275ae:	4319      	orrs	r1, r3
 80275b0:	4b42      	ldr	r3, [pc, #264]	; (80276bc <MX_LWIP_Init+0x238>)
 80275b2:	789b      	ldrb	r3, [r3, #2]
 80275b4:	021b      	lsls	r3, r3, #8
 80275b6:	430b      	orrs	r3, r1
 80275b8:	4940      	ldr	r1, [pc, #256]	; (80276bc <MX_LWIP_Init+0x238>)
 80275ba:	78c9      	ldrb	r1, [r1, #3]
 80275bc:	430b      	orrs	r3, r1
 80275be:	0a1b      	lsrs	r3, r3, #8
 80275c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275c4:	431a      	orrs	r2, r3
 80275c6:	4b3d      	ldr	r3, [pc, #244]	; (80276bc <MX_LWIP_Init+0x238>)
 80275c8:	781b      	ldrb	r3, [r3, #0]
 80275ca:	0619      	lsls	r1, r3, #24
 80275cc:	4b3b      	ldr	r3, [pc, #236]	; (80276bc <MX_LWIP_Init+0x238>)
 80275ce:	785b      	ldrb	r3, [r3, #1]
 80275d0:	041b      	lsls	r3, r3, #16
 80275d2:	4319      	orrs	r1, r3
 80275d4:	4b39      	ldr	r3, [pc, #228]	; (80276bc <MX_LWIP_Init+0x238>)
 80275d6:	789b      	ldrb	r3, [r3, #2]
 80275d8:	021b      	lsls	r3, r3, #8
 80275da:	430b      	orrs	r3, r1
 80275dc:	4937      	ldr	r1, [pc, #220]	; (80276bc <MX_LWIP_Init+0x238>)
 80275de:	78c9      	ldrb	r1, [r1, #3]
 80275e0:	430b      	orrs	r3, r1
 80275e2:	0e1b      	lsrs	r3, r3, #24
 80275e4:	4313      	orrs	r3, r2
 80275e6:	4a38      	ldr	r2, [pc, #224]	; (80276c8 <MX_LWIP_Init+0x244>)
 80275e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80275ea:	4b35      	ldr	r3, [pc, #212]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80275ec:	781b      	ldrb	r3, [r3, #0]
 80275ee:	061a      	lsls	r2, r3, #24
 80275f0:	4b33      	ldr	r3, [pc, #204]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80275f2:	785b      	ldrb	r3, [r3, #1]
 80275f4:	041b      	lsls	r3, r3, #16
 80275f6:	431a      	orrs	r2, r3
 80275f8:	4b31      	ldr	r3, [pc, #196]	; (80276c0 <MX_LWIP_Init+0x23c>)
 80275fa:	789b      	ldrb	r3, [r3, #2]
 80275fc:	021b      	lsls	r3, r3, #8
 80275fe:	4313      	orrs	r3, r2
 8027600:	4a2f      	ldr	r2, [pc, #188]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027602:	78d2      	ldrb	r2, [r2, #3]
 8027604:	4313      	orrs	r3, r2
 8027606:	061a      	lsls	r2, r3, #24
 8027608:	4b2d      	ldr	r3, [pc, #180]	; (80276c0 <MX_LWIP_Init+0x23c>)
 802760a:	781b      	ldrb	r3, [r3, #0]
 802760c:	0619      	lsls	r1, r3, #24
 802760e:	4b2c      	ldr	r3, [pc, #176]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027610:	785b      	ldrb	r3, [r3, #1]
 8027612:	041b      	lsls	r3, r3, #16
 8027614:	4319      	orrs	r1, r3
 8027616:	4b2a      	ldr	r3, [pc, #168]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027618:	789b      	ldrb	r3, [r3, #2]
 802761a:	021b      	lsls	r3, r3, #8
 802761c:	430b      	orrs	r3, r1
 802761e:	4928      	ldr	r1, [pc, #160]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027620:	78c9      	ldrb	r1, [r1, #3]
 8027622:	430b      	orrs	r3, r1
 8027624:	021b      	lsls	r3, r3, #8
 8027626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802762a:	431a      	orrs	r2, r3
 802762c:	4b24      	ldr	r3, [pc, #144]	; (80276c0 <MX_LWIP_Init+0x23c>)
 802762e:	781b      	ldrb	r3, [r3, #0]
 8027630:	0619      	lsls	r1, r3, #24
 8027632:	4b23      	ldr	r3, [pc, #140]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027634:	785b      	ldrb	r3, [r3, #1]
 8027636:	041b      	lsls	r3, r3, #16
 8027638:	4319      	orrs	r1, r3
 802763a:	4b21      	ldr	r3, [pc, #132]	; (80276c0 <MX_LWIP_Init+0x23c>)
 802763c:	789b      	ldrb	r3, [r3, #2]
 802763e:	021b      	lsls	r3, r3, #8
 8027640:	430b      	orrs	r3, r1
 8027642:	491f      	ldr	r1, [pc, #124]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027644:	78c9      	ldrb	r1, [r1, #3]
 8027646:	430b      	orrs	r3, r1
 8027648:	0a1b      	lsrs	r3, r3, #8
 802764a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802764e:	431a      	orrs	r2, r3
 8027650:	4b1b      	ldr	r3, [pc, #108]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027652:	781b      	ldrb	r3, [r3, #0]
 8027654:	0619      	lsls	r1, r3, #24
 8027656:	4b1a      	ldr	r3, [pc, #104]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027658:	785b      	ldrb	r3, [r3, #1]
 802765a:	041b      	lsls	r3, r3, #16
 802765c:	4319      	orrs	r1, r3
 802765e:	4b18      	ldr	r3, [pc, #96]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027660:	789b      	ldrb	r3, [r3, #2]
 8027662:	021b      	lsls	r3, r3, #8
 8027664:	430b      	orrs	r3, r1
 8027666:	4916      	ldr	r1, [pc, #88]	; (80276c0 <MX_LWIP_Init+0x23c>)
 8027668:	78c9      	ldrb	r1, [r1, #3]
 802766a:	430b      	orrs	r3, r1
 802766c:	0e1b      	lsrs	r3, r3, #24
 802766e:	4313      	orrs	r3, r2
 8027670:	4a16      	ldr	r2, [pc, #88]	; (80276cc <MX_LWIP_Init+0x248>)
 8027672:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8027674:	4b16      	ldr	r3, [pc, #88]	; (80276d0 <MX_LWIP_Init+0x24c>)
 8027676:	9302      	str	r3, [sp, #8]
 8027678:	4b16      	ldr	r3, [pc, #88]	; (80276d4 <MX_LWIP_Init+0x250>)
 802767a:	9301      	str	r3, [sp, #4]
 802767c:	2300      	movs	r3, #0
 802767e:	9300      	str	r3, [sp, #0]
 8027680:	4b12      	ldr	r3, [pc, #72]	; (80276cc <MX_LWIP_Init+0x248>)
 8027682:	4a11      	ldr	r2, [pc, #68]	; (80276c8 <MX_LWIP_Init+0x244>)
 8027684:	490f      	ldr	r1, [pc, #60]	; (80276c4 <MX_LWIP_Init+0x240>)
 8027686:	4814      	ldr	r0, [pc, #80]	; (80276d8 <MX_LWIP_Init+0x254>)
 8027688:	f000 ff50 	bl	802852c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 802768c:	4812      	ldr	r0, [pc, #72]	; (80276d8 <MX_LWIP_Init+0x254>)
 802768e:	f001 f82d 	bl	80286ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8027692:	4b11      	ldr	r3, [pc, #68]	; (80276d8 <MX_LWIP_Init+0x254>)
 8027694:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8027698:	089b      	lsrs	r3, r3, #2
 802769a:	f003 0301 	and.w	r3, r3, #1
 802769e:	b2db      	uxtb	r3, r3
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	d003      	beq.n	80276ac <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80276a4:	480c      	ldr	r0, [pc, #48]	; (80276d8 <MX_LWIP_Init+0x254>)
 80276a6:	f001 f831 	bl	802870c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80276aa:	e002      	b.n	80276b2 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 80276ac:	480a      	ldr	r0, [pc, #40]	; (80276d8 <MX_LWIP_Init+0x254>)
 80276ae:	f001 f871 	bl	8028794 <netif_set_down>
}
 80276b2:	bf00      	nop
 80276b4:	46bd      	mov	sp, r7
 80276b6:	bd80      	pop	{r7, pc}
 80276b8:	200003f0 	.word	0x200003f0
 80276bc:	200003f4 	.word	0x200003f4
 80276c0:	200003f8 	.word	0x200003f8
 80276c4:	200003e4 	.word	0x200003e4
 80276c8:	200003e8 	.word	0x200003e8
 80276cc:	200003ec 	.word	0x200003ec
 80276d0:	08030fa5 	.word	0x08030fa5
 80276d4:	08027c6d 	.word	0x08027c6d
 80276d8:	200003b4 	.word	0x200003b4

080276dc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80276dc:	b580      	push	{r7, lr}
 80276de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80276e0:	4803      	ldr	r0, [pc, #12]	; (80276f0 <MX_LWIP_Process+0x14>)
 80276e2:	f000 faa3 	bl	8027c2c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80276e6:	f007 f97f 	bl	802e9e8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80276ea:	bf00      	nop
 80276ec:	bd80      	pop	{r7, pc}
 80276ee:	bf00      	nop
 80276f0:	200003b4 	.word	0x200003b4

080276f4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80276f4:	b580      	push	{r7, lr}
 80276f6:	b08e      	sub	sp, #56	; 0x38
 80276f8:	af00      	add	r7, sp, #0
 80276fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80276fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027700:	2200      	movs	r2, #0
 8027702:	601a      	str	r2, [r3, #0]
 8027704:	605a      	str	r2, [r3, #4]
 8027706:	609a      	str	r2, [r3, #8]
 8027708:	60da      	str	r2, [r3, #12]
 802770a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 802770c:	687b      	ldr	r3, [r7, #4]
 802770e:	681b      	ldr	r3, [r3, #0]
 8027710:	4a46      	ldr	r2, [pc, #280]	; (802782c <HAL_ETH_MspInit+0x138>)
 8027712:	4293      	cmp	r3, r2
 8027714:	f040 8085 	bne.w	8027822 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8027718:	2300      	movs	r3, #0
 802771a:	623b      	str	r3, [r7, #32]
 802771c:	4b44      	ldr	r3, [pc, #272]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027720:	4a43      	ldr	r2, [pc, #268]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8027726:	6313      	str	r3, [r2, #48]	; 0x30
 8027728:	4b41      	ldr	r3, [pc, #260]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802772c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027730:	623b      	str	r3, [r7, #32]
 8027732:	6a3b      	ldr	r3, [r7, #32]
 8027734:	2300      	movs	r3, #0
 8027736:	61fb      	str	r3, [r7, #28]
 8027738:	4b3d      	ldr	r3, [pc, #244]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802773c:	4a3c      	ldr	r2, [pc, #240]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802773e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8027742:	6313      	str	r3, [r2, #48]	; 0x30
 8027744:	4b3a      	ldr	r3, [pc, #232]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802774c:	61fb      	str	r3, [r7, #28]
 802774e:	69fb      	ldr	r3, [r7, #28]
 8027750:	2300      	movs	r3, #0
 8027752:	61bb      	str	r3, [r7, #24]
 8027754:	4b36      	ldr	r3, [pc, #216]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027758:	4a35      	ldr	r2, [pc, #212]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802775a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802775e:	6313      	str	r3, [r2, #48]	; 0x30
 8027760:	4b33      	ldr	r3, [pc, #204]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027768:	61bb      	str	r3, [r7, #24]
 802776a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802776c:	2300      	movs	r3, #0
 802776e:	617b      	str	r3, [r7, #20]
 8027770:	4b2f      	ldr	r3, [pc, #188]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027774:	4a2e      	ldr	r2, [pc, #184]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027776:	f043 0304 	orr.w	r3, r3, #4
 802777a:	6313      	str	r3, [r2, #48]	; 0x30
 802777c:	4b2c      	ldr	r3, [pc, #176]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027780:	f003 0304 	and.w	r3, r3, #4
 8027784:	617b      	str	r3, [r7, #20]
 8027786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027788:	2300      	movs	r3, #0
 802778a:	613b      	str	r3, [r7, #16]
 802778c:	4b28      	ldr	r3, [pc, #160]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027790:	4a27      	ldr	r2, [pc, #156]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 8027792:	f043 0301 	orr.w	r3, r3, #1
 8027796:	6313      	str	r3, [r2, #48]	; 0x30
 8027798:	4b25      	ldr	r3, [pc, #148]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 802779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802779c:	f003 0301 	and.w	r3, r3, #1
 80277a0:	613b      	str	r3, [r7, #16]
 80277a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80277a4:	2300      	movs	r3, #0
 80277a6:	60fb      	str	r3, [r7, #12]
 80277a8:	4b21      	ldr	r3, [pc, #132]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 80277aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277ac:	4a20      	ldr	r2, [pc, #128]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 80277ae:	f043 0302 	orr.w	r3, r3, #2
 80277b2:	6313      	str	r3, [r2, #48]	; 0x30
 80277b4:	4b1e      	ldr	r3, [pc, #120]	; (8027830 <HAL_ETH_MspInit+0x13c>)
 80277b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277b8:	f003 0302 	and.w	r3, r3, #2
 80277bc:	60fb      	str	r3, [r7, #12]
 80277be:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80277c0:	2332      	movs	r3, #50	; 0x32
 80277c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80277c4:	2302      	movs	r3, #2
 80277c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80277c8:	2300      	movs	r3, #0
 80277ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80277cc:	2303      	movs	r3, #3
 80277ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80277d0:	230b      	movs	r3, #11
 80277d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80277d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80277d8:	4619      	mov	r1, r3
 80277da:	4816      	ldr	r0, [pc, #88]	; (8027834 <HAL_ETH_MspInit+0x140>)
 80277dc:	f7fc fd94 	bl	8024308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80277e0:	2386      	movs	r3, #134	; 0x86
 80277e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80277e4:	2302      	movs	r3, #2
 80277e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80277e8:	2300      	movs	r3, #0
 80277ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80277ec:	2303      	movs	r3, #3
 80277ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80277f0:	230b      	movs	r3, #11
 80277f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80277f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80277f8:	4619      	mov	r1, r3
 80277fa:	480f      	ldr	r0, [pc, #60]	; (8027838 <HAL_ETH_MspInit+0x144>)
 80277fc:	f7fc fd84 	bl	8024308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8027800:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8027804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027806:	2302      	movs	r3, #2
 8027808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802780a:	2300      	movs	r3, #0
 802780c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802780e:	2303      	movs	r3, #3
 8027810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8027812:	230b      	movs	r3, #11
 8027814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8027816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802781a:	4619      	mov	r1, r3
 802781c:	4807      	ldr	r0, [pc, #28]	; (802783c <HAL_ETH_MspInit+0x148>)
 802781e:	f7fc fd73 	bl	8024308 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8027822:	bf00      	nop
 8027824:	3738      	adds	r7, #56	; 0x38
 8027826:	46bd      	mov	sp, r7
 8027828:	bd80      	pop	{r7, pc}
 802782a:	bf00      	nop
 802782c:	40028000 	.word	0x40028000
 8027830:	40023800 	.word	0x40023800
 8027834:	40020800 	.word	0x40020800
 8027838:	40020000 	.word	0x40020000
 802783c:	40020400 	.word	0x40020400

08027840 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8027840:	b580      	push	{r7, lr}
 8027842:	b086      	sub	sp, #24
 8027844:	af00      	add	r7, sp, #0
 8027846:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8027848:	2300      	movs	r3, #0
 802784a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 802784c:	4b49      	ldr	r3, [pc, #292]	; (8027974 <low_level_init+0x134>)
 802784e:	4a4a      	ldr	r2, [pc, #296]	; (8027978 <low_level_init+0x138>)
 8027850:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8027852:	4b48      	ldr	r3, [pc, #288]	; (8027974 <low_level_init+0x134>)
 8027854:	2201      	movs	r2, #1
 8027856:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8027858:	4b46      	ldr	r3, [pc, #280]	; (8027974 <low_level_init+0x134>)
 802785a:	2201      	movs	r2, #1
 802785c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 802785e:	2300      	movs	r3, #0
 8027860:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8027862:	2380      	movs	r3, #128	; 0x80
 8027864:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8027866:	23e1      	movs	r3, #225	; 0xe1
 8027868:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 802786a:	2300      	movs	r3, #0
 802786c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 802786e:	2300      	movs	r3, #0
 8027870:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8027872:	2300      	movs	r3, #0
 8027874:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8027876:	4a3f      	ldr	r2, [pc, #252]	; (8027974 <low_level_init+0x134>)
 8027878:	f107 0308 	add.w	r3, r7, #8
 802787c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 802787e:	4b3d      	ldr	r3, [pc, #244]	; (8027974 <low_level_init+0x134>)
 8027880:	2200      	movs	r2, #0
 8027882:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8027884:	4b3b      	ldr	r3, [pc, #236]	; (8027974 <low_level_init+0x134>)
 8027886:	2200      	movs	r2, #0
 8027888:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 802788a:	4b3a      	ldr	r3, [pc, #232]	; (8027974 <low_level_init+0x134>)
 802788c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8027890:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8027892:	4838      	ldr	r0, [pc, #224]	; (8027974 <low_level_init+0x134>)
 8027894:	f7fb fb6c 	bl	8022f70 <HAL_ETH_Init>
 8027898:	4603      	mov	r3, r0
 802789a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 802789c:	7dfb      	ldrb	r3, [r7, #23]
 802789e:	2b00      	cmp	r3, #0
 80278a0:	d108      	bne.n	80278b4 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80278a8:	f043 0304 	orr.w	r3, r3, #4
 80278ac:	b2da      	uxtb	r2, r3
 80278ae:	687b      	ldr	r3, [r7, #4]
 80278b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80278b4:	2304      	movs	r3, #4
 80278b6:	4a31      	ldr	r2, [pc, #196]	; (802797c <low_level_init+0x13c>)
 80278b8:	4931      	ldr	r1, [pc, #196]	; (8027980 <low_level_init+0x140>)
 80278ba:	482e      	ldr	r0, [pc, #184]	; (8027974 <low_level_init+0x134>)
 80278bc:	f7fb fcf2 	bl	80232a4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80278c0:	2304      	movs	r3, #4
 80278c2:	4a30      	ldr	r2, [pc, #192]	; (8027984 <low_level_init+0x144>)
 80278c4:	4930      	ldr	r1, [pc, #192]	; (8027988 <low_level_init+0x148>)
 80278c6:	482b      	ldr	r0, [pc, #172]	; (8027974 <low_level_init+0x134>)
 80278c8:	f7fb fd54 	bl	8023374 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80278cc:	687b      	ldr	r3, [r7, #4]
 80278ce:	2206      	movs	r2, #6
 80278d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80278d4:	4b27      	ldr	r3, [pc, #156]	; (8027974 <low_level_init+0x134>)
 80278d6:	695b      	ldr	r3, [r3, #20]
 80278d8:	781a      	ldrb	r2, [r3, #0]
 80278da:	687b      	ldr	r3, [r7, #4]
 80278dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80278e0:	4b24      	ldr	r3, [pc, #144]	; (8027974 <low_level_init+0x134>)
 80278e2:	695b      	ldr	r3, [r3, #20]
 80278e4:	785a      	ldrb	r2, [r3, #1]
 80278e6:	687b      	ldr	r3, [r7, #4]
 80278e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80278ec:	4b21      	ldr	r3, [pc, #132]	; (8027974 <low_level_init+0x134>)
 80278ee:	695b      	ldr	r3, [r3, #20]
 80278f0:	789a      	ldrb	r2, [r3, #2]
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80278f8:	4b1e      	ldr	r3, [pc, #120]	; (8027974 <low_level_init+0x134>)
 80278fa:	695b      	ldr	r3, [r3, #20]
 80278fc:	78da      	ldrb	r2, [r3, #3]
 80278fe:	687b      	ldr	r3, [r7, #4]
 8027900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8027904:	4b1b      	ldr	r3, [pc, #108]	; (8027974 <low_level_init+0x134>)
 8027906:	695b      	ldr	r3, [r3, #20]
 8027908:	791a      	ldrb	r2, [r3, #4]
 802790a:	687b      	ldr	r3, [r7, #4]
 802790c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8027910:	4b18      	ldr	r3, [pc, #96]	; (8027974 <low_level_init+0x134>)
 8027912:	695b      	ldr	r3, [r3, #20]
 8027914:	795a      	ldrb	r2, [r3, #5]
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* maximum transfer unit */
  netif->mtu = 1500;
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8027922:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8027924:	687b      	ldr	r3, [r7, #4]
 8027926:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802792a:	f043 030a 	orr.w	r3, r3, #10
 802792e:	b2da      	uxtb	r2, r3
 8027930:	687b      	ldr	r3, [r7, #4]
 8027932:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8027936:	480f      	ldr	r0, [pc, #60]	; (8027974 <low_level_init+0x134>)
 8027938:	f7fc f846 	bl	80239c8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 802793c:	f107 0310 	add.w	r3, r7, #16
 8027940:	461a      	mov	r2, r3
 8027942:	211d      	movs	r1, #29
 8027944:	480b      	ldr	r0, [pc, #44]	; (8027974 <low_level_init+0x134>)
 8027946:	f7fb ff71 	bl	802382c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 802794a:	693b      	ldr	r3, [r7, #16]
 802794c:	f043 030b 	orr.w	r3, r3, #11
 8027950:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8027952:	693b      	ldr	r3, [r7, #16]
 8027954:	461a      	mov	r2, r3
 8027956:	211d      	movs	r1, #29
 8027958:	4806      	ldr	r0, [pc, #24]	; (8027974 <low_level_init+0x134>)
 802795a:	f7fb ffcf 	bl	80238fc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 802795e:	f107 0310 	add.w	r3, r7, #16
 8027962:	461a      	mov	r2, r3
 8027964:	211d      	movs	r1, #29
 8027966:	4803      	ldr	r0, [pc, #12]	; (8027974 <low_level_init+0x134>)
 8027968:	f7fb ff60 	bl	802382c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 802796c:	bf00      	nop
 802796e:	3718      	adds	r7, #24
 8027970:	46bd      	mov	sp, r7
 8027972:	bd80      	pop	{r7, pc}
 8027974:	2000349c 	.word	0x2000349c
 8027978:	40028000 	.word	0x40028000
 802797c:	20001ccc 	.word	0x20001ccc
 8027980:	2000047c 	.word	0x2000047c
 8027984:	200004fc 	.word	0x200004fc
 8027988:	200003fc 	.word	0x200003fc

0802798c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 802798c:	b580      	push	{r7, lr}
 802798e:	b08a      	sub	sp, #40	; 0x28
 8027990:	af00      	add	r7, sp, #0
 8027992:	6078      	str	r0, [r7, #4]
 8027994:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8027996:	4b4b      	ldr	r3, [pc, #300]	; (8027ac4 <low_level_output+0x138>)
 8027998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802799a:	689b      	ldr	r3, [r3, #8]
 802799c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 802799e:	2300      	movs	r3, #0
 80279a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80279a2:	2300      	movs	r3, #0
 80279a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80279a6:	2300      	movs	r3, #0
 80279a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80279aa:	2300      	movs	r3, #0
 80279ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80279ae:	4b45      	ldr	r3, [pc, #276]	; (8027ac4 <low_level_output+0x138>)
 80279b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80279b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80279b4:	2300      	movs	r3, #0
 80279b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80279b8:	683b      	ldr	r3, [r7, #0]
 80279ba:	623b      	str	r3, [r7, #32]
 80279bc:	e05a      	b.n	8027a74 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80279be:	69bb      	ldr	r3, [r7, #24]
 80279c0:	681b      	ldr	r3, [r3, #0]
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	da03      	bge.n	80279ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80279c6:	23f8      	movs	r3, #248	; 0xf8
 80279c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80279cc:	e05c      	b.n	8027a88 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80279ce:	6a3b      	ldr	r3, [r7, #32]
 80279d0:	895b      	ldrh	r3, [r3, #10]
 80279d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80279d4:	2300      	movs	r3, #0
 80279d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80279d8:	e02f      	b.n	8027a3a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80279da:	69fa      	ldr	r2, [r7, #28]
 80279dc:	693b      	ldr	r3, [r7, #16]
 80279de:	18d0      	adds	r0, r2, r3
 80279e0:	6a3b      	ldr	r3, [r7, #32]
 80279e2:	685a      	ldr	r2, [r3, #4]
 80279e4:	68bb      	ldr	r3, [r7, #8]
 80279e6:	18d1      	adds	r1, r2, r3
 80279e8:	693b      	ldr	r3, [r7, #16]
 80279ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80279ee:	3304      	adds	r3, #4
 80279f0:	461a      	mov	r2, r3
 80279f2:	f009 fbf1 	bl	80311d8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80279f6:	69bb      	ldr	r3, [r7, #24]
 80279f8:	68db      	ldr	r3, [r3, #12]
 80279fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80279fc:	69bb      	ldr	r3, [r7, #24]
 80279fe:	681b      	ldr	r3, [r3, #0]
 8027a00:	2b00      	cmp	r3, #0
 8027a02:	da03      	bge.n	8027a0c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8027a04:	23f8      	movs	r3, #248	; 0xf8
 8027a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8027a0a:	e03d      	b.n	8027a88 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8027a0c:	69bb      	ldr	r3, [r7, #24]
 8027a0e:	689b      	ldr	r3, [r3, #8]
 8027a10:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8027a12:	693a      	ldr	r2, [r7, #16]
 8027a14:	68fb      	ldr	r3, [r7, #12]
 8027a16:	4413      	add	r3, r2
 8027a18:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8027a1c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8027a1e:	68ba      	ldr	r2, [r7, #8]
 8027a20:	693b      	ldr	r3, [r7, #16]
 8027a22:	1ad3      	subs	r3, r2, r3
 8027a24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8027a28:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8027a2a:	697a      	ldr	r2, [r7, #20]
 8027a2c:	693b      	ldr	r3, [r7, #16]
 8027a2e:	1ad3      	subs	r3, r2, r3
 8027a30:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8027a34:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8027a36:	2300      	movs	r3, #0
 8027a38:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8027a3a:	68fa      	ldr	r2, [r7, #12]
 8027a3c:	693b      	ldr	r3, [r7, #16]
 8027a3e:	4413      	add	r3, r2
 8027a40:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8027a44:	4293      	cmp	r3, r2
 8027a46:	d8c8      	bhi.n	80279da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8027a48:	69fa      	ldr	r2, [r7, #28]
 8027a4a:	693b      	ldr	r3, [r7, #16]
 8027a4c:	18d0      	adds	r0, r2, r3
 8027a4e:	6a3b      	ldr	r3, [r7, #32]
 8027a50:	685a      	ldr	r2, [r3, #4]
 8027a52:	68bb      	ldr	r3, [r7, #8]
 8027a54:	4413      	add	r3, r2
 8027a56:	68fa      	ldr	r2, [r7, #12]
 8027a58:	4619      	mov	r1, r3
 8027a5a:	f009 fbbd 	bl	80311d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8027a5e:	693a      	ldr	r2, [r7, #16]
 8027a60:	68fb      	ldr	r3, [r7, #12]
 8027a62:	4413      	add	r3, r2
 8027a64:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8027a66:	697a      	ldr	r2, [r7, #20]
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	4413      	add	r3, r2
 8027a6c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8027a6e:	6a3b      	ldr	r3, [r7, #32]
 8027a70:	681b      	ldr	r3, [r3, #0]
 8027a72:	623b      	str	r3, [r7, #32]
 8027a74:	6a3b      	ldr	r3, [r7, #32]
 8027a76:	2b00      	cmp	r3, #0
 8027a78:	d1a1      	bne.n	80279be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8027a7a:	6979      	ldr	r1, [r7, #20]
 8027a7c:	4811      	ldr	r0, [pc, #68]	; (8027ac4 <low_level_output+0x138>)
 8027a7e:	f7fb fce5 	bl	802344c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8027a82:	2300      	movs	r3, #0
 8027a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8027a88:	4b0e      	ldr	r3, [pc, #56]	; (8027ac4 <low_level_output+0x138>)
 8027a8a:	681b      	ldr	r3, [r3, #0]
 8027a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027a90:	695b      	ldr	r3, [r3, #20]
 8027a92:	f003 0320 	and.w	r3, r3, #32
 8027a96:	2b00      	cmp	r3, #0
 8027a98:	d00d      	beq.n	8027ab6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8027a9a:	4b0a      	ldr	r3, [pc, #40]	; (8027ac4 <low_level_output+0x138>)
 8027a9c:	681b      	ldr	r3, [r3, #0]
 8027a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027aa2:	461a      	mov	r2, r3
 8027aa4:	2320      	movs	r3, #32
 8027aa6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8027aa8:	4b06      	ldr	r3, [pc, #24]	; (8027ac4 <low_level_output+0x138>)
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027ab0:	461a      	mov	r2, r3
 8027ab2:	2300      	movs	r3, #0
 8027ab4:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8027ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8027aba:	4618      	mov	r0, r3
 8027abc:	3728      	adds	r7, #40	; 0x28
 8027abe:	46bd      	mov	sp, r7
 8027ac0:	bd80      	pop	{r7, pc}
 8027ac2:	bf00      	nop
 8027ac4:	2000349c 	.word	0x2000349c

08027ac8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8027ac8:	b580      	push	{r7, lr}
 8027aca:	b08c      	sub	sp, #48	; 0x30
 8027acc:	af00      	add	r7, sp, #0
 8027ace:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8027ad0:	2300      	movs	r3, #0
 8027ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8027ad4:	2300      	movs	r3, #0
 8027ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8027ad8:	2300      	movs	r3, #0
 8027ada:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8027adc:	2300      	movs	r3, #0
 8027ade:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8027ae0:	2300      	movs	r3, #0
 8027ae2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8027ae4:	2300      	movs	r3, #0
 8027ae6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8027ae8:	2300      	movs	r3, #0
 8027aea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8027aec:	484e      	ldr	r0, [pc, #312]	; (8027c28 <low_level_input+0x160>)
 8027aee:	f7fb fd97 	bl	8023620 <HAL_ETH_GetReceivedFrame>
 8027af2:	4603      	mov	r3, r0
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d001      	beq.n	8027afc <low_level_input+0x34>
    return NULL;
 8027af8:	2300      	movs	r3, #0
 8027afa:	e090      	b.n	8027c1e <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8027afc:	4b4a      	ldr	r3, [pc, #296]	; (8027c28 <low_level_input+0x160>)
 8027afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027b00:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8027b02:	4b49      	ldr	r3, [pc, #292]	; (8027c28 <low_level_input+0x160>)
 8027b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027b06:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8027b08:	89fb      	ldrh	r3, [r7, #14]
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	d006      	beq.n	8027b1c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8027b0e:	89fb      	ldrh	r3, [r7, #14]
 8027b10:	2203      	movs	r2, #3
 8027b12:	4619      	mov	r1, r3
 8027b14:	2004      	movs	r0, #4
 8027b16:	f000 fe8f 	bl	8028838 <pbuf_alloc>
 8027b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8027b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b1e:	2b00      	cmp	r3, #0
 8027b20:	d04b      	beq.n	8027bba <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8027b22:	4b41      	ldr	r3, [pc, #260]	; (8027c28 <low_level_input+0x160>)
 8027b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b26:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8027b28:	2300      	movs	r3, #0
 8027b2a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8027b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8027b30:	e040      	b.n	8027bb4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8027b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b34:	895b      	ldrh	r3, [r3, #10]
 8027b36:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8027b38:	2300      	movs	r3, #0
 8027b3a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8027b3c:	e021      	b.n	8027b82 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8027b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b40:	685a      	ldr	r2, [r3, #4]
 8027b42:	69bb      	ldr	r3, [r7, #24]
 8027b44:	18d0      	adds	r0, r2, r3
 8027b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027b48:	69fb      	ldr	r3, [r7, #28]
 8027b4a:	18d1      	adds	r1, r2, r3
 8027b4c:	69fb      	ldr	r3, [r7, #28]
 8027b4e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8027b52:	3304      	adds	r3, #4
 8027b54:	461a      	mov	r2, r3
 8027b56:	f009 fb3f 	bl	80311d8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8027b5a:	6a3b      	ldr	r3, [r7, #32]
 8027b5c:	68db      	ldr	r3, [r3, #12]
 8027b5e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8027b60:	6a3b      	ldr	r3, [r7, #32]
 8027b62:	689b      	ldr	r3, [r3, #8]
 8027b64:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8027b66:	69fa      	ldr	r2, [r7, #28]
 8027b68:	697b      	ldr	r3, [r7, #20]
 8027b6a:	4413      	add	r3, r2
 8027b6c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8027b70:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8027b72:	69ba      	ldr	r2, [r7, #24]
 8027b74:	69fb      	ldr	r3, [r7, #28]
 8027b76:	1ad3      	subs	r3, r2, r3
 8027b78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8027b7c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8027b7e:	2300      	movs	r3, #0
 8027b80:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8027b82:	697a      	ldr	r2, [r7, #20]
 8027b84:	69fb      	ldr	r3, [r7, #28]
 8027b86:	4413      	add	r3, r2
 8027b88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8027b8c:	4293      	cmp	r3, r2
 8027b8e:	d8d6      	bhi.n	8027b3e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8027b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b92:	685a      	ldr	r2, [r3, #4]
 8027b94:	69bb      	ldr	r3, [r7, #24]
 8027b96:	18d0      	adds	r0, r2, r3
 8027b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027b9a:	69fb      	ldr	r3, [r7, #28]
 8027b9c:	4413      	add	r3, r2
 8027b9e:	697a      	ldr	r2, [r7, #20]
 8027ba0:	4619      	mov	r1, r3
 8027ba2:	f009 fb19 	bl	80311d8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8027ba6:	69fa      	ldr	r2, [r7, #28]
 8027ba8:	697b      	ldr	r3, [r7, #20]
 8027baa:	4413      	add	r3, r2
 8027bac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8027bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027bb0:	681b      	ldr	r3, [r3, #0]
 8027bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8027bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	d1bb      	bne.n	8027b32 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8027bba:	4b1b      	ldr	r3, [pc, #108]	; (8027c28 <low_level_input+0x160>)
 8027bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bbe:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8027bc0:	2300      	movs	r3, #0
 8027bc2:	613b      	str	r3, [r7, #16]
 8027bc4:	e00b      	b.n	8027bde <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8027bc6:	6a3b      	ldr	r3, [r7, #32]
 8027bc8:	681b      	ldr	r3, [r3, #0]
 8027bca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8027bce:	6a3b      	ldr	r3, [r7, #32]
 8027bd0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8027bd2:	6a3b      	ldr	r3, [r7, #32]
 8027bd4:	68db      	ldr	r3, [r3, #12]
 8027bd6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8027bd8:	693b      	ldr	r3, [r7, #16]
 8027bda:	3301      	adds	r3, #1
 8027bdc:	613b      	str	r3, [r7, #16]
 8027bde:	4b12      	ldr	r3, [pc, #72]	; (8027c28 <low_level_input+0x160>)
 8027be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027be2:	693a      	ldr	r2, [r7, #16]
 8027be4:	429a      	cmp	r2, r3
 8027be6:	d3ee      	bcc.n	8027bc6 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8027be8:	4b0f      	ldr	r3, [pc, #60]	; (8027c28 <low_level_input+0x160>)
 8027bea:	2200      	movs	r2, #0
 8027bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8027bee:	4b0e      	ldr	r3, [pc, #56]	; (8027c28 <low_level_input+0x160>)
 8027bf0:	681b      	ldr	r3, [r3, #0]
 8027bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027bf6:	695b      	ldr	r3, [r3, #20]
 8027bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	d00d      	beq.n	8027c1c <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8027c00:	4b09      	ldr	r3, [pc, #36]	; (8027c28 <low_level_input+0x160>)
 8027c02:	681b      	ldr	r3, [r3, #0]
 8027c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027c08:	461a      	mov	r2, r3
 8027c0a:	2380      	movs	r3, #128	; 0x80
 8027c0c:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8027c0e:	4b06      	ldr	r3, [pc, #24]	; (8027c28 <low_level_input+0x160>)
 8027c10:	681b      	ldr	r3, [r3, #0]
 8027c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027c16:	461a      	mov	r2, r3
 8027c18:	2300      	movs	r3, #0
 8027c1a:	6093      	str	r3, [r2, #8]
  }
  return p;
 8027c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8027c1e:	4618      	mov	r0, r3
 8027c20:	3730      	adds	r7, #48	; 0x30
 8027c22:	46bd      	mov	sp, r7
 8027c24:	bd80      	pop	{r7, pc}
 8027c26:	bf00      	nop
 8027c28:	2000349c 	.word	0x2000349c

08027c2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8027c2c:	b580      	push	{r7, lr}
 8027c2e:	b084      	sub	sp, #16
 8027c30:	af00      	add	r7, sp, #0
 8027c32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8027c34:	6878      	ldr	r0, [r7, #4]
 8027c36:	f7ff ff47 	bl	8027ac8 <low_level_input>
 8027c3a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8027c3c:	68fb      	ldr	r3, [r7, #12]
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	d010      	beq.n	8027c64 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8027c42:	687b      	ldr	r3, [r7, #4]
 8027c44:	691b      	ldr	r3, [r3, #16]
 8027c46:	6879      	ldr	r1, [r7, #4]
 8027c48:	68f8      	ldr	r0, [r7, #12]
 8027c4a:	4798      	blx	r3
 8027c4c:	4603      	mov	r3, r0
 8027c4e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8027c50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8027c54:	2b00      	cmp	r3, #0
 8027c56:	d006      	beq.n	8027c66 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8027c58:	68f8      	ldr	r0, [r7, #12]
 8027c5a:	f001 f965 	bl	8028f28 <pbuf_free>
    p = NULL;
 8027c5e:	2300      	movs	r3, #0
 8027c60:	60fb      	str	r3, [r7, #12]
 8027c62:	e000      	b.n	8027c66 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8027c64:	bf00      	nop
  }
}
 8027c66:	3710      	adds	r7, #16
 8027c68:	46bd      	mov	sp, r7
 8027c6a:	bd80      	pop	{r7, pc}

08027c6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8027c6c:	b580      	push	{r7, lr}
 8027c6e:	b082      	sub	sp, #8
 8027c70:	af00      	add	r7, sp, #0
 8027c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8027c74:	687b      	ldr	r3, [r7, #4]
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	d106      	bne.n	8027c88 <ethernetif_init+0x1c>
 8027c7a:	4b0e      	ldr	r3, [pc, #56]	; (8027cb4 <ethernetif_init+0x48>)
 8027c7c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8027c80:	490d      	ldr	r1, [pc, #52]	; (8027cb8 <ethernetif_init+0x4c>)
 8027c82:	480e      	ldr	r0, [pc, #56]	; (8027cbc <ethernetif_init+0x50>)
 8027c84:	f009 fb9e 	bl	80313c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8027c88:	687b      	ldr	r3, [r7, #4]
 8027c8a:	2273      	movs	r2, #115	; 0x73
 8027c8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	2274      	movs	r2, #116	; 0x74
 8027c94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8027c98:	687b      	ldr	r3, [r7, #4]
 8027c9a:	4a09      	ldr	r2, [pc, #36]	; (8027cc0 <ethernetif_init+0x54>)
 8027c9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8027c9e:	687b      	ldr	r3, [r7, #4]
 8027ca0:	4a08      	ldr	r2, [pc, #32]	; (8027cc4 <ethernetif_init+0x58>)
 8027ca2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8027ca4:	6878      	ldr	r0, [r7, #4]
 8027ca6:	f7ff fdcb 	bl	8027840 <low_level_init>

  return ERR_OK;
 8027caa:	2300      	movs	r3, #0
}
 8027cac:	4618      	mov	r0, r3
 8027cae:	3708      	adds	r7, #8
 8027cb0:	46bd      	mov	sp, r7
 8027cb2:	bd80      	pop	{r7, pc}
 8027cb4:	08033688 	.word	0x08033688
 8027cb8:	080336a4 	.word	0x080336a4
 8027cbc:	080336b4 	.word	0x080336b4
 8027cc0:	0802f581 	.word	0x0802f581
 8027cc4:	0802798d 	.word	0x0802798d

08027cc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8027cc8:	b580      	push	{r7, lr}
 8027cca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8027ccc:	f7fa ff7c 	bl	8022bc8 <HAL_GetTick>
 8027cd0:	4603      	mov	r3, r0
}
 8027cd2:	4618      	mov	r0, r3
 8027cd4:	bd80      	pop	{r7, pc}

08027cd6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8027cd6:	b480      	push	{r7}
 8027cd8:	b083      	sub	sp, #12
 8027cda:	af00      	add	r7, sp, #0
 8027cdc:	4603      	mov	r3, r0
 8027cde:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8027ce0:	88fb      	ldrh	r3, [r7, #6]
 8027ce2:	ba5b      	rev16	r3, r3
 8027ce4:	b29b      	uxth	r3, r3
}
 8027ce6:	4618      	mov	r0, r3
 8027ce8:	370c      	adds	r7, #12
 8027cea:	46bd      	mov	sp, r7
 8027cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cf0:	4770      	bx	lr

08027cf2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8027cf2:	b480      	push	{r7}
 8027cf4:	b083      	sub	sp, #12
 8027cf6:	af00      	add	r7, sp, #0
 8027cf8:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8027cfa:	687b      	ldr	r3, [r7, #4]
 8027cfc:	061a      	lsls	r2, r3, #24
 8027cfe:	687b      	ldr	r3, [r7, #4]
 8027d00:	021b      	lsls	r3, r3, #8
 8027d02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8027d06:	431a      	orrs	r2, r3
 8027d08:	687b      	ldr	r3, [r7, #4]
 8027d0a:	0a1b      	lsrs	r3, r3, #8
 8027d0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d10:	431a      	orrs	r2, r3
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	0e1b      	lsrs	r3, r3, #24
 8027d16:	4313      	orrs	r3, r2
}
 8027d18:	4618      	mov	r0, r3
 8027d1a:	370c      	adds	r7, #12
 8027d1c:	46bd      	mov	sp, r7
 8027d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d22:	4770      	bx	lr

08027d24 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8027d24:	b580      	push	{r7, lr}
 8027d26:	b082      	sub	sp, #8
 8027d28:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8027d2a:	2300      	movs	r3, #0
 8027d2c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8027d2e:	f000 f8a7 	bl	8027e80 <mem_init>
  memp_init();
 8027d32:	f000 fb39 	bl	80283a8 <memp_init>
  pbuf_init();
  netif_init();
 8027d36:	f000 fbf1 	bl	802851c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8027d3a:	f006 fea7 	bl	802ea8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8027d3e:	f001 fb6d 	bl	802941c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8027d42:	f006 fd85 	bl	802e850 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8027d46:	bf00      	nop
 8027d48:	3708      	adds	r7, #8
 8027d4a:	46bd      	mov	sp, r7
 8027d4c:	bd80      	pop	{r7, pc}
	...

08027d50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8027d50:	b580      	push	{r7, lr}
 8027d52:	b084      	sub	sp, #16
 8027d54:	af00      	add	r7, sp, #0
 8027d56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8027d58:	4b40      	ldr	r3, [pc, #256]	; (8027e5c <plug_holes+0x10c>)
 8027d5a:	681b      	ldr	r3, [r3, #0]
 8027d5c:	687a      	ldr	r2, [r7, #4]
 8027d5e:	429a      	cmp	r2, r3
 8027d60:	d206      	bcs.n	8027d70 <plug_holes+0x20>
 8027d62:	4b3f      	ldr	r3, [pc, #252]	; (8027e60 <plug_holes+0x110>)
 8027d64:	f240 125d 	movw	r2, #349	; 0x15d
 8027d68:	493e      	ldr	r1, [pc, #248]	; (8027e64 <plug_holes+0x114>)
 8027d6a:	483f      	ldr	r0, [pc, #252]	; (8027e68 <plug_holes+0x118>)
 8027d6c:	f009 fb2a 	bl	80313c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8027d70:	4b3e      	ldr	r3, [pc, #248]	; (8027e6c <plug_holes+0x11c>)
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	687a      	ldr	r2, [r7, #4]
 8027d76:	429a      	cmp	r2, r3
 8027d78:	d306      	bcc.n	8027d88 <plug_holes+0x38>
 8027d7a:	4b39      	ldr	r3, [pc, #228]	; (8027e60 <plug_holes+0x110>)
 8027d7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8027d80:	493b      	ldr	r1, [pc, #236]	; (8027e70 <plug_holes+0x120>)
 8027d82:	4839      	ldr	r0, [pc, #228]	; (8027e68 <plug_holes+0x118>)
 8027d84:	f009 fb1e 	bl	80313c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	791b      	ldrb	r3, [r3, #4]
 8027d8c:	2b00      	cmp	r3, #0
 8027d8e:	d006      	beq.n	8027d9e <plug_holes+0x4e>
 8027d90:	4b33      	ldr	r3, [pc, #204]	; (8027e60 <plug_holes+0x110>)
 8027d92:	f240 125f 	movw	r2, #351	; 0x15f
 8027d96:	4937      	ldr	r1, [pc, #220]	; (8027e74 <plug_holes+0x124>)
 8027d98:	4833      	ldr	r0, [pc, #204]	; (8027e68 <plug_holes+0x118>)
 8027d9a:	f009 fb13 	bl	80313c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8027d9e:	687b      	ldr	r3, [r7, #4]
 8027da0:	881b      	ldrh	r3, [r3, #0]
 8027da2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8027da6:	d906      	bls.n	8027db6 <plug_holes+0x66>
 8027da8:	4b2d      	ldr	r3, [pc, #180]	; (8027e60 <plug_holes+0x110>)
 8027daa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8027dae:	4932      	ldr	r1, [pc, #200]	; (8027e78 <plug_holes+0x128>)
 8027db0:	482d      	ldr	r0, [pc, #180]	; (8027e68 <plug_holes+0x118>)
 8027db2:	f009 fb07 	bl	80313c4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8027db6:	4b29      	ldr	r3, [pc, #164]	; (8027e5c <plug_holes+0x10c>)
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	687a      	ldr	r2, [r7, #4]
 8027dbc:	8812      	ldrh	r2, [r2, #0]
 8027dbe:	4413      	add	r3, r2
 8027dc0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8027dc2:	687a      	ldr	r2, [r7, #4]
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	429a      	cmp	r2, r3
 8027dc8:	d01f      	beq.n	8027e0a <plug_holes+0xba>
 8027dca:	68fb      	ldr	r3, [r7, #12]
 8027dcc:	791b      	ldrb	r3, [r3, #4]
 8027dce:	2b00      	cmp	r3, #0
 8027dd0:	d11b      	bne.n	8027e0a <plug_holes+0xba>
 8027dd2:	4b26      	ldr	r3, [pc, #152]	; (8027e6c <plug_holes+0x11c>)
 8027dd4:	681b      	ldr	r3, [r3, #0]
 8027dd6:	68fa      	ldr	r2, [r7, #12]
 8027dd8:	429a      	cmp	r2, r3
 8027dda:	d016      	beq.n	8027e0a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8027ddc:	4b27      	ldr	r3, [pc, #156]	; (8027e7c <plug_holes+0x12c>)
 8027dde:	681b      	ldr	r3, [r3, #0]
 8027de0:	68fa      	ldr	r2, [r7, #12]
 8027de2:	429a      	cmp	r2, r3
 8027de4:	d102      	bne.n	8027dec <plug_holes+0x9c>
      lfree = mem;
 8027de6:	4a25      	ldr	r2, [pc, #148]	; (8027e7c <plug_holes+0x12c>)
 8027de8:	687b      	ldr	r3, [r7, #4]
 8027dea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8027dec:	68fb      	ldr	r3, [r7, #12]
 8027dee:	881a      	ldrh	r2, [r3, #0]
 8027df0:	687b      	ldr	r3, [r7, #4]
 8027df2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8027df4:	4b19      	ldr	r3, [pc, #100]	; (8027e5c <plug_holes+0x10c>)
 8027df6:	681b      	ldr	r3, [r3, #0]
 8027df8:	687a      	ldr	r2, [r7, #4]
 8027dfa:	1ad1      	subs	r1, r2, r3
 8027dfc:	4b17      	ldr	r3, [pc, #92]	; (8027e5c <plug_holes+0x10c>)
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	68fa      	ldr	r2, [r7, #12]
 8027e02:	8812      	ldrh	r2, [r2, #0]
 8027e04:	4413      	add	r3, r2
 8027e06:	b28a      	uxth	r2, r1
 8027e08:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8027e0a:	4b14      	ldr	r3, [pc, #80]	; (8027e5c <plug_holes+0x10c>)
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	687a      	ldr	r2, [r7, #4]
 8027e10:	8852      	ldrh	r2, [r2, #2]
 8027e12:	4413      	add	r3, r2
 8027e14:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8027e16:	68ba      	ldr	r2, [r7, #8]
 8027e18:	687b      	ldr	r3, [r7, #4]
 8027e1a:	429a      	cmp	r2, r3
 8027e1c:	d01a      	beq.n	8027e54 <plug_holes+0x104>
 8027e1e:	68bb      	ldr	r3, [r7, #8]
 8027e20:	791b      	ldrb	r3, [r3, #4]
 8027e22:	2b00      	cmp	r3, #0
 8027e24:	d116      	bne.n	8027e54 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8027e26:	4b15      	ldr	r3, [pc, #84]	; (8027e7c <plug_holes+0x12c>)
 8027e28:	681b      	ldr	r3, [r3, #0]
 8027e2a:	687a      	ldr	r2, [r7, #4]
 8027e2c:	429a      	cmp	r2, r3
 8027e2e:	d102      	bne.n	8027e36 <plug_holes+0xe6>
      lfree = pmem;
 8027e30:	4a12      	ldr	r2, [pc, #72]	; (8027e7c <plug_holes+0x12c>)
 8027e32:	68bb      	ldr	r3, [r7, #8]
 8027e34:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8027e36:	687b      	ldr	r3, [r7, #4]
 8027e38:	881a      	ldrh	r2, [r3, #0]
 8027e3a:	68bb      	ldr	r3, [r7, #8]
 8027e3c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8027e3e:	4b07      	ldr	r3, [pc, #28]	; (8027e5c <plug_holes+0x10c>)
 8027e40:	681b      	ldr	r3, [r3, #0]
 8027e42:	68ba      	ldr	r2, [r7, #8]
 8027e44:	1ad1      	subs	r1, r2, r3
 8027e46:	4b05      	ldr	r3, [pc, #20]	; (8027e5c <plug_holes+0x10c>)
 8027e48:	681b      	ldr	r3, [r3, #0]
 8027e4a:	687a      	ldr	r2, [r7, #4]
 8027e4c:	8812      	ldrh	r2, [r2, #0]
 8027e4e:	4413      	add	r3, r2
 8027e50:	b28a      	uxth	r2, r1
 8027e52:	805a      	strh	r2, [r3, #2]
  }
}
 8027e54:	bf00      	nop
 8027e56:	3710      	adds	r7, #16
 8027e58:	46bd      	mov	sp, r7
 8027e5a:	bd80      	pop	{r7, pc}
 8027e5c:	20003b50 	.word	0x20003b50
 8027e60:	080336dc 	.word	0x080336dc
 8027e64:	0803370c 	.word	0x0803370c
 8027e68:	08033724 	.word	0x08033724
 8027e6c:	20003b54 	.word	0x20003b54
 8027e70:	0803374c 	.word	0x0803374c
 8027e74:	08033768 	.word	0x08033768
 8027e78:	08033784 	.word	0x08033784
 8027e7c:	20003b58 	.word	0x20003b58

08027e80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8027e80:	b480      	push	{r7}
 8027e82:	b083      	sub	sp, #12
 8027e84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8027e86:	4b19      	ldr	r3, [pc, #100]	; (8027eec <mem_init+0x6c>)
 8027e88:	3303      	adds	r3, #3
 8027e8a:	f023 0303 	bic.w	r3, r3, #3
 8027e8e:	461a      	mov	r2, r3
 8027e90:	4b17      	ldr	r3, [pc, #92]	; (8027ef0 <mem_init+0x70>)
 8027e92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8027e94:	4b16      	ldr	r3, [pc, #88]	; (8027ef0 <mem_init+0x70>)
 8027e96:	681b      	ldr	r3, [r3, #0]
 8027e98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8027e9a:	687b      	ldr	r3, [r7, #4]
 8027e9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8027ea0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	2200      	movs	r2, #0
 8027ea6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8027ea8:	687b      	ldr	r3, [r7, #4]
 8027eaa:	2200      	movs	r2, #0
 8027eac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8027eae:	4b10      	ldr	r3, [pc, #64]	; (8027ef0 <mem_init+0x70>)
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8027eb6:	4a0f      	ldr	r2, [pc, #60]	; (8027ef4 <mem_init+0x74>)
 8027eb8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8027eba:	4b0e      	ldr	r3, [pc, #56]	; (8027ef4 <mem_init+0x74>)
 8027ebc:	681b      	ldr	r3, [r3, #0]
 8027ebe:	2201      	movs	r2, #1
 8027ec0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8027ec2:	4b0c      	ldr	r3, [pc, #48]	; (8027ef4 <mem_init+0x74>)
 8027ec4:	681b      	ldr	r3, [r3, #0]
 8027ec6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8027eca:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8027ecc:	4b09      	ldr	r3, [pc, #36]	; (8027ef4 <mem_init+0x74>)
 8027ece:	681b      	ldr	r3, [r3, #0]
 8027ed0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8027ed4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8027ed6:	4b06      	ldr	r3, [pc, #24]	; (8027ef0 <mem_init+0x70>)
 8027ed8:	681b      	ldr	r3, [r3, #0]
 8027eda:	4a07      	ldr	r2, [pc, #28]	; (8027ef8 <mem_init+0x78>)
 8027edc:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8027ede:	bf00      	nop
 8027ee0:	370c      	adds	r7, #12
 8027ee2:	46bd      	mov	sp, r7
 8027ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ee8:	4770      	bx	lr
 8027eea:	bf00      	nop
 8027eec:	200034fc 	.word	0x200034fc
 8027ef0:	20003b50 	.word	0x20003b50
 8027ef4:	20003b54 	.word	0x20003b54
 8027ef8:	20003b58 	.word	0x20003b58

08027efc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8027efc:	b580      	push	{r7, lr}
 8027efe:	b084      	sub	sp, #16
 8027f00:	af00      	add	r7, sp, #0
 8027f02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	d043      	beq.n	8027f92 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8027f0a:	687b      	ldr	r3, [r7, #4]
 8027f0c:	f003 0303 	and.w	r3, r3, #3
 8027f10:	2b00      	cmp	r3, #0
 8027f12:	d006      	beq.n	8027f22 <mem_free+0x26>
 8027f14:	4b22      	ldr	r3, [pc, #136]	; (8027fa0 <mem_free+0xa4>)
 8027f16:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8027f1a:	4922      	ldr	r1, [pc, #136]	; (8027fa4 <mem_free+0xa8>)
 8027f1c:	4822      	ldr	r0, [pc, #136]	; (8027fa8 <mem_free+0xac>)
 8027f1e:	f009 fa51 	bl	80313c4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8027f22:	4b22      	ldr	r3, [pc, #136]	; (8027fac <mem_free+0xb0>)
 8027f24:	681b      	ldr	r3, [r3, #0]
 8027f26:	687a      	ldr	r2, [r7, #4]
 8027f28:	429a      	cmp	r2, r3
 8027f2a:	d304      	bcc.n	8027f36 <mem_free+0x3a>
 8027f2c:	4b20      	ldr	r3, [pc, #128]	; (8027fb0 <mem_free+0xb4>)
 8027f2e:	681b      	ldr	r3, [r3, #0]
 8027f30:	687a      	ldr	r2, [r7, #4]
 8027f32:	429a      	cmp	r2, r3
 8027f34:	d306      	bcc.n	8027f44 <mem_free+0x48>
 8027f36:	4b1a      	ldr	r3, [pc, #104]	; (8027fa0 <mem_free+0xa4>)
 8027f38:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8027f3c:	491d      	ldr	r1, [pc, #116]	; (8027fb4 <mem_free+0xb8>)
 8027f3e:	481a      	ldr	r0, [pc, #104]	; (8027fa8 <mem_free+0xac>)
 8027f40:	f009 fa40 	bl	80313c4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8027f44:	4b19      	ldr	r3, [pc, #100]	; (8027fac <mem_free+0xb0>)
 8027f46:	681b      	ldr	r3, [r3, #0]
 8027f48:	687a      	ldr	r2, [r7, #4]
 8027f4a:	429a      	cmp	r2, r3
 8027f4c:	d323      	bcc.n	8027f96 <mem_free+0x9a>
 8027f4e:	4b18      	ldr	r3, [pc, #96]	; (8027fb0 <mem_free+0xb4>)
 8027f50:	681b      	ldr	r3, [r3, #0]
 8027f52:	687a      	ldr	r2, [r7, #4]
 8027f54:	429a      	cmp	r2, r3
 8027f56:	d21e      	bcs.n	8027f96 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8027f58:	687b      	ldr	r3, [r7, #4]
 8027f5a:	3b08      	subs	r3, #8
 8027f5c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8027f5e:	68fb      	ldr	r3, [r7, #12]
 8027f60:	791b      	ldrb	r3, [r3, #4]
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d106      	bne.n	8027f74 <mem_free+0x78>
 8027f66:	4b0e      	ldr	r3, [pc, #56]	; (8027fa0 <mem_free+0xa4>)
 8027f68:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8027f6c:	4912      	ldr	r1, [pc, #72]	; (8027fb8 <mem_free+0xbc>)
 8027f6e:	480e      	ldr	r0, [pc, #56]	; (8027fa8 <mem_free+0xac>)
 8027f70:	f009 fa28 	bl	80313c4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8027f74:	68fb      	ldr	r3, [r7, #12]
 8027f76:	2200      	movs	r2, #0
 8027f78:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8027f7a:	4b10      	ldr	r3, [pc, #64]	; (8027fbc <mem_free+0xc0>)
 8027f7c:	681b      	ldr	r3, [r3, #0]
 8027f7e:	68fa      	ldr	r2, [r7, #12]
 8027f80:	429a      	cmp	r2, r3
 8027f82:	d202      	bcs.n	8027f8a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8027f84:	4a0d      	ldr	r2, [pc, #52]	; (8027fbc <mem_free+0xc0>)
 8027f86:	68fb      	ldr	r3, [r7, #12]
 8027f88:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8027f8a:	68f8      	ldr	r0, [r7, #12]
 8027f8c:	f7ff fee0 	bl	8027d50 <plug_holes>
 8027f90:	e002      	b.n	8027f98 <mem_free+0x9c>
    return;
 8027f92:	bf00      	nop
 8027f94:	e000      	b.n	8027f98 <mem_free+0x9c>
    return;
 8027f96:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8027f98:	3710      	adds	r7, #16
 8027f9a:	46bd      	mov	sp, r7
 8027f9c:	bd80      	pop	{r7, pc}
 8027f9e:	bf00      	nop
 8027fa0:	080336dc 	.word	0x080336dc
 8027fa4:	080337b0 	.word	0x080337b0
 8027fa8:	08033724 	.word	0x08033724
 8027fac:	20003b50 	.word	0x20003b50
 8027fb0:	20003b54 	.word	0x20003b54
 8027fb4:	080337d4 	.word	0x080337d4
 8027fb8:	080337ec 	.word	0x080337ec
 8027fbc:	20003b58 	.word	0x20003b58

08027fc0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8027fc0:	b580      	push	{r7, lr}
 8027fc2:	b086      	sub	sp, #24
 8027fc4:	af00      	add	r7, sp, #0
 8027fc6:	6078      	str	r0, [r7, #4]
 8027fc8:	460b      	mov	r3, r1
 8027fca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8027fcc:	887b      	ldrh	r3, [r7, #2]
 8027fce:	3303      	adds	r3, #3
 8027fd0:	b29b      	uxth	r3, r3
 8027fd2:	f023 0303 	bic.w	r3, r3, #3
 8027fd6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8027fd8:	887b      	ldrh	r3, [r7, #2]
 8027fda:	2b0b      	cmp	r3, #11
 8027fdc:	d801      	bhi.n	8027fe2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8027fde:	230c      	movs	r3, #12
 8027fe0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8027fe2:	887b      	ldrh	r3, [r7, #2]
 8027fe4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8027fe8:	d901      	bls.n	8027fee <mem_trim+0x2e>
    return NULL;
 8027fea:	2300      	movs	r3, #0
 8027fec:	e0b1      	b.n	8028152 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8027fee:	4b5b      	ldr	r3, [pc, #364]	; (802815c <mem_trim+0x19c>)
 8027ff0:	681b      	ldr	r3, [r3, #0]
 8027ff2:	687a      	ldr	r2, [r7, #4]
 8027ff4:	429a      	cmp	r2, r3
 8027ff6:	d304      	bcc.n	8028002 <mem_trim+0x42>
 8027ff8:	4b59      	ldr	r3, [pc, #356]	; (8028160 <mem_trim+0x1a0>)
 8027ffa:	681b      	ldr	r3, [r3, #0]
 8027ffc:	687a      	ldr	r2, [r7, #4]
 8027ffe:	429a      	cmp	r2, r3
 8028000:	d306      	bcc.n	8028010 <mem_trim+0x50>
 8028002:	4b58      	ldr	r3, [pc, #352]	; (8028164 <mem_trim+0x1a4>)
 8028004:	f240 12f3 	movw	r2, #499	; 0x1f3
 8028008:	4957      	ldr	r1, [pc, #348]	; (8028168 <mem_trim+0x1a8>)
 802800a:	4858      	ldr	r0, [pc, #352]	; (802816c <mem_trim+0x1ac>)
 802800c:	f009 f9da 	bl	80313c4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8028010:	4b52      	ldr	r3, [pc, #328]	; (802815c <mem_trim+0x19c>)
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	687a      	ldr	r2, [r7, #4]
 8028016:	429a      	cmp	r2, r3
 8028018:	d304      	bcc.n	8028024 <mem_trim+0x64>
 802801a:	4b51      	ldr	r3, [pc, #324]	; (8028160 <mem_trim+0x1a0>)
 802801c:	681b      	ldr	r3, [r3, #0]
 802801e:	687a      	ldr	r2, [r7, #4]
 8028020:	429a      	cmp	r2, r3
 8028022:	d301      	bcc.n	8028028 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8028024:	687b      	ldr	r3, [r7, #4]
 8028026:	e094      	b.n	8028152 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8028028:	687b      	ldr	r3, [r7, #4]
 802802a:	3b08      	subs	r3, #8
 802802c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 802802e:	4b4b      	ldr	r3, [pc, #300]	; (802815c <mem_trim+0x19c>)
 8028030:	681b      	ldr	r3, [r3, #0]
 8028032:	697a      	ldr	r2, [r7, #20]
 8028034:	1ad3      	subs	r3, r2, r3
 8028036:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8028038:	697b      	ldr	r3, [r7, #20]
 802803a:	881a      	ldrh	r2, [r3, #0]
 802803c:	8a7b      	ldrh	r3, [r7, #18]
 802803e:	1ad3      	subs	r3, r2, r3
 8028040:	b29b      	uxth	r3, r3
 8028042:	3b08      	subs	r3, #8
 8028044:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8028046:	887a      	ldrh	r2, [r7, #2]
 8028048:	8a3b      	ldrh	r3, [r7, #16]
 802804a:	429a      	cmp	r2, r3
 802804c:	d906      	bls.n	802805c <mem_trim+0x9c>
 802804e:	4b45      	ldr	r3, [pc, #276]	; (8028164 <mem_trim+0x1a4>)
 8028050:	f240 2206 	movw	r2, #518	; 0x206
 8028054:	4946      	ldr	r1, [pc, #280]	; (8028170 <mem_trim+0x1b0>)
 8028056:	4845      	ldr	r0, [pc, #276]	; (802816c <mem_trim+0x1ac>)
 8028058:	f009 f9b4 	bl	80313c4 <iprintf>
  if (newsize > size) {
 802805c:	887a      	ldrh	r2, [r7, #2]
 802805e:	8a3b      	ldrh	r3, [r7, #16]
 8028060:	429a      	cmp	r2, r3
 8028062:	d901      	bls.n	8028068 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8028064:	2300      	movs	r3, #0
 8028066:	e074      	b.n	8028152 <mem_trim+0x192>
  }
  if (newsize == size) {
 8028068:	887a      	ldrh	r2, [r7, #2]
 802806a:	8a3b      	ldrh	r3, [r7, #16]
 802806c:	429a      	cmp	r2, r3
 802806e:	d101      	bne.n	8028074 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	e06e      	b.n	8028152 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8028074:	4b39      	ldr	r3, [pc, #228]	; (802815c <mem_trim+0x19c>)
 8028076:	681b      	ldr	r3, [r3, #0]
 8028078:	697a      	ldr	r2, [r7, #20]
 802807a:	8812      	ldrh	r2, [r2, #0]
 802807c:	4413      	add	r3, r2
 802807e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8028080:	68fb      	ldr	r3, [r7, #12]
 8028082:	791b      	ldrb	r3, [r3, #4]
 8028084:	2b00      	cmp	r3, #0
 8028086:	d131      	bne.n	80280ec <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8028088:	68fb      	ldr	r3, [r7, #12]
 802808a:	881b      	ldrh	r3, [r3, #0]
 802808c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 802808e:	8a7a      	ldrh	r2, [r7, #18]
 8028090:	887b      	ldrh	r3, [r7, #2]
 8028092:	4413      	add	r3, r2
 8028094:	b29b      	uxth	r3, r3
 8028096:	3308      	adds	r3, #8
 8028098:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 802809a:	4b36      	ldr	r3, [pc, #216]	; (8028174 <mem_trim+0x1b4>)
 802809c:	681b      	ldr	r3, [r3, #0]
 802809e:	68fa      	ldr	r2, [r7, #12]
 80280a0:	429a      	cmp	r2, r3
 80280a2:	d105      	bne.n	80280b0 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80280a4:	4b2d      	ldr	r3, [pc, #180]	; (802815c <mem_trim+0x19c>)
 80280a6:	681a      	ldr	r2, [r3, #0]
 80280a8:	897b      	ldrh	r3, [r7, #10]
 80280aa:	4413      	add	r3, r2
 80280ac:	4a31      	ldr	r2, [pc, #196]	; (8028174 <mem_trim+0x1b4>)
 80280ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80280b0:	4b2a      	ldr	r3, [pc, #168]	; (802815c <mem_trim+0x19c>)
 80280b2:	681a      	ldr	r2, [r3, #0]
 80280b4:	897b      	ldrh	r3, [r7, #10]
 80280b6:	4413      	add	r3, r2
 80280b8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80280ba:	68fb      	ldr	r3, [r7, #12]
 80280bc:	2200      	movs	r2, #0
 80280be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80280c0:	68fb      	ldr	r3, [r7, #12]
 80280c2:	893a      	ldrh	r2, [r7, #8]
 80280c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80280c6:	68fb      	ldr	r3, [r7, #12]
 80280c8:	8a7a      	ldrh	r2, [r7, #18]
 80280ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80280cc:	697b      	ldr	r3, [r7, #20]
 80280ce:	897a      	ldrh	r2, [r7, #10]
 80280d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80280d2:	68fb      	ldr	r3, [r7, #12]
 80280d4:	881b      	ldrh	r3, [r3, #0]
 80280d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80280da:	d039      	beq.n	8028150 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80280dc:	4b1f      	ldr	r3, [pc, #124]	; (802815c <mem_trim+0x19c>)
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	68fa      	ldr	r2, [r7, #12]
 80280e2:	8812      	ldrh	r2, [r2, #0]
 80280e4:	4413      	add	r3, r2
 80280e6:	897a      	ldrh	r2, [r7, #10]
 80280e8:	805a      	strh	r2, [r3, #2]
 80280ea:	e031      	b.n	8028150 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80280ec:	887b      	ldrh	r3, [r7, #2]
 80280ee:	f103 0214 	add.w	r2, r3, #20
 80280f2:	8a3b      	ldrh	r3, [r7, #16]
 80280f4:	429a      	cmp	r2, r3
 80280f6:	d82b      	bhi.n	8028150 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80280f8:	8a7a      	ldrh	r2, [r7, #18]
 80280fa:	887b      	ldrh	r3, [r7, #2]
 80280fc:	4413      	add	r3, r2
 80280fe:	b29b      	uxth	r3, r3
 8028100:	3308      	adds	r3, #8
 8028102:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8028104:	4b15      	ldr	r3, [pc, #84]	; (802815c <mem_trim+0x19c>)
 8028106:	681a      	ldr	r2, [r3, #0]
 8028108:	897b      	ldrh	r3, [r7, #10]
 802810a:	4413      	add	r3, r2
 802810c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 802810e:	4b19      	ldr	r3, [pc, #100]	; (8028174 <mem_trim+0x1b4>)
 8028110:	681b      	ldr	r3, [r3, #0]
 8028112:	68fa      	ldr	r2, [r7, #12]
 8028114:	429a      	cmp	r2, r3
 8028116:	d202      	bcs.n	802811e <mem_trim+0x15e>
      lfree = mem2;
 8028118:	4a16      	ldr	r2, [pc, #88]	; (8028174 <mem_trim+0x1b4>)
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 802811e:	68fb      	ldr	r3, [r7, #12]
 8028120:	2200      	movs	r2, #0
 8028122:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8028124:	697b      	ldr	r3, [r7, #20]
 8028126:	881a      	ldrh	r2, [r3, #0]
 8028128:	68fb      	ldr	r3, [r7, #12]
 802812a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 802812c:	68fb      	ldr	r3, [r7, #12]
 802812e:	8a7a      	ldrh	r2, [r7, #18]
 8028130:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8028132:	697b      	ldr	r3, [r7, #20]
 8028134:	897a      	ldrh	r2, [r7, #10]
 8028136:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8028138:	68fb      	ldr	r3, [r7, #12]
 802813a:	881b      	ldrh	r3, [r3, #0]
 802813c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8028140:	d006      	beq.n	8028150 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8028142:	4b06      	ldr	r3, [pc, #24]	; (802815c <mem_trim+0x19c>)
 8028144:	681b      	ldr	r3, [r3, #0]
 8028146:	68fa      	ldr	r2, [r7, #12]
 8028148:	8812      	ldrh	r2, [r2, #0]
 802814a:	4413      	add	r3, r2
 802814c:	897a      	ldrh	r2, [r7, #10]
 802814e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8028150:	687b      	ldr	r3, [r7, #4]
}
 8028152:	4618      	mov	r0, r3
 8028154:	3718      	adds	r7, #24
 8028156:	46bd      	mov	sp, r7
 8028158:	bd80      	pop	{r7, pc}
 802815a:	bf00      	nop
 802815c:	20003b50 	.word	0x20003b50
 8028160:	20003b54 	.word	0x20003b54
 8028164:	080336dc 	.word	0x080336dc
 8028168:	08033800 	.word	0x08033800
 802816c:	08033724 	.word	0x08033724
 8028170:	08033818 	.word	0x08033818
 8028174:	20003b58 	.word	0x20003b58

08028178 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8028178:	b580      	push	{r7, lr}
 802817a:	b088      	sub	sp, #32
 802817c:	af00      	add	r7, sp, #0
 802817e:	4603      	mov	r3, r0
 8028180:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8028182:	88fb      	ldrh	r3, [r7, #6]
 8028184:	2b00      	cmp	r3, #0
 8028186:	d101      	bne.n	802818c <mem_malloc+0x14>
    return NULL;
 8028188:	2300      	movs	r3, #0
 802818a:	e0c7      	b.n	802831c <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 802818c:	88fb      	ldrh	r3, [r7, #6]
 802818e:	3303      	adds	r3, #3
 8028190:	b29b      	uxth	r3, r3
 8028192:	f023 0303 	bic.w	r3, r3, #3
 8028196:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8028198:	88fb      	ldrh	r3, [r7, #6]
 802819a:	2b0b      	cmp	r3, #11
 802819c:	d801      	bhi.n	80281a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 802819e:	230c      	movs	r3, #12
 80281a0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80281a2:	88fb      	ldrh	r3, [r7, #6]
 80281a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80281a8:	d901      	bls.n	80281ae <mem_malloc+0x36>
    return NULL;
 80281aa:	2300      	movs	r3, #0
 80281ac:	e0b6      	b.n	802831c <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80281ae:	4b5d      	ldr	r3, [pc, #372]	; (8028324 <mem_malloc+0x1ac>)
 80281b0:	681a      	ldr	r2, [r3, #0]
 80281b2:	4b5d      	ldr	r3, [pc, #372]	; (8028328 <mem_malloc+0x1b0>)
 80281b4:	681b      	ldr	r3, [r3, #0]
 80281b6:	1ad3      	subs	r3, r2, r3
 80281b8:	83fb      	strh	r3, [r7, #30]
 80281ba:	e0a7      	b.n	802830c <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80281bc:	4b5a      	ldr	r3, [pc, #360]	; (8028328 <mem_malloc+0x1b0>)
 80281be:	681a      	ldr	r2, [r3, #0]
 80281c0:	8bfb      	ldrh	r3, [r7, #30]
 80281c2:	4413      	add	r3, r2
 80281c4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80281c6:	697b      	ldr	r3, [r7, #20]
 80281c8:	791b      	ldrb	r3, [r3, #4]
 80281ca:	2b00      	cmp	r3, #0
 80281cc:	f040 8098 	bne.w	8028300 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80281d0:	697b      	ldr	r3, [r7, #20]
 80281d2:	881b      	ldrh	r3, [r3, #0]
 80281d4:	461a      	mov	r2, r3
 80281d6:	8bfb      	ldrh	r3, [r7, #30]
 80281d8:	1ad3      	subs	r3, r2, r3
 80281da:	f1a3 0208 	sub.w	r2, r3, #8
 80281de:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80281e0:	429a      	cmp	r2, r3
 80281e2:	f0c0 808d 	bcc.w	8028300 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80281e6:	697b      	ldr	r3, [r7, #20]
 80281e8:	881b      	ldrh	r3, [r3, #0]
 80281ea:	461a      	mov	r2, r3
 80281ec:	8bfb      	ldrh	r3, [r7, #30]
 80281ee:	1ad3      	subs	r3, r2, r3
 80281f0:	f1a3 0208 	sub.w	r2, r3, #8
 80281f4:	88fb      	ldrh	r3, [r7, #6]
 80281f6:	3314      	adds	r3, #20
 80281f8:	429a      	cmp	r2, r3
 80281fa:	d327      	bcc.n	802824c <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80281fc:	8bfa      	ldrh	r2, [r7, #30]
 80281fe:	88fb      	ldrh	r3, [r7, #6]
 8028200:	4413      	add	r3, r2
 8028202:	b29b      	uxth	r3, r3
 8028204:	3308      	adds	r3, #8
 8028206:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8028208:	4b47      	ldr	r3, [pc, #284]	; (8028328 <mem_malloc+0x1b0>)
 802820a:	681a      	ldr	r2, [r3, #0]
 802820c:	8a7b      	ldrh	r3, [r7, #18]
 802820e:	4413      	add	r3, r2
 8028210:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8028212:	68fb      	ldr	r3, [r7, #12]
 8028214:	2200      	movs	r2, #0
 8028216:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8028218:	697b      	ldr	r3, [r7, #20]
 802821a:	881a      	ldrh	r2, [r3, #0]
 802821c:	68fb      	ldr	r3, [r7, #12]
 802821e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8028220:	68fb      	ldr	r3, [r7, #12]
 8028222:	8bfa      	ldrh	r2, [r7, #30]
 8028224:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8028226:	697b      	ldr	r3, [r7, #20]
 8028228:	8a7a      	ldrh	r2, [r7, #18]
 802822a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 802822c:	697b      	ldr	r3, [r7, #20]
 802822e:	2201      	movs	r2, #1
 8028230:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8028232:	68fb      	ldr	r3, [r7, #12]
 8028234:	881b      	ldrh	r3, [r3, #0]
 8028236:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802823a:	d00a      	beq.n	8028252 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 802823c:	4b3a      	ldr	r3, [pc, #232]	; (8028328 <mem_malloc+0x1b0>)
 802823e:	681b      	ldr	r3, [r3, #0]
 8028240:	68fa      	ldr	r2, [r7, #12]
 8028242:	8812      	ldrh	r2, [r2, #0]
 8028244:	4413      	add	r3, r2
 8028246:	8a7a      	ldrh	r2, [r7, #18]
 8028248:	805a      	strh	r2, [r3, #2]
 802824a:	e002      	b.n	8028252 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 802824c:	697b      	ldr	r3, [r7, #20]
 802824e:	2201      	movs	r2, #1
 8028250:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8028252:	4b34      	ldr	r3, [pc, #208]	; (8028324 <mem_malloc+0x1ac>)
 8028254:	681b      	ldr	r3, [r3, #0]
 8028256:	697a      	ldr	r2, [r7, #20]
 8028258:	429a      	cmp	r2, r3
 802825a:	d127      	bne.n	80282ac <mem_malloc+0x134>
          struct mem *cur = lfree;
 802825c:	4b31      	ldr	r3, [pc, #196]	; (8028324 <mem_malloc+0x1ac>)
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8028262:	e005      	b.n	8028270 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8028264:	4b30      	ldr	r3, [pc, #192]	; (8028328 <mem_malloc+0x1b0>)
 8028266:	681b      	ldr	r3, [r3, #0]
 8028268:	69ba      	ldr	r2, [r7, #24]
 802826a:	8812      	ldrh	r2, [r2, #0]
 802826c:	4413      	add	r3, r2
 802826e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8028270:	69bb      	ldr	r3, [r7, #24]
 8028272:	791b      	ldrb	r3, [r3, #4]
 8028274:	2b00      	cmp	r3, #0
 8028276:	d004      	beq.n	8028282 <mem_malloc+0x10a>
 8028278:	4b2c      	ldr	r3, [pc, #176]	; (802832c <mem_malloc+0x1b4>)
 802827a:	681b      	ldr	r3, [r3, #0]
 802827c:	69ba      	ldr	r2, [r7, #24]
 802827e:	429a      	cmp	r2, r3
 8028280:	d1f0      	bne.n	8028264 <mem_malloc+0xec>
          }
          lfree = cur;
 8028282:	4a28      	ldr	r2, [pc, #160]	; (8028324 <mem_malloc+0x1ac>)
 8028284:	69bb      	ldr	r3, [r7, #24]
 8028286:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8028288:	4b26      	ldr	r3, [pc, #152]	; (8028324 <mem_malloc+0x1ac>)
 802828a:	681a      	ldr	r2, [r3, #0]
 802828c:	4b27      	ldr	r3, [pc, #156]	; (802832c <mem_malloc+0x1b4>)
 802828e:	681b      	ldr	r3, [r3, #0]
 8028290:	429a      	cmp	r2, r3
 8028292:	d00b      	beq.n	80282ac <mem_malloc+0x134>
 8028294:	4b23      	ldr	r3, [pc, #140]	; (8028324 <mem_malloc+0x1ac>)
 8028296:	681b      	ldr	r3, [r3, #0]
 8028298:	791b      	ldrb	r3, [r3, #4]
 802829a:	2b00      	cmp	r3, #0
 802829c:	d006      	beq.n	80282ac <mem_malloc+0x134>
 802829e:	4b24      	ldr	r3, [pc, #144]	; (8028330 <mem_malloc+0x1b8>)
 80282a0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80282a4:	4923      	ldr	r1, [pc, #140]	; (8028334 <mem_malloc+0x1bc>)
 80282a6:	4824      	ldr	r0, [pc, #144]	; (8028338 <mem_malloc+0x1c0>)
 80282a8:	f009 f88c 	bl	80313c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80282ac:	88fa      	ldrh	r2, [r7, #6]
 80282ae:	697b      	ldr	r3, [r7, #20]
 80282b0:	4413      	add	r3, r2
 80282b2:	3308      	adds	r3, #8
 80282b4:	4a1d      	ldr	r2, [pc, #116]	; (802832c <mem_malloc+0x1b4>)
 80282b6:	6812      	ldr	r2, [r2, #0]
 80282b8:	4293      	cmp	r3, r2
 80282ba:	d906      	bls.n	80282ca <mem_malloc+0x152>
 80282bc:	4b1c      	ldr	r3, [pc, #112]	; (8028330 <mem_malloc+0x1b8>)
 80282be:	f240 22d3 	movw	r2, #723	; 0x2d3
 80282c2:	491e      	ldr	r1, [pc, #120]	; (802833c <mem_malloc+0x1c4>)
 80282c4:	481c      	ldr	r0, [pc, #112]	; (8028338 <mem_malloc+0x1c0>)
 80282c6:	f009 f87d 	bl	80313c4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80282ca:	697b      	ldr	r3, [r7, #20]
 80282cc:	f003 0303 	and.w	r3, r3, #3
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	d006      	beq.n	80282e2 <mem_malloc+0x16a>
 80282d4:	4b16      	ldr	r3, [pc, #88]	; (8028330 <mem_malloc+0x1b8>)
 80282d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80282da:	4919      	ldr	r1, [pc, #100]	; (8028340 <mem_malloc+0x1c8>)
 80282dc:	4816      	ldr	r0, [pc, #88]	; (8028338 <mem_malloc+0x1c0>)
 80282de:	f009 f871 	bl	80313c4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80282e2:	697b      	ldr	r3, [r7, #20]
 80282e4:	f003 0303 	and.w	r3, r3, #3
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d006      	beq.n	80282fa <mem_malloc+0x182>
 80282ec:	4b10      	ldr	r3, [pc, #64]	; (8028330 <mem_malloc+0x1b8>)
 80282ee:	f240 22d7 	movw	r2, #727	; 0x2d7
 80282f2:	4914      	ldr	r1, [pc, #80]	; (8028344 <mem_malloc+0x1cc>)
 80282f4:	4810      	ldr	r0, [pc, #64]	; (8028338 <mem_malloc+0x1c0>)
 80282f6:	f009 f865 	bl	80313c4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80282fa:	697b      	ldr	r3, [r7, #20]
 80282fc:	3308      	adds	r3, #8
 80282fe:	e00d      	b.n	802831c <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8028300:	4b09      	ldr	r3, [pc, #36]	; (8028328 <mem_malloc+0x1b0>)
 8028302:	681a      	ldr	r2, [r3, #0]
 8028304:	8bfb      	ldrh	r3, [r7, #30]
 8028306:	4413      	add	r3, r2
 8028308:	881b      	ldrh	r3, [r3, #0]
 802830a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 802830c:	8bfa      	ldrh	r2, [r7, #30]
 802830e:	88fb      	ldrh	r3, [r7, #6]
 8028310:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8028314:	429a      	cmp	r2, r3
 8028316:	f4ff af51 	bcc.w	80281bc <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 802831a:	2300      	movs	r3, #0
}
 802831c:	4618      	mov	r0, r3
 802831e:	3720      	adds	r7, #32
 8028320:	46bd      	mov	sp, r7
 8028322:	bd80      	pop	{r7, pc}
 8028324:	20003b58 	.word	0x20003b58
 8028328:	20003b50 	.word	0x20003b50
 802832c:	20003b54 	.word	0x20003b54
 8028330:	080336dc 	.word	0x080336dc
 8028334:	08033838 	.word	0x08033838
 8028338:	08033724 	.word	0x08033724
 802833c:	08033854 	.word	0x08033854
 8028340:	08033884 	.word	0x08033884
 8028344:	080338b4 	.word	0x080338b4

08028348 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8028348:	b480      	push	{r7}
 802834a:	b085      	sub	sp, #20
 802834c:	af00      	add	r7, sp, #0
 802834e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	689b      	ldr	r3, [r3, #8]
 8028354:	2200      	movs	r2, #0
 8028356:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8028358:	687b      	ldr	r3, [r7, #4]
 802835a:	685b      	ldr	r3, [r3, #4]
 802835c:	3303      	adds	r3, #3
 802835e:	f023 0303 	bic.w	r3, r3, #3
 8028362:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8028364:	2300      	movs	r3, #0
 8028366:	60fb      	str	r3, [r7, #12]
 8028368:	e011      	b.n	802838e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 802836a:	687b      	ldr	r3, [r7, #4]
 802836c:	689b      	ldr	r3, [r3, #8]
 802836e:	681a      	ldr	r2, [r3, #0]
 8028370:	68bb      	ldr	r3, [r7, #8]
 8028372:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8028374:	687b      	ldr	r3, [r7, #4]
 8028376:	689b      	ldr	r3, [r3, #8]
 8028378:	68ba      	ldr	r2, [r7, #8]
 802837a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	881b      	ldrh	r3, [r3, #0]
 8028380:	461a      	mov	r2, r3
 8028382:	68bb      	ldr	r3, [r7, #8]
 8028384:	4413      	add	r3, r2
 8028386:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8028388:	68fb      	ldr	r3, [r7, #12]
 802838a:	3301      	adds	r3, #1
 802838c:	60fb      	str	r3, [r7, #12]
 802838e:	687b      	ldr	r3, [r7, #4]
 8028390:	885b      	ldrh	r3, [r3, #2]
 8028392:	461a      	mov	r2, r3
 8028394:	68fb      	ldr	r3, [r7, #12]
 8028396:	4293      	cmp	r3, r2
 8028398:	dbe7      	blt.n	802836a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 802839a:	bf00      	nop
 802839c:	bf00      	nop
 802839e:	3714      	adds	r7, #20
 80283a0:	46bd      	mov	sp, r7
 80283a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283a6:	4770      	bx	lr

080283a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80283a8:	b580      	push	{r7, lr}
 80283aa:	b082      	sub	sp, #8
 80283ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80283ae:	2300      	movs	r3, #0
 80283b0:	80fb      	strh	r3, [r7, #6]
 80283b2:	e009      	b.n	80283c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80283b4:	88fb      	ldrh	r3, [r7, #6]
 80283b6:	4a08      	ldr	r2, [pc, #32]	; (80283d8 <memp_init+0x30>)
 80283b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80283bc:	4618      	mov	r0, r3
 80283be:	f7ff ffc3 	bl	8028348 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80283c2:	88fb      	ldrh	r3, [r7, #6]
 80283c4:	3301      	adds	r3, #1
 80283c6:	80fb      	strh	r3, [r7, #6]
 80283c8:	88fb      	ldrh	r3, [r7, #6]
 80283ca:	2b08      	cmp	r3, #8
 80283cc:	d9f2      	bls.n	80283b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80283ce:	bf00      	nop
 80283d0:	bf00      	nop
 80283d2:	3708      	adds	r7, #8
 80283d4:	46bd      	mov	sp, r7
 80283d6:	bd80      	pop	{r7, pc}
 80283d8:	080353c4 	.word	0x080353c4

080283dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80283dc:	b580      	push	{r7, lr}
 80283de:	b084      	sub	sp, #16
 80283e0:	af00      	add	r7, sp, #0
 80283e2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80283e4:	687b      	ldr	r3, [r7, #4]
 80283e6:	689b      	ldr	r3, [r3, #8]
 80283e8:	681b      	ldr	r3, [r3, #0]
 80283ea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80283ec:	68fb      	ldr	r3, [r7, #12]
 80283ee:	2b00      	cmp	r3, #0
 80283f0:	d012      	beq.n	8028418 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	689b      	ldr	r3, [r3, #8]
 80283f6:	68fa      	ldr	r2, [r7, #12]
 80283f8:	6812      	ldr	r2, [r2, #0]
 80283fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80283fc:	68fb      	ldr	r3, [r7, #12]
 80283fe:	f003 0303 	and.w	r3, r3, #3
 8028402:	2b00      	cmp	r3, #0
 8028404:	d006      	beq.n	8028414 <do_memp_malloc_pool+0x38>
 8028406:	4b07      	ldr	r3, [pc, #28]	; (8028424 <do_memp_malloc_pool+0x48>)
 8028408:	f44f 72a4 	mov.w	r2, #328	; 0x148
 802840c:	4906      	ldr	r1, [pc, #24]	; (8028428 <do_memp_malloc_pool+0x4c>)
 802840e:	4807      	ldr	r0, [pc, #28]	; (802842c <do_memp_malloc_pool+0x50>)
 8028410:	f008 ffd8 	bl	80313c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8028414:	68fb      	ldr	r3, [r7, #12]
 8028416:	e000      	b.n	802841a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8028418:	2300      	movs	r3, #0
}
 802841a:	4618      	mov	r0, r3
 802841c:	3710      	adds	r7, #16
 802841e:	46bd      	mov	sp, r7
 8028420:	bd80      	pop	{r7, pc}
 8028422:	bf00      	nop
 8028424:	080338d8 	.word	0x080338d8
 8028428:	08033908 	.word	0x08033908
 802842c:	0803392c 	.word	0x0803392c

08028430 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8028430:	b580      	push	{r7, lr}
 8028432:	b084      	sub	sp, #16
 8028434:	af00      	add	r7, sp, #0
 8028436:	4603      	mov	r3, r0
 8028438:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 802843a:	79fb      	ldrb	r3, [r7, #7]
 802843c:	2b08      	cmp	r3, #8
 802843e:	d908      	bls.n	8028452 <memp_malloc+0x22>
 8028440:	4b0a      	ldr	r3, [pc, #40]	; (802846c <memp_malloc+0x3c>)
 8028442:	f240 1287 	movw	r2, #391	; 0x187
 8028446:	490a      	ldr	r1, [pc, #40]	; (8028470 <memp_malloc+0x40>)
 8028448:	480a      	ldr	r0, [pc, #40]	; (8028474 <memp_malloc+0x44>)
 802844a:	f008 ffbb 	bl	80313c4 <iprintf>
 802844e:	2300      	movs	r3, #0
 8028450:	e008      	b.n	8028464 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8028452:	79fb      	ldrb	r3, [r7, #7]
 8028454:	4a08      	ldr	r2, [pc, #32]	; (8028478 <memp_malloc+0x48>)
 8028456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802845a:	4618      	mov	r0, r3
 802845c:	f7ff ffbe 	bl	80283dc <do_memp_malloc_pool>
 8028460:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8028462:	68fb      	ldr	r3, [r7, #12]
}
 8028464:	4618      	mov	r0, r3
 8028466:	3710      	adds	r7, #16
 8028468:	46bd      	mov	sp, r7
 802846a:	bd80      	pop	{r7, pc}
 802846c:	080338d8 	.word	0x080338d8
 8028470:	08033968 	.word	0x08033968
 8028474:	0803392c 	.word	0x0803392c
 8028478:	080353c4 	.word	0x080353c4

0802847c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 802847c:	b580      	push	{r7, lr}
 802847e:	b084      	sub	sp, #16
 8028480:	af00      	add	r7, sp, #0
 8028482:	6078      	str	r0, [r7, #4]
 8028484:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8028486:	683b      	ldr	r3, [r7, #0]
 8028488:	f003 0303 	and.w	r3, r3, #3
 802848c:	2b00      	cmp	r3, #0
 802848e:	d006      	beq.n	802849e <do_memp_free_pool+0x22>
 8028490:	4b0a      	ldr	r3, [pc, #40]	; (80284bc <do_memp_free_pool+0x40>)
 8028492:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8028496:	490a      	ldr	r1, [pc, #40]	; (80284c0 <do_memp_free_pool+0x44>)
 8028498:	480a      	ldr	r0, [pc, #40]	; (80284c4 <do_memp_free_pool+0x48>)
 802849a:	f008 ff93 	bl	80313c4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 802849e:	683b      	ldr	r3, [r7, #0]
 80284a0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80284a2:	687b      	ldr	r3, [r7, #4]
 80284a4:	689b      	ldr	r3, [r3, #8]
 80284a6:	681a      	ldr	r2, [r3, #0]
 80284a8:	68fb      	ldr	r3, [r7, #12]
 80284aa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80284ac:	687b      	ldr	r3, [r7, #4]
 80284ae:	689b      	ldr	r3, [r3, #8]
 80284b0:	68fa      	ldr	r2, [r7, #12]
 80284b2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80284b4:	bf00      	nop
 80284b6:	3710      	adds	r7, #16
 80284b8:	46bd      	mov	sp, r7
 80284ba:	bd80      	pop	{r7, pc}
 80284bc:	080338d8 	.word	0x080338d8
 80284c0:	08033988 	.word	0x08033988
 80284c4:	0803392c 	.word	0x0803392c

080284c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80284c8:	b580      	push	{r7, lr}
 80284ca:	b082      	sub	sp, #8
 80284cc:	af00      	add	r7, sp, #0
 80284ce:	4603      	mov	r3, r0
 80284d0:	6039      	str	r1, [r7, #0]
 80284d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80284d4:	79fb      	ldrb	r3, [r7, #7]
 80284d6:	2b08      	cmp	r3, #8
 80284d8:	d907      	bls.n	80284ea <memp_free+0x22>
 80284da:	4b0c      	ldr	r3, [pc, #48]	; (802850c <memp_free+0x44>)
 80284dc:	f240 12db 	movw	r2, #475	; 0x1db
 80284e0:	490b      	ldr	r1, [pc, #44]	; (8028510 <memp_free+0x48>)
 80284e2:	480c      	ldr	r0, [pc, #48]	; (8028514 <memp_free+0x4c>)
 80284e4:	f008 ff6e 	bl	80313c4 <iprintf>
 80284e8:	e00c      	b.n	8028504 <memp_free+0x3c>

  if (mem == NULL) {
 80284ea:	683b      	ldr	r3, [r7, #0]
 80284ec:	2b00      	cmp	r3, #0
 80284ee:	d008      	beq.n	8028502 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80284f0:	79fb      	ldrb	r3, [r7, #7]
 80284f2:	4a09      	ldr	r2, [pc, #36]	; (8028518 <memp_free+0x50>)
 80284f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80284f8:	6839      	ldr	r1, [r7, #0]
 80284fa:	4618      	mov	r0, r3
 80284fc:	f7ff ffbe 	bl	802847c <do_memp_free_pool>
 8028500:	e000      	b.n	8028504 <memp_free+0x3c>
    return;
 8028502:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8028504:	3708      	adds	r7, #8
 8028506:	46bd      	mov	sp, r7
 8028508:	bd80      	pop	{r7, pc}
 802850a:	bf00      	nop
 802850c:	080338d8 	.word	0x080338d8
 8028510:	080339a8 	.word	0x080339a8
 8028514:	0803392c 	.word	0x0803392c
 8028518:	080353c4 	.word	0x080353c4

0802851c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 802851c:	b480      	push	{r7}
 802851e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8028520:	bf00      	nop
 8028522:	46bd      	mov	sp, r7
 8028524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028528:	4770      	bx	lr
	...

0802852c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 802852c:	b580      	push	{r7, lr}
 802852e:	b084      	sub	sp, #16
 8028530:	af00      	add	r7, sp, #0
 8028532:	60f8      	str	r0, [r7, #12]
 8028534:	60b9      	str	r1, [r7, #8]
 8028536:	607a      	str	r2, [r7, #4]
 8028538:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 802853a:	69fb      	ldr	r3, [r7, #28]
 802853c:	2b00      	cmp	r3, #0
 802853e:	d105      	bne.n	802854c <netif_add+0x20>
 8028540:	4b1f      	ldr	r3, [pc, #124]	; (80285c0 <netif_add+0x94>)
 8028542:	22fb      	movs	r2, #251	; 0xfb
 8028544:	491f      	ldr	r1, [pc, #124]	; (80285c4 <netif_add+0x98>)
 8028546:	4820      	ldr	r0, [pc, #128]	; (80285c8 <netif_add+0x9c>)
 8028548:	f008 ff3c 	bl	80313c4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 802854c:	68fb      	ldr	r3, [r7, #12]
 802854e:	2200      	movs	r2, #0
 8028550:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8028552:	68fb      	ldr	r3, [r7, #12]
 8028554:	2200      	movs	r2, #0
 8028556:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8028558:	68fb      	ldr	r3, [r7, #12]
 802855a:	2200      	movs	r2, #0
 802855c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 802855e:	68fb      	ldr	r3, [r7, #12]
 8028560:	2200      	movs	r2, #0
 8028562:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8028566:	68fb      	ldr	r3, [r7, #12]
 8028568:	2203      	movs	r2, #3
 802856a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 802856e:	68fb      	ldr	r3, [r7, #12]
 8028570:	69ba      	ldr	r2, [r7, #24]
 8028572:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8028574:	4b15      	ldr	r3, [pc, #84]	; (80285cc <netif_add+0xa0>)
 8028576:	781b      	ldrb	r3, [r3, #0]
 8028578:	1c5a      	adds	r2, r3, #1
 802857a:	b2d1      	uxtb	r1, r2
 802857c:	4a13      	ldr	r2, [pc, #76]	; (80285cc <netif_add+0xa0>)
 802857e:	7011      	strb	r1, [r2, #0]
 8028580:	68fa      	ldr	r2, [r7, #12]
 8028582:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8028586:	68fb      	ldr	r3, [r7, #12]
 8028588:	6a3a      	ldr	r2, [r7, #32]
 802858a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 802858c:	683b      	ldr	r3, [r7, #0]
 802858e:	687a      	ldr	r2, [r7, #4]
 8028590:	68b9      	ldr	r1, [r7, #8]
 8028592:	68f8      	ldr	r0, [r7, #12]
 8028594:	f000 f81e 	bl	80285d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8028598:	69fb      	ldr	r3, [r7, #28]
 802859a:	68f8      	ldr	r0, [r7, #12]
 802859c:	4798      	blx	r3
 802859e:	4603      	mov	r3, r0
 80285a0:	2b00      	cmp	r3, #0
 80285a2:	d001      	beq.n	80285a8 <netif_add+0x7c>
    return NULL;
 80285a4:	2300      	movs	r3, #0
 80285a6:	e007      	b.n	80285b8 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80285a8:	4b09      	ldr	r3, [pc, #36]	; (80285d0 <netif_add+0xa4>)
 80285aa:	681a      	ldr	r2, [r3, #0]
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80285b0:	4a07      	ldr	r2, [pc, #28]	; (80285d0 <netif_add+0xa4>)
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80285b6:	68fb      	ldr	r3, [r7, #12]
}
 80285b8:	4618      	mov	r0, r3
 80285ba:	3710      	adds	r7, #16
 80285bc:	46bd      	mov	sp, r7
 80285be:	bd80      	pop	{r7, pc}
 80285c0:	080339c4 	.word	0x080339c4
 80285c4:	080339f8 	.word	0x080339f8
 80285c8:	08033a10 	.word	0x08033a10
 80285cc:	20006a3c 	.word	0x20006a3c
 80285d0:	20006a34 	.word	0x20006a34

080285d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80285d4:	b580      	push	{r7, lr}
 80285d6:	b084      	sub	sp, #16
 80285d8:	af00      	add	r7, sp, #0
 80285da:	60f8      	str	r0, [r7, #12]
 80285dc:	60b9      	str	r1, [r7, #8]
 80285de:	607a      	str	r2, [r7, #4]
 80285e0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80285e2:	68bb      	ldr	r3, [r7, #8]
 80285e4:	2b00      	cmp	r3, #0
 80285e6:	d003      	beq.n	80285f0 <netif_set_addr+0x1c>
 80285e8:	68bb      	ldr	r3, [r7, #8]
 80285ea:	681b      	ldr	r3, [r3, #0]
 80285ec:	2b00      	cmp	r3, #0
 80285ee:	d10c      	bne.n	802860a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80285f0:	68b9      	ldr	r1, [r7, #8]
 80285f2:	68f8      	ldr	r0, [r7, #12]
 80285f4:	f000 f81a 	bl	802862c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80285f8:	6879      	ldr	r1, [r7, #4]
 80285fa:	68f8      	ldr	r0, [r7, #12]
 80285fc:	f000 f862 	bl	80286c4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8028600:	6839      	ldr	r1, [r7, #0]
 8028602:	68f8      	ldr	r0, [r7, #12]
 8028604:	f000 f84a 	bl	802869c <netif_set_gw>
 8028608:	e00c      	b.n	8028624 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 802860a:	6879      	ldr	r1, [r7, #4]
 802860c:	68f8      	ldr	r0, [r7, #12]
 802860e:	f000 f859 	bl	80286c4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8028612:	6839      	ldr	r1, [r7, #0]
 8028614:	68f8      	ldr	r0, [r7, #12]
 8028616:	f000 f841 	bl	802869c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 802861a:	68b9      	ldr	r1, [r7, #8]
 802861c:	68f8      	ldr	r0, [r7, #12]
 802861e:	f000 f805 	bl	802862c <netif_set_ipaddr>
  }
}
 8028622:	bf00      	nop
 8028624:	bf00      	nop
 8028626:	3710      	adds	r7, #16
 8028628:	46bd      	mov	sp, r7
 802862a:	bd80      	pop	{r7, pc}

0802862c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 802862c:	b580      	push	{r7, lr}
 802862e:	b084      	sub	sp, #16
 8028630:	af00      	add	r7, sp, #0
 8028632:	6078      	str	r0, [r7, #4]
 8028634:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8028636:	683b      	ldr	r3, [r7, #0]
 8028638:	2b00      	cmp	r3, #0
 802863a:	d003      	beq.n	8028644 <netif_set_ipaddr+0x18>
 802863c:	683b      	ldr	r3, [r7, #0]
 802863e:	681b      	ldr	r3, [r3, #0]
 8028640:	60fb      	str	r3, [r7, #12]
 8028642:	e002      	b.n	802864a <netif_set_ipaddr+0x1e>
 8028644:	4b14      	ldr	r3, [pc, #80]	; (8028698 <netif_set_ipaddr+0x6c>)
 8028646:	681b      	ldr	r3, [r3, #0]
 8028648:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 802864a:	68fa      	ldr	r2, [r7, #12]
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	3304      	adds	r3, #4
 8028650:	681b      	ldr	r3, [r3, #0]
 8028652:	429a      	cmp	r2, r3
 8028654:	d01c      	beq.n	8028690 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8028656:	687b      	ldr	r3, [r7, #4]
 8028658:	3304      	adds	r3, #4
 802865a:	f107 020c 	add.w	r2, r7, #12
 802865e:	4611      	mov	r1, r2
 8028660:	4618      	mov	r0, r3
 8028662:	f002 facf 	bl	802ac04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	3304      	adds	r3, #4
 802866a:	f107 020c 	add.w	r2, r7, #12
 802866e:	4611      	mov	r1, r2
 8028670:	4618      	mov	r0, r3
 8028672:	f006 fb35 	bl	802ece0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8028676:	683b      	ldr	r3, [r7, #0]
 8028678:	2b00      	cmp	r3, #0
 802867a:	d002      	beq.n	8028682 <netif_set_ipaddr+0x56>
 802867c:	683b      	ldr	r3, [r7, #0]
 802867e:	681b      	ldr	r3, [r3, #0]
 8028680:	e000      	b.n	8028684 <netif_set_ipaddr+0x58>
 8028682:	2300      	movs	r3, #0
 8028684:	687a      	ldr	r2, [r7, #4]
 8028686:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8028688:	2101      	movs	r1, #1
 802868a:	6878      	ldr	r0, [r7, #4]
 802868c:	f000 f861 	bl	8028752 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8028690:	bf00      	nop
 8028692:	3710      	adds	r7, #16
 8028694:	46bd      	mov	sp, r7
 8028696:	bd80      	pop	{r7, pc}
 8028698:	08035428 	.word	0x08035428

0802869c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 802869c:	b480      	push	{r7}
 802869e:	b083      	sub	sp, #12
 80286a0:	af00      	add	r7, sp, #0
 80286a2:	6078      	str	r0, [r7, #4]
 80286a4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80286a6:	683b      	ldr	r3, [r7, #0]
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	d002      	beq.n	80286b2 <netif_set_gw+0x16>
 80286ac:	683b      	ldr	r3, [r7, #0]
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	e000      	b.n	80286b4 <netif_set_gw+0x18>
 80286b2:	2300      	movs	r3, #0
 80286b4:	687a      	ldr	r2, [r7, #4]
 80286b6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80286b8:	bf00      	nop
 80286ba:	370c      	adds	r7, #12
 80286bc:	46bd      	mov	sp, r7
 80286be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286c2:	4770      	bx	lr

080286c4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80286c4:	b480      	push	{r7}
 80286c6:	b083      	sub	sp, #12
 80286c8:	af00      	add	r7, sp, #0
 80286ca:	6078      	str	r0, [r7, #4]
 80286cc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80286ce:	683b      	ldr	r3, [r7, #0]
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d002      	beq.n	80286da <netif_set_netmask+0x16>
 80286d4:	683b      	ldr	r3, [r7, #0]
 80286d6:	681b      	ldr	r3, [r3, #0]
 80286d8:	e000      	b.n	80286dc <netif_set_netmask+0x18>
 80286da:	2300      	movs	r3, #0
 80286dc:	687a      	ldr	r2, [r7, #4]
 80286de:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80286e0:	bf00      	nop
 80286e2:	370c      	adds	r7, #12
 80286e4:	46bd      	mov	sp, r7
 80286e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286ea:	4770      	bx	lr

080286ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80286ec:	b480      	push	{r7}
 80286ee:	b083      	sub	sp, #12
 80286f0:	af00      	add	r7, sp, #0
 80286f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80286f4:	4a04      	ldr	r2, [pc, #16]	; (8028708 <netif_set_default+0x1c>)
 80286f6:	687b      	ldr	r3, [r7, #4]
 80286f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80286fa:	bf00      	nop
 80286fc:	370c      	adds	r7, #12
 80286fe:	46bd      	mov	sp, r7
 8028700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028704:	4770      	bx	lr
 8028706:	bf00      	nop
 8028708:	20006a38 	.word	0x20006a38

0802870c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 802870c:	b580      	push	{r7, lr}
 802870e:	b082      	sub	sp, #8
 8028710:	af00      	add	r7, sp, #0
 8028712:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8028714:	687b      	ldr	r3, [r7, #4]
 8028716:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802871a:	f003 0301 	and.w	r3, r3, #1
 802871e:	2b00      	cmp	r3, #0
 8028720:	d113      	bne.n	802874a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8028728:	f043 0301 	orr.w	r3, r3, #1
 802872c:	b2da      	uxtb	r2, r3
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802873a:	f003 0304 	and.w	r3, r3, #4
 802873e:	2b00      	cmp	r3, #0
 8028740:	d003      	beq.n	802874a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8028742:	2103      	movs	r1, #3
 8028744:	6878      	ldr	r0, [r7, #4]
 8028746:	f000 f804 	bl	8028752 <netif_issue_reports>
    }
  }
}
 802874a:	bf00      	nop
 802874c:	3708      	adds	r7, #8
 802874e:	46bd      	mov	sp, r7
 8028750:	bd80      	pop	{r7, pc}

08028752 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8028752:	b580      	push	{r7, lr}
 8028754:	b082      	sub	sp, #8
 8028756:	af00      	add	r7, sp, #0
 8028758:	6078      	str	r0, [r7, #4]
 802875a:	460b      	mov	r3, r1
 802875c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802875e:	78fb      	ldrb	r3, [r7, #3]
 8028760:	f003 0301 	and.w	r3, r3, #1
 8028764:	2b00      	cmp	r3, #0
 8028766:	d011      	beq.n	802878c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8028768:	687b      	ldr	r3, [r7, #4]
 802876a:	3304      	adds	r3, #4
 802876c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802876e:	2b00      	cmp	r3, #0
 8028770:	d00c      	beq.n	802878c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8028778:	f003 0308 	and.w	r3, r3, #8
 802877c:	2b00      	cmp	r3, #0
 802877e:	d005      	beq.n	802878c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	3304      	adds	r3, #4
 8028784:	4619      	mov	r1, r3
 8028786:	6878      	ldr	r0, [r7, #4]
 8028788:	f007 f9de 	bl	802fb48 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 802878c:	bf00      	nop
 802878e:	3708      	adds	r7, #8
 8028790:	46bd      	mov	sp, r7
 8028792:	bd80      	pop	{r7, pc}

08028794 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8028794:	b580      	push	{r7, lr}
 8028796:	b082      	sub	sp, #8
 8028798:	af00      	add	r7, sp, #0
 802879a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80287a2:	f003 0301 	and.w	r3, r3, #1
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d012      	beq.n	80287d0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80287aa:	687b      	ldr	r3, [r7, #4]
 80287ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80287b0:	f023 0301 	bic.w	r3, r3, #1
 80287b4:	b2da      	uxtb	r2, r3
 80287b6:	687b      	ldr	r3, [r7, #4]
 80287b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80287bc:	687b      	ldr	r3, [r7, #4]
 80287be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80287c2:	f003 0308 	and.w	r3, r3, #8
 80287c6:	2b00      	cmp	r3, #0
 80287c8:	d002      	beq.n	80287d0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80287ca:	6878      	ldr	r0, [r7, #4]
 80287cc:	f006 fd82 	bl	802f2d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80287d0:	bf00      	nop
 80287d2:	3708      	adds	r7, #8
 80287d4:	46bd      	mov	sp, r7
 80287d6:	bd80      	pop	{r7, pc}

080287d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80287d8:	b580      	push	{r7, lr}
 80287da:	b082      	sub	sp, #8
 80287dc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80287de:	4b0e      	ldr	r3, [pc, #56]	; (8028818 <pbuf_free_ooseq+0x40>)
 80287e0:	2200      	movs	r2, #0
 80287e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80287e4:	4b0d      	ldr	r3, [pc, #52]	; (802881c <pbuf_free_ooseq+0x44>)
 80287e6:	681b      	ldr	r3, [r3, #0]
 80287e8:	607b      	str	r3, [r7, #4]
 80287ea:	e00f      	b.n	802880c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80287ec:	687b      	ldr	r3, [r7, #4]
 80287ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80287f0:	2b00      	cmp	r3, #0
 80287f2:	d008      	beq.n	8028806 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80287f8:	4618      	mov	r0, r3
 80287fa:	f001 fe74 	bl	802a4e6 <tcp_segs_free>
      pcb->ooseq = NULL;
 80287fe:	687b      	ldr	r3, [r7, #4]
 8028800:	2200      	movs	r2, #0
 8028802:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8028804:	e005      	b.n	8028812 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8028806:	687b      	ldr	r3, [r7, #4]
 8028808:	68db      	ldr	r3, [r3, #12]
 802880a:	607b      	str	r3, [r7, #4]
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	2b00      	cmp	r3, #0
 8028810:	d1ec      	bne.n	80287ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8028812:	3708      	adds	r7, #8
 8028814:	46bd      	mov	sp, r7
 8028816:	bd80      	pop	{r7, pc}
 8028818:	20006a3d 	.word	0x20006a3d
 802881c:	20006a4c 	.word	0x20006a4c

08028820 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8028820:	b480      	push	{r7}
 8028822:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8028824:	4b03      	ldr	r3, [pc, #12]	; (8028834 <pbuf_pool_is_empty+0x14>)
 8028826:	2201      	movs	r2, #1
 8028828:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 802882a:	bf00      	nop
 802882c:	46bd      	mov	sp, r7
 802882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028832:	4770      	bx	lr
 8028834:	20006a3d 	.word	0x20006a3d

08028838 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8028838:	b580      	push	{r7, lr}
 802883a:	b088      	sub	sp, #32
 802883c:	af00      	add	r7, sp, #0
 802883e:	4603      	mov	r3, r0
 8028840:	71fb      	strb	r3, [r7, #7]
 8028842:	460b      	mov	r3, r1
 8028844:	80bb      	strh	r3, [r7, #4]
 8028846:	4613      	mov	r3, r2
 8028848:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 802884a:	79fb      	ldrb	r3, [r7, #7]
 802884c:	2b04      	cmp	r3, #4
 802884e:	d81c      	bhi.n	802888a <pbuf_alloc+0x52>
 8028850:	a201      	add	r2, pc, #4	; (adr r2, 8028858 <pbuf_alloc+0x20>)
 8028852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028856:	bf00      	nop
 8028858:	0802886d 	.word	0x0802886d
 802885c:	08028873 	.word	0x08028873
 8028860:	08028879 	.word	0x08028879
 8028864:	0802887f 	.word	0x0802887f
 8028868:	08028885 	.word	0x08028885
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 802886c:	2336      	movs	r3, #54	; 0x36
 802886e:	82fb      	strh	r3, [r7, #22]
    break;
 8028870:	e014      	b.n	802889c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8028872:	2322      	movs	r3, #34	; 0x22
 8028874:	82fb      	strh	r3, [r7, #22]
    break;
 8028876:	e011      	b.n	802889c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8028878:	230e      	movs	r3, #14
 802887a:	82fb      	strh	r3, [r7, #22]
    break;
 802887c:	e00e      	b.n	802889c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 802887e:	2300      	movs	r3, #0
 8028880:	82fb      	strh	r3, [r7, #22]
    break;
 8028882:	e00b      	b.n	802889c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8028884:	2300      	movs	r3, #0
 8028886:	82fb      	strh	r3, [r7, #22]
    break;
 8028888:	e008      	b.n	802889c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 802888a:	4ba1      	ldr	r3, [pc, #644]	; (8028b10 <pbuf_alloc+0x2d8>)
 802888c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8028890:	49a0      	ldr	r1, [pc, #640]	; (8028b14 <pbuf_alloc+0x2dc>)
 8028892:	48a1      	ldr	r0, [pc, #644]	; (8028b18 <pbuf_alloc+0x2e0>)
 8028894:	f008 fd96 	bl	80313c4 <iprintf>
    return NULL;
 8028898:	2300      	movs	r3, #0
 802889a:	e15c      	b.n	8028b56 <pbuf_alloc+0x31e>
  }

  switch (type) {
 802889c:	79bb      	ldrb	r3, [r7, #6]
 802889e:	2b03      	cmp	r3, #3
 80288a0:	d00d      	beq.n	80288be <pbuf_alloc+0x86>
 80288a2:	2b03      	cmp	r3, #3
 80288a4:	f300 8146 	bgt.w	8028b34 <pbuf_alloc+0x2fc>
 80288a8:	2b00      	cmp	r3, #0
 80288aa:	f000 80d0 	beq.w	8028a4e <pbuf_alloc+0x216>
 80288ae:	2b00      	cmp	r3, #0
 80288b0:	f2c0 8140 	blt.w	8028b34 <pbuf_alloc+0x2fc>
 80288b4:	3b01      	subs	r3, #1
 80288b6:	2b01      	cmp	r3, #1
 80288b8:	f200 813c 	bhi.w	8028b34 <pbuf_alloc+0x2fc>
 80288bc:	e10d      	b.n	8028ada <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80288be:	2008      	movs	r0, #8
 80288c0:	f7ff fdb6 	bl	8028430 <memp_malloc>
 80288c4:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80288c6:	69fb      	ldr	r3, [r7, #28]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d103      	bne.n	80288d4 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80288cc:	f7ff ffa8 	bl	8028820 <pbuf_pool_is_empty>
      return NULL;
 80288d0:	2300      	movs	r3, #0
 80288d2:	e140      	b.n	8028b56 <pbuf_alloc+0x31e>
    }
    p->type = type;
 80288d4:	69fb      	ldr	r3, [r7, #28]
 80288d6:	79ba      	ldrb	r2, [r7, #6]
 80288d8:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80288da:	69fb      	ldr	r3, [r7, #28]
 80288dc:	2200      	movs	r2, #0
 80288de:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80288e0:	8afb      	ldrh	r3, [r7, #22]
 80288e2:	3310      	adds	r3, #16
 80288e4:	69fa      	ldr	r2, [r7, #28]
 80288e6:	4413      	add	r3, r2
 80288e8:	3303      	adds	r3, #3
 80288ea:	f023 0303 	bic.w	r3, r3, #3
 80288ee:	461a      	mov	r2, r3
 80288f0:	69fb      	ldr	r3, [r7, #28]
 80288f2:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80288f4:	69fb      	ldr	r3, [r7, #28]
 80288f6:	685b      	ldr	r3, [r3, #4]
 80288f8:	f003 0303 	and.w	r3, r3, #3
 80288fc:	2b00      	cmp	r3, #0
 80288fe:	d006      	beq.n	802890e <pbuf_alloc+0xd6>
 8028900:	4b83      	ldr	r3, [pc, #524]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028902:	f44f 7294 	mov.w	r2, #296	; 0x128
 8028906:	4985      	ldr	r1, [pc, #532]	; (8028b1c <pbuf_alloc+0x2e4>)
 8028908:	4883      	ldr	r0, [pc, #524]	; (8028b18 <pbuf_alloc+0x2e0>)
 802890a:	f008 fd5b 	bl	80313c4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 802890e:	69fb      	ldr	r3, [r7, #28]
 8028910:	88ba      	ldrh	r2, [r7, #4]
 8028912:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8028914:	8afb      	ldrh	r3, [r7, #22]
 8028916:	3303      	adds	r3, #3
 8028918:	f023 0303 	bic.w	r3, r3, #3
 802891c:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8028920:	88bb      	ldrh	r3, [r7, #4]
 8028922:	4293      	cmp	r3, r2
 8028924:	bf28      	it	cs
 8028926:	4613      	movcs	r3, r2
 8028928:	b29a      	uxth	r2, r3
 802892a:	69fb      	ldr	r3, [r7, #28]
 802892c:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 802892e:	69fb      	ldr	r3, [r7, #28]
 8028930:	685b      	ldr	r3, [r3, #4]
 8028932:	69fa      	ldr	r2, [r7, #28]
 8028934:	8952      	ldrh	r2, [r2, #10]
 8028936:	441a      	add	r2, r3
 8028938:	69fb      	ldr	r3, [r7, #28]
 802893a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 802893e:	429a      	cmp	r2, r3
 8028940:	d906      	bls.n	8028950 <pbuf_alloc+0x118>
 8028942:	4b73      	ldr	r3, [pc, #460]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028944:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8028948:	4975      	ldr	r1, [pc, #468]	; (8028b20 <pbuf_alloc+0x2e8>)
 802894a:	4873      	ldr	r0, [pc, #460]	; (8028b18 <pbuf_alloc+0x2e0>)
 802894c:	f008 fd3a 	bl	80313c4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8028950:	8afb      	ldrh	r3, [r7, #22]
 8028952:	3303      	adds	r3, #3
 8028954:	f023 0303 	bic.w	r3, r3, #3
 8028958:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 802895c:	d106      	bne.n	802896c <pbuf_alloc+0x134>
 802895e:	4b6c      	ldr	r3, [pc, #432]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028960:	f240 1231 	movw	r2, #305	; 0x131
 8028964:	496f      	ldr	r1, [pc, #444]	; (8028b24 <pbuf_alloc+0x2ec>)
 8028966:	486c      	ldr	r0, [pc, #432]	; (8028b18 <pbuf_alloc+0x2e0>)
 8028968:	f008 fd2c 	bl	80313c4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 802896c:	69fb      	ldr	r3, [r7, #28]
 802896e:	2201      	movs	r2, #1
 8028970:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8028972:	69fb      	ldr	r3, [r7, #28]
 8028974:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8028976:	88bb      	ldrh	r3, [r7, #4]
 8028978:	69fa      	ldr	r2, [r7, #28]
 802897a:	8952      	ldrh	r2, [r2, #10]
 802897c:	1a9b      	subs	r3, r3, r2
 802897e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8028980:	e061      	b.n	8028a46 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8028982:	2008      	movs	r0, #8
 8028984:	f7ff fd54 	bl	8028430 <memp_malloc>
 8028988:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 802898a:	68fb      	ldr	r3, [r7, #12]
 802898c:	2b00      	cmp	r3, #0
 802898e:	d106      	bne.n	802899e <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8028990:	f7ff ff46 	bl	8028820 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8028994:	69f8      	ldr	r0, [r7, #28]
 8028996:	f000 fac7 	bl	8028f28 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 802899a:	2300      	movs	r3, #0
 802899c:	e0db      	b.n	8028b56 <pbuf_alloc+0x31e>
      }
      q->type = type;
 802899e:	68fb      	ldr	r3, [r7, #12]
 80289a0:	79ba      	ldrb	r2, [r7, #6]
 80289a2:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80289a4:	68fb      	ldr	r3, [r7, #12]
 80289a6:	2200      	movs	r2, #0
 80289a8:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80289aa:	68fb      	ldr	r3, [r7, #12]
 80289ac:	2200      	movs	r2, #0
 80289ae:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80289b0:	69bb      	ldr	r3, [r7, #24]
 80289b2:	68fa      	ldr	r2, [r7, #12]
 80289b4:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80289b6:	693b      	ldr	r3, [r7, #16]
 80289b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80289bc:	4293      	cmp	r3, r2
 80289be:	dd06      	ble.n	80289ce <pbuf_alloc+0x196>
 80289c0:	4b53      	ldr	r3, [pc, #332]	; (8028b10 <pbuf_alloc+0x2d8>)
 80289c2:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80289c6:	4958      	ldr	r1, [pc, #352]	; (8028b28 <pbuf_alloc+0x2f0>)
 80289c8:	4853      	ldr	r0, [pc, #332]	; (8028b18 <pbuf_alloc+0x2e0>)
 80289ca:	f008 fcfb 	bl	80313c4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80289ce:	693b      	ldr	r3, [r7, #16]
 80289d0:	b29a      	uxth	r2, r3
 80289d2:	68fb      	ldr	r3, [r7, #12]
 80289d4:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80289d6:	693b      	ldr	r3, [r7, #16]
 80289d8:	b29b      	uxth	r3, r3
 80289da:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80289de:	bf28      	it	cs
 80289e0:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80289e4:	b29a      	uxth	r2, r3
 80289e6:	68fb      	ldr	r3, [r7, #12]
 80289e8:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80289ea:	68fb      	ldr	r3, [r7, #12]
 80289ec:	f103 0210 	add.w	r2, r3, #16
 80289f0:	68fb      	ldr	r3, [r7, #12]
 80289f2:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	685b      	ldr	r3, [r3, #4]
 80289f8:	f003 0303 	and.w	r3, r3, #3
 80289fc:	2b00      	cmp	r3, #0
 80289fe:	d006      	beq.n	8028a0e <pbuf_alloc+0x1d6>
 8028a00:	4b43      	ldr	r3, [pc, #268]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028a02:	f240 1251 	movw	r2, #337	; 0x151
 8028a06:	4949      	ldr	r1, [pc, #292]	; (8028b2c <pbuf_alloc+0x2f4>)
 8028a08:	4843      	ldr	r0, [pc, #268]	; (8028b18 <pbuf_alloc+0x2e0>)
 8028a0a:	f008 fcdb 	bl	80313c4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8028a0e:	69fb      	ldr	r3, [r7, #28]
 8028a10:	685b      	ldr	r3, [r3, #4]
 8028a12:	69fa      	ldr	r2, [r7, #28]
 8028a14:	8952      	ldrh	r2, [r2, #10]
 8028a16:	441a      	add	r2, r3
 8028a18:	69fb      	ldr	r3, [r7, #28]
 8028a1a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8028a1e:	429a      	cmp	r2, r3
 8028a20:	d906      	bls.n	8028a30 <pbuf_alloc+0x1f8>
 8028a22:	4b3b      	ldr	r3, [pc, #236]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028a24:	f240 1253 	movw	r2, #339	; 0x153
 8028a28:	493d      	ldr	r1, [pc, #244]	; (8028b20 <pbuf_alloc+0x2e8>)
 8028a2a:	483b      	ldr	r0, [pc, #236]	; (8028b18 <pbuf_alloc+0x2e0>)
 8028a2c:	f008 fcca 	bl	80313c4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	2201      	movs	r2, #1
 8028a34:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8028a36:	68fb      	ldr	r3, [r7, #12]
 8028a38:	895b      	ldrh	r3, [r3, #10]
 8028a3a:	461a      	mov	r2, r3
 8028a3c:	693b      	ldr	r3, [r7, #16]
 8028a3e:	1a9b      	subs	r3, r3, r2
 8028a40:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8028a46:	693b      	ldr	r3, [r7, #16]
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	dc9a      	bgt.n	8028982 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8028a4c:	e07c      	b.n	8028b48 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8028a4e:	8afb      	ldrh	r3, [r7, #22]
 8028a50:	3313      	adds	r3, #19
 8028a52:	b29b      	uxth	r3, r3
 8028a54:	f023 0303 	bic.w	r3, r3, #3
 8028a58:	b29a      	uxth	r2, r3
 8028a5a:	88bb      	ldrh	r3, [r7, #4]
 8028a5c:	3303      	adds	r3, #3
 8028a5e:	b29b      	uxth	r3, r3
 8028a60:	f023 0303 	bic.w	r3, r3, #3
 8028a64:	b29b      	uxth	r3, r3
 8028a66:	4413      	add	r3, r2
 8028a68:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8028a6a:	897a      	ldrh	r2, [r7, #10]
 8028a6c:	88bb      	ldrh	r3, [r7, #4]
 8028a6e:	3303      	adds	r3, #3
 8028a70:	f023 0303 	bic.w	r3, r3, #3
 8028a74:	429a      	cmp	r2, r3
 8028a76:	d201      	bcs.n	8028a7c <pbuf_alloc+0x244>
        return NULL;
 8028a78:	2300      	movs	r3, #0
 8028a7a:	e06c      	b.n	8028b56 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8028a7c:	897b      	ldrh	r3, [r7, #10]
 8028a7e:	4618      	mov	r0, r3
 8028a80:	f7ff fb7a 	bl	8028178 <mem_malloc>
 8028a84:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8028a86:	69fb      	ldr	r3, [r7, #28]
 8028a88:	2b00      	cmp	r3, #0
 8028a8a:	d101      	bne.n	8028a90 <pbuf_alloc+0x258>
      return NULL;
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	e062      	b.n	8028b56 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8028a90:	8afb      	ldrh	r3, [r7, #22]
 8028a92:	3310      	adds	r3, #16
 8028a94:	69fa      	ldr	r2, [r7, #28]
 8028a96:	4413      	add	r3, r2
 8028a98:	3303      	adds	r3, #3
 8028a9a:	f023 0303 	bic.w	r3, r3, #3
 8028a9e:	461a      	mov	r2, r3
 8028aa0:	69fb      	ldr	r3, [r7, #28]
 8028aa2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8028aa4:	69fb      	ldr	r3, [r7, #28]
 8028aa6:	88ba      	ldrh	r2, [r7, #4]
 8028aa8:	811a      	strh	r2, [r3, #8]
 8028aaa:	69fb      	ldr	r3, [r7, #28]
 8028aac:	891a      	ldrh	r2, [r3, #8]
 8028aae:	69fb      	ldr	r3, [r7, #28]
 8028ab0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8028ab2:	69fb      	ldr	r3, [r7, #28]
 8028ab4:	2200      	movs	r2, #0
 8028ab6:	601a      	str	r2, [r3, #0]
    p->type = type;
 8028ab8:	69fb      	ldr	r3, [r7, #28]
 8028aba:	79ba      	ldrb	r2, [r7, #6]
 8028abc:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8028abe:	69fb      	ldr	r3, [r7, #28]
 8028ac0:	685b      	ldr	r3, [r3, #4]
 8028ac2:	f003 0303 	and.w	r3, r3, #3
 8028ac6:	2b00      	cmp	r3, #0
 8028ac8:	d03d      	beq.n	8028b46 <pbuf_alloc+0x30e>
 8028aca:	4b11      	ldr	r3, [pc, #68]	; (8028b10 <pbuf_alloc+0x2d8>)
 8028acc:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8028ad0:	4917      	ldr	r1, [pc, #92]	; (8028b30 <pbuf_alloc+0x2f8>)
 8028ad2:	4811      	ldr	r0, [pc, #68]	; (8028b18 <pbuf_alloc+0x2e0>)
 8028ad4:	f008 fc76 	bl	80313c4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8028ad8:	e035      	b.n	8028b46 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8028ada:	2007      	movs	r0, #7
 8028adc:	f7ff fca8 	bl	8028430 <memp_malloc>
 8028ae0:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8028ae2:	69fb      	ldr	r3, [r7, #28]
 8028ae4:	2b00      	cmp	r3, #0
 8028ae6:	d101      	bne.n	8028aec <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8028ae8:	2300      	movs	r3, #0
 8028aea:	e034      	b.n	8028b56 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8028aec:	69fb      	ldr	r3, [r7, #28]
 8028aee:	2200      	movs	r2, #0
 8028af0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8028af2:	69fb      	ldr	r3, [r7, #28]
 8028af4:	88ba      	ldrh	r2, [r7, #4]
 8028af6:	811a      	strh	r2, [r3, #8]
 8028af8:	69fb      	ldr	r3, [r7, #28]
 8028afa:	891a      	ldrh	r2, [r3, #8]
 8028afc:	69fb      	ldr	r3, [r7, #28]
 8028afe:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8028b00:	69fb      	ldr	r3, [r7, #28]
 8028b02:	2200      	movs	r2, #0
 8028b04:	601a      	str	r2, [r3, #0]
    p->type = type;
 8028b06:	69fb      	ldr	r3, [r7, #28]
 8028b08:	79ba      	ldrb	r2, [r7, #6]
 8028b0a:	731a      	strb	r2, [r3, #12]
    break;
 8028b0c:	e01c      	b.n	8028b48 <pbuf_alloc+0x310>
 8028b0e:	bf00      	nop
 8028b10:	08033a38 	.word	0x08033a38
 8028b14:	08033a68 	.word	0x08033a68
 8028b18:	08033a84 	.word	0x08033a84
 8028b1c:	08033aac 	.word	0x08033aac
 8028b20:	08033adc 	.word	0x08033adc
 8028b24:	08033b10 	.word	0x08033b10
 8028b28:	08033b44 	.word	0x08033b44
 8028b2c:	08033b58 	.word	0x08033b58
 8028b30:	08033b88 	.word	0x08033b88
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8028b34:	4b0a      	ldr	r3, [pc, #40]	; (8028b60 <pbuf_alloc+0x328>)
 8028b36:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8028b3a:	490a      	ldr	r1, [pc, #40]	; (8028b64 <pbuf_alloc+0x32c>)
 8028b3c:	480a      	ldr	r0, [pc, #40]	; (8028b68 <pbuf_alloc+0x330>)
 8028b3e:	f008 fc41 	bl	80313c4 <iprintf>
    return NULL;
 8028b42:	2300      	movs	r3, #0
 8028b44:	e007      	b.n	8028b56 <pbuf_alloc+0x31e>
    break;
 8028b46:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8028b48:	69fb      	ldr	r3, [r7, #28]
 8028b4a:	2201      	movs	r2, #1
 8028b4c:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8028b4e:	69fb      	ldr	r3, [r7, #28]
 8028b50:	2200      	movs	r2, #0
 8028b52:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8028b54:	69fb      	ldr	r3, [r7, #28]
}
 8028b56:	4618      	mov	r0, r3
 8028b58:	3720      	adds	r7, #32
 8028b5a:	46bd      	mov	sp, r7
 8028b5c:	bd80      	pop	{r7, pc}
 8028b5e:	bf00      	nop
 8028b60:	08033a38 	.word	0x08033a38
 8028b64:	08033bb4 	.word	0x08033bb4
 8028b68:	08033a84 	.word	0x08033a84

08028b6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8028b6c:	b580      	push	{r7, lr}
 8028b6e:	b084      	sub	sp, #16
 8028b70:	af00      	add	r7, sp, #0
 8028b72:	603b      	str	r3, [r7, #0]
 8028b74:	4603      	mov	r3, r0
 8028b76:	71fb      	strb	r3, [r7, #7]
 8028b78:	460b      	mov	r3, r1
 8028b7a:	80bb      	strh	r3, [r7, #4]
 8028b7c:	4613      	mov	r3, r2
 8028b7e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8028b80:	79fb      	ldrb	r3, [r7, #7]
 8028b82:	2b04      	cmp	r3, #4
 8028b84:	d81b      	bhi.n	8028bbe <pbuf_alloced_custom+0x52>
 8028b86:	a201      	add	r2, pc, #4	; (adr r2, 8028b8c <pbuf_alloced_custom+0x20>)
 8028b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028b8c:	08028ba1 	.word	0x08028ba1
 8028b90:	08028ba7 	.word	0x08028ba7
 8028b94:	08028bad 	.word	0x08028bad
 8028b98:	08028bb3 	.word	0x08028bb3
 8028b9c:	08028bb9 	.word	0x08028bb9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8028ba0:	2336      	movs	r3, #54	; 0x36
 8028ba2:	81fb      	strh	r3, [r7, #14]
    break;
 8028ba4:	e014      	b.n	8028bd0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8028ba6:	2322      	movs	r3, #34	; 0x22
 8028ba8:	81fb      	strh	r3, [r7, #14]
    break;
 8028baa:	e011      	b.n	8028bd0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8028bac:	230e      	movs	r3, #14
 8028bae:	81fb      	strh	r3, [r7, #14]
    break;
 8028bb0:	e00e      	b.n	8028bd0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8028bb2:	2300      	movs	r3, #0
 8028bb4:	81fb      	strh	r3, [r7, #14]
    break;
 8028bb6:	e00b      	b.n	8028bd0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8028bb8:	2300      	movs	r3, #0
 8028bba:	81fb      	strh	r3, [r7, #14]
    break;
 8028bbc:	e008      	b.n	8028bd0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8028bbe:	4b1d      	ldr	r3, [pc, #116]	; (8028c34 <pbuf_alloced_custom+0xc8>)
 8028bc0:	f240 12c5 	movw	r2, #453	; 0x1c5
 8028bc4:	491c      	ldr	r1, [pc, #112]	; (8028c38 <pbuf_alloced_custom+0xcc>)
 8028bc6:	481d      	ldr	r0, [pc, #116]	; (8028c3c <pbuf_alloced_custom+0xd0>)
 8028bc8:	f008 fbfc 	bl	80313c4 <iprintf>
    return NULL;
 8028bcc:	2300      	movs	r3, #0
 8028bce:	e02d      	b.n	8028c2c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8028bd0:	89fb      	ldrh	r3, [r7, #14]
 8028bd2:	3303      	adds	r3, #3
 8028bd4:	f023 0203 	bic.w	r2, r3, #3
 8028bd8:	88bb      	ldrh	r3, [r7, #4]
 8028bda:	441a      	add	r2, r3
 8028bdc:	8bbb      	ldrh	r3, [r7, #28]
 8028bde:	429a      	cmp	r2, r3
 8028be0:	d901      	bls.n	8028be6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8028be2:	2300      	movs	r3, #0
 8028be4:	e022      	b.n	8028c2c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8028be6:	683b      	ldr	r3, [r7, #0]
 8028be8:	2200      	movs	r2, #0
 8028bea:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8028bec:	69bb      	ldr	r3, [r7, #24]
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	d008      	beq.n	8028c04 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8028bf2:	89fb      	ldrh	r3, [r7, #14]
 8028bf4:	3303      	adds	r3, #3
 8028bf6:	f023 0303 	bic.w	r3, r3, #3
 8028bfa:	69ba      	ldr	r2, [r7, #24]
 8028bfc:	441a      	add	r2, r3
 8028bfe:	683b      	ldr	r3, [r7, #0]
 8028c00:	605a      	str	r2, [r3, #4]
 8028c02:	e002      	b.n	8028c0a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8028c04:	683b      	ldr	r3, [r7, #0]
 8028c06:	2200      	movs	r2, #0
 8028c08:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8028c0a:	683b      	ldr	r3, [r7, #0]
 8028c0c:	2202      	movs	r2, #2
 8028c0e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8028c10:	683b      	ldr	r3, [r7, #0]
 8028c12:	88ba      	ldrh	r2, [r7, #4]
 8028c14:	811a      	strh	r2, [r3, #8]
 8028c16:	683b      	ldr	r3, [r7, #0]
 8028c18:	891a      	ldrh	r2, [r3, #8]
 8028c1a:	683b      	ldr	r3, [r7, #0]
 8028c1c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8028c1e:	683b      	ldr	r3, [r7, #0]
 8028c20:	79ba      	ldrb	r2, [r7, #6]
 8028c22:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8028c24:	683b      	ldr	r3, [r7, #0]
 8028c26:	2201      	movs	r2, #1
 8028c28:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8028c2a:	683b      	ldr	r3, [r7, #0]
}
 8028c2c:	4618      	mov	r0, r3
 8028c2e:	3710      	adds	r7, #16
 8028c30:	46bd      	mov	sp, r7
 8028c32:	bd80      	pop	{r7, pc}
 8028c34:	08033a38 	.word	0x08033a38
 8028c38:	08033bd0 	.word	0x08033bd0
 8028c3c:	08033a84 	.word	0x08033a84

08028c40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8028c40:	b580      	push	{r7, lr}
 8028c42:	b086      	sub	sp, #24
 8028c44:	af00      	add	r7, sp, #0
 8028c46:	6078      	str	r0, [r7, #4]
 8028c48:	460b      	mov	r3, r1
 8028c4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8028c4c:	687b      	ldr	r3, [r7, #4]
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d106      	bne.n	8028c60 <pbuf_realloc+0x20>
 8028c52:	4b4b      	ldr	r3, [pc, #300]	; (8028d80 <pbuf_realloc+0x140>)
 8028c54:	f240 12f3 	movw	r2, #499	; 0x1f3
 8028c58:	494a      	ldr	r1, [pc, #296]	; (8028d84 <pbuf_realloc+0x144>)
 8028c5a:	484b      	ldr	r0, [pc, #300]	; (8028d88 <pbuf_realloc+0x148>)
 8028c5c:	f008 fbb2 	bl	80313c4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8028c60:	687b      	ldr	r3, [r7, #4]
 8028c62:	7b1b      	ldrb	r3, [r3, #12]
 8028c64:	2b03      	cmp	r3, #3
 8028c66:	d012      	beq.n	8028c8e <pbuf_realloc+0x4e>
 8028c68:	687b      	ldr	r3, [r7, #4]
 8028c6a:	7b1b      	ldrb	r3, [r3, #12]
 8028c6c:	2b01      	cmp	r3, #1
 8028c6e:	d00e      	beq.n	8028c8e <pbuf_realloc+0x4e>
 8028c70:	687b      	ldr	r3, [r7, #4]
 8028c72:	7b1b      	ldrb	r3, [r3, #12]
 8028c74:	2b00      	cmp	r3, #0
 8028c76:	d00a      	beq.n	8028c8e <pbuf_realloc+0x4e>
 8028c78:	687b      	ldr	r3, [r7, #4]
 8028c7a:	7b1b      	ldrb	r3, [r3, #12]
 8028c7c:	2b02      	cmp	r3, #2
 8028c7e:	d006      	beq.n	8028c8e <pbuf_realloc+0x4e>
 8028c80:	4b3f      	ldr	r3, [pc, #252]	; (8028d80 <pbuf_realloc+0x140>)
 8028c82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8028c86:	4941      	ldr	r1, [pc, #260]	; (8028d8c <pbuf_realloc+0x14c>)
 8028c88:	483f      	ldr	r0, [pc, #252]	; (8028d88 <pbuf_realloc+0x148>)
 8028c8a:	f008 fb9b 	bl	80313c4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8028c8e:	687b      	ldr	r3, [r7, #4]
 8028c90:	891b      	ldrh	r3, [r3, #8]
 8028c92:	887a      	ldrh	r2, [r7, #2]
 8028c94:	429a      	cmp	r2, r3
 8028c96:	d26e      	bcs.n	8028d76 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8028c98:	887b      	ldrh	r3, [r7, #2]
 8028c9a:	687a      	ldr	r2, [r7, #4]
 8028c9c:	8912      	ldrh	r2, [r2, #8]
 8028c9e:	1a9b      	subs	r3, r3, r2
 8028ca0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8028ca2:	887b      	ldrh	r3, [r7, #2]
 8028ca4:	827b      	strh	r3, [r7, #18]
  q = p;
 8028ca6:	687b      	ldr	r3, [r7, #4]
 8028ca8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8028caa:	e025      	b.n	8028cf8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8028cac:	697b      	ldr	r3, [r7, #20]
 8028cae:	895b      	ldrh	r3, [r3, #10]
 8028cb0:	8a7a      	ldrh	r2, [r7, #18]
 8028cb2:	1ad3      	subs	r3, r2, r3
 8028cb4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8028cb6:	68fb      	ldr	r3, [r7, #12]
 8028cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8028cbc:	4293      	cmp	r3, r2
 8028cbe:	dd06      	ble.n	8028cce <pbuf_realloc+0x8e>
 8028cc0:	4b2f      	ldr	r3, [pc, #188]	; (8028d80 <pbuf_realloc+0x140>)
 8028cc2:	f240 220b 	movw	r2, #523	; 0x20b
 8028cc6:	4932      	ldr	r1, [pc, #200]	; (8028d90 <pbuf_realloc+0x150>)
 8028cc8:	482f      	ldr	r0, [pc, #188]	; (8028d88 <pbuf_realloc+0x148>)
 8028cca:	f008 fb7b 	bl	80313c4 <iprintf>
    q->tot_len += (u16_t)grow;
 8028cce:	697b      	ldr	r3, [r7, #20]
 8028cd0:	891a      	ldrh	r2, [r3, #8]
 8028cd2:	68fb      	ldr	r3, [r7, #12]
 8028cd4:	b29b      	uxth	r3, r3
 8028cd6:	4413      	add	r3, r2
 8028cd8:	b29a      	uxth	r2, r3
 8028cda:	697b      	ldr	r3, [r7, #20]
 8028cdc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8028cde:	697b      	ldr	r3, [r7, #20]
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8028ce4:	697b      	ldr	r3, [r7, #20]
 8028ce6:	2b00      	cmp	r3, #0
 8028ce8:	d106      	bne.n	8028cf8 <pbuf_realloc+0xb8>
 8028cea:	4b25      	ldr	r3, [pc, #148]	; (8028d80 <pbuf_realloc+0x140>)
 8028cec:	f240 220f 	movw	r2, #527	; 0x20f
 8028cf0:	4928      	ldr	r1, [pc, #160]	; (8028d94 <pbuf_realloc+0x154>)
 8028cf2:	4825      	ldr	r0, [pc, #148]	; (8028d88 <pbuf_realloc+0x148>)
 8028cf4:	f008 fb66 	bl	80313c4 <iprintf>
  while (rem_len > q->len) {
 8028cf8:	697b      	ldr	r3, [r7, #20]
 8028cfa:	895b      	ldrh	r3, [r3, #10]
 8028cfc:	8a7a      	ldrh	r2, [r7, #18]
 8028cfe:	429a      	cmp	r2, r3
 8028d00:	d8d4      	bhi.n	8028cac <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8028d02:	697b      	ldr	r3, [r7, #20]
 8028d04:	7b1b      	ldrb	r3, [r3, #12]
 8028d06:	2b00      	cmp	r3, #0
 8028d08:	d121      	bne.n	8028d4e <pbuf_realloc+0x10e>
 8028d0a:	697b      	ldr	r3, [r7, #20]
 8028d0c:	895b      	ldrh	r3, [r3, #10]
 8028d0e:	8a7a      	ldrh	r2, [r7, #18]
 8028d10:	429a      	cmp	r2, r3
 8028d12:	d01c      	beq.n	8028d4e <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8028d14:	697b      	ldr	r3, [r7, #20]
 8028d16:	7b5b      	ldrb	r3, [r3, #13]
 8028d18:	f003 0302 	and.w	r3, r3, #2
 8028d1c:	2b00      	cmp	r3, #0
 8028d1e:	d116      	bne.n	8028d4e <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8028d20:	697b      	ldr	r3, [r7, #20]
 8028d22:	685a      	ldr	r2, [r3, #4]
 8028d24:	697b      	ldr	r3, [r7, #20]
 8028d26:	1ad3      	subs	r3, r2, r3
 8028d28:	b29a      	uxth	r2, r3
 8028d2a:	8a7b      	ldrh	r3, [r7, #18]
 8028d2c:	4413      	add	r3, r2
 8028d2e:	b29b      	uxth	r3, r3
 8028d30:	4619      	mov	r1, r3
 8028d32:	6978      	ldr	r0, [r7, #20]
 8028d34:	f7ff f944 	bl	8027fc0 <mem_trim>
 8028d38:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8028d3a:	697b      	ldr	r3, [r7, #20]
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d106      	bne.n	8028d4e <pbuf_realloc+0x10e>
 8028d40:	4b0f      	ldr	r3, [pc, #60]	; (8028d80 <pbuf_realloc+0x140>)
 8028d42:	f240 221d 	movw	r2, #541	; 0x21d
 8028d46:	4914      	ldr	r1, [pc, #80]	; (8028d98 <pbuf_realloc+0x158>)
 8028d48:	480f      	ldr	r0, [pc, #60]	; (8028d88 <pbuf_realloc+0x148>)
 8028d4a:	f008 fb3b 	bl	80313c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8028d4e:	697b      	ldr	r3, [r7, #20]
 8028d50:	8a7a      	ldrh	r2, [r7, #18]
 8028d52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8028d54:	697b      	ldr	r3, [r7, #20]
 8028d56:	895a      	ldrh	r2, [r3, #10]
 8028d58:	697b      	ldr	r3, [r7, #20]
 8028d5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8028d5c:	697b      	ldr	r3, [r7, #20]
 8028d5e:	681b      	ldr	r3, [r3, #0]
 8028d60:	2b00      	cmp	r3, #0
 8028d62:	d004      	beq.n	8028d6e <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8028d64:	697b      	ldr	r3, [r7, #20]
 8028d66:	681b      	ldr	r3, [r3, #0]
 8028d68:	4618      	mov	r0, r3
 8028d6a:	f000 f8dd 	bl	8028f28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8028d6e:	697b      	ldr	r3, [r7, #20]
 8028d70:	2200      	movs	r2, #0
 8028d72:	601a      	str	r2, [r3, #0]
 8028d74:	e000      	b.n	8028d78 <pbuf_realloc+0x138>
    return;
 8028d76:	bf00      	nop

}
 8028d78:	3718      	adds	r7, #24
 8028d7a:	46bd      	mov	sp, r7
 8028d7c:	bd80      	pop	{r7, pc}
 8028d7e:	bf00      	nop
 8028d80:	08033a38 	.word	0x08033a38
 8028d84:	08033bf4 	.word	0x08033bf4
 8028d88:	08033a84 	.word	0x08033a84
 8028d8c:	08033c0c 	.word	0x08033c0c
 8028d90:	08033c28 	.word	0x08033c28
 8028d94:	08033c3c 	.word	0x08033c3c
 8028d98:	08033c54 	.word	0x08033c54

08028d9c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8028d9c:	b580      	push	{r7, lr}
 8028d9e:	b084      	sub	sp, #16
 8028da0:	af00      	add	r7, sp, #0
 8028da2:	6078      	str	r0, [r7, #4]
 8028da4:	460b      	mov	r3, r1
 8028da6:	807b      	strh	r3, [r7, #2]
 8028da8:	4613      	mov	r3, r2
 8028daa:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8028dac:	687b      	ldr	r3, [r7, #4]
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d106      	bne.n	8028dc0 <pbuf_header_impl+0x24>
 8028db2:	4b46      	ldr	r3, [pc, #280]	; (8028ecc <pbuf_header_impl+0x130>)
 8028db4:	f240 223f 	movw	r2, #575	; 0x23f
 8028db8:	4945      	ldr	r1, [pc, #276]	; (8028ed0 <pbuf_header_impl+0x134>)
 8028dba:	4846      	ldr	r0, [pc, #280]	; (8028ed4 <pbuf_header_impl+0x138>)
 8028dbc:	f008 fb02 	bl	80313c4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8028dc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028dc4:	2b00      	cmp	r3, #0
 8028dc6:	d002      	beq.n	8028dce <pbuf_header_impl+0x32>
 8028dc8:	687b      	ldr	r3, [r7, #4]
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d101      	bne.n	8028dd2 <pbuf_header_impl+0x36>
    return 0;
 8028dce:	2300      	movs	r3, #0
 8028dd0:	e078      	b.n	8028ec4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8028dd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028dd6:	2b00      	cmp	r3, #0
 8028dd8:	da10      	bge.n	8028dfc <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8028dda:	887b      	ldrh	r3, [r7, #2]
 8028ddc:	425b      	negs	r3, r3
 8028dde:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8028de0:	687b      	ldr	r3, [r7, #4]
 8028de2:	895b      	ldrh	r3, [r3, #10]
 8028de4:	89fa      	ldrh	r2, [r7, #14]
 8028de6:	429a      	cmp	r2, r3
 8028de8:	d90a      	bls.n	8028e00 <pbuf_header_impl+0x64>
 8028dea:	4b38      	ldr	r3, [pc, #224]	; (8028ecc <pbuf_header_impl+0x130>)
 8028dec:	f240 2247 	movw	r2, #583	; 0x247
 8028df0:	4939      	ldr	r1, [pc, #228]	; (8028ed8 <pbuf_header_impl+0x13c>)
 8028df2:	4838      	ldr	r0, [pc, #224]	; (8028ed4 <pbuf_header_impl+0x138>)
 8028df4:	f008 fae6 	bl	80313c4 <iprintf>
 8028df8:	2301      	movs	r3, #1
 8028dfa:	e063      	b.n	8028ec4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8028dfc:	887b      	ldrh	r3, [r7, #2]
 8028dfe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8028e00:	687b      	ldr	r3, [r7, #4]
 8028e02:	7b1b      	ldrb	r3, [r3, #12]
 8028e04:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8028e06:	687b      	ldr	r3, [r7, #4]
 8028e08:	685b      	ldr	r3, [r3, #4]
 8028e0a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8028e0c:	89bb      	ldrh	r3, [r7, #12]
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d002      	beq.n	8028e18 <pbuf_header_impl+0x7c>
 8028e12:	89bb      	ldrh	r3, [r7, #12]
 8028e14:	2b03      	cmp	r3, #3
 8028e16:	d112      	bne.n	8028e3e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8028e18:	687b      	ldr	r3, [r7, #4]
 8028e1a:	685a      	ldr	r2, [r3, #4]
 8028e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028e20:	425b      	negs	r3, r3
 8028e22:	441a      	add	r2, r3
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8028e28:	687b      	ldr	r3, [r7, #4]
 8028e2a:	685a      	ldr	r2, [r3, #4]
 8028e2c:	687b      	ldr	r3, [r7, #4]
 8028e2e:	3310      	adds	r3, #16
 8028e30:	429a      	cmp	r2, r3
 8028e32:	d238      	bcs.n	8028ea6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8028e34:	687b      	ldr	r3, [r7, #4]
 8028e36:	68ba      	ldr	r2, [r7, #8]
 8028e38:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8028e3a:	2301      	movs	r3, #1
 8028e3c:	e042      	b.n	8028ec4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8028e3e:	89bb      	ldrh	r3, [r7, #12]
 8028e40:	2b02      	cmp	r3, #2
 8028e42:	d002      	beq.n	8028e4a <pbuf_header_impl+0xae>
 8028e44:	89bb      	ldrh	r3, [r7, #12]
 8028e46:	2b01      	cmp	r3, #1
 8028e48:	d124      	bne.n	8028e94 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8028e4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	da0d      	bge.n	8028e6e <pbuf_header_impl+0xd2>
 8028e52:	687b      	ldr	r3, [r7, #4]
 8028e54:	895b      	ldrh	r3, [r3, #10]
 8028e56:	89fa      	ldrh	r2, [r7, #14]
 8028e58:	429a      	cmp	r2, r3
 8028e5a:	d808      	bhi.n	8028e6e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	685a      	ldr	r2, [r3, #4]
 8028e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028e64:	425b      	negs	r3, r3
 8028e66:	441a      	add	r2, r3
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	605a      	str	r2, [r3, #4]
 8028e6c:	e011      	b.n	8028e92 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8028e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	dd0b      	ble.n	8028e8e <pbuf_header_impl+0xf2>
 8028e76:	787b      	ldrb	r3, [r7, #1]
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	d008      	beq.n	8028e8e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8028e7c:	687b      	ldr	r3, [r7, #4]
 8028e7e:	685a      	ldr	r2, [r3, #4]
 8028e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028e84:	425b      	negs	r3, r3
 8028e86:	441a      	add	r2, r3
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	605a      	str	r2, [r3, #4]
 8028e8c:	e001      	b.n	8028e92 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8028e8e:	2301      	movs	r3, #1
 8028e90:	e018      	b.n	8028ec4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8028e92:	e008      	b.n	8028ea6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8028e94:	4b0d      	ldr	r3, [pc, #52]	; (8028ecc <pbuf_header_impl+0x130>)
 8028e96:	f240 2277 	movw	r2, #631	; 0x277
 8028e9a:	4910      	ldr	r1, [pc, #64]	; (8028edc <pbuf_header_impl+0x140>)
 8028e9c:	480d      	ldr	r0, [pc, #52]	; (8028ed4 <pbuf_header_impl+0x138>)
 8028e9e:	f008 fa91 	bl	80313c4 <iprintf>
    return 1;
 8028ea2:	2301      	movs	r3, #1
 8028ea4:	e00e      	b.n	8028ec4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8028ea6:	687b      	ldr	r3, [r7, #4]
 8028ea8:	895a      	ldrh	r2, [r3, #10]
 8028eaa:	887b      	ldrh	r3, [r7, #2]
 8028eac:	4413      	add	r3, r2
 8028eae:	b29a      	uxth	r2, r3
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8028eb4:	687b      	ldr	r3, [r7, #4]
 8028eb6:	891a      	ldrh	r2, [r3, #8]
 8028eb8:	887b      	ldrh	r3, [r7, #2]
 8028eba:	4413      	add	r3, r2
 8028ebc:	b29a      	uxth	r2, r3
 8028ebe:	687b      	ldr	r3, [r7, #4]
 8028ec0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8028ec2:	2300      	movs	r3, #0
}
 8028ec4:	4618      	mov	r0, r3
 8028ec6:	3710      	adds	r7, #16
 8028ec8:	46bd      	mov	sp, r7
 8028eca:	bd80      	pop	{r7, pc}
 8028ecc:	08033a38 	.word	0x08033a38
 8028ed0:	08033c70 	.word	0x08033c70
 8028ed4:	08033a84 	.word	0x08033a84
 8028ed8:	08033c7c 	.word	0x08033c7c
 8028edc:	08033c9c 	.word	0x08033c9c

08028ee0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8028ee0:	b580      	push	{r7, lr}
 8028ee2:	b082      	sub	sp, #8
 8028ee4:	af00      	add	r7, sp, #0
 8028ee6:	6078      	str	r0, [r7, #4]
 8028ee8:	460b      	mov	r3, r1
 8028eea:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8028eec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028ef0:	2200      	movs	r2, #0
 8028ef2:	4619      	mov	r1, r3
 8028ef4:	6878      	ldr	r0, [r7, #4]
 8028ef6:	f7ff ff51 	bl	8028d9c <pbuf_header_impl>
 8028efa:	4603      	mov	r3, r0
}
 8028efc:	4618      	mov	r0, r3
 8028efe:	3708      	adds	r7, #8
 8028f00:	46bd      	mov	sp, r7
 8028f02:	bd80      	pop	{r7, pc}

08028f04 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8028f04:	b580      	push	{r7, lr}
 8028f06:	b082      	sub	sp, #8
 8028f08:	af00      	add	r7, sp, #0
 8028f0a:	6078      	str	r0, [r7, #4]
 8028f0c:	460b      	mov	r3, r1
 8028f0e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8028f10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028f14:	2201      	movs	r2, #1
 8028f16:	4619      	mov	r1, r3
 8028f18:	6878      	ldr	r0, [r7, #4]
 8028f1a:	f7ff ff3f 	bl	8028d9c <pbuf_header_impl>
 8028f1e:	4603      	mov	r3, r0
}
 8028f20:	4618      	mov	r0, r3
 8028f22:	3708      	adds	r7, #8
 8028f24:	46bd      	mov	sp, r7
 8028f26:	bd80      	pop	{r7, pc}

08028f28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8028f28:	b580      	push	{r7, lr}
 8028f2a:	b086      	sub	sp, #24
 8028f2c:	af00      	add	r7, sp, #0
 8028f2e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8028f30:	687b      	ldr	r3, [r7, #4]
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	d10b      	bne.n	8028f4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8028f36:	687b      	ldr	r3, [r7, #4]
 8028f38:	2b00      	cmp	r3, #0
 8028f3a:	d106      	bne.n	8028f4a <pbuf_free+0x22>
 8028f3c:	4b3e      	ldr	r3, [pc, #248]	; (8029038 <pbuf_free+0x110>)
 8028f3e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8028f42:	493e      	ldr	r1, [pc, #248]	; (802903c <pbuf_free+0x114>)
 8028f44:	483e      	ldr	r0, [pc, #248]	; (8029040 <pbuf_free+0x118>)
 8028f46:	f008 fa3d 	bl	80313c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8028f4a:	2300      	movs	r3, #0
 8028f4c:	e070      	b.n	8029030 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8028f4e:	687b      	ldr	r3, [r7, #4]
 8028f50:	7b1b      	ldrb	r3, [r3, #12]
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	d012      	beq.n	8028f7c <pbuf_free+0x54>
 8028f56:	687b      	ldr	r3, [r7, #4]
 8028f58:	7b1b      	ldrb	r3, [r3, #12]
 8028f5a:	2b01      	cmp	r3, #1
 8028f5c:	d00e      	beq.n	8028f7c <pbuf_free+0x54>
 8028f5e:	687b      	ldr	r3, [r7, #4]
 8028f60:	7b1b      	ldrb	r3, [r3, #12]
 8028f62:	2b02      	cmp	r3, #2
 8028f64:	d00a      	beq.n	8028f7c <pbuf_free+0x54>
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	7b1b      	ldrb	r3, [r3, #12]
 8028f6a:	2b03      	cmp	r3, #3
 8028f6c:	d006      	beq.n	8028f7c <pbuf_free+0x54>
 8028f6e:	4b32      	ldr	r3, [pc, #200]	; (8029038 <pbuf_free+0x110>)
 8028f70:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8028f74:	4933      	ldr	r1, [pc, #204]	; (8029044 <pbuf_free+0x11c>)
 8028f76:	4832      	ldr	r0, [pc, #200]	; (8029040 <pbuf_free+0x118>)
 8028f78:	f008 fa24 	bl	80313c4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8028f7c:	2300      	movs	r3, #0
 8028f7e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8028f80:	e052      	b.n	8029028 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	89db      	ldrh	r3, [r3, #14]
 8028f86:	2b00      	cmp	r3, #0
 8028f88:	d106      	bne.n	8028f98 <pbuf_free+0x70>
 8028f8a:	4b2b      	ldr	r3, [pc, #172]	; (8029038 <pbuf_free+0x110>)
 8028f8c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8028f90:	492d      	ldr	r1, [pc, #180]	; (8029048 <pbuf_free+0x120>)
 8028f92:	482b      	ldr	r0, [pc, #172]	; (8029040 <pbuf_free+0x118>)
 8028f94:	f008 fa16 	bl	80313c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8028f98:	687b      	ldr	r3, [r7, #4]
 8028f9a:	89db      	ldrh	r3, [r3, #14]
 8028f9c:	3b01      	subs	r3, #1
 8028f9e:	b29a      	uxth	r2, r3
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	81da      	strh	r2, [r3, #14]
 8028fa4:	687b      	ldr	r3, [r7, #4]
 8028fa6:	89db      	ldrh	r3, [r3, #14]
 8028fa8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8028faa:	8abb      	ldrh	r3, [r7, #20]
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d139      	bne.n	8029024 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8028fb0:	687b      	ldr	r3, [r7, #4]
 8028fb2:	681b      	ldr	r3, [r3, #0]
 8028fb4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	7b1b      	ldrb	r3, [r3, #12]
 8028fba:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	7b5b      	ldrb	r3, [r3, #13]
 8028fc0:	f003 0302 	and.w	r3, r3, #2
 8028fc4:	2b00      	cmp	r3, #0
 8028fc6:	d011      	beq.n	8028fec <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8028fc8:	687b      	ldr	r3, [r7, #4]
 8028fca:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8028fcc:	68bb      	ldr	r3, [r7, #8]
 8028fce:	691b      	ldr	r3, [r3, #16]
 8028fd0:	2b00      	cmp	r3, #0
 8028fd2:	d106      	bne.n	8028fe2 <pbuf_free+0xba>
 8028fd4:	4b18      	ldr	r3, [pc, #96]	; (8029038 <pbuf_free+0x110>)
 8028fd6:	f240 22f9 	movw	r2, #761	; 0x2f9
 8028fda:	491c      	ldr	r1, [pc, #112]	; (802904c <pbuf_free+0x124>)
 8028fdc:	4818      	ldr	r0, [pc, #96]	; (8029040 <pbuf_free+0x118>)
 8028fde:	f008 f9f1 	bl	80313c4 <iprintf>
        pc->custom_free_function(p);
 8028fe2:	68bb      	ldr	r3, [r7, #8]
 8028fe4:	691b      	ldr	r3, [r3, #16]
 8028fe6:	6878      	ldr	r0, [r7, #4]
 8028fe8:	4798      	blx	r3
 8028fea:	e015      	b.n	8029018 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8028fec:	89fb      	ldrh	r3, [r7, #14]
 8028fee:	2b03      	cmp	r3, #3
 8028ff0:	d104      	bne.n	8028ffc <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8028ff2:	6879      	ldr	r1, [r7, #4]
 8028ff4:	2008      	movs	r0, #8
 8028ff6:	f7ff fa67 	bl	80284c8 <memp_free>
 8028ffa:	e00d      	b.n	8029018 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8028ffc:	89fb      	ldrh	r3, [r7, #14]
 8028ffe:	2b01      	cmp	r3, #1
 8029000:	d002      	beq.n	8029008 <pbuf_free+0xe0>
 8029002:	89fb      	ldrh	r3, [r7, #14]
 8029004:	2b02      	cmp	r3, #2
 8029006:	d104      	bne.n	8029012 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8029008:	6879      	ldr	r1, [r7, #4]
 802900a:	2007      	movs	r0, #7
 802900c:	f7ff fa5c 	bl	80284c8 <memp_free>
 8029010:	e002      	b.n	8029018 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8029012:	6878      	ldr	r0, [r7, #4]
 8029014:	f7fe ff72 	bl	8027efc <mem_free>
        }
      }
      count++;
 8029018:	7dfb      	ldrb	r3, [r7, #23]
 802901a:	3301      	adds	r3, #1
 802901c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 802901e:	693b      	ldr	r3, [r7, #16]
 8029020:	607b      	str	r3, [r7, #4]
 8029022:	e001      	b.n	8029028 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8029024:	2300      	movs	r3, #0
 8029026:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8029028:	687b      	ldr	r3, [r7, #4]
 802902a:	2b00      	cmp	r3, #0
 802902c:	d1a9      	bne.n	8028f82 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 802902e:	7dfb      	ldrb	r3, [r7, #23]
}
 8029030:	4618      	mov	r0, r3
 8029032:	3718      	adds	r7, #24
 8029034:	46bd      	mov	sp, r7
 8029036:	bd80      	pop	{r7, pc}
 8029038:	08033a38 	.word	0x08033a38
 802903c:	08033c70 	.word	0x08033c70
 8029040:	08033a84 	.word	0x08033a84
 8029044:	08033cac 	.word	0x08033cac
 8029048:	08033cc4 	.word	0x08033cc4
 802904c:	08033cdc 	.word	0x08033cdc

08029050 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8029050:	b480      	push	{r7}
 8029052:	b085      	sub	sp, #20
 8029054:	af00      	add	r7, sp, #0
 8029056:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8029058:	2300      	movs	r3, #0
 802905a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 802905c:	e005      	b.n	802906a <pbuf_clen+0x1a>
    ++len;
 802905e:	89fb      	ldrh	r3, [r7, #14]
 8029060:	3301      	adds	r3, #1
 8029062:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8029064:	687b      	ldr	r3, [r7, #4]
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802906a:	687b      	ldr	r3, [r7, #4]
 802906c:	2b00      	cmp	r3, #0
 802906e:	d1f6      	bne.n	802905e <pbuf_clen+0xe>
  }
  return len;
 8029070:	89fb      	ldrh	r3, [r7, #14]
}
 8029072:	4618      	mov	r0, r3
 8029074:	3714      	adds	r7, #20
 8029076:	46bd      	mov	sp, r7
 8029078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802907c:	4770      	bx	lr
	...

08029080 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8029080:	b580      	push	{r7, lr}
 8029082:	b082      	sub	sp, #8
 8029084:	af00      	add	r7, sp, #0
 8029086:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8029088:	687b      	ldr	r3, [r7, #4]
 802908a:	2b00      	cmp	r3, #0
 802908c:	d010      	beq.n	80290b0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	89db      	ldrh	r3, [r3, #14]
 8029092:	3301      	adds	r3, #1
 8029094:	b29a      	uxth	r2, r3
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 802909a:	687b      	ldr	r3, [r7, #4]
 802909c:	89db      	ldrh	r3, [r3, #14]
 802909e:	2b00      	cmp	r3, #0
 80290a0:	d106      	bne.n	80290b0 <pbuf_ref+0x30>
 80290a2:	4b05      	ldr	r3, [pc, #20]	; (80290b8 <pbuf_ref+0x38>)
 80290a4:	f240 3239 	movw	r2, #825	; 0x339
 80290a8:	4904      	ldr	r1, [pc, #16]	; (80290bc <pbuf_ref+0x3c>)
 80290aa:	4805      	ldr	r0, [pc, #20]	; (80290c0 <pbuf_ref+0x40>)
 80290ac:	f008 f98a 	bl	80313c4 <iprintf>
  }
}
 80290b0:	bf00      	nop
 80290b2:	3708      	adds	r7, #8
 80290b4:	46bd      	mov	sp, r7
 80290b6:	bd80      	pop	{r7, pc}
 80290b8:	08033a38 	.word	0x08033a38
 80290bc:	08033d00 	.word	0x08033d00
 80290c0:	08033a84 	.word	0x08033a84

080290c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80290c4:	b580      	push	{r7, lr}
 80290c6:	b084      	sub	sp, #16
 80290c8:	af00      	add	r7, sp, #0
 80290ca:	6078      	str	r0, [r7, #4]
 80290cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80290ce:	687b      	ldr	r3, [r7, #4]
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	d002      	beq.n	80290da <pbuf_cat+0x16>
 80290d4:	683b      	ldr	r3, [r7, #0]
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	d107      	bne.n	80290ea <pbuf_cat+0x26>
 80290da:	4b20      	ldr	r3, [pc, #128]	; (802915c <pbuf_cat+0x98>)
 80290dc:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80290e0:	491f      	ldr	r1, [pc, #124]	; (8029160 <pbuf_cat+0x9c>)
 80290e2:	4820      	ldr	r0, [pc, #128]	; (8029164 <pbuf_cat+0xa0>)
 80290e4:	f008 f96e 	bl	80313c4 <iprintf>
 80290e8:	e034      	b.n	8029154 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80290ea:	687b      	ldr	r3, [r7, #4]
 80290ec:	60fb      	str	r3, [r7, #12]
 80290ee:	e00a      	b.n	8029106 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80290f0:	68fb      	ldr	r3, [r7, #12]
 80290f2:	891a      	ldrh	r2, [r3, #8]
 80290f4:	683b      	ldr	r3, [r7, #0]
 80290f6:	891b      	ldrh	r3, [r3, #8]
 80290f8:	4413      	add	r3, r2
 80290fa:	b29a      	uxth	r2, r3
 80290fc:	68fb      	ldr	r3, [r7, #12]
 80290fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8029100:	68fb      	ldr	r3, [r7, #12]
 8029102:	681b      	ldr	r3, [r3, #0]
 8029104:	60fb      	str	r3, [r7, #12]
 8029106:	68fb      	ldr	r3, [r7, #12]
 8029108:	681b      	ldr	r3, [r3, #0]
 802910a:	2b00      	cmp	r3, #0
 802910c:	d1f0      	bne.n	80290f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	891a      	ldrh	r2, [r3, #8]
 8029112:	68fb      	ldr	r3, [r7, #12]
 8029114:	895b      	ldrh	r3, [r3, #10]
 8029116:	429a      	cmp	r2, r3
 8029118:	d006      	beq.n	8029128 <pbuf_cat+0x64>
 802911a:	4b10      	ldr	r3, [pc, #64]	; (802915c <pbuf_cat+0x98>)
 802911c:	f240 3255 	movw	r2, #853	; 0x355
 8029120:	4911      	ldr	r1, [pc, #68]	; (8029168 <pbuf_cat+0xa4>)
 8029122:	4810      	ldr	r0, [pc, #64]	; (8029164 <pbuf_cat+0xa0>)
 8029124:	f008 f94e 	bl	80313c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8029128:	68fb      	ldr	r3, [r7, #12]
 802912a:	681b      	ldr	r3, [r3, #0]
 802912c:	2b00      	cmp	r3, #0
 802912e:	d006      	beq.n	802913e <pbuf_cat+0x7a>
 8029130:	4b0a      	ldr	r3, [pc, #40]	; (802915c <pbuf_cat+0x98>)
 8029132:	f240 3256 	movw	r2, #854	; 0x356
 8029136:	490d      	ldr	r1, [pc, #52]	; (802916c <pbuf_cat+0xa8>)
 8029138:	480a      	ldr	r0, [pc, #40]	; (8029164 <pbuf_cat+0xa0>)
 802913a:	f008 f943 	bl	80313c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 802913e:	68fb      	ldr	r3, [r7, #12]
 8029140:	891a      	ldrh	r2, [r3, #8]
 8029142:	683b      	ldr	r3, [r7, #0]
 8029144:	891b      	ldrh	r3, [r3, #8]
 8029146:	4413      	add	r3, r2
 8029148:	b29a      	uxth	r2, r3
 802914a:	68fb      	ldr	r3, [r7, #12]
 802914c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802914e:	68fb      	ldr	r3, [r7, #12]
 8029150:	683a      	ldr	r2, [r7, #0]
 8029152:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8029154:	3710      	adds	r7, #16
 8029156:	46bd      	mov	sp, r7
 8029158:	bd80      	pop	{r7, pc}
 802915a:	bf00      	nop
 802915c:	08033a38 	.word	0x08033a38
 8029160:	08033d14 	.word	0x08033d14
 8029164:	08033a84 	.word	0x08033a84
 8029168:	08033d4c 	.word	0x08033d4c
 802916c:	08033d7c 	.word	0x08033d7c

08029170 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8029170:	b580      	push	{r7, lr}
 8029172:	b082      	sub	sp, #8
 8029174:	af00      	add	r7, sp, #0
 8029176:	6078      	str	r0, [r7, #4]
 8029178:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 802917a:	6839      	ldr	r1, [r7, #0]
 802917c:	6878      	ldr	r0, [r7, #4]
 802917e:	f7ff ffa1 	bl	80290c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8029182:	6838      	ldr	r0, [r7, #0]
 8029184:	f7ff ff7c 	bl	8029080 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8029188:	bf00      	nop
 802918a:	3708      	adds	r7, #8
 802918c:	46bd      	mov	sp, r7
 802918e:	bd80      	pop	{r7, pc}

08029190 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8029190:	b580      	push	{r7, lr}
 8029192:	b084      	sub	sp, #16
 8029194:	af00      	add	r7, sp, #0
 8029196:	6078      	str	r0, [r7, #4]
 8029198:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 802919a:	2300      	movs	r3, #0
 802919c:	81fb      	strh	r3, [r7, #14]
 802919e:	2300      	movs	r3, #0
 80291a0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	2b00      	cmp	r3, #0
 80291a6:	d008      	beq.n	80291ba <pbuf_copy+0x2a>
 80291a8:	683b      	ldr	r3, [r7, #0]
 80291aa:	2b00      	cmp	r3, #0
 80291ac:	d005      	beq.n	80291ba <pbuf_copy+0x2a>
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	891a      	ldrh	r2, [r3, #8]
 80291b2:	683b      	ldr	r3, [r7, #0]
 80291b4:	891b      	ldrh	r3, [r3, #8]
 80291b6:	429a      	cmp	r2, r3
 80291b8:	d209      	bcs.n	80291ce <pbuf_copy+0x3e>
 80291ba:	4b54      	ldr	r3, [pc, #336]	; (802930c <pbuf_copy+0x17c>)
 80291bc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80291c0:	4953      	ldr	r1, [pc, #332]	; (8029310 <pbuf_copy+0x180>)
 80291c2:	4854      	ldr	r0, [pc, #336]	; (8029314 <pbuf_copy+0x184>)
 80291c4:	f008 f8fe 	bl	80313c4 <iprintf>
 80291c8:	f06f 030f 	mvn.w	r3, #15
 80291cc:	e099      	b.n	8029302 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	895b      	ldrh	r3, [r3, #10]
 80291d2:	461a      	mov	r2, r3
 80291d4:	89fb      	ldrh	r3, [r7, #14]
 80291d6:	1ad2      	subs	r2, r2, r3
 80291d8:	683b      	ldr	r3, [r7, #0]
 80291da:	895b      	ldrh	r3, [r3, #10]
 80291dc:	4619      	mov	r1, r3
 80291de:	89bb      	ldrh	r3, [r7, #12]
 80291e0:	1acb      	subs	r3, r1, r3
 80291e2:	429a      	cmp	r2, r3
 80291e4:	db05      	blt.n	80291f2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80291e6:	683b      	ldr	r3, [r7, #0]
 80291e8:	895a      	ldrh	r2, [r3, #10]
 80291ea:	89bb      	ldrh	r3, [r7, #12]
 80291ec:	1ad3      	subs	r3, r2, r3
 80291ee:	817b      	strh	r3, [r7, #10]
 80291f0:	e004      	b.n	80291fc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80291f2:	687b      	ldr	r3, [r7, #4]
 80291f4:	895a      	ldrh	r2, [r3, #10]
 80291f6:	89fb      	ldrh	r3, [r7, #14]
 80291f8:	1ad3      	subs	r3, r2, r3
 80291fa:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80291fc:	687b      	ldr	r3, [r7, #4]
 80291fe:	685a      	ldr	r2, [r3, #4]
 8029200:	89fb      	ldrh	r3, [r7, #14]
 8029202:	18d0      	adds	r0, r2, r3
 8029204:	683b      	ldr	r3, [r7, #0]
 8029206:	685a      	ldr	r2, [r3, #4]
 8029208:	89bb      	ldrh	r3, [r7, #12]
 802920a:	4413      	add	r3, r2
 802920c:	897a      	ldrh	r2, [r7, #10]
 802920e:	4619      	mov	r1, r3
 8029210:	f007 ffe2 	bl	80311d8 <memcpy>
    offset_to += len;
 8029214:	89fa      	ldrh	r2, [r7, #14]
 8029216:	897b      	ldrh	r3, [r7, #10]
 8029218:	4413      	add	r3, r2
 802921a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 802921c:	89ba      	ldrh	r2, [r7, #12]
 802921e:	897b      	ldrh	r3, [r7, #10]
 8029220:	4413      	add	r3, r2
 8029222:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8029224:	687b      	ldr	r3, [r7, #4]
 8029226:	895b      	ldrh	r3, [r3, #10]
 8029228:	89fa      	ldrh	r2, [r7, #14]
 802922a:	429a      	cmp	r2, r3
 802922c:	d906      	bls.n	802923c <pbuf_copy+0xac>
 802922e:	4b37      	ldr	r3, [pc, #220]	; (802930c <pbuf_copy+0x17c>)
 8029230:	f240 32cd 	movw	r2, #973	; 0x3cd
 8029234:	4938      	ldr	r1, [pc, #224]	; (8029318 <pbuf_copy+0x188>)
 8029236:	4837      	ldr	r0, [pc, #220]	; (8029314 <pbuf_copy+0x184>)
 8029238:	f008 f8c4 	bl	80313c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 802923c:	683b      	ldr	r3, [r7, #0]
 802923e:	895b      	ldrh	r3, [r3, #10]
 8029240:	89ba      	ldrh	r2, [r7, #12]
 8029242:	429a      	cmp	r2, r3
 8029244:	d906      	bls.n	8029254 <pbuf_copy+0xc4>
 8029246:	4b31      	ldr	r3, [pc, #196]	; (802930c <pbuf_copy+0x17c>)
 8029248:	f240 32ce 	movw	r2, #974	; 0x3ce
 802924c:	4933      	ldr	r1, [pc, #204]	; (802931c <pbuf_copy+0x18c>)
 802924e:	4831      	ldr	r0, [pc, #196]	; (8029314 <pbuf_copy+0x184>)
 8029250:	f008 f8b8 	bl	80313c4 <iprintf>
    if (offset_from >= p_from->len) {
 8029254:	683b      	ldr	r3, [r7, #0]
 8029256:	895b      	ldrh	r3, [r3, #10]
 8029258:	89ba      	ldrh	r2, [r7, #12]
 802925a:	429a      	cmp	r2, r3
 802925c:	d304      	bcc.n	8029268 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 802925e:	2300      	movs	r3, #0
 8029260:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8029262:	683b      	ldr	r3, [r7, #0]
 8029264:	681b      	ldr	r3, [r3, #0]
 8029266:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	895b      	ldrh	r3, [r3, #10]
 802926c:	89fa      	ldrh	r2, [r7, #14]
 802926e:	429a      	cmp	r2, r3
 8029270:	d114      	bne.n	802929c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8029272:	2300      	movs	r3, #0
 8029274:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	681b      	ldr	r3, [r3, #0]
 802927a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 802927c:	687b      	ldr	r3, [r7, #4]
 802927e:	2b00      	cmp	r3, #0
 8029280:	d10c      	bne.n	802929c <pbuf_copy+0x10c>
 8029282:	683b      	ldr	r3, [r7, #0]
 8029284:	2b00      	cmp	r3, #0
 8029286:	d009      	beq.n	802929c <pbuf_copy+0x10c>
 8029288:	4b20      	ldr	r3, [pc, #128]	; (802930c <pbuf_copy+0x17c>)
 802928a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 802928e:	4924      	ldr	r1, [pc, #144]	; (8029320 <pbuf_copy+0x190>)
 8029290:	4820      	ldr	r0, [pc, #128]	; (8029314 <pbuf_copy+0x184>)
 8029292:	f008 f897 	bl	80313c4 <iprintf>
 8029296:	f06f 030f 	mvn.w	r3, #15
 802929a:	e032      	b.n	8029302 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 802929c:	683b      	ldr	r3, [r7, #0]
 802929e:	2b00      	cmp	r3, #0
 80292a0:	d013      	beq.n	80292ca <pbuf_copy+0x13a>
 80292a2:	683b      	ldr	r3, [r7, #0]
 80292a4:	895a      	ldrh	r2, [r3, #10]
 80292a6:	683b      	ldr	r3, [r7, #0]
 80292a8:	891b      	ldrh	r3, [r3, #8]
 80292aa:	429a      	cmp	r2, r3
 80292ac:	d10d      	bne.n	80292ca <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80292ae:	683b      	ldr	r3, [r7, #0]
 80292b0:	681b      	ldr	r3, [r3, #0]
 80292b2:	2b00      	cmp	r3, #0
 80292b4:	d009      	beq.n	80292ca <pbuf_copy+0x13a>
 80292b6:	4b15      	ldr	r3, [pc, #84]	; (802930c <pbuf_copy+0x17c>)
 80292b8:	f240 32dd 	movw	r2, #989	; 0x3dd
 80292bc:	4919      	ldr	r1, [pc, #100]	; (8029324 <pbuf_copy+0x194>)
 80292be:	4815      	ldr	r0, [pc, #84]	; (8029314 <pbuf_copy+0x184>)
 80292c0:	f008 f880 	bl	80313c4 <iprintf>
 80292c4:	f06f 0305 	mvn.w	r3, #5
 80292c8:	e01b      	b.n	8029302 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	2b00      	cmp	r3, #0
 80292ce:	d013      	beq.n	80292f8 <pbuf_copy+0x168>
 80292d0:	687b      	ldr	r3, [r7, #4]
 80292d2:	895a      	ldrh	r2, [r3, #10]
 80292d4:	687b      	ldr	r3, [r7, #4]
 80292d6:	891b      	ldrh	r3, [r3, #8]
 80292d8:	429a      	cmp	r2, r3
 80292da:	d10d      	bne.n	80292f8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	681b      	ldr	r3, [r3, #0]
 80292e0:	2b00      	cmp	r3, #0
 80292e2:	d009      	beq.n	80292f8 <pbuf_copy+0x168>
 80292e4:	4b09      	ldr	r3, [pc, #36]	; (802930c <pbuf_copy+0x17c>)
 80292e6:	f240 32e2 	movw	r2, #994	; 0x3e2
 80292ea:	490e      	ldr	r1, [pc, #56]	; (8029324 <pbuf_copy+0x194>)
 80292ec:	4809      	ldr	r0, [pc, #36]	; (8029314 <pbuf_copy+0x184>)
 80292ee:	f008 f869 	bl	80313c4 <iprintf>
 80292f2:	f06f 0305 	mvn.w	r3, #5
 80292f6:	e004      	b.n	8029302 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80292f8:	683b      	ldr	r3, [r7, #0]
 80292fa:	2b00      	cmp	r3, #0
 80292fc:	f47f af67 	bne.w	80291ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8029300:	2300      	movs	r3, #0
}
 8029302:	4618      	mov	r0, r3
 8029304:	3710      	adds	r7, #16
 8029306:	46bd      	mov	sp, r7
 8029308:	bd80      	pop	{r7, pc}
 802930a:	bf00      	nop
 802930c:	08033a38 	.word	0x08033a38
 8029310:	08033dc8 	.word	0x08033dc8
 8029314:	08033a84 	.word	0x08033a84
 8029318:	08033df8 	.word	0x08033df8
 802931c:	08033e10 	.word	0x08033e10
 8029320:	08033e2c 	.word	0x08033e2c
 8029324:	08033e3c 	.word	0x08033e3c

08029328 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8029328:	b580      	push	{r7, lr}
 802932a:	b088      	sub	sp, #32
 802932c:	af00      	add	r7, sp, #0
 802932e:	60f8      	str	r0, [r7, #12]
 8029330:	60b9      	str	r1, [r7, #8]
 8029332:	4611      	mov	r1, r2
 8029334:	461a      	mov	r2, r3
 8029336:	460b      	mov	r3, r1
 8029338:	80fb      	strh	r3, [r7, #6]
 802933a:	4613      	mov	r3, r2
 802933c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 802933e:	2300      	movs	r3, #0
 8029340:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8029342:	68fb      	ldr	r3, [r7, #12]
 8029344:	2b00      	cmp	r3, #0
 8029346:	d108      	bne.n	802935a <pbuf_copy_partial+0x32>
 8029348:	4b30      	ldr	r3, [pc, #192]	; (802940c <pbuf_copy_partial+0xe4>)
 802934a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802934e:	4930      	ldr	r1, [pc, #192]	; (8029410 <pbuf_copy_partial+0xe8>)
 8029350:	4830      	ldr	r0, [pc, #192]	; (8029414 <pbuf_copy_partial+0xec>)
 8029352:	f008 f837 	bl	80313c4 <iprintf>
 8029356:	2300      	movs	r3, #0
 8029358:	e054      	b.n	8029404 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 802935a:	68bb      	ldr	r3, [r7, #8]
 802935c:	2b00      	cmp	r3, #0
 802935e:	d108      	bne.n	8029372 <pbuf_copy_partial+0x4a>
 8029360:	4b2a      	ldr	r3, [pc, #168]	; (802940c <pbuf_copy_partial+0xe4>)
 8029362:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029366:	492c      	ldr	r1, [pc, #176]	; (8029418 <pbuf_copy_partial+0xf0>)
 8029368:	482a      	ldr	r0, [pc, #168]	; (8029414 <pbuf_copy_partial+0xec>)
 802936a:	f008 f82b 	bl	80313c4 <iprintf>
 802936e:	2300      	movs	r3, #0
 8029370:	e048      	b.n	8029404 <pbuf_copy_partial+0xdc>

  left = 0;
 8029372:	2300      	movs	r3, #0
 8029374:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8029376:	68fb      	ldr	r3, [r7, #12]
 8029378:	2b00      	cmp	r3, #0
 802937a:	d002      	beq.n	8029382 <pbuf_copy_partial+0x5a>
 802937c:	68bb      	ldr	r3, [r7, #8]
 802937e:	2b00      	cmp	r3, #0
 8029380:	d101      	bne.n	8029386 <pbuf_copy_partial+0x5e>
    return 0;
 8029382:	2300      	movs	r3, #0
 8029384:	e03e      	b.n	8029404 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8029386:	68fb      	ldr	r3, [r7, #12]
 8029388:	61fb      	str	r3, [r7, #28]
 802938a:	e034      	b.n	80293f6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 802938c:	88bb      	ldrh	r3, [r7, #4]
 802938e:	2b00      	cmp	r3, #0
 8029390:	d00a      	beq.n	80293a8 <pbuf_copy_partial+0x80>
 8029392:	69fb      	ldr	r3, [r7, #28]
 8029394:	895b      	ldrh	r3, [r3, #10]
 8029396:	88ba      	ldrh	r2, [r7, #4]
 8029398:	429a      	cmp	r2, r3
 802939a:	d305      	bcc.n	80293a8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 802939c:	69fb      	ldr	r3, [r7, #28]
 802939e:	895b      	ldrh	r3, [r3, #10]
 80293a0:	88ba      	ldrh	r2, [r7, #4]
 80293a2:	1ad3      	subs	r3, r2, r3
 80293a4:	80bb      	strh	r3, [r7, #4]
 80293a6:	e023      	b.n	80293f0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80293a8:	69fb      	ldr	r3, [r7, #28]
 80293aa:	895a      	ldrh	r2, [r3, #10]
 80293ac:	88bb      	ldrh	r3, [r7, #4]
 80293ae:	1ad3      	subs	r3, r2, r3
 80293b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80293b2:	8b3a      	ldrh	r2, [r7, #24]
 80293b4:	88fb      	ldrh	r3, [r7, #6]
 80293b6:	429a      	cmp	r2, r3
 80293b8:	d901      	bls.n	80293be <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80293ba:	88fb      	ldrh	r3, [r7, #6]
 80293bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80293be:	8b7b      	ldrh	r3, [r7, #26]
 80293c0:	68ba      	ldr	r2, [r7, #8]
 80293c2:	18d0      	adds	r0, r2, r3
 80293c4:	69fb      	ldr	r3, [r7, #28]
 80293c6:	685a      	ldr	r2, [r3, #4]
 80293c8:	88bb      	ldrh	r3, [r7, #4]
 80293ca:	4413      	add	r3, r2
 80293cc:	8b3a      	ldrh	r2, [r7, #24]
 80293ce:	4619      	mov	r1, r3
 80293d0:	f007 ff02 	bl	80311d8 <memcpy>
      copied_total += buf_copy_len;
 80293d4:	8afa      	ldrh	r2, [r7, #22]
 80293d6:	8b3b      	ldrh	r3, [r7, #24]
 80293d8:	4413      	add	r3, r2
 80293da:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80293dc:	8b7a      	ldrh	r2, [r7, #26]
 80293de:	8b3b      	ldrh	r3, [r7, #24]
 80293e0:	4413      	add	r3, r2
 80293e2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80293e4:	88fa      	ldrh	r2, [r7, #6]
 80293e6:	8b3b      	ldrh	r3, [r7, #24]
 80293e8:	1ad3      	subs	r3, r2, r3
 80293ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80293ec:	2300      	movs	r3, #0
 80293ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80293f0:	69fb      	ldr	r3, [r7, #28]
 80293f2:	681b      	ldr	r3, [r3, #0]
 80293f4:	61fb      	str	r3, [r7, #28]
 80293f6:	88fb      	ldrh	r3, [r7, #6]
 80293f8:	2b00      	cmp	r3, #0
 80293fa:	d002      	beq.n	8029402 <pbuf_copy_partial+0xda>
 80293fc:	69fb      	ldr	r3, [r7, #28]
 80293fe:	2b00      	cmp	r3, #0
 8029400:	d1c4      	bne.n	802938c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8029402:	8afb      	ldrh	r3, [r7, #22]
}
 8029404:	4618      	mov	r0, r3
 8029406:	3720      	adds	r7, #32
 8029408:	46bd      	mov	sp, r7
 802940a:	bd80      	pop	{r7, pc}
 802940c:	08033a38 	.word	0x08033a38
 8029410:	08033e68 	.word	0x08033e68
 8029414:	08033a84 	.word	0x08033a84
 8029418:	08033e88 	.word	0x08033e88

0802941c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 802941c:	b480      	push	{r7}
 802941e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8029420:	bf00      	nop
 8029422:	46bd      	mov	sp, r7
 8029424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029428:	4770      	bx	lr
	...

0802942c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 802942c:	b580      	push	{r7, lr}
 802942e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8029430:	f000 ff8c 	bl	802a34c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8029434:	4b07      	ldr	r3, [pc, #28]	; (8029454 <tcp_tmr+0x28>)
 8029436:	781b      	ldrb	r3, [r3, #0]
 8029438:	3301      	adds	r3, #1
 802943a:	b2da      	uxtb	r2, r3
 802943c:	4b05      	ldr	r3, [pc, #20]	; (8029454 <tcp_tmr+0x28>)
 802943e:	701a      	strb	r2, [r3, #0]
 8029440:	4b04      	ldr	r3, [pc, #16]	; (8029454 <tcp_tmr+0x28>)
 8029442:	781b      	ldrb	r3, [r3, #0]
 8029444:	f003 0301 	and.w	r3, r3, #1
 8029448:	2b00      	cmp	r3, #0
 802944a:	d001      	beq.n	8029450 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 802944c:	f000 fcbc 	bl	8029dc8 <tcp_slowtmr>
  }
}
 8029450:	bf00      	nop
 8029452:	bd80      	pop	{r7, pc}
 8029454:	20006a55 	.word	0x20006a55

08029458 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8029458:	b480      	push	{r7}
 802945a:	b085      	sub	sp, #20
 802945c:	af00      	add	r7, sp, #0
 802945e:	6078      	str	r0, [r7, #4]
 8029460:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	60fb      	str	r3, [r7, #12]
 8029466:	e00a      	b.n	802947e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802946c:	683a      	ldr	r2, [r7, #0]
 802946e:	429a      	cmp	r2, r3
 8029470:	d102      	bne.n	8029478 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8029472:	68fb      	ldr	r3, [r7, #12]
 8029474:	2200      	movs	r2, #0
 8029476:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8029478:	68fb      	ldr	r3, [r7, #12]
 802947a:	68db      	ldr	r3, [r3, #12]
 802947c:	60fb      	str	r3, [r7, #12]
 802947e:	68fb      	ldr	r3, [r7, #12]
 8029480:	2b00      	cmp	r3, #0
 8029482:	d1f1      	bne.n	8029468 <tcp_remove_listener+0x10>
      }
   }
}
 8029484:	bf00      	nop
 8029486:	bf00      	nop
 8029488:	3714      	adds	r7, #20
 802948a:	46bd      	mov	sp, r7
 802948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029490:	4770      	bx	lr
	...

08029494 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8029494:	b580      	push	{r7, lr}
 8029496:	b084      	sub	sp, #16
 8029498:	af00      	add	r7, sp, #0
 802949a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	2b00      	cmp	r3, #0
 80294a0:	d105      	bne.n	80294ae <tcp_listen_closed+0x1a>
 80294a2:	4b13      	ldr	r3, [pc, #76]	; (80294f0 <tcp_listen_closed+0x5c>)
 80294a4:	22c0      	movs	r2, #192	; 0xc0
 80294a6:	4913      	ldr	r1, [pc, #76]	; (80294f4 <tcp_listen_closed+0x60>)
 80294a8:	4813      	ldr	r0, [pc, #76]	; (80294f8 <tcp_listen_closed+0x64>)
 80294aa:	f007 ff8b 	bl	80313c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	7d1b      	ldrb	r3, [r3, #20]
 80294b2:	2b01      	cmp	r3, #1
 80294b4:	d005      	beq.n	80294c2 <tcp_listen_closed+0x2e>
 80294b6:	4b0e      	ldr	r3, [pc, #56]	; (80294f0 <tcp_listen_closed+0x5c>)
 80294b8:	22c1      	movs	r2, #193	; 0xc1
 80294ba:	4910      	ldr	r1, [pc, #64]	; (80294fc <tcp_listen_closed+0x68>)
 80294bc:	480e      	ldr	r0, [pc, #56]	; (80294f8 <tcp_listen_closed+0x64>)
 80294be:	f007 ff81 	bl	80313c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80294c2:	2301      	movs	r3, #1
 80294c4:	60fb      	str	r3, [r7, #12]
 80294c6:	e00b      	b.n	80294e0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80294c8:	4a0d      	ldr	r2, [pc, #52]	; (8029500 <tcp_listen_closed+0x6c>)
 80294ca:	68fb      	ldr	r3, [r7, #12]
 80294cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80294d0:	681b      	ldr	r3, [r3, #0]
 80294d2:	6879      	ldr	r1, [r7, #4]
 80294d4:	4618      	mov	r0, r3
 80294d6:	f7ff ffbf 	bl	8029458 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80294da:	68fb      	ldr	r3, [r7, #12]
 80294dc:	3301      	adds	r3, #1
 80294de:	60fb      	str	r3, [r7, #12]
 80294e0:	68fb      	ldr	r3, [r7, #12]
 80294e2:	2b03      	cmp	r3, #3
 80294e4:	d9f0      	bls.n	80294c8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80294e6:	bf00      	nop
 80294e8:	bf00      	nop
 80294ea:	3710      	adds	r7, #16
 80294ec:	46bd      	mov	sp, r7
 80294ee:	bd80      	pop	{r7, pc}
 80294f0:	08033fbc 	.word	0x08033fbc
 80294f4:	08033fec 	.word	0x08033fec
 80294f8:	08033ff8 	.word	0x08033ff8
 80294fc:	08034020 	.word	0x08034020
 8029500:	08035400 	.word	0x08035400

08029504 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8029504:	b5b0      	push	{r4, r5, r7, lr}
 8029506:	b086      	sub	sp, #24
 8029508:	af02      	add	r7, sp, #8
 802950a:	6078      	str	r0, [r7, #4]
 802950c:	460b      	mov	r3, r1
 802950e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8029510:	78fb      	ldrb	r3, [r7, #3]
 8029512:	2b00      	cmp	r3, #0
 8029514:	d075      	beq.n	8029602 <tcp_close_shutdown+0xfe>
 8029516:	687b      	ldr	r3, [r7, #4]
 8029518:	7d1b      	ldrb	r3, [r3, #20]
 802951a:	2b04      	cmp	r3, #4
 802951c:	d003      	beq.n	8029526 <tcp_close_shutdown+0x22>
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	7d1b      	ldrb	r3, [r3, #20]
 8029522:	2b07      	cmp	r3, #7
 8029524:	d16d      	bne.n	8029602 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8029526:	687b      	ldr	r3, [r7, #4]
 8029528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802952a:	2b00      	cmp	r3, #0
 802952c:	d104      	bne.n	8029538 <tcp_close_shutdown+0x34>
 802952e:	687b      	ldr	r3, [r7, #4]
 8029530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8029532:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8029536:	d064      	beq.n	8029602 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8029538:	687b      	ldr	r3, [r7, #4]
 802953a:	7e9b      	ldrb	r3, [r3, #26]
 802953c:	f003 0310 	and.w	r3, r3, #16
 8029540:	2b00      	cmp	r3, #0
 8029542:	d106      	bne.n	8029552 <tcp_close_shutdown+0x4e>
 8029544:	4b5b      	ldr	r3, [pc, #364]	; (80296b4 <tcp_close_shutdown+0x1b0>)
 8029546:	f240 120f 	movw	r2, #271	; 0x10f
 802954a:	495b      	ldr	r1, [pc, #364]	; (80296b8 <tcp_close_shutdown+0x1b4>)
 802954c:	485b      	ldr	r0, [pc, #364]	; (80296bc <tcp_close_shutdown+0x1b8>)
 802954e:	f007 ff39 	bl	80313c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8029552:	687b      	ldr	r3, [r7, #4]
 8029554:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802955a:	687c      	ldr	r4, [r7, #4]
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	1d1d      	adds	r5, r3, #4
 8029560:	687b      	ldr	r3, [r7, #4]
 8029562:	8adb      	ldrh	r3, [r3, #22]
 8029564:	687a      	ldr	r2, [r7, #4]
 8029566:	8b12      	ldrh	r2, [r2, #24]
 8029568:	9201      	str	r2, [sp, #4]
 802956a:	9300      	str	r3, [sp, #0]
 802956c:	462b      	mov	r3, r5
 802956e:	4622      	mov	r2, r4
 8029570:	f004 fef0 	bl	802e354 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8029574:	6878      	ldr	r0, [r7, #4]
 8029576:	f001 fa29 	bl	802a9cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 802957a:	4b51      	ldr	r3, [pc, #324]	; (80296c0 <tcp_close_shutdown+0x1bc>)
 802957c:	681b      	ldr	r3, [r3, #0]
 802957e:	687a      	ldr	r2, [r7, #4]
 8029580:	429a      	cmp	r2, r3
 8029582:	d105      	bne.n	8029590 <tcp_close_shutdown+0x8c>
 8029584:	4b4e      	ldr	r3, [pc, #312]	; (80296c0 <tcp_close_shutdown+0x1bc>)
 8029586:	681b      	ldr	r3, [r3, #0]
 8029588:	68db      	ldr	r3, [r3, #12]
 802958a:	4a4d      	ldr	r2, [pc, #308]	; (80296c0 <tcp_close_shutdown+0x1bc>)
 802958c:	6013      	str	r3, [r2, #0]
 802958e:	e013      	b.n	80295b8 <tcp_close_shutdown+0xb4>
 8029590:	4b4b      	ldr	r3, [pc, #300]	; (80296c0 <tcp_close_shutdown+0x1bc>)
 8029592:	681b      	ldr	r3, [r3, #0]
 8029594:	60fb      	str	r3, [r7, #12]
 8029596:	e00c      	b.n	80295b2 <tcp_close_shutdown+0xae>
 8029598:	68fb      	ldr	r3, [r7, #12]
 802959a:	68db      	ldr	r3, [r3, #12]
 802959c:	687a      	ldr	r2, [r7, #4]
 802959e:	429a      	cmp	r2, r3
 80295a0:	d104      	bne.n	80295ac <tcp_close_shutdown+0xa8>
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	68da      	ldr	r2, [r3, #12]
 80295a6:	68fb      	ldr	r3, [r7, #12]
 80295a8:	60da      	str	r2, [r3, #12]
 80295aa:	e005      	b.n	80295b8 <tcp_close_shutdown+0xb4>
 80295ac:	68fb      	ldr	r3, [r7, #12]
 80295ae:	68db      	ldr	r3, [r3, #12]
 80295b0:	60fb      	str	r3, [r7, #12]
 80295b2:	68fb      	ldr	r3, [r7, #12]
 80295b4:	2b00      	cmp	r3, #0
 80295b6:	d1ef      	bne.n	8029598 <tcp_close_shutdown+0x94>
 80295b8:	687b      	ldr	r3, [r7, #4]
 80295ba:	2200      	movs	r2, #0
 80295bc:	60da      	str	r2, [r3, #12]
 80295be:	4b41      	ldr	r3, [pc, #260]	; (80296c4 <tcp_close_shutdown+0x1c0>)
 80295c0:	2201      	movs	r2, #1
 80295c2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	7d1b      	ldrb	r3, [r3, #20]
 80295c8:	2b04      	cmp	r3, #4
 80295ca:	d10c      	bne.n	80295e6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	220a      	movs	r2, #10
 80295d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80295d2:	4b3d      	ldr	r3, [pc, #244]	; (80296c8 <tcp_close_shutdown+0x1c4>)
 80295d4:	681a      	ldr	r2, [r3, #0]
 80295d6:	687b      	ldr	r3, [r7, #4]
 80295d8:	60da      	str	r2, [r3, #12]
 80295da:	4a3b      	ldr	r2, [pc, #236]	; (80296c8 <tcp_close_shutdown+0x1c4>)
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	6013      	str	r3, [r2, #0]
 80295e0:	f005 f900 	bl	802e7e4 <tcp_timer_needed>
 80295e4:	e00b      	b.n	80295fe <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80295e6:	4b39      	ldr	r3, [pc, #228]	; (80296cc <tcp_close_shutdown+0x1c8>)
 80295e8:	681b      	ldr	r3, [r3, #0]
 80295ea:	687a      	ldr	r2, [r7, #4]
 80295ec:	429a      	cmp	r2, r3
 80295ee:	d102      	bne.n	80295f6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80295f0:	f003 fd50 	bl	802d094 <tcp_trigger_input_pcb_close>
 80295f4:	e003      	b.n	80295fe <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80295f6:	6879      	ldr	r1, [r7, #4]
 80295f8:	2001      	movs	r0, #1
 80295fa:	f7fe ff65 	bl	80284c8 <memp_free>
        }
      }
      return ERR_OK;
 80295fe:	2300      	movs	r3, #0
 8029600:	e053      	b.n	80296aa <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	7d1b      	ldrb	r3, [r3, #20]
 8029606:	2b02      	cmp	r3, #2
 8029608:	d03d      	beq.n	8029686 <tcp_close_shutdown+0x182>
 802960a:	2b02      	cmp	r3, #2
 802960c:	dc47      	bgt.n	802969e <tcp_close_shutdown+0x19a>
 802960e:	2b00      	cmp	r3, #0
 8029610:	d002      	beq.n	8029618 <tcp_close_shutdown+0x114>
 8029612:	2b01      	cmp	r3, #1
 8029614:	d02b      	beq.n	802966e <tcp_close_shutdown+0x16a>
 8029616:	e042      	b.n	802969e <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8029618:	687b      	ldr	r3, [r7, #4]
 802961a:	8adb      	ldrh	r3, [r3, #22]
 802961c:	2b00      	cmp	r3, #0
 802961e:	d021      	beq.n	8029664 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8029620:	4b2b      	ldr	r3, [pc, #172]	; (80296d0 <tcp_close_shutdown+0x1cc>)
 8029622:	681b      	ldr	r3, [r3, #0]
 8029624:	687a      	ldr	r2, [r7, #4]
 8029626:	429a      	cmp	r2, r3
 8029628:	d105      	bne.n	8029636 <tcp_close_shutdown+0x132>
 802962a:	4b29      	ldr	r3, [pc, #164]	; (80296d0 <tcp_close_shutdown+0x1cc>)
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	68db      	ldr	r3, [r3, #12]
 8029630:	4a27      	ldr	r2, [pc, #156]	; (80296d0 <tcp_close_shutdown+0x1cc>)
 8029632:	6013      	str	r3, [r2, #0]
 8029634:	e013      	b.n	802965e <tcp_close_shutdown+0x15a>
 8029636:	4b26      	ldr	r3, [pc, #152]	; (80296d0 <tcp_close_shutdown+0x1cc>)
 8029638:	681b      	ldr	r3, [r3, #0]
 802963a:	60bb      	str	r3, [r7, #8]
 802963c:	e00c      	b.n	8029658 <tcp_close_shutdown+0x154>
 802963e:	68bb      	ldr	r3, [r7, #8]
 8029640:	68db      	ldr	r3, [r3, #12]
 8029642:	687a      	ldr	r2, [r7, #4]
 8029644:	429a      	cmp	r2, r3
 8029646:	d104      	bne.n	8029652 <tcp_close_shutdown+0x14e>
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	68da      	ldr	r2, [r3, #12]
 802964c:	68bb      	ldr	r3, [r7, #8]
 802964e:	60da      	str	r2, [r3, #12]
 8029650:	e005      	b.n	802965e <tcp_close_shutdown+0x15a>
 8029652:	68bb      	ldr	r3, [r7, #8]
 8029654:	68db      	ldr	r3, [r3, #12]
 8029656:	60bb      	str	r3, [r7, #8]
 8029658:	68bb      	ldr	r3, [r7, #8]
 802965a:	2b00      	cmp	r3, #0
 802965c:	d1ef      	bne.n	802963e <tcp_close_shutdown+0x13a>
 802965e:	687b      	ldr	r3, [r7, #4]
 8029660:	2200      	movs	r2, #0
 8029662:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8029664:	6879      	ldr	r1, [r7, #4]
 8029666:	2001      	movs	r0, #1
 8029668:	f7fe ff2e 	bl	80284c8 <memp_free>
    break;
 802966c:	e01c      	b.n	80296a8 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 802966e:	6878      	ldr	r0, [r7, #4]
 8029670:	f7ff ff10 	bl	8029494 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8029674:	6879      	ldr	r1, [r7, #4]
 8029676:	4817      	ldr	r0, [pc, #92]	; (80296d4 <tcp_close_shutdown+0x1d0>)
 8029678:	f001 f9ea 	bl	802aa50 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 802967c:	6879      	ldr	r1, [r7, #4]
 802967e:	2002      	movs	r0, #2
 8029680:	f7fe ff22 	bl	80284c8 <memp_free>
    break;
 8029684:	e010      	b.n	80296a8 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8029686:	6879      	ldr	r1, [r7, #4]
 8029688:	480d      	ldr	r0, [pc, #52]	; (80296c0 <tcp_close_shutdown+0x1bc>)
 802968a:	f001 f9e1 	bl	802aa50 <tcp_pcb_remove>
 802968e:	4b0d      	ldr	r3, [pc, #52]	; (80296c4 <tcp_close_shutdown+0x1c0>)
 8029690:	2201      	movs	r2, #1
 8029692:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8029694:	6879      	ldr	r1, [r7, #4]
 8029696:	2001      	movs	r0, #1
 8029698:	f7fe ff16 	bl	80284c8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 802969c:	e004      	b.n	80296a8 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 802969e:	6878      	ldr	r0, [r7, #4]
 80296a0:	f000 f81a 	bl	80296d8 <tcp_close_shutdown_fin>
 80296a4:	4603      	mov	r3, r0
 80296a6:	e000      	b.n	80296aa <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80296a8:	2300      	movs	r3, #0
}
 80296aa:	4618      	mov	r0, r3
 80296ac:	3710      	adds	r7, #16
 80296ae:	46bd      	mov	sp, r7
 80296b0:	bdb0      	pop	{r4, r5, r7, pc}
 80296b2:	bf00      	nop
 80296b4:	08033fbc 	.word	0x08033fbc
 80296b8:	08034038 	.word	0x08034038
 80296bc:	08033ff8 	.word	0x08033ff8
 80296c0:	20006a4c 	.word	0x20006a4c
 80296c4:	20006a54 	.word	0x20006a54
 80296c8:	20006a50 	.word	0x20006a50
 80296cc:	20006a8c 	.word	0x20006a8c
 80296d0:	20006a44 	.word	0x20006a44
 80296d4:	20006a48 	.word	0x20006a48

080296d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80296d8:	b580      	push	{r7, lr}
 80296da:	b084      	sub	sp, #16
 80296dc:	af00      	add	r7, sp, #0
 80296de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	d106      	bne.n	80296f4 <tcp_close_shutdown_fin+0x1c>
 80296e6:	4b2e      	ldr	r3, [pc, #184]	; (80297a0 <tcp_close_shutdown_fin+0xc8>)
 80296e8:	f240 124d 	movw	r2, #333	; 0x14d
 80296ec:	492d      	ldr	r1, [pc, #180]	; (80297a4 <tcp_close_shutdown_fin+0xcc>)
 80296ee:	482e      	ldr	r0, [pc, #184]	; (80297a8 <tcp_close_shutdown_fin+0xd0>)
 80296f0:	f007 fe68 	bl	80313c4 <iprintf>

  switch (pcb->state) {
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	7d1b      	ldrb	r3, [r3, #20]
 80296f8:	2b07      	cmp	r3, #7
 80296fa:	d020      	beq.n	802973e <tcp_close_shutdown_fin+0x66>
 80296fc:	2b07      	cmp	r3, #7
 80296fe:	dc2b      	bgt.n	8029758 <tcp_close_shutdown_fin+0x80>
 8029700:	2b03      	cmp	r3, #3
 8029702:	d002      	beq.n	802970a <tcp_close_shutdown_fin+0x32>
 8029704:	2b04      	cmp	r3, #4
 8029706:	d00d      	beq.n	8029724 <tcp_close_shutdown_fin+0x4c>
 8029708:	e026      	b.n	8029758 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 802970a:	6878      	ldr	r0, [r7, #4]
 802970c:	f003 fd4c 	bl	802d1a8 <tcp_send_fin>
 8029710:	4603      	mov	r3, r0
 8029712:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8029714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029718:	2b00      	cmp	r3, #0
 802971a:	d11f      	bne.n	802975c <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 802971c:	687b      	ldr	r3, [r7, #4]
 802971e:	2205      	movs	r2, #5
 8029720:	751a      	strb	r2, [r3, #20]
    }
    break;
 8029722:	e01b      	b.n	802975c <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8029724:	6878      	ldr	r0, [r7, #4]
 8029726:	f003 fd3f 	bl	802d1a8 <tcp_send_fin>
 802972a:	4603      	mov	r3, r0
 802972c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 802972e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029732:	2b00      	cmp	r3, #0
 8029734:	d114      	bne.n	8029760 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	2205      	movs	r2, #5
 802973a:	751a      	strb	r2, [r3, #20]
    }
    break;
 802973c:	e010      	b.n	8029760 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 802973e:	6878      	ldr	r0, [r7, #4]
 8029740:	f003 fd32 	bl	802d1a8 <tcp_send_fin>
 8029744:	4603      	mov	r3, r0
 8029746:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8029748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802974c:	2b00      	cmp	r3, #0
 802974e:	d109      	bne.n	8029764 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8029750:	687b      	ldr	r3, [r7, #4]
 8029752:	2209      	movs	r2, #9
 8029754:	751a      	strb	r2, [r3, #20]
    }
    break;
 8029756:	e005      	b.n	8029764 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8029758:	2300      	movs	r3, #0
 802975a:	e01c      	b.n	8029796 <tcp_close_shutdown_fin+0xbe>
    break;
 802975c:	bf00      	nop
 802975e:	e002      	b.n	8029766 <tcp_close_shutdown_fin+0x8e>
    break;
 8029760:	bf00      	nop
 8029762:	e000      	b.n	8029766 <tcp_close_shutdown_fin+0x8e>
    break;
 8029764:	bf00      	nop
  }

  if (err == ERR_OK) {
 8029766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802976a:	2b00      	cmp	r3, #0
 802976c:	d103      	bne.n	8029776 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 802976e:	6878      	ldr	r0, [r7, #4]
 8029770:	f004 fb6c 	bl	802de4c <tcp_output>
 8029774:	e00d      	b.n	8029792 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8029776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802977e:	d108      	bne.n	8029792 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	7e9b      	ldrb	r3, [r3, #26]
 8029784:	f043 0308 	orr.w	r3, r3, #8
 8029788:	b2da      	uxtb	r2, r3
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 802978e:	2300      	movs	r3, #0
 8029790:	e001      	b.n	8029796 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8029792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029796:	4618      	mov	r0, r3
 8029798:	3710      	adds	r7, #16
 802979a:	46bd      	mov	sp, r7
 802979c:	bd80      	pop	{r7, pc}
 802979e:	bf00      	nop
 80297a0:	08033fbc 	.word	0x08033fbc
 80297a4:	08033fec 	.word	0x08033fec
 80297a8:	08033ff8 	.word	0x08033ff8

080297ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80297ac:	b580      	push	{r7, lr}
 80297ae:	b082      	sub	sp, #8
 80297b0:	af00      	add	r7, sp, #0
 80297b2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80297b4:	687b      	ldr	r3, [r7, #4]
 80297b6:	7d1b      	ldrb	r3, [r3, #20]
 80297b8:	2b01      	cmp	r3, #1
 80297ba:	d006      	beq.n	80297ca <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	7e9b      	ldrb	r3, [r3, #26]
 80297c0:	f043 0310 	orr.w	r3, r3, #16
 80297c4:	b2da      	uxtb	r2, r3
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80297ca:	2101      	movs	r1, #1
 80297cc:	6878      	ldr	r0, [r7, #4]
 80297ce:	f7ff fe99 	bl	8029504 <tcp_close_shutdown>
 80297d2:	4603      	mov	r3, r0
}
 80297d4:	4618      	mov	r0, r3
 80297d6:	3708      	adds	r7, #8
 80297d8:	46bd      	mov	sp, r7
 80297da:	bd80      	pop	{r7, pc}

080297dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80297dc:	b580      	push	{r7, lr}
 80297de:	b08c      	sub	sp, #48	; 0x30
 80297e0:	af02      	add	r7, sp, #8
 80297e2:	6078      	str	r0, [r7, #4]
 80297e4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	7d1b      	ldrb	r3, [r3, #20]
 80297ea:	2b01      	cmp	r3, #1
 80297ec:	d106      	bne.n	80297fc <tcp_abandon+0x20>
 80297ee:	4b4d      	ldr	r3, [pc, #308]	; (8029924 <tcp_abandon+0x148>)
 80297f0:	f240 12df 	movw	r2, #479	; 0x1df
 80297f4:	494c      	ldr	r1, [pc, #304]	; (8029928 <tcp_abandon+0x14c>)
 80297f6:	484d      	ldr	r0, [pc, #308]	; (802992c <tcp_abandon+0x150>)
 80297f8:	f007 fde4 	bl	80313c4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	7d1b      	ldrb	r3, [r3, #20]
 8029800:	2b0a      	cmp	r3, #10
 8029802:	d108      	bne.n	8029816 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8029804:	6879      	ldr	r1, [r7, #4]
 8029806:	484a      	ldr	r0, [pc, #296]	; (8029930 <tcp_abandon+0x154>)
 8029808:	f001 f922 	bl	802aa50 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 802980c:	6879      	ldr	r1, [r7, #4]
 802980e:	2001      	movs	r0, #1
 8029810:	f7fe fe5a 	bl	80284c8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8029814:	e081      	b.n	802991a <tcp_abandon+0x13e>
    int send_rst = 0;
 8029816:	2300      	movs	r3, #0
 8029818:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 802981a:	2300      	movs	r3, #0
 802981c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029822:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8029824:	687b      	ldr	r3, [r7, #4]
 8029826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029828:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8029830:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8029832:	687b      	ldr	r3, [r7, #4]
 8029834:	691b      	ldr	r3, [r3, #16]
 8029836:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8029838:	687b      	ldr	r3, [r7, #4]
 802983a:	7d1b      	ldrb	r3, [r3, #20]
 802983c:	2b00      	cmp	r3, #0
 802983e:	d126      	bne.n	802988e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8029840:	687b      	ldr	r3, [r7, #4]
 8029842:	8adb      	ldrh	r3, [r3, #22]
 8029844:	2b00      	cmp	r3, #0
 8029846:	d02e      	beq.n	80298a6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8029848:	4b3a      	ldr	r3, [pc, #232]	; (8029934 <tcp_abandon+0x158>)
 802984a:	681b      	ldr	r3, [r3, #0]
 802984c:	687a      	ldr	r2, [r7, #4]
 802984e:	429a      	cmp	r2, r3
 8029850:	d105      	bne.n	802985e <tcp_abandon+0x82>
 8029852:	4b38      	ldr	r3, [pc, #224]	; (8029934 <tcp_abandon+0x158>)
 8029854:	681b      	ldr	r3, [r3, #0]
 8029856:	68db      	ldr	r3, [r3, #12]
 8029858:	4a36      	ldr	r2, [pc, #216]	; (8029934 <tcp_abandon+0x158>)
 802985a:	6013      	str	r3, [r2, #0]
 802985c:	e013      	b.n	8029886 <tcp_abandon+0xaa>
 802985e:	4b35      	ldr	r3, [pc, #212]	; (8029934 <tcp_abandon+0x158>)
 8029860:	681b      	ldr	r3, [r3, #0]
 8029862:	61fb      	str	r3, [r7, #28]
 8029864:	e00c      	b.n	8029880 <tcp_abandon+0xa4>
 8029866:	69fb      	ldr	r3, [r7, #28]
 8029868:	68db      	ldr	r3, [r3, #12]
 802986a:	687a      	ldr	r2, [r7, #4]
 802986c:	429a      	cmp	r2, r3
 802986e:	d104      	bne.n	802987a <tcp_abandon+0x9e>
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	68da      	ldr	r2, [r3, #12]
 8029874:	69fb      	ldr	r3, [r7, #28]
 8029876:	60da      	str	r2, [r3, #12]
 8029878:	e005      	b.n	8029886 <tcp_abandon+0xaa>
 802987a:	69fb      	ldr	r3, [r7, #28]
 802987c:	68db      	ldr	r3, [r3, #12]
 802987e:	61fb      	str	r3, [r7, #28]
 8029880:	69fb      	ldr	r3, [r7, #28]
 8029882:	2b00      	cmp	r3, #0
 8029884:	d1ef      	bne.n	8029866 <tcp_abandon+0x8a>
 8029886:	687b      	ldr	r3, [r7, #4]
 8029888:	2200      	movs	r2, #0
 802988a:	60da      	str	r2, [r3, #12]
 802988c:	e00b      	b.n	80298a6 <tcp_abandon+0xca>
      send_rst = reset;
 802988e:	683b      	ldr	r3, [r7, #0]
 8029890:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8029892:	687b      	ldr	r3, [r7, #4]
 8029894:	8adb      	ldrh	r3, [r3, #22]
 8029896:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8029898:	6879      	ldr	r1, [r7, #4]
 802989a:	4827      	ldr	r0, [pc, #156]	; (8029938 <tcp_abandon+0x15c>)
 802989c:	f001 f8d8 	bl	802aa50 <tcp_pcb_remove>
 80298a0:	4b26      	ldr	r3, [pc, #152]	; (802993c <tcp_abandon+0x160>)
 80298a2:	2201      	movs	r2, #1
 80298a4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80298a6:	687b      	ldr	r3, [r7, #4]
 80298a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80298aa:	2b00      	cmp	r3, #0
 80298ac:	d004      	beq.n	80298b8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80298ae:	687b      	ldr	r3, [r7, #4]
 80298b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80298b2:	4618      	mov	r0, r3
 80298b4:	f000 fe17 	bl	802a4e6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80298b8:	687b      	ldr	r3, [r7, #4]
 80298ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298bc:	2b00      	cmp	r3, #0
 80298be:	d004      	beq.n	80298ca <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80298c0:	687b      	ldr	r3, [r7, #4]
 80298c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298c4:	4618      	mov	r0, r3
 80298c6:	f000 fe0e 	bl	802a4e6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80298ce:	2b00      	cmp	r3, #0
 80298d0:	d004      	beq.n	80298dc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80298d2:	687b      	ldr	r3, [r7, #4]
 80298d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80298d6:	4618      	mov	r0, r3
 80298d8:	f000 fe05 	bl	802a4e6 <tcp_segs_free>
    if (send_rst) {
 80298dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80298de:	2b00      	cmp	r3, #0
 80298e0:	d00c      	beq.n	80298fc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80298e2:	687a      	ldr	r2, [r7, #4]
 80298e4:	687b      	ldr	r3, [r7, #4]
 80298e6:	1d19      	adds	r1, r3, #4
 80298e8:	687b      	ldr	r3, [r7, #4]
 80298ea:	8b1b      	ldrh	r3, [r3, #24]
 80298ec:	9301      	str	r3, [sp, #4]
 80298ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80298f0:	9300      	str	r3, [sp, #0]
 80298f2:	460b      	mov	r3, r1
 80298f4:	6979      	ldr	r1, [r7, #20]
 80298f6:	69b8      	ldr	r0, [r7, #24]
 80298f8:	f004 fd2c 	bl	802e354 <tcp_rst>
    last_state = pcb->state;
 80298fc:	687b      	ldr	r3, [r7, #4]
 80298fe:	7d1b      	ldrb	r3, [r3, #20]
 8029900:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8029902:	6879      	ldr	r1, [r7, #4]
 8029904:	2001      	movs	r0, #1
 8029906:	f7fe fddf 	bl	80284c8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 802990a:	693b      	ldr	r3, [r7, #16]
 802990c:	2b00      	cmp	r3, #0
 802990e:	d004      	beq.n	802991a <tcp_abandon+0x13e>
 8029910:	693b      	ldr	r3, [r7, #16]
 8029912:	f06f 010c 	mvn.w	r1, #12
 8029916:	68f8      	ldr	r0, [r7, #12]
 8029918:	4798      	blx	r3
}
 802991a:	bf00      	nop
 802991c:	3728      	adds	r7, #40	; 0x28
 802991e:	46bd      	mov	sp, r7
 8029920:	bd80      	pop	{r7, pc}
 8029922:	bf00      	nop
 8029924:	08033fbc 	.word	0x08033fbc
 8029928:	08034054 	.word	0x08034054
 802992c:	08033ff8 	.word	0x08033ff8
 8029930:	20006a50 	.word	0x20006a50
 8029934:	20006a44 	.word	0x20006a44
 8029938:	20006a4c 	.word	0x20006a4c
 802993c:	20006a54 	.word	0x20006a54

08029940 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8029940:	b580      	push	{r7, lr}
 8029942:	b082      	sub	sp, #8
 8029944:	af00      	add	r7, sp, #0
 8029946:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8029948:	2101      	movs	r1, #1
 802994a:	6878      	ldr	r0, [r7, #4]
 802994c:	f7ff ff46 	bl	80297dc <tcp_abandon>
}
 8029950:	bf00      	nop
 8029952:	3708      	adds	r7, #8
 8029954:	46bd      	mov	sp, r7
 8029956:	bd80      	pop	{r7, pc}

08029958 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8029958:	b580      	push	{r7, lr}
 802995a:	b088      	sub	sp, #32
 802995c:	af00      	add	r7, sp, #0
 802995e:	60f8      	str	r0, [r7, #12]
 8029960:	60b9      	str	r1, [r7, #8]
 8029962:	4613      	mov	r3, r2
 8029964:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8029966:	2304      	movs	r3, #4
 8029968:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802996a:	68bb      	ldr	r3, [r7, #8]
 802996c:	2b00      	cmp	r3, #0
 802996e:	d101      	bne.n	8029974 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8029970:	4b3c      	ldr	r3, [pc, #240]	; (8029a64 <tcp_bind+0x10c>)
 8029972:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8029974:	68fb      	ldr	r3, [r7, #12]
 8029976:	2b00      	cmp	r3, #0
 8029978:	d002      	beq.n	8029980 <tcp_bind+0x28>
 802997a:	68bb      	ldr	r3, [r7, #8]
 802997c:	2b00      	cmp	r3, #0
 802997e:	d102      	bne.n	8029986 <tcp_bind+0x2e>
    return ERR_VAL;
 8029980:	f06f 0305 	mvn.w	r3, #5
 8029984:	e06a      	b.n	8029a5c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	7d1b      	ldrb	r3, [r3, #20]
 802998a:	2b00      	cmp	r3, #0
 802998c:	d009      	beq.n	80299a2 <tcp_bind+0x4a>
 802998e:	4b36      	ldr	r3, [pc, #216]	; (8029a68 <tcp_bind+0x110>)
 8029990:	f44f 7211 	mov.w	r2, #580	; 0x244
 8029994:	4935      	ldr	r1, [pc, #212]	; (8029a6c <tcp_bind+0x114>)
 8029996:	4836      	ldr	r0, [pc, #216]	; (8029a70 <tcp_bind+0x118>)
 8029998:	f007 fd14 	bl	80313c4 <iprintf>
 802999c:	f06f 0305 	mvn.w	r3, #5
 80299a0:	e05c      	b.n	8029a5c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80299a2:	88fb      	ldrh	r3, [r7, #6]
 80299a4:	2b00      	cmp	r3, #0
 80299a6:	d109      	bne.n	80299bc <tcp_bind+0x64>
    port = tcp_new_port();
 80299a8:	f000 f9ca 	bl	8029d40 <tcp_new_port>
 80299ac:	4603      	mov	r3, r0
 80299ae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80299b0:	88fb      	ldrh	r3, [r7, #6]
 80299b2:	2b00      	cmp	r3, #0
 80299b4:	d135      	bne.n	8029a22 <tcp_bind+0xca>
      return ERR_BUF;
 80299b6:	f06f 0301 	mvn.w	r3, #1
 80299ba:	e04f      	b.n	8029a5c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80299bc:	2300      	movs	r3, #0
 80299be:	61fb      	str	r3, [r7, #28]
 80299c0:	e02b      	b.n	8029a1a <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80299c2:	4a2c      	ldr	r2, [pc, #176]	; (8029a74 <tcp_bind+0x11c>)
 80299c4:	69fb      	ldr	r3, [r7, #28]
 80299c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80299ca:	681b      	ldr	r3, [r3, #0]
 80299cc:	61bb      	str	r3, [r7, #24]
 80299ce:	e01e      	b.n	8029a0e <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80299d0:	69bb      	ldr	r3, [r7, #24]
 80299d2:	8adb      	ldrh	r3, [r3, #22]
 80299d4:	88fa      	ldrh	r2, [r7, #6]
 80299d6:	429a      	cmp	r2, r3
 80299d8:	d116      	bne.n	8029a08 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80299da:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80299dc:	2b00      	cmp	r3, #0
 80299de:	d010      	beq.n	8029a02 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80299e0:	69bb      	ldr	r3, [r7, #24]
 80299e2:	681b      	ldr	r3, [r3, #0]
 80299e4:	2b00      	cmp	r3, #0
 80299e6:	d00c      	beq.n	8029a02 <tcp_bind+0xaa>
 80299e8:	68bb      	ldr	r3, [r7, #8]
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	d009      	beq.n	8029a02 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80299ee:	68bb      	ldr	r3, [r7, #8]
 80299f0:	681b      	ldr	r3, [r3, #0]
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	d005      	beq.n	8029a02 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80299f6:	69bb      	ldr	r3, [r7, #24]
 80299f8:	681a      	ldr	r2, [r3, #0]
 80299fa:	68bb      	ldr	r3, [r7, #8]
 80299fc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80299fe:	429a      	cmp	r2, r3
 8029a00:	d102      	bne.n	8029a08 <tcp_bind+0xb0>
              return ERR_USE;
 8029a02:	f06f 0307 	mvn.w	r3, #7
 8029a06:	e029      	b.n	8029a5c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8029a08:	69bb      	ldr	r3, [r7, #24]
 8029a0a:	68db      	ldr	r3, [r3, #12]
 8029a0c:	61bb      	str	r3, [r7, #24]
 8029a0e:	69bb      	ldr	r3, [r7, #24]
 8029a10:	2b00      	cmp	r3, #0
 8029a12:	d1dd      	bne.n	80299d0 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8029a14:	69fb      	ldr	r3, [r7, #28]
 8029a16:	3301      	adds	r3, #1
 8029a18:	61fb      	str	r3, [r7, #28]
 8029a1a:	69fa      	ldr	r2, [r7, #28]
 8029a1c:	697b      	ldr	r3, [r7, #20]
 8029a1e:	429a      	cmp	r2, r3
 8029a20:	dbcf      	blt.n	80299c2 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8029a22:	68bb      	ldr	r3, [r7, #8]
 8029a24:	2b00      	cmp	r3, #0
 8029a26:	d00c      	beq.n	8029a42 <tcp_bind+0xea>
 8029a28:	68bb      	ldr	r3, [r7, #8]
 8029a2a:	681b      	ldr	r3, [r3, #0]
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d008      	beq.n	8029a42 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8029a30:	68bb      	ldr	r3, [r7, #8]
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d002      	beq.n	8029a3c <tcp_bind+0xe4>
 8029a36:	68bb      	ldr	r3, [r7, #8]
 8029a38:	681b      	ldr	r3, [r3, #0]
 8029a3a:	e000      	b.n	8029a3e <tcp_bind+0xe6>
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	68fa      	ldr	r2, [r7, #12]
 8029a40:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8029a42:	68fb      	ldr	r3, [r7, #12]
 8029a44:	88fa      	ldrh	r2, [r7, #6]
 8029a46:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8029a48:	4b0b      	ldr	r3, [pc, #44]	; (8029a78 <tcp_bind+0x120>)
 8029a4a:	681a      	ldr	r2, [r3, #0]
 8029a4c:	68fb      	ldr	r3, [r7, #12]
 8029a4e:	60da      	str	r2, [r3, #12]
 8029a50:	4a09      	ldr	r2, [pc, #36]	; (8029a78 <tcp_bind+0x120>)
 8029a52:	68fb      	ldr	r3, [r7, #12]
 8029a54:	6013      	str	r3, [r2, #0]
 8029a56:	f004 fec5 	bl	802e7e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8029a5a:	2300      	movs	r3, #0
}
 8029a5c:	4618      	mov	r0, r3
 8029a5e:	3720      	adds	r7, #32
 8029a60:	46bd      	mov	sp, r7
 8029a62:	bd80      	pop	{r7, pc}
 8029a64:	08035428 	.word	0x08035428
 8029a68:	08033fbc 	.word	0x08033fbc
 8029a6c:	08034088 	.word	0x08034088
 8029a70:	08033ff8 	.word	0x08033ff8
 8029a74:	08035400 	.word	0x08035400
 8029a78:	20006a44 	.word	0x20006a44

08029a7c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8029a7c:	b580      	push	{r7, lr}
 8029a7e:	b084      	sub	sp, #16
 8029a80:	af00      	add	r7, sp, #0
 8029a82:	60f8      	str	r0, [r7, #12]
 8029a84:	60b9      	str	r1, [r7, #8]
 8029a86:	4613      	mov	r3, r2
 8029a88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8029a8a:	68b8      	ldr	r0, [r7, #8]
 8029a8c:	f7ff ff58 	bl	8029940 <tcp_abort>

  return ERR_ABRT;
 8029a90:	f06f 030c 	mvn.w	r3, #12
}
 8029a94:	4618      	mov	r0, r3
 8029a96:	3710      	adds	r7, #16
 8029a98:	46bd      	mov	sp, r7
 8029a9a:	bd80      	pop	{r7, pc}

08029a9c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8029a9c:	b580      	push	{r7, lr}
 8029a9e:	b082      	sub	sp, #8
 8029aa0:	af00      	add	r7, sp, #0
 8029aa2:	6078      	str	r0, [r7, #4]
 8029aa4:	460b      	mov	r3, r1
 8029aa6:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8029aa8:	78fb      	ldrb	r3, [r7, #3]
 8029aaa:	2200      	movs	r2, #0
 8029aac:	4619      	mov	r1, r3
 8029aae:	6878      	ldr	r0, [r7, #4]
 8029ab0:	f000 f806 	bl	8029ac0 <tcp_listen_with_backlog_and_err>
 8029ab4:	4603      	mov	r3, r0
}
 8029ab6:	4618      	mov	r0, r3
 8029ab8:	3708      	adds	r7, #8
 8029aba:	46bd      	mov	sp, r7
 8029abc:	bd80      	pop	{r7, pc}
	...

08029ac0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8029ac0:	b580      	push	{r7, lr}
 8029ac2:	b088      	sub	sp, #32
 8029ac4:	af00      	add	r7, sp, #0
 8029ac6:	60f8      	str	r0, [r7, #12]
 8029ac8:	460b      	mov	r3, r1
 8029aca:	607a      	str	r2, [r7, #4]
 8029acc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8029ace:	2300      	movs	r3, #0
 8029ad0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8029ad2:	68fb      	ldr	r3, [r7, #12]
 8029ad4:	7d1b      	ldrb	r3, [r3, #20]
 8029ad6:	2b00      	cmp	r3, #0
 8029ad8:	d009      	beq.n	8029aee <tcp_listen_with_backlog_and_err+0x2e>
 8029ada:	4b3f      	ldr	r3, [pc, #252]	; (8029bd8 <tcp_listen_with_backlog_and_err+0x118>)
 8029adc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8029ae0:	493e      	ldr	r1, [pc, #248]	; (8029bdc <tcp_listen_with_backlog_and_err+0x11c>)
 8029ae2:	483f      	ldr	r0, [pc, #252]	; (8029be0 <tcp_listen_with_backlog_and_err+0x120>)
 8029ae4:	f007 fc6e 	bl	80313c4 <iprintf>
 8029ae8:	23f1      	movs	r3, #241	; 0xf1
 8029aea:	76fb      	strb	r3, [r7, #27]
 8029aec:	e069      	b.n	8029bc2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8029aee:	68fb      	ldr	r3, [r7, #12]
 8029af0:	7d1b      	ldrb	r3, [r3, #20]
 8029af2:	2b01      	cmp	r3, #1
 8029af4:	d104      	bne.n	8029b00 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8029af6:	68fb      	ldr	r3, [r7, #12]
 8029af8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8029afa:	23f7      	movs	r3, #247	; 0xf7
 8029afc:	76fb      	strb	r3, [r7, #27]
    goto done;
 8029afe:	e060      	b.n	8029bc2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8029b00:	2002      	movs	r0, #2
 8029b02:	f7fe fc95 	bl	8028430 <memp_malloc>
 8029b06:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8029b08:	69fb      	ldr	r3, [r7, #28]
 8029b0a:	2b00      	cmp	r3, #0
 8029b0c:	d102      	bne.n	8029b14 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8029b0e:	23ff      	movs	r3, #255	; 0xff
 8029b10:	76fb      	strb	r3, [r7, #27]
    goto done;
 8029b12:	e056      	b.n	8029bc2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8029b14:	68fb      	ldr	r3, [r7, #12]
 8029b16:	691a      	ldr	r2, [r3, #16]
 8029b18:	69fb      	ldr	r3, [r7, #28]
 8029b1a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8029b1c:	68fb      	ldr	r3, [r7, #12]
 8029b1e:	8ada      	ldrh	r2, [r3, #22]
 8029b20:	69fb      	ldr	r3, [r7, #28]
 8029b22:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8029b24:	69fb      	ldr	r3, [r7, #28]
 8029b26:	2201      	movs	r2, #1
 8029b28:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8029b2a:	68fb      	ldr	r3, [r7, #12]
 8029b2c:	7d5a      	ldrb	r2, [r3, #21]
 8029b2e:	69fb      	ldr	r3, [r7, #28]
 8029b30:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	7a1a      	ldrb	r2, [r3, #8]
 8029b36:	69fb      	ldr	r3, [r7, #28]
 8029b38:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8029b3a:	68fb      	ldr	r3, [r7, #12]
 8029b3c:	7a9a      	ldrb	r2, [r3, #10]
 8029b3e:	69fb      	ldr	r3, [r7, #28]
 8029b40:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8029b42:	68fb      	ldr	r3, [r7, #12]
 8029b44:	7a5a      	ldrb	r2, [r3, #9]
 8029b46:	69fb      	ldr	r3, [r7, #28]
 8029b48:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8029b4a:	68fb      	ldr	r3, [r7, #12]
 8029b4c:	681a      	ldr	r2, [r3, #0]
 8029b4e:	69fb      	ldr	r3, [r7, #28]
 8029b50:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8029b52:	68fb      	ldr	r3, [r7, #12]
 8029b54:	8adb      	ldrh	r3, [r3, #22]
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	d021      	beq.n	8029b9e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8029b5a:	4b22      	ldr	r3, [pc, #136]	; (8029be4 <tcp_listen_with_backlog_and_err+0x124>)
 8029b5c:	681b      	ldr	r3, [r3, #0]
 8029b5e:	68fa      	ldr	r2, [r7, #12]
 8029b60:	429a      	cmp	r2, r3
 8029b62:	d105      	bne.n	8029b70 <tcp_listen_with_backlog_and_err+0xb0>
 8029b64:	4b1f      	ldr	r3, [pc, #124]	; (8029be4 <tcp_listen_with_backlog_and_err+0x124>)
 8029b66:	681b      	ldr	r3, [r3, #0]
 8029b68:	68db      	ldr	r3, [r3, #12]
 8029b6a:	4a1e      	ldr	r2, [pc, #120]	; (8029be4 <tcp_listen_with_backlog_and_err+0x124>)
 8029b6c:	6013      	str	r3, [r2, #0]
 8029b6e:	e013      	b.n	8029b98 <tcp_listen_with_backlog_and_err+0xd8>
 8029b70:	4b1c      	ldr	r3, [pc, #112]	; (8029be4 <tcp_listen_with_backlog_and_err+0x124>)
 8029b72:	681b      	ldr	r3, [r3, #0]
 8029b74:	617b      	str	r3, [r7, #20]
 8029b76:	e00c      	b.n	8029b92 <tcp_listen_with_backlog_and_err+0xd2>
 8029b78:	697b      	ldr	r3, [r7, #20]
 8029b7a:	68db      	ldr	r3, [r3, #12]
 8029b7c:	68fa      	ldr	r2, [r7, #12]
 8029b7e:	429a      	cmp	r2, r3
 8029b80:	d104      	bne.n	8029b8c <tcp_listen_with_backlog_and_err+0xcc>
 8029b82:	68fb      	ldr	r3, [r7, #12]
 8029b84:	68da      	ldr	r2, [r3, #12]
 8029b86:	697b      	ldr	r3, [r7, #20]
 8029b88:	60da      	str	r2, [r3, #12]
 8029b8a:	e005      	b.n	8029b98 <tcp_listen_with_backlog_and_err+0xd8>
 8029b8c:	697b      	ldr	r3, [r7, #20]
 8029b8e:	68db      	ldr	r3, [r3, #12]
 8029b90:	617b      	str	r3, [r7, #20]
 8029b92:	697b      	ldr	r3, [r7, #20]
 8029b94:	2b00      	cmp	r3, #0
 8029b96:	d1ef      	bne.n	8029b78 <tcp_listen_with_backlog_and_err+0xb8>
 8029b98:	68fb      	ldr	r3, [r7, #12]
 8029b9a:	2200      	movs	r2, #0
 8029b9c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8029b9e:	68f9      	ldr	r1, [r7, #12]
 8029ba0:	2001      	movs	r0, #1
 8029ba2:	f7fe fc91 	bl	80284c8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8029ba6:	69fb      	ldr	r3, [r7, #28]
 8029ba8:	4a0f      	ldr	r2, [pc, #60]	; (8029be8 <tcp_listen_with_backlog_and_err+0x128>)
 8029baa:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8029bac:	4b0f      	ldr	r3, [pc, #60]	; (8029bec <tcp_listen_with_backlog_and_err+0x12c>)
 8029bae:	681a      	ldr	r2, [r3, #0]
 8029bb0:	69fb      	ldr	r3, [r7, #28]
 8029bb2:	60da      	str	r2, [r3, #12]
 8029bb4:	4a0d      	ldr	r2, [pc, #52]	; (8029bec <tcp_listen_with_backlog_and_err+0x12c>)
 8029bb6:	69fb      	ldr	r3, [r7, #28]
 8029bb8:	6013      	str	r3, [r2, #0]
 8029bba:	f004 fe13 	bl	802e7e4 <tcp_timer_needed>
  res = ERR_OK;
 8029bbe:	2300      	movs	r3, #0
 8029bc0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	2b00      	cmp	r3, #0
 8029bc6:	d002      	beq.n	8029bce <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	7efa      	ldrb	r2, [r7, #27]
 8029bcc:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8029bce:	69fb      	ldr	r3, [r7, #28]
}
 8029bd0:	4618      	mov	r0, r3
 8029bd2:	3720      	adds	r7, #32
 8029bd4:	46bd      	mov	sp, r7
 8029bd6:	bd80      	pop	{r7, pc}
 8029bd8:	08033fbc 	.word	0x08033fbc
 8029bdc:	080340b0 	.word	0x080340b0
 8029be0:	08033ff8 	.word	0x08033ff8
 8029be4:	20006a44 	.word	0x20006a44
 8029be8:	08029a7d 	.word	0x08029a7d
 8029bec:	20006a48 	.word	0x20006a48

08029bf0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8029bf0:	b580      	push	{r7, lr}
 8029bf2:	b084      	sub	sp, #16
 8029bf4:	af00      	add	r7, sp, #0
 8029bf6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8029bf8:	687b      	ldr	r3, [r7, #4]
 8029bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029bfc:	687a      	ldr	r2, [r7, #4]
 8029bfe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8029c00:	4413      	add	r3, r2
 8029c02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c08:	687a      	ldr	r2, [r7, #4]
 8029c0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8029c0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8029c10:	bf28      	it	cs
 8029c12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8029c16:	b292      	uxth	r2, r2
 8029c18:	4413      	add	r3, r2
 8029c1a:	68fa      	ldr	r2, [r7, #12]
 8029c1c:	1ad3      	subs	r3, r2, r3
 8029c1e:	2b00      	cmp	r3, #0
 8029c20:	db08      	blt.n	8029c34 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8029c26:	687b      	ldr	r3, [r7, #4]
 8029c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c2e:	68fa      	ldr	r2, [r7, #12]
 8029c30:	1ad3      	subs	r3, r2, r3
 8029c32:	e020      	b.n	8029c76 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8029c34:	687b      	ldr	r3, [r7, #4]
 8029c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029c38:	687b      	ldr	r3, [r7, #4]
 8029c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c3c:	1ad3      	subs	r3, r2, r3
 8029c3e:	2b00      	cmp	r3, #0
 8029c40:	dd03      	ble.n	8029c4a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	2200      	movs	r2, #0
 8029c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8029c48:	e014      	b.n	8029c74 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c52:	1ad3      	subs	r3, r2, r3
 8029c54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8029c56:	68bb      	ldr	r3, [r7, #8]
 8029c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029c5c:	d306      	bcc.n	8029c6c <tcp_update_rcv_ann_wnd+0x7c>
 8029c5e:	4b08      	ldr	r3, [pc, #32]	; (8029c80 <tcp_update_rcv_ann_wnd+0x90>)
 8029c60:	f44f 7242 	mov.w	r2, #776	; 0x308
 8029c64:	4907      	ldr	r1, [pc, #28]	; (8029c84 <tcp_update_rcv_ann_wnd+0x94>)
 8029c66:	4808      	ldr	r0, [pc, #32]	; (8029c88 <tcp_update_rcv_ann_wnd+0x98>)
 8029c68:	f007 fbac 	bl	80313c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8029c6c:	68bb      	ldr	r3, [r7, #8]
 8029c6e:	b29a      	uxth	r2, r3
 8029c70:	687b      	ldr	r3, [r7, #4]
 8029c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8029c74:	2300      	movs	r3, #0
  }
}
 8029c76:	4618      	mov	r0, r3
 8029c78:	3710      	adds	r7, #16
 8029c7a:	46bd      	mov	sp, r7
 8029c7c:	bd80      	pop	{r7, pc}
 8029c7e:	bf00      	nop
 8029c80:	08033fbc 	.word	0x08033fbc
 8029c84:	080340d4 	.word	0x080340d4
 8029c88:	08033ff8 	.word	0x08033ff8

08029c8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8029c8c:	b580      	push	{r7, lr}
 8029c8e:	b084      	sub	sp, #16
 8029c90:	af00      	add	r7, sp, #0
 8029c92:	6078      	str	r0, [r7, #4]
 8029c94:	460b      	mov	r3, r1
 8029c96:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8029c98:	687b      	ldr	r3, [r7, #4]
 8029c9a:	7d1b      	ldrb	r3, [r3, #20]
 8029c9c:	2b01      	cmp	r3, #1
 8029c9e:	d106      	bne.n	8029cae <tcp_recved+0x22>
 8029ca0:	4b23      	ldr	r3, [pc, #140]	; (8029d30 <tcp_recved+0xa4>)
 8029ca2:	f240 321f 	movw	r2, #799	; 0x31f
 8029ca6:	4923      	ldr	r1, [pc, #140]	; (8029d34 <tcp_recved+0xa8>)
 8029ca8:	4823      	ldr	r0, [pc, #140]	; (8029d38 <tcp_recved+0xac>)
 8029caa:	f007 fb8b 	bl	80313c4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8029cae:	687b      	ldr	r3, [r7, #4]
 8029cb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8029cb2:	887b      	ldrh	r3, [r7, #2]
 8029cb4:	4413      	add	r3, r2
 8029cb6:	b29a      	uxth	r2, r3
 8029cb8:	687b      	ldr	r3, [r7, #4]
 8029cba:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8029cbc:	687b      	ldr	r3, [r7, #4]
 8029cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8029cc0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8029cc4:	d904      	bls.n	8029cd0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8029ccc:	851a      	strh	r2, [r3, #40]	; 0x28
 8029cce:	e017      	b.n	8029d00 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8029cd0:	687b      	ldr	r3, [r7, #4]
 8029cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8029cd4:	2b00      	cmp	r3, #0
 8029cd6:	d113      	bne.n	8029d00 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8029cd8:	687b      	ldr	r3, [r7, #4]
 8029cda:	7d1b      	ldrb	r3, [r3, #20]
 8029cdc:	2b07      	cmp	r3, #7
 8029cde:	d003      	beq.n	8029ce8 <tcp_recved+0x5c>
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	7d1b      	ldrb	r3, [r3, #20]
 8029ce4:	2b09      	cmp	r3, #9
 8029ce6:	d104      	bne.n	8029cf2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8029ce8:	687b      	ldr	r3, [r7, #4]
 8029cea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8029cee:	851a      	strh	r2, [r3, #40]	; 0x28
 8029cf0:	e006      	b.n	8029d00 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8029cf2:	4b0f      	ldr	r3, [pc, #60]	; (8029d30 <tcp_recved+0xa4>)
 8029cf4:	f240 322d 	movw	r2, #813	; 0x32d
 8029cf8:	4910      	ldr	r1, [pc, #64]	; (8029d3c <tcp_recved+0xb0>)
 8029cfa:	480f      	ldr	r0, [pc, #60]	; (8029d38 <tcp_recved+0xac>)
 8029cfc:	f007 fb62 	bl	80313c4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8029d00:	6878      	ldr	r0, [r7, #4]
 8029d02:	f7ff ff75 	bl	8029bf0 <tcp_update_rcv_ann_wnd>
 8029d06:	4603      	mov	r3, r0
 8029d08:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8029d0a:	68fb      	ldr	r3, [r7, #12]
 8029d0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8029d10:	db09      	blt.n	8029d26 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	7e9b      	ldrb	r3, [r3, #26]
 8029d16:	f043 0302 	orr.w	r3, r3, #2
 8029d1a:	b2da      	uxtb	r2, r3
 8029d1c:	687b      	ldr	r3, [r7, #4]
 8029d1e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8029d20:	6878      	ldr	r0, [r7, #4]
 8029d22:	f004 f893 	bl	802de4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8029d26:	bf00      	nop
 8029d28:	3710      	adds	r7, #16
 8029d2a:	46bd      	mov	sp, r7
 8029d2c:	bd80      	pop	{r7, pc}
 8029d2e:	bf00      	nop
 8029d30:	08033fbc 	.word	0x08033fbc
 8029d34:	080340f0 	.word	0x080340f0
 8029d38:	08033ff8 	.word	0x08033ff8
 8029d3c:	08034118 	.word	0x08034118

08029d40 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8029d40:	b480      	push	{r7}
 8029d42:	b083      	sub	sp, #12
 8029d44:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8029d46:	2300      	movs	r3, #0
 8029d48:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8029d4a:	4b1d      	ldr	r3, [pc, #116]	; (8029dc0 <tcp_new_port+0x80>)
 8029d4c:	881b      	ldrh	r3, [r3, #0]
 8029d4e:	1c5a      	adds	r2, r3, #1
 8029d50:	b291      	uxth	r1, r2
 8029d52:	4a1b      	ldr	r2, [pc, #108]	; (8029dc0 <tcp_new_port+0x80>)
 8029d54:	8011      	strh	r1, [r2, #0]
 8029d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8029d5a:	4293      	cmp	r3, r2
 8029d5c:	d103      	bne.n	8029d66 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8029d5e:	4b18      	ldr	r3, [pc, #96]	; (8029dc0 <tcp_new_port+0x80>)
 8029d60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8029d64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8029d66:	2300      	movs	r3, #0
 8029d68:	71fb      	strb	r3, [r7, #7]
 8029d6a:	e01e      	b.n	8029daa <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8029d6c:	79fb      	ldrb	r3, [r7, #7]
 8029d6e:	4a15      	ldr	r2, [pc, #84]	; (8029dc4 <tcp_new_port+0x84>)
 8029d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029d74:	681b      	ldr	r3, [r3, #0]
 8029d76:	603b      	str	r3, [r7, #0]
 8029d78:	e011      	b.n	8029d9e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8029d7a:	683b      	ldr	r3, [r7, #0]
 8029d7c:	8ada      	ldrh	r2, [r3, #22]
 8029d7e:	4b10      	ldr	r3, [pc, #64]	; (8029dc0 <tcp_new_port+0x80>)
 8029d80:	881b      	ldrh	r3, [r3, #0]
 8029d82:	429a      	cmp	r2, r3
 8029d84:	d108      	bne.n	8029d98 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8029d86:	88bb      	ldrh	r3, [r7, #4]
 8029d88:	3301      	adds	r3, #1
 8029d8a:	80bb      	strh	r3, [r7, #4]
 8029d8c:	88bb      	ldrh	r3, [r7, #4]
 8029d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8029d92:	d3da      	bcc.n	8029d4a <tcp_new_port+0xa>
          return 0;
 8029d94:	2300      	movs	r3, #0
 8029d96:	e00d      	b.n	8029db4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8029d98:	683b      	ldr	r3, [r7, #0]
 8029d9a:	68db      	ldr	r3, [r3, #12]
 8029d9c:	603b      	str	r3, [r7, #0]
 8029d9e:	683b      	ldr	r3, [r7, #0]
 8029da0:	2b00      	cmp	r3, #0
 8029da2:	d1ea      	bne.n	8029d7a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8029da4:	79fb      	ldrb	r3, [r7, #7]
 8029da6:	3301      	adds	r3, #1
 8029da8:	71fb      	strb	r3, [r7, #7]
 8029daa:	79fb      	ldrb	r3, [r7, #7]
 8029dac:	2b03      	cmp	r3, #3
 8029dae:	d9dd      	bls.n	8029d6c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8029db0:	4b03      	ldr	r3, [pc, #12]	; (8029dc0 <tcp_new_port+0x80>)
 8029db2:	881b      	ldrh	r3, [r3, #0]
}
 8029db4:	4618      	mov	r0, r3
 8029db6:	370c      	adds	r7, #12
 8029db8:	46bd      	mov	sp, r7
 8029dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dbe:	4770      	bx	lr
 8029dc0:	2000008e 	.word	0x2000008e
 8029dc4:	08035400 	.word	0x08035400

08029dc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8029dc8:	b5b0      	push	{r4, r5, r7, lr}
 8029dca:	b08c      	sub	sp, #48	; 0x30
 8029dcc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8029dce:	2300      	movs	r3, #0
 8029dd0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8029dd2:	4b97      	ldr	r3, [pc, #604]	; (802a030 <tcp_slowtmr+0x268>)
 8029dd4:	681b      	ldr	r3, [r3, #0]
 8029dd6:	3301      	adds	r3, #1
 8029dd8:	4a95      	ldr	r2, [pc, #596]	; (802a030 <tcp_slowtmr+0x268>)
 8029dda:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8029ddc:	4b95      	ldr	r3, [pc, #596]	; (802a034 <tcp_slowtmr+0x26c>)
 8029dde:	781b      	ldrb	r3, [r3, #0]
 8029de0:	3301      	adds	r3, #1
 8029de2:	b2da      	uxtb	r2, r3
 8029de4:	4b93      	ldr	r3, [pc, #588]	; (802a034 <tcp_slowtmr+0x26c>)
 8029de6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8029de8:	2300      	movs	r3, #0
 8029dea:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8029dec:	4b92      	ldr	r3, [pc, #584]	; (802a038 <tcp_slowtmr+0x270>)
 8029dee:	681b      	ldr	r3, [r3, #0]
 8029df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8029df2:	e227      	b.n	802a244 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8029df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029df6:	7d1b      	ldrb	r3, [r3, #20]
 8029df8:	2b00      	cmp	r3, #0
 8029dfa:	d106      	bne.n	8029e0a <tcp_slowtmr+0x42>
 8029dfc:	4b8f      	ldr	r3, [pc, #572]	; (802a03c <tcp_slowtmr+0x274>)
 8029dfe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8029e02:	498f      	ldr	r1, [pc, #572]	; (802a040 <tcp_slowtmr+0x278>)
 8029e04:	488f      	ldr	r0, [pc, #572]	; (802a044 <tcp_slowtmr+0x27c>)
 8029e06:	f007 fadd 	bl	80313c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8029e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e0c:	7d1b      	ldrb	r3, [r3, #20]
 8029e0e:	2b01      	cmp	r3, #1
 8029e10:	d106      	bne.n	8029e20 <tcp_slowtmr+0x58>
 8029e12:	4b8a      	ldr	r3, [pc, #552]	; (802a03c <tcp_slowtmr+0x274>)
 8029e14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8029e18:	498b      	ldr	r1, [pc, #556]	; (802a048 <tcp_slowtmr+0x280>)
 8029e1a:	488a      	ldr	r0, [pc, #552]	; (802a044 <tcp_slowtmr+0x27c>)
 8029e1c:	f007 fad2 	bl	80313c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8029e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e22:	7d1b      	ldrb	r3, [r3, #20]
 8029e24:	2b0a      	cmp	r3, #10
 8029e26:	d106      	bne.n	8029e36 <tcp_slowtmr+0x6e>
 8029e28:	4b84      	ldr	r3, [pc, #528]	; (802a03c <tcp_slowtmr+0x274>)
 8029e2a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8029e2e:	4987      	ldr	r1, [pc, #540]	; (802a04c <tcp_slowtmr+0x284>)
 8029e30:	4884      	ldr	r0, [pc, #528]	; (802a044 <tcp_slowtmr+0x27c>)
 8029e32:	f007 fac7 	bl	80313c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8029e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e38:	7f5a      	ldrb	r2, [r3, #29]
 8029e3a:	4b7e      	ldr	r3, [pc, #504]	; (802a034 <tcp_slowtmr+0x26c>)
 8029e3c:	781b      	ldrb	r3, [r3, #0]
 8029e3e:	429a      	cmp	r2, r3
 8029e40:	d103      	bne.n	8029e4a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8029e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e44:	68db      	ldr	r3, [r3, #12]
 8029e46:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8029e48:	e1fc      	b.n	802a244 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8029e4a:	4b7a      	ldr	r3, [pc, #488]	; (802a034 <tcp_slowtmr+0x26c>)
 8029e4c:	781a      	ldrb	r2, [r3, #0]
 8029e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e50:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8029e52:	2300      	movs	r3, #0
 8029e54:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8029e56:	2300      	movs	r3, #0
 8029e58:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8029e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e5c:	7d1b      	ldrb	r3, [r3, #20]
 8029e5e:	2b02      	cmp	r3, #2
 8029e60:	d108      	bne.n	8029e74 <tcp_slowtmr+0xac>
 8029e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8029e68:	2b05      	cmp	r3, #5
 8029e6a:	d903      	bls.n	8029e74 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8029e6c:	7ffb      	ldrb	r3, [r7, #31]
 8029e6e:	3301      	adds	r3, #1
 8029e70:	77fb      	strb	r3, [r7, #31]
 8029e72:	e0a2      	b.n	8029fba <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8029e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8029e7a:	2b0b      	cmp	r3, #11
 8029e7c:	d903      	bls.n	8029e86 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8029e7e:	7ffb      	ldrb	r3, [r7, #31]
 8029e80:	3301      	adds	r3, #1
 8029e82:	77fb      	strb	r3, [r7, #31]
 8029e84:	e099      	b.n	8029fba <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8029e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e88:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8029e8c:	2b00      	cmp	r3, #0
 8029e8e:	d032      	beq.n	8029ef6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8029e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e92:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8029e96:	3b01      	subs	r3, #1
 8029e98:	4a6d      	ldr	r2, [pc, #436]	; (802a050 <tcp_slowtmr+0x288>)
 8029e9a:	5cd3      	ldrb	r3, [r2, r3]
 8029e9c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8029e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ea0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8029ea4:	7cfa      	ldrb	r2, [r7, #19]
 8029ea6:	429a      	cmp	r2, r3
 8029ea8:	d907      	bls.n	8029eba <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8029eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029eac:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8029eb0:	3301      	adds	r3, #1
 8029eb2:	b2da      	uxtb	r2, r3
 8029eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029eb6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8029eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ebc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8029ec0:	7cfa      	ldrb	r2, [r7, #19]
 8029ec2:	429a      	cmp	r2, r3
 8029ec4:	d879      	bhi.n	8029fba <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8029ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8029ec8:	f004 fbcb 	bl	802e662 <tcp_zero_window_probe>
 8029ecc:	4603      	mov	r3, r0
 8029ece:	2b00      	cmp	r3, #0
 8029ed0:	d173      	bne.n	8029fba <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8029ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ed4:	2200      	movs	r2, #0
 8029ed6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8029eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029edc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8029ee0:	2b06      	cmp	r3, #6
 8029ee2:	d86a      	bhi.n	8029fba <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8029ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ee6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8029eea:	3301      	adds	r3, #1
 8029eec:	b2da      	uxtb	r2, r3
 8029eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ef0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8029ef4:	e061      	b.n	8029fba <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8029ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ef8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8029efc:	2b00      	cmp	r3, #0
 8029efe:	db08      	blt.n	8029f12 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8029f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8029f06:	b29b      	uxth	r3, r3
 8029f08:	3301      	adds	r3, #1
 8029f0a:	b29b      	uxth	r3, r3
 8029f0c:	b21a      	sxth	r2, r3
 8029f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f10:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8029f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029f16:	2b00      	cmp	r3, #0
 8029f18:	d04f      	beq.n	8029fba <tcp_slowtmr+0x1f2>
 8029f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f1c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8029f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f22:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8029f26:	429a      	cmp	r2, r3
 8029f28:	db47      	blt.n	8029fba <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8029f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f2c:	7d1b      	ldrb	r3, [r3, #20]
 8029f2e:	2b02      	cmp	r3, #2
 8029f30:	d018      	beq.n	8029f64 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8029f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8029f38:	2b0c      	cmp	r3, #12
 8029f3a:	bf28      	it	cs
 8029f3c:	230c      	movcs	r3, #12
 8029f3e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8029f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8029f46:	10db      	asrs	r3, r3, #3
 8029f48:	b21b      	sxth	r3, r3
 8029f4a:	461a      	mov	r2, r3
 8029f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8029f52:	4413      	add	r3, r2
 8029f54:	7dfa      	ldrb	r2, [r7, #23]
 8029f56:	493f      	ldr	r1, [pc, #252]	; (802a054 <tcp_slowtmr+0x28c>)
 8029f58:	5c8a      	ldrb	r2, [r1, r2]
 8029f5a:	4093      	lsls	r3, r2
 8029f5c:	b21a      	sxth	r2, r3
 8029f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8029f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f66:	2200      	movs	r2, #0
 8029f68:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8029f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8029f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8029f76:	4293      	cmp	r3, r2
 8029f78:	bf28      	it	cs
 8029f7a:	4613      	movcs	r3, r2
 8029f7c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8029f7e:	8abb      	ldrh	r3, [r7, #20]
 8029f80:	085b      	lsrs	r3, r3, #1
 8029f82:	b29a      	uxth	r2, r3
 8029f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f86:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8029f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f8c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8029f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8029f94:	005b      	lsls	r3, r3, #1
 8029f96:	b29b      	uxth	r3, r3
 8029f98:	429a      	cmp	r2, r3
 8029f9a:	d206      	bcs.n	8029faa <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8029f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8029fa0:	005b      	lsls	r3, r3, #1
 8029fa2:	b29a      	uxth	r2, r3
 8029fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fa6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8029faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fac:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8029fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8029fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8029fb6:	f004 fa43 	bl	802e440 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8029fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fbc:	7d1b      	ldrb	r3, [r3, #20]
 8029fbe:	2b06      	cmp	r3, #6
 8029fc0:	d10f      	bne.n	8029fe2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8029fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fc4:	7e9b      	ldrb	r3, [r3, #26]
 8029fc6:	f003 0310 	and.w	r3, r3, #16
 8029fca:	2b00      	cmp	r3, #0
 8029fcc:	d009      	beq.n	8029fe2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8029fce:	4b18      	ldr	r3, [pc, #96]	; (802a030 <tcp_slowtmr+0x268>)
 8029fd0:	681a      	ldr	r2, [r3, #0]
 8029fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fd4:	6a1b      	ldr	r3, [r3, #32]
 8029fd6:	1ad3      	subs	r3, r2, r3
 8029fd8:	2b28      	cmp	r3, #40	; 0x28
 8029fda:	d902      	bls.n	8029fe2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8029fdc:	7ffb      	ldrb	r3, [r7, #31]
 8029fde:	3301      	adds	r3, #1
 8029fe0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8029fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fe4:	7a1b      	ldrb	r3, [r3, #8]
 8029fe6:	f003 0308 	and.w	r3, r3, #8
 8029fea:	2b00      	cmp	r3, #0
 8029fec:	d05d      	beq.n	802a0aa <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8029fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ff0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8029ff2:	2b04      	cmp	r3, #4
 8029ff4:	d003      	beq.n	8029ffe <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8029ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ff8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8029ffa:	2b07      	cmp	r3, #7
 8029ffc:	d155      	bne.n	802a0aa <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8029ffe:	4b0c      	ldr	r3, [pc, #48]	; (802a030 <tcp_slowtmr+0x268>)
 802a000:	681a      	ldr	r2, [r3, #0]
 802a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a004:	6a1b      	ldr	r3, [r3, #32]
 802a006:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 802a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802a00e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 802a012:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 802a016:	4910      	ldr	r1, [pc, #64]	; (802a058 <tcp_slowtmr+0x290>)
 802a018:	fba1 1303 	umull	r1, r3, r1, r3
 802a01c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802a01e:	429a      	cmp	r2, r3
 802a020:	d91c      	bls.n	802a05c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 802a022:	7ffb      	ldrb	r3, [r7, #31]
 802a024:	3301      	adds	r3, #1
 802a026:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 802a028:	7fbb      	ldrb	r3, [r7, #30]
 802a02a:	3301      	adds	r3, #1
 802a02c:	77bb      	strb	r3, [r7, #30]
 802a02e:	e03c      	b.n	802a0aa <tcp_slowtmr+0x2e2>
 802a030:	20006a40 	.word	0x20006a40
 802a034:	20006a56 	.word	0x20006a56
 802a038:	20006a4c 	.word	0x20006a4c
 802a03c:	08033fbc 	.word	0x08033fbc
 802a040:	0803416c 	.word	0x0803416c
 802a044:	08033ff8 	.word	0x08033ff8
 802a048:	08034198 	.word	0x08034198
 802a04c:	080341c4 	.word	0x080341c4
 802a050:	080353f8 	.word	0x080353f8
 802a054:	080353e8 	.word	0x080353e8
 802a058:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802a05c:	4b97      	ldr	r3, [pc, #604]	; (802a2bc <tcp_slowtmr+0x4f4>)
 802a05e:	681a      	ldr	r2, [r3, #0]
 802a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a062:	6a1b      	ldr	r3, [r3, #32]
 802a064:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 802a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a068:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 802a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a06e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 802a072:	4618      	mov	r0, r3
 802a074:	4b92      	ldr	r3, [pc, #584]	; (802a2c0 <tcp_slowtmr+0x4f8>)
 802a076:	fb00 f303 	mul.w	r3, r0, r3
 802a07a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 802a07c:	4991      	ldr	r1, [pc, #580]	; (802a2c4 <tcp_slowtmr+0x4fc>)
 802a07e:	fba1 1303 	umull	r1, r3, r1, r3
 802a082:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802a084:	429a      	cmp	r2, r3
 802a086:	d910      	bls.n	802a0aa <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 802a088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a08a:	f004 faad 	bl	802e5e8 <tcp_keepalive>
 802a08e:	4603      	mov	r3, r0
 802a090:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 802a092:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802a096:	2b00      	cmp	r3, #0
 802a098:	d107      	bne.n	802a0aa <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 802a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a09c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 802a0a0:	3301      	adds	r3, #1
 802a0a2:	b2da      	uxtb	r2, r3
 802a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0a6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 802a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d016      	beq.n	802a0e0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 802a0b2:	4b82      	ldr	r3, [pc, #520]	; (802a2bc <tcp_slowtmr+0x4f4>)
 802a0b4:	681a      	ldr	r2, [r3, #0]
 802a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0b8:	6a1b      	ldr	r3, [r3, #32]
 802a0ba:	1ad2      	subs	r2, r2, r3
 802a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 802a0c2:	4619      	mov	r1, r3
 802a0c4:	460b      	mov	r3, r1
 802a0c6:	005b      	lsls	r3, r3, #1
 802a0c8:	440b      	add	r3, r1
 802a0ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 802a0cc:	429a      	cmp	r2, r3
 802a0ce:	d307      	bcc.n	802a0e0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 802a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a0d4:	4618      	mov	r0, r3
 802a0d6:	f000 fa06 	bl	802a4e6 <tcp_segs_free>
      pcb->ooseq = NULL;
 802a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0dc:	2200      	movs	r2, #0
 802a0de:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 802a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0e2:	7d1b      	ldrb	r3, [r3, #20]
 802a0e4:	2b03      	cmp	r3, #3
 802a0e6:	d109      	bne.n	802a0fc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802a0e8:	4b74      	ldr	r3, [pc, #464]	; (802a2bc <tcp_slowtmr+0x4f4>)
 802a0ea:	681a      	ldr	r2, [r3, #0]
 802a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0ee:	6a1b      	ldr	r3, [r3, #32]
 802a0f0:	1ad3      	subs	r3, r2, r3
 802a0f2:	2b28      	cmp	r3, #40	; 0x28
 802a0f4:	d902      	bls.n	802a0fc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 802a0f6:	7ffb      	ldrb	r3, [r7, #31]
 802a0f8:	3301      	adds	r3, #1
 802a0fa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 802a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0fe:	7d1b      	ldrb	r3, [r3, #20]
 802a100:	2b09      	cmp	r3, #9
 802a102:	d109      	bne.n	802a118 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802a104:	4b6d      	ldr	r3, [pc, #436]	; (802a2bc <tcp_slowtmr+0x4f4>)
 802a106:	681a      	ldr	r2, [r3, #0]
 802a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a10a:	6a1b      	ldr	r3, [r3, #32]
 802a10c:	1ad3      	subs	r3, r2, r3
 802a10e:	2bf0      	cmp	r3, #240	; 0xf0
 802a110:	d902      	bls.n	802a118 <tcp_slowtmr+0x350>
        ++pcb_remove;
 802a112:	7ffb      	ldrb	r3, [r7, #31]
 802a114:	3301      	adds	r3, #1
 802a116:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802a118:	7ffb      	ldrb	r3, [r7, #31]
 802a11a:	2b00      	cmp	r3, #0
 802a11c:	d05d      	beq.n	802a1da <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 802a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802a124:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 802a126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a128:	f000 fc50 	bl	802a9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 802a12c:	6a3b      	ldr	r3, [r7, #32]
 802a12e:	2b00      	cmp	r3, #0
 802a130:	d010      	beq.n	802a154 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 802a132:	4b65      	ldr	r3, [pc, #404]	; (802a2c8 <tcp_slowtmr+0x500>)
 802a134:	681b      	ldr	r3, [r3, #0]
 802a136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a138:	429a      	cmp	r2, r3
 802a13a:	d106      	bne.n	802a14a <tcp_slowtmr+0x382>
 802a13c:	4b63      	ldr	r3, [pc, #396]	; (802a2cc <tcp_slowtmr+0x504>)
 802a13e:	f240 4289 	movw	r2, #1161	; 0x489
 802a142:	4963      	ldr	r1, [pc, #396]	; (802a2d0 <tcp_slowtmr+0x508>)
 802a144:	4863      	ldr	r0, [pc, #396]	; (802a2d4 <tcp_slowtmr+0x50c>)
 802a146:	f007 f93d 	bl	80313c4 <iprintf>
        prev->next = pcb->next;
 802a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a14c:	68da      	ldr	r2, [r3, #12]
 802a14e:	6a3b      	ldr	r3, [r7, #32]
 802a150:	60da      	str	r2, [r3, #12]
 802a152:	e00f      	b.n	802a174 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 802a154:	4b5c      	ldr	r3, [pc, #368]	; (802a2c8 <tcp_slowtmr+0x500>)
 802a156:	681b      	ldr	r3, [r3, #0]
 802a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a15a:	429a      	cmp	r2, r3
 802a15c:	d006      	beq.n	802a16c <tcp_slowtmr+0x3a4>
 802a15e:	4b5b      	ldr	r3, [pc, #364]	; (802a2cc <tcp_slowtmr+0x504>)
 802a160:	f240 428d 	movw	r2, #1165	; 0x48d
 802a164:	495c      	ldr	r1, [pc, #368]	; (802a2d8 <tcp_slowtmr+0x510>)
 802a166:	485b      	ldr	r0, [pc, #364]	; (802a2d4 <tcp_slowtmr+0x50c>)
 802a168:	f007 f92c 	bl	80313c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 802a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a16e:	68db      	ldr	r3, [r3, #12]
 802a170:	4a55      	ldr	r2, [pc, #340]	; (802a2c8 <tcp_slowtmr+0x500>)
 802a172:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 802a174:	7fbb      	ldrb	r3, [r7, #30]
 802a176:	2b00      	cmp	r3, #0
 802a178:	d010      	beq.n	802a19c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a17c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a180:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802a182:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 802a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a186:	1d1d      	adds	r5, r3, #4
 802a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a18a:	8adb      	ldrh	r3, [r3, #22]
 802a18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a18e:	8b12      	ldrh	r2, [r2, #24]
 802a190:	9201      	str	r2, [sp, #4]
 802a192:	9300      	str	r3, [sp, #0]
 802a194:	462b      	mov	r3, r5
 802a196:	4622      	mov	r2, r4
 802a198:	f004 f8dc 	bl	802e354 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 802a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a19e:	691b      	ldr	r3, [r3, #16]
 802a1a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 802a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1a4:	7d1b      	ldrb	r3, [r3, #20]
 802a1a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 802a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 802a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1ae:	68db      	ldr	r3, [r3, #12]
 802a1b0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 802a1b2:	6839      	ldr	r1, [r7, #0]
 802a1b4:	2001      	movs	r0, #1
 802a1b6:	f7fe f987 	bl	80284c8 <memp_free>

      tcp_active_pcbs_changed = 0;
 802a1ba:	4b48      	ldr	r3, [pc, #288]	; (802a2dc <tcp_slowtmr+0x514>)
 802a1bc:	2200      	movs	r2, #0
 802a1be:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 802a1c0:	68fb      	ldr	r3, [r7, #12]
 802a1c2:	2b00      	cmp	r3, #0
 802a1c4:	d004      	beq.n	802a1d0 <tcp_slowtmr+0x408>
 802a1c6:	68fb      	ldr	r3, [r7, #12]
 802a1c8:	f06f 010c 	mvn.w	r1, #12
 802a1cc:	68b8      	ldr	r0, [r7, #8]
 802a1ce:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 802a1d0:	4b42      	ldr	r3, [pc, #264]	; (802a2dc <tcp_slowtmr+0x514>)
 802a1d2:	781b      	ldrb	r3, [r3, #0]
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	d035      	beq.n	802a244 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 802a1d8:	e606      	b.n	8029de8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 802a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1dc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 802a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1e0:	68db      	ldr	r3, [r3, #12]
 802a1e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 802a1e4:	6a3b      	ldr	r3, [r7, #32]
 802a1e6:	7edb      	ldrb	r3, [r3, #27]
 802a1e8:	3301      	adds	r3, #1
 802a1ea:	b2da      	uxtb	r2, r3
 802a1ec:	6a3b      	ldr	r3, [r7, #32]
 802a1ee:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 802a1f0:	6a3b      	ldr	r3, [r7, #32]
 802a1f2:	7eda      	ldrb	r2, [r3, #27]
 802a1f4:	6a3b      	ldr	r3, [r7, #32]
 802a1f6:	7f1b      	ldrb	r3, [r3, #28]
 802a1f8:	429a      	cmp	r2, r3
 802a1fa:	d323      	bcc.n	802a244 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 802a1fc:	6a3b      	ldr	r3, [r7, #32]
 802a1fe:	2200      	movs	r2, #0
 802a200:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 802a202:	4b36      	ldr	r3, [pc, #216]	; (802a2dc <tcp_slowtmr+0x514>)
 802a204:	2200      	movs	r2, #0
 802a206:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 802a208:	6a3b      	ldr	r3, [r7, #32]
 802a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a20e:	2b00      	cmp	r3, #0
 802a210:	d00a      	beq.n	802a228 <tcp_slowtmr+0x460>
 802a212:	6a3b      	ldr	r3, [r7, #32]
 802a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a218:	6a3a      	ldr	r2, [r7, #32]
 802a21a:	6912      	ldr	r2, [r2, #16]
 802a21c:	6a39      	ldr	r1, [r7, #32]
 802a21e:	4610      	mov	r0, r2
 802a220:	4798      	blx	r3
 802a222:	4603      	mov	r3, r0
 802a224:	777b      	strb	r3, [r7, #29]
 802a226:	e001      	b.n	802a22c <tcp_slowtmr+0x464>
 802a228:	2300      	movs	r3, #0
 802a22a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 802a22c:	4b2b      	ldr	r3, [pc, #172]	; (802a2dc <tcp_slowtmr+0x514>)
 802a22e:	781b      	ldrb	r3, [r3, #0]
 802a230:	2b00      	cmp	r3, #0
 802a232:	d000      	beq.n	802a236 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 802a234:	e5d8      	b.n	8029de8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 802a236:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d102      	bne.n	802a244 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 802a23e:	6a38      	ldr	r0, [r7, #32]
 802a240:	f003 fe04 	bl	802de4c <tcp_output>
  while (pcb != NULL) {
 802a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a246:	2b00      	cmp	r3, #0
 802a248:	f47f add4 	bne.w	8029df4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 802a24c:	2300      	movs	r3, #0
 802a24e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 802a250:	4b23      	ldr	r3, [pc, #140]	; (802a2e0 <tcp_slowtmr+0x518>)
 802a252:	681b      	ldr	r3, [r3, #0]
 802a254:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 802a256:	e068      	b.n	802a32a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 802a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a25a:	7d1b      	ldrb	r3, [r3, #20]
 802a25c:	2b0a      	cmp	r3, #10
 802a25e:	d006      	beq.n	802a26e <tcp_slowtmr+0x4a6>
 802a260:	4b1a      	ldr	r3, [pc, #104]	; (802a2cc <tcp_slowtmr+0x504>)
 802a262:	f240 42bd 	movw	r2, #1213	; 0x4bd
 802a266:	491f      	ldr	r1, [pc, #124]	; (802a2e4 <tcp_slowtmr+0x51c>)
 802a268:	481a      	ldr	r0, [pc, #104]	; (802a2d4 <tcp_slowtmr+0x50c>)
 802a26a:	f007 f8ab 	bl	80313c4 <iprintf>
    pcb_remove = 0;
 802a26e:	2300      	movs	r3, #0
 802a270:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802a272:	4b12      	ldr	r3, [pc, #72]	; (802a2bc <tcp_slowtmr+0x4f4>)
 802a274:	681a      	ldr	r2, [r3, #0]
 802a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a278:	6a1b      	ldr	r3, [r3, #32]
 802a27a:	1ad3      	subs	r3, r2, r3
 802a27c:	2bf0      	cmp	r3, #240	; 0xf0
 802a27e:	d902      	bls.n	802a286 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 802a280:	7ffb      	ldrb	r3, [r7, #31]
 802a282:	3301      	adds	r3, #1
 802a284:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802a286:	7ffb      	ldrb	r3, [r7, #31]
 802a288:	2b00      	cmp	r3, #0
 802a28a:	d049      	beq.n	802a320 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 802a28c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a28e:	f000 fb9d 	bl	802a9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 802a292:	6a3b      	ldr	r3, [r7, #32]
 802a294:	2b00      	cmp	r3, #0
 802a296:	d029      	beq.n	802a2ec <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 802a298:	4b11      	ldr	r3, [pc, #68]	; (802a2e0 <tcp_slowtmr+0x518>)
 802a29a:	681b      	ldr	r3, [r3, #0]
 802a29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a29e:	429a      	cmp	r2, r3
 802a2a0:	d106      	bne.n	802a2b0 <tcp_slowtmr+0x4e8>
 802a2a2:	4b0a      	ldr	r3, [pc, #40]	; (802a2cc <tcp_slowtmr+0x504>)
 802a2a4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 802a2a8:	490f      	ldr	r1, [pc, #60]	; (802a2e8 <tcp_slowtmr+0x520>)
 802a2aa:	480a      	ldr	r0, [pc, #40]	; (802a2d4 <tcp_slowtmr+0x50c>)
 802a2ac:	f007 f88a 	bl	80313c4 <iprintf>
        prev->next = pcb->next;
 802a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a2b2:	68da      	ldr	r2, [r3, #12]
 802a2b4:	6a3b      	ldr	r3, [r7, #32]
 802a2b6:	60da      	str	r2, [r3, #12]
 802a2b8:	e028      	b.n	802a30c <tcp_slowtmr+0x544>
 802a2ba:	bf00      	nop
 802a2bc:	20006a40 	.word	0x20006a40
 802a2c0:	000124f8 	.word	0x000124f8
 802a2c4:	10624dd3 	.word	0x10624dd3
 802a2c8:	20006a4c 	.word	0x20006a4c
 802a2cc:	08033fbc 	.word	0x08033fbc
 802a2d0:	080341f4 	.word	0x080341f4
 802a2d4:	08033ff8 	.word	0x08033ff8
 802a2d8:	08034220 	.word	0x08034220
 802a2dc:	20006a54 	.word	0x20006a54
 802a2e0:	20006a50 	.word	0x20006a50
 802a2e4:	0803424c 	.word	0x0803424c
 802a2e8:	0803427c 	.word	0x0803427c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 802a2ec:	4b13      	ldr	r3, [pc, #76]	; (802a33c <tcp_slowtmr+0x574>)
 802a2ee:	681b      	ldr	r3, [r3, #0]
 802a2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a2f2:	429a      	cmp	r2, r3
 802a2f4:	d006      	beq.n	802a304 <tcp_slowtmr+0x53c>
 802a2f6:	4b12      	ldr	r3, [pc, #72]	; (802a340 <tcp_slowtmr+0x578>)
 802a2f8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 802a2fc:	4911      	ldr	r1, [pc, #68]	; (802a344 <tcp_slowtmr+0x57c>)
 802a2fe:	4812      	ldr	r0, [pc, #72]	; (802a348 <tcp_slowtmr+0x580>)
 802a300:	f007 f860 	bl	80313c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 802a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a306:	68db      	ldr	r3, [r3, #12]
 802a308:	4a0c      	ldr	r2, [pc, #48]	; (802a33c <tcp_slowtmr+0x574>)
 802a30a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 802a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a30e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 802a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a312:	68db      	ldr	r3, [r3, #12]
 802a314:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 802a316:	69b9      	ldr	r1, [r7, #24]
 802a318:	2001      	movs	r0, #1
 802a31a:	f7fe f8d5 	bl	80284c8 <memp_free>
 802a31e:	e004      	b.n	802a32a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 802a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a322:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 802a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a326:	68db      	ldr	r3, [r3, #12]
 802a328:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 802a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d193      	bne.n	802a258 <tcp_slowtmr+0x490>
    }
  }
}
 802a330:	bf00      	nop
 802a332:	bf00      	nop
 802a334:	3728      	adds	r7, #40	; 0x28
 802a336:	46bd      	mov	sp, r7
 802a338:	bdb0      	pop	{r4, r5, r7, pc}
 802a33a:	bf00      	nop
 802a33c:	20006a50 	.word	0x20006a50
 802a340:	08033fbc 	.word	0x08033fbc
 802a344:	080342a4 	.word	0x080342a4
 802a348:	08033ff8 	.word	0x08033ff8

0802a34c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 802a34c:	b580      	push	{r7, lr}
 802a34e:	b082      	sub	sp, #8
 802a350:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 802a352:	4b2d      	ldr	r3, [pc, #180]	; (802a408 <tcp_fasttmr+0xbc>)
 802a354:	781b      	ldrb	r3, [r3, #0]
 802a356:	3301      	adds	r3, #1
 802a358:	b2da      	uxtb	r2, r3
 802a35a:	4b2b      	ldr	r3, [pc, #172]	; (802a408 <tcp_fasttmr+0xbc>)
 802a35c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 802a35e:	4b2b      	ldr	r3, [pc, #172]	; (802a40c <tcp_fasttmr+0xc0>)
 802a360:	681b      	ldr	r3, [r3, #0]
 802a362:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802a364:	e048      	b.n	802a3f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 802a366:	687b      	ldr	r3, [r7, #4]
 802a368:	7f5a      	ldrb	r2, [r3, #29]
 802a36a:	4b27      	ldr	r3, [pc, #156]	; (802a408 <tcp_fasttmr+0xbc>)
 802a36c:	781b      	ldrb	r3, [r3, #0]
 802a36e:	429a      	cmp	r2, r3
 802a370:	d03f      	beq.n	802a3f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 802a372:	4b25      	ldr	r3, [pc, #148]	; (802a408 <tcp_fasttmr+0xbc>)
 802a374:	781a      	ldrb	r2, [r3, #0]
 802a376:	687b      	ldr	r3, [r7, #4]
 802a378:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 802a37a:	687b      	ldr	r3, [r7, #4]
 802a37c:	7e9b      	ldrb	r3, [r3, #26]
 802a37e:	f003 0301 	and.w	r3, r3, #1
 802a382:	2b00      	cmp	r3, #0
 802a384:	d010      	beq.n	802a3a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 802a386:	687b      	ldr	r3, [r7, #4]
 802a388:	7e9b      	ldrb	r3, [r3, #26]
 802a38a:	f043 0302 	orr.w	r3, r3, #2
 802a38e:	b2da      	uxtb	r2, r3
 802a390:	687b      	ldr	r3, [r7, #4]
 802a392:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 802a394:	6878      	ldr	r0, [r7, #4]
 802a396:	f003 fd59 	bl	802de4c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 802a39a:	687b      	ldr	r3, [r7, #4]
 802a39c:	7e9b      	ldrb	r3, [r3, #26]
 802a39e:	f023 0303 	bic.w	r3, r3, #3
 802a3a2:	b2da      	uxtb	r2, r3
 802a3a4:	687b      	ldr	r3, [r7, #4]
 802a3a6:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 802a3a8:	687b      	ldr	r3, [r7, #4]
 802a3aa:	7e9b      	ldrb	r3, [r3, #26]
 802a3ac:	f003 0308 	and.w	r3, r3, #8
 802a3b0:	2b00      	cmp	r3, #0
 802a3b2:	d009      	beq.n	802a3c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	7e9b      	ldrb	r3, [r3, #26]
 802a3b8:	f023 0308 	bic.w	r3, r3, #8
 802a3bc:	b2da      	uxtb	r2, r3
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 802a3c2:	6878      	ldr	r0, [r7, #4]
 802a3c4:	f7ff f988 	bl	80296d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 802a3c8:	687b      	ldr	r3, [r7, #4]
 802a3ca:	68db      	ldr	r3, [r3, #12]
 802a3cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 802a3ce:	687b      	ldr	r3, [r7, #4]
 802a3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a3d2:	2b00      	cmp	r3, #0
 802a3d4:	d00a      	beq.n	802a3ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 802a3d6:	4b0e      	ldr	r3, [pc, #56]	; (802a410 <tcp_fasttmr+0xc4>)
 802a3d8:	2200      	movs	r2, #0
 802a3da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 802a3dc:	6878      	ldr	r0, [r7, #4]
 802a3de:	f000 f819 	bl	802a414 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 802a3e2:	4b0b      	ldr	r3, [pc, #44]	; (802a410 <tcp_fasttmr+0xc4>)
 802a3e4:	781b      	ldrb	r3, [r3, #0]
 802a3e6:	2b00      	cmp	r3, #0
 802a3e8:	d000      	beq.n	802a3ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 802a3ea:	e7b8      	b.n	802a35e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 802a3ec:	683b      	ldr	r3, [r7, #0]
 802a3ee:	607b      	str	r3, [r7, #4]
 802a3f0:	e002      	b.n	802a3f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 802a3f2:	687b      	ldr	r3, [r7, #4]
 802a3f4:	68db      	ldr	r3, [r3, #12]
 802a3f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 802a3f8:	687b      	ldr	r3, [r7, #4]
 802a3fa:	2b00      	cmp	r3, #0
 802a3fc:	d1b3      	bne.n	802a366 <tcp_fasttmr+0x1a>
    }
  }
}
 802a3fe:	bf00      	nop
 802a400:	bf00      	nop
 802a402:	3708      	adds	r7, #8
 802a404:	46bd      	mov	sp, r7
 802a406:	bd80      	pop	{r7, pc}
 802a408:	20006a56 	.word	0x20006a56
 802a40c:	20006a4c 	.word	0x20006a4c
 802a410:	20006a54 	.word	0x20006a54

0802a414 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 802a414:	b590      	push	{r4, r7, lr}
 802a416:	b085      	sub	sp, #20
 802a418:	af00      	add	r7, sp, #0
 802a41a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 802a41c:	687b      	ldr	r3, [r7, #4]
 802a41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a420:	7b5b      	ldrb	r3, [r3, #13]
 802a422:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 802a424:	687b      	ldr	r3, [r7, #4]
 802a426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a428:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	2200      	movs	r2, #0
 802a42e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 802a430:	687b      	ldr	r3, [r7, #4]
 802a432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802a436:	2b00      	cmp	r3, #0
 802a438:	d00b      	beq.n	802a452 <tcp_process_refused_data+0x3e>
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 802a440:	687b      	ldr	r3, [r7, #4]
 802a442:	6918      	ldr	r0, [r3, #16]
 802a444:	2300      	movs	r3, #0
 802a446:	68ba      	ldr	r2, [r7, #8]
 802a448:	6879      	ldr	r1, [r7, #4]
 802a44a:	47a0      	blx	r4
 802a44c:	4603      	mov	r3, r0
 802a44e:	73fb      	strb	r3, [r7, #15]
 802a450:	e007      	b.n	802a462 <tcp_process_refused_data+0x4e>
 802a452:	2300      	movs	r3, #0
 802a454:	68ba      	ldr	r2, [r7, #8]
 802a456:	6879      	ldr	r1, [r7, #4]
 802a458:	2000      	movs	r0, #0
 802a45a:	f000 f89c 	bl	802a596 <tcp_recv_null>
 802a45e:	4603      	mov	r3, r0
 802a460:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 802a462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a466:	2b00      	cmp	r3, #0
 802a468:	d12a      	bne.n	802a4c0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 802a46a:	7bbb      	ldrb	r3, [r7, #14]
 802a46c:	f003 0320 	and.w	r3, r3, #32
 802a470:	2b00      	cmp	r3, #0
 802a472:	d033      	beq.n	802a4dc <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 802a474:	687b      	ldr	r3, [r7, #4]
 802a476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802a478:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802a47c:	d005      	beq.n	802a48a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 802a47e:	687b      	ldr	r3, [r7, #4]
 802a480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802a482:	3301      	adds	r3, #1
 802a484:	b29a      	uxth	r2, r3
 802a486:	687b      	ldr	r3, [r7, #4]
 802a488:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 802a48a:	687b      	ldr	r3, [r7, #4]
 802a48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802a490:	2b00      	cmp	r3, #0
 802a492:	d00b      	beq.n	802a4ac <tcp_process_refused_data+0x98>
 802a494:	687b      	ldr	r3, [r7, #4]
 802a496:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 802a49a:	687b      	ldr	r3, [r7, #4]
 802a49c:	6918      	ldr	r0, [r3, #16]
 802a49e:	2300      	movs	r3, #0
 802a4a0:	2200      	movs	r2, #0
 802a4a2:	6879      	ldr	r1, [r7, #4]
 802a4a4:	47a0      	blx	r4
 802a4a6:	4603      	mov	r3, r0
 802a4a8:	73fb      	strb	r3, [r7, #15]
 802a4aa:	e001      	b.n	802a4b0 <tcp_process_refused_data+0x9c>
 802a4ac:	2300      	movs	r3, #0
 802a4ae:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 802a4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a4b4:	f113 0f0d 	cmn.w	r3, #13
 802a4b8:	d110      	bne.n	802a4dc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 802a4ba:	f06f 030c 	mvn.w	r3, #12
 802a4be:	e00e      	b.n	802a4de <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 802a4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a4c4:	f113 0f0d 	cmn.w	r3, #13
 802a4c8:	d102      	bne.n	802a4d0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 802a4ca:	f06f 030c 	mvn.w	r3, #12
 802a4ce:	e006      	b.n	802a4de <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 802a4d0:	687b      	ldr	r3, [r7, #4]
 802a4d2:	68ba      	ldr	r2, [r7, #8]
 802a4d4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 802a4d6:	f06f 0304 	mvn.w	r3, #4
 802a4da:	e000      	b.n	802a4de <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 802a4dc:	2300      	movs	r3, #0
}
 802a4de:	4618      	mov	r0, r3
 802a4e0:	3714      	adds	r7, #20
 802a4e2:	46bd      	mov	sp, r7
 802a4e4:	bd90      	pop	{r4, r7, pc}

0802a4e6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 802a4e6:	b580      	push	{r7, lr}
 802a4e8:	b084      	sub	sp, #16
 802a4ea:	af00      	add	r7, sp, #0
 802a4ec:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 802a4ee:	e007      	b.n	802a500 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 802a4f0:	687b      	ldr	r3, [r7, #4]
 802a4f2:	681b      	ldr	r3, [r3, #0]
 802a4f4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 802a4f6:	6878      	ldr	r0, [r7, #4]
 802a4f8:	f000 f80a 	bl	802a510 <tcp_seg_free>
    seg = next;
 802a4fc:	68fb      	ldr	r3, [r7, #12]
 802a4fe:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 802a500:	687b      	ldr	r3, [r7, #4]
 802a502:	2b00      	cmp	r3, #0
 802a504:	d1f4      	bne.n	802a4f0 <tcp_segs_free+0xa>
  }
}
 802a506:	bf00      	nop
 802a508:	bf00      	nop
 802a50a:	3710      	adds	r7, #16
 802a50c:	46bd      	mov	sp, r7
 802a50e:	bd80      	pop	{r7, pc}

0802a510 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 802a510:	b580      	push	{r7, lr}
 802a512:	b082      	sub	sp, #8
 802a514:	af00      	add	r7, sp, #0
 802a516:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 802a518:	687b      	ldr	r3, [r7, #4]
 802a51a:	2b00      	cmp	r3, #0
 802a51c:	d00c      	beq.n	802a538 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 802a51e:	687b      	ldr	r3, [r7, #4]
 802a520:	685b      	ldr	r3, [r3, #4]
 802a522:	2b00      	cmp	r3, #0
 802a524:	d004      	beq.n	802a530 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 802a526:	687b      	ldr	r3, [r7, #4]
 802a528:	685b      	ldr	r3, [r3, #4]
 802a52a:	4618      	mov	r0, r3
 802a52c:	f7fe fcfc 	bl	8028f28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 802a530:	6879      	ldr	r1, [r7, #4]
 802a532:	2003      	movs	r0, #3
 802a534:	f7fd ffc8 	bl	80284c8 <memp_free>
  }
}
 802a538:	bf00      	nop
 802a53a:	3708      	adds	r7, #8
 802a53c:	46bd      	mov	sp, r7
 802a53e:	bd80      	pop	{r7, pc}

0802a540 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 802a540:	b480      	push	{r7}
 802a542:	b083      	sub	sp, #12
 802a544:	af00      	add	r7, sp, #0
 802a546:	6078      	str	r0, [r7, #4]
 802a548:	460b      	mov	r3, r1
 802a54a:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 802a54c:	687b      	ldr	r3, [r7, #4]
 802a54e:	78fa      	ldrb	r2, [r7, #3]
 802a550:	755a      	strb	r2, [r3, #21]
}
 802a552:	bf00      	nop
 802a554:	370c      	adds	r7, #12
 802a556:	46bd      	mov	sp, r7
 802a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a55c:	4770      	bx	lr

0802a55e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 802a55e:	b580      	push	{r7, lr}
 802a560:	b084      	sub	sp, #16
 802a562:	af00      	add	r7, sp, #0
 802a564:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 802a566:	2003      	movs	r0, #3
 802a568:	f7fd ff62 	bl	8028430 <memp_malloc>
 802a56c:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 802a56e:	68fb      	ldr	r3, [r7, #12]
 802a570:	2b00      	cmp	r3, #0
 802a572:	d101      	bne.n	802a578 <tcp_seg_copy+0x1a>
    return NULL;
 802a574:	2300      	movs	r3, #0
 802a576:	e00a      	b.n	802a58e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 802a578:	2210      	movs	r2, #16
 802a57a:	6879      	ldr	r1, [r7, #4]
 802a57c:	68f8      	ldr	r0, [r7, #12]
 802a57e:	f006 fe2b 	bl	80311d8 <memcpy>
  pbuf_ref(cseg->p);
 802a582:	68fb      	ldr	r3, [r7, #12]
 802a584:	685b      	ldr	r3, [r3, #4]
 802a586:	4618      	mov	r0, r3
 802a588:	f7fe fd7a 	bl	8029080 <pbuf_ref>
  return cseg;
 802a58c:	68fb      	ldr	r3, [r7, #12]
}
 802a58e:	4618      	mov	r0, r3
 802a590:	3710      	adds	r7, #16
 802a592:	46bd      	mov	sp, r7
 802a594:	bd80      	pop	{r7, pc}

0802a596 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 802a596:	b580      	push	{r7, lr}
 802a598:	b084      	sub	sp, #16
 802a59a:	af00      	add	r7, sp, #0
 802a59c:	60f8      	str	r0, [r7, #12]
 802a59e:	60b9      	str	r1, [r7, #8]
 802a5a0:	607a      	str	r2, [r7, #4]
 802a5a2:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 802a5a4:	687b      	ldr	r3, [r7, #4]
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d009      	beq.n	802a5be <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 802a5aa:	687b      	ldr	r3, [r7, #4]
 802a5ac:	891b      	ldrh	r3, [r3, #8]
 802a5ae:	4619      	mov	r1, r3
 802a5b0:	68b8      	ldr	r0, [r7, #8]
 802a5b2:	f7ff fb6b 	bl	8029c8c <tcp_recved>
    pbuf_free(p);
 802a5b6:	6878      	ldr	r0, [r7, #4]
 802a5b8:	f7fe fcb6 	bl	8028f28 <pbuf_free>
 802a5bc:	e008      	b.n	802a5d0 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 802a5be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	d104      	bne.n	802a5d0 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 802a5c6:	68b8      	ldr	r0, [r7, #8]
 802a5c8:	f7ff f8f0 	bl	80297ac <tcp_close>
 802a5cc:	4603      	mov	r3, r0
 802a5ce:	e000      	b.n	802a5d2 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 802a5d0:	2300      	movs	r3, #0
}
 802a5d2:	4618      	mov	r0, r3
 802a5d4:	3710      	adds	r7, #16
 802a5d6:	46bd      	mov	sp, r7
 802a5d8:	bd80      	pop	{r7, pc}
	...

0802a5dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 802a5dc:	b580      	push	{r7, lr}
 802a5de:	b086      	sub	sp, #24
 802a5e0:	af00      	add	r7, sp, #0
 802a5e2:	4603      	mov	r3, r0
 802a5e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 802a5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	db01      	blt.n	802a5f2 <tcp_kill_prio+0x16>
 802a5ee:	79fb      	ldrb	r3, [r7, #7]
 802a5f0:	e000      	b.n	802a5f4 <tcp_kill_prio+0x18>
 802a5f2:	237f      	movs	r3, #127	; 0x7f
 802a5f4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 802a5f6:	2300      	movs	r3, #0
 802a5f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802a5fa:	2300      	movs	r3, #0
 802a5fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802a5fe:	4b16      	ldr	r3, [pc, #88]	; (802a658 <tcp_kill_prio+0x7c>)
 802a600:	681b      	ldr	r3, [r3, #0]
 802a602:	617b      	str	r3, [r7, #20]
 802a604:	e01a      	b.n	802a63c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 802a606:	697b      	ldr	r3, [r7, #20]
 802a608:	7d5b      	ldrb	r3, [r3, #21]
 802a60a:	7afa      	ldrb	r2, [r7, #11]
 802a60c:	429a      	cmp	r2, r3
 802a60e:	d312      	bcc.n	802a636 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802a610:	4b12      	ldr	r3, [pc, #72]	; (802a65c <tcp_kill_prio+0x80>)
 802a612:	681a      	ldr	r2, [r3, #0]
 802a614:	697b      	ldr	r3, [r7, #20]
 802a616:	6a1b      	ldr	r3, [r3, #32]
 802a618:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 802a61a:	68fa      	ldr	r2, [r7, #12]
 802a61c:	429a      	cmp	r2, r3
 802a61e:	d80a      	bhi.n	802a636 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 802a620:	4b0e      	ldr	r3, [pc, #56]	; (802a65c <tcp_kill_prio+0x80>)
 802a622:	681a      	ldr	r2, [r3, #0]
 802a624:	697b      	ldr	r3, [r7, #20]
 802a626:	6a1b      	ldr	r3, [r3, #32]
 802a628:	1ad3      	subs	r3, r2, r3
 802a62a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 802a62c:	697b      	ldr	r3, [r7, #20]
 802a62e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 802a630:	697b      	ldr	r3, [r7, #20]
 802a632:	7d5b      	ldrb	r3, [r3, #21]
 802a634:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802a636:	697b      	ldr	r3, [r7, #20]
 802a638:	68db      	ldr	r3, [r3, #12]
 802a63a:	617b      	str	r3, [r7, #20]
 802a63c:	697b      	ldr	r3, [r7, #20]
 802a63e:	2b00      	cmp	r3, #0
 802a640:	d1e1      	bne.n	802a606 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 802a642:	693b      	ldr	r3, [r7, #16]
 802a644:	2b00      	cmp	r3, #0
 802a646:	d002      	beq.n	802a64e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 802a648:	6938      	ldr	r0, [r7, #16]
 802a64a:	f7ff f979 	bl	8029940 <tcp_abort>
  }
}
 802a64e:	bf00      	nop
 802a650:	3718      	adds	r7, #24
 802a652:	46bd      	mov	sp, r7
 802a654:	bd80      	pop	{r7, pc}
 802a656:	bf00      	nop
 802a658:	20006a4c 	.word	0x20006a4c
 802a65c:	20006a40 	.word	0x20006a40

0802a660 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 802a660:	b580      	push	{r7, lr}
 802a662:	b086      	sub	sp, #24
 802a664:	af00      	add	r7, sp, #0
 802a666:	4603      	mov	r3, r0
 802a668:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 802a66a:	79fb      	ldrb	r3, [r7, #7]
 802a66c:	2b08      	cmp	r3, #8
 802a66e:	d009      	beq.n	802a684 <tcp_kill_state+0x24>
 802a670:	79fb      	ldrb	r3, [r7, #7]
 802a672:	2b09      	cmp	r3, #9
 802a674:	d006      	beq.n	802a684 <tcp_kill_state+0x24>
 802a676:	4b1a      	ldr	r3, [pc, #104]	; (802a6e0 <tcp_kill_state+0x80>)
 802a678:	f240 52dc 	movw	r2, #1500	; 0x5dc
 802a67c:	4919      	ldr	r1, [pc, #100]	; (802a6e4 <tcp_kill_state+0x84>)
 802a67e:	481a      	ldr	r0, [pc, #104]	; (802a6e8 <tcp_kill_state+0x88>)
 802a680:	f006 fea0 	bl	80313c4 <iprintf>

  inactivity = 0;
 802a684:	2300      	movs	r3, #0
 802a686:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802a688:	2300      	movs	r3, #0
 802a68a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802a68c:	4b17      	ldr	r3, [pc, #92]	; (802a6ec <tcp_kill_state+0x8c>)
 802a68e:	681b      	ldr	r3, [r3, #0]
 802a690:	617b      	str	r3, [r7, #20]
 802a692:	e017      	b.n	802a6c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 802a694:	697b      	ldr	r3, [r7, #20]
 802a696:	7d1b      	ldrb	r3, [r3, #20]
 802a698:	79fa      	ldrb	r2, [r7, #7]
 802a69a:	429a      	cmp	r2, r3
 802a69c:	d10f      	bne.n	802a6be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802a69e:	4b14      	ldr	r3, [pc, #80]	; (802a6f0 <tcp_kill_state+0x90>)
 802a6a0:	681a      	ldr	r2, [r3, #0]
 802a6a2:	697b      	ldr	r3, [r7, #20]
 802a6a4:	6a1b      	ldr	r3, [r3, #32]
 802a6a6:	1ad3      	subs	r3, r2, r3
 802a6a8:	68fa      	ldr	r2, [r7, #12]
 802a6aa:	429a      	cmp	r2, r3
 802a6ac:	d807      	bhi.n	802a6be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 802a6ae:	4b10      	ldr	r3, [pc, #64]	; (802a6f0 <tcp_kill_state+0x90>)
 802a6b0:	681a      	ldr	r2, [r3, #0]
 802a6b2:	697b      	ldr	r3, [r7, #20]
 802a6b4:	6a1b      	ldr	r3, [r3, #32]
 802a6b6:	1ad3      	subs	r3, r2, r3
 802a6b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 802a6ba:	697b      	ldr	r3, [r7, #20]
 802a6bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802a6be:	697b      	ldr	r3, [r7, #20]
 802a6c0:	68db      	ldr	r3, [r3, #12]
 802a6c2:	617b      	str	r3, [r7, #20]
 802a6c4:	697b      	ldr	r3, [r7, #20]
 802a6c6:	2b00      	cmp	r3, #0
 802a6c8:	d1e4      	bne.n	802a694 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 802a6ca:	693b      	ldr	r3, [r7, #16]
 802a6cc:	2b00      	cmp	r3, #0
 802a6ce:	d003      	beq.n	802a6d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 802a6d0:	2100      	movs	r1, #0
 802a6d2:	6938      	ldr	r0, [r7, #16]
 802a6d4:	f7ff f882 	bl	80297dc <tcp_abandon>
  }
}
 802a6d8:	bf00      	nop
 802a6da:	3718      	adds	r7, #24
 802a6dc:	46bd      	mov	sp, r7
 802a6de:	bd80      	pop	{r7, pc}
 802a6e0:	08033fbc 	.word	0x08033fbc
 802a6e4:	080342cc 	.word	0x080342cc
 802a6e8:	08033ff8 	.word	0x08033ff8
 802a6ec:	20006a4c 	.word	0x20006a4c
 802a6f0:	20006a40 	.word	0x20006a40

0802a6f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 802a6f4:	b580      	push	{r7, lr}
 802a6f6:	b084      	sub	sp, #16
 802a6f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 802a6fa:	2300      	movs	r3, #0
 802a6fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 802a6fe:	2300      	movs	r3, #0
 802a700:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802a702:	4b12      	ldr	r3, [pc, #72]	; (802a74c <tcp_kill_timewait+0x58>)
 802a704:	681b      	ldr	r3, [r3, #0]
 802a706:	60fb      	str	r3, [r7, #12]
 802a708:	e012      	b.n	802a730 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802a70a:	4b11      	ldr	r3, [pc, #68]	; (802a750 <tcp_kill_timewait+0x5c>)
 802a70c:	681a      	ldr	r2, [r3, #0]
 802a70e:	68fb      	ldr	r3, [r7, #12]
 802a710:	6a1b      	ldr	r3, [r3, #32]
 802a712:	1ad3      	subs	r3, r2, r3
 802a714:	687a      	ldr	r2, [r7, #4]
 802a716:	429a      	cmp	r2, r3
 802a718:	d807      	bhi.n	802a72a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 802a71a:	4b0d      	ldr	r3, [pc, #52]	; (802a750 <tcp_kill_timewait+0x5c>)
 802a71c:	681a      	ldr	r2, [r3, #0]
 802a71e:	68fb      	ldr	r3, [r7, #12]
 802a720:	6a1b      	ldr	r3, [r3, #32]
 802a722:	1ad3      	subs	r3, r2, r3
 802a724:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 802a726:	68fb      	ldr	r3, [r7, #12]
 802a728:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802a72a:	68fb      	ldr	r3, [r7, #12]
 802a72c:	68db      	ldr	r3, [r3, #12]
 802a72e:	60fb      	str	r3, [r7, #12]
 802a730:	68fb      	ldr	r3, [r7, #12]
 802a732:	2b00      	cmp	r3, #0
 802a734:	d1e9      	bne.n	802a70a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 802a736:	68bb      	ldr	r3, [r7, #8]
 802a738:	2b00      	cmp	r3, #0
 802a73a:	d002      	beq.n	802a742 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 802a73c:	68b8      	ldr	r0, [r7, #8]
 802a73e:	f7ff f8ff 	bl	8029940 <tcp_abort>
  }
}
 802a742:	bf00      	nop
 802a744:	3710      	adds	r7, #16
 802a746:	46bd      	mov	sp, r7
 802a748:	bd80      	pop	{r7, pc}
 802a74a:	bf00      	nop
 802a74c:	20006a50 	.word	0x20006a50
 802a750:	20006a40 	.word	0x20006a40

0802a754 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 802a754:	b580      	push	{r7, lr}
 802a756:	b084      	sub	sp, #16
 802a758:	af00      	add	r7, sp, #0
 802a75a:	4603      	mov	r3, r0
 802a75c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802a75e:	2001      	movs	r0, #1
 802a760:	f7fd fe66 	bl	8028430 <memp_malloc>
 802a764:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 802a766:	68fb      	ldr	r3, [r7, #12]
 802a768:	2b00      	cmp	r3, #0
 802a76a:	d124      	bne.n	802a7b6 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 802a76c:	f7ff ffc2 	bl	802a6f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802a770:	2001      	movs	r0, #1
 802a772:	f7fd fe5d 	bl	8028430 <memp_malloc>
 802a776:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 802a778:	68fb      	ldr	r3, [r7, #12]
 802a77a:	2b00      	cmp	r3, #0
 802a77c:	d11b      	bne.n	802a7b6 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 802a77e:	2009      	movs	r0, #9
 802a780:	f7ff ff6e 	bl	802a660 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802a784:	2001      	movs	r0, #1
 802a786:	f7fd fe53 	bl	8028430 <memp_malloc>
 802a78a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 802a78c:	68fb      	ldr	r3, [r7, #12]
 802a78e:	2b00      	cmp	r3, #0
 802a790:	d111      	bne.n	802a7b6 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 802a792:	2008      	movs	r0, #8
 802a794:	f7ff ff64 	bl	802a660 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802a798:	2001      	movs	r0, #1
 802a79a:	f7fd fe49 	bl	8028430 <memp_malloc>
 802a79e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 802a7a0:	68fb      	ldr	r3, [r7, #12]
 802a7a2:	2b00      	cmp	r3, #0
 802a7a4:	d107      	bne.n	802a7b6 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 802a7a6:	79fb      	ldrb	r3, [r7, #7]
 802a7a8:	4618      	mov	r0, r3
 802a7aa:	f7ff ff17 	bl	802a5dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802a7ae:	2001      	movs	r0, #1
 802a7b0:	f7fd fe3e 	bl	8028430 <memp_malloc>
 802a7b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 802a7b6:	68fb      	ldr	r3, [r7, #12]
 802a7b8:	2b00      	cmp	r3, #0
 802a7ba:	d03f      	beq.n	802a83c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 802a7bc:	2298      	movs	r2, #152	; 0x98
 802a7be:	2100      	movs	r1, #0
 802a7c0:	68f8      	ldr	r0, [r7, #12]
 802a7c2:	f006 fd17 	bl	80311f4 <memset>
    pcb->prio = prio;
 802a7c6:	68fb      	ldr	r3, [r7, #12]
 802a7c8:	79fa      	ldrb	r2, [r7, #7]
 802a7ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 802a7cc:	68fb      	ldr	r3, [r7, #12]
 802a7ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 802a7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 802a7d6:	68fb      	ldr	r3, [r7, #12]
 802a7d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 802a7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 802a7de:	68fb      	ldr	r3, [r7, #12]
 802a7e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802a7e2:	68fb      	ldr	r3, [r7, #12]
 802a7e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 802a7e6:	68fb      	ldr	r3, [r7, #12]
 802a7e8:	22ff      	movs	r2, #255	; 0xff
 802a7ea:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 802a7ec:	68fb      	ldr	r3, [r7, #12]
 802a7ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 802a7f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 802a7f4:	68fb      	ldr	r3, [r7, #12]
 802a7f6:	2206      	movs	r2, #6
 802a7f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 802a7fc:	68fb      	ldr	r3, [r7, #12]
 802a7fe:	2206      	movs	r2, #6
 802a800:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 802a802:	68fb      	ldr	r3, [r7, #12]
 802a804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a808:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 802a80a:	68fb      	ldr	r3, [r7, #12]
 802a80c:	2201      	movs	r2, #1
 802a80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 802a812:	4b0d      	ldr	r3, [pc, #52]	; (802a848 <tcp_alloc+0xf4>)
 802a814:	681a      	ldr	r2, [r3, #0]
 802a816:	68fb      	ldr	r3, [r7, #12]
 802a818:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 802a81a:	4b0c      	ldr	r3, [pc, #48]	; (802a84c <tcp_alloc+0xf8>)
 802a81c:	781a      	ldrb	r2, [r3, #0]
 802a81e:	68fb      	ldr	r3, [r7, #12]
 802a820:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 802a822:	68fb      	ldr	r3, [r7, #12]
 802a824:	f44f 6286 	mov.w	r2, #1072	; 0x430
 802a828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 802a82c:	68fb      	ldr	r3, [r7, #12]
 802a82e:	4a08      	ldr	r2, [pc, #32]	; (802a850 <tcp_alloc+0xfc>)
 802a830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 802a834:	68fb      	ldr	r3, [r7, #12]
 802a836:	4a07      	ldr	r2, [pc, #28]	; (802a854 <tcp_alloc+0x100>)
 802a838:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 802a83c:	68fb      	ldr	r3, [r7, #12]
}
 802a83e:	4618      	mov	r0, r3
 802a840:	3710      	adds	r7, #16
 802a842:	46bd      	mov	sp, r7
 802a844:	bd80      	pop	{r7, pc}
 802a846:	bf00      	nop
 802a848:	20006a40 	.word	0x20006a40
 802a84c:	20006a56 	.word	0x20006a56
 802a850:	0802a597 	.word	0x0802a597
 802a854:	006ddd00 	.word	0x006ddd00

0802a858 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 802a858:	b580      	push	{r7, lr}
 802a85a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 802a85c:	2040      	movs	r0, #64	; 0x40
 802a85e:	f7ff ff79 	bl	802a754 <tcp_alloc>
 802a862:	4603      	mov	r3, r0
}
 802a864:	4618      	mov	r0, r3
 802a866:	bd80      	pop	{r7, pc}

0802a868 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 802a868:	b480      	push	{r7}
 802a86a:	b083      	sub	sp, #12
 802a86c:	af00      	add	r7, sp, #0
 802a86e:	6078      	str	r0, [r7, #4]
 802a870:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 802a872:	687b      	ldr	r3, [r7, #4]
 802a874:	2b00      	cmp	r3, #0
 802a876:	d002      	beq.n	802a87e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 802a878:	687b      	ldr	r3, [r7, #4]
 802a87a:	683a      	ldr	r2, [r7, #0]
 802a87c:	611a      	str	r2, [r3, #16]
  }
}
 802a87e:	bf00      	nop
 802a880:	370c      	adds	r7, #12
 802a882:	46bd      	mov	sp, r7
 802a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a888:	4770      	bx	lr
	...

0802a88c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 802a88c:	b580      	push	{r7, lr}
 802a88e:	b082      	sub	sp, #8
 802a890:	af00      	add	r7, sp, #0
 802a892:	6078      	str	r0, [r7, #4]
 802a894:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 802a896:	687b      	ldr	r3, [r7, #4]
 802a898:	2b00      	cmp	r3, #0
 802a89a:	d00e      	beq.n	802a8ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 802a89c:	687b      	ldr	r3, [r7, #4]
 802a89e:	7d1b      	ldrb	r3, [r3, #20]
 802a8a0:	2b01      	cmp	r3, #1
 802a8a2:	d106      	bne.n	802a8b2 <tcp_recv+0x26>
 802a8a4:	4b07      	ldr	r3, [pc, #28]	; (802a8c4 <tcp_recv+0x38>)
 802a8a6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 802a8aa:	4907      	ldr	r1, [pc, #28]	; (802a8c8 <tcp_recv+0x3c>)
 802a8ac:	4807      	ldr	r0, [pc, #28]	; (802a8cc <tcp_recv+0x40>)
 802a8ae:	f006 fd89 	bl	80313c4 <iprintf>
    pcb->recv = recv;
 802a8b2:	687b      	ldr	r3, [r7, #4]
 802a8b4:	683a      	ldr	r2, [r7, #0]
 802a8b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 802a8ba:	bf00      	nop
 802a8bc:	3708      	adds	r7, #8
 802a8be:	46bd      	mov	sp, r7
 802a8c0:	bd80      	pop	{r7, pc}
 802a8c2:	bf00      	nop
 802a8c4:	08033fbc 	.word	0x08033fbc
 802a8c8:	080342dc 	.word	0x080342dc
 802a8cc:	08033ff8 	.word	0x08033ff8

0802a8d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 802a8d0:	b580      	push	{r7, lr}
 802a8d2:	b082      	sub	sp, #8
 802a8d4:	af00      	add	r7, sp, #0
 802a8d6:	6078      	str	r0, [r7, #4]
 802a8d8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 802a8da:	687b      	ldr	r3, [r7, #4]
 802a8dc:	2b00      	cmp	r3, #0
 802a8de:	d00d      	beq.n	802a8fc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 802a8e0:	687b      	ldr	r3, [r7, #4]
 802a8e2:	7d1b      	ldrb	r3, [r3, #20]
 802a8e4:	2b01      	cmp	r3, #1
 802a8e6:	d106      	bne.n	802a8f6 <tcp_sent+0x26>
 802a8e8:	4b06      	ldr	r3, [pc, #24]	; (802a904 <tcp_sent+0x34>)
 802a8ea:	f240 62cc 	movw	r2, #1740	; 0x6cc
 802a8ee:	4906      	ldr	r1, [pc, #24]	; (802a908 <tcp_sent+0x38>)
 802a8f0:	4806      	ldr	r0, [pc, #24]	; (802a90c <tcp_sent+0x3c>)
 802a8f2:	f006 fd67 	bl	80313c4 <iprintf>
    pcb->sent = sent;
 802a8f6:	687b      	ldr	r3, [r7, #4]
 802a8f8:	683a      	ldr	r2, [r7, #0]
 802a8fa:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 802a8fc:	bf00      	nop
 802a8fe:	3708      	adds	r7, #8
 802a900:	46bd      	mov	sp, r7
 802a902:	bd80      	pop	{r7, pc}
 802a904:	08033fbc 	.word	0x08033fbc
 802a908:	08034304 	.word	0x08034304
 802a90c:	08033ff8 	.word	0x08033ff8

0802a910 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 802a910:	b580      	push	{r7, lr}
 802a912:	b082      	sub	sp, #8
 802a914:	af00      	add	r7, sp, #0
 802a916:	6078      	str	r0, [r7, #4]
 802a918:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 802a91a:	687b      	ldr	r3, [r7, #4]
 802a91c:	2b00      	cmp	r3, #0
 802a91e:	d00e      	beq.n	802a93e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 802a920:	687b      	ldr	r3, [r7, #4]
 802a922:	7d1b      	ldrb	r3, [r3, #20]
 802a924:	2b01      	cmp	r3, #1
 802a926:	d106      	bne.n	802a936 <tcp_err+0x26>
 802a928:	4b07      	ldr	r3, [pc, #28]	; (802a948 <tcp_err+0x38>)
 802a92a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 802a92e:	4907      	ldr	r1, [pc, #28]	; (802a94c <tcp_err+0x3c>)
 802a930:	4807      	ldr	r0, [pc, #28]	; (802a950 <tcp_err+0x40>)
 802a932:	f006 fd47 	bl	80313c4 <iprintf>
    pcb->errf = err;
 802a936:	687b      	ldr	r3, [r7, #4]
 802a938:	683a      	ldr	r2, [r7, #0]
 802a93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 802a93e:	bf00      	nop
 802a940:	3708      	adds	r7, #8
 802a942:	46bd      	mov	sp, r7
 802a944:	bd80      	pop	{r7, pc}
 802a946:	bf00      	nop
 802a948:	08033fbc 	.word	0x08033fbc
 802a94c:	0803432c 	.word	0x0803432c
 802a950:	08033ff8 	.word	0x08033ff8

0802a954 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 802a954:	b480      	push	{r7}
 802a956:	b085      	sub	sp, #20
 802a958:	af00      	add	r7, sp, #0
 802a95a:	6078      	str	r0, [r7, #4]
 802a95c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 802a95e:	687b      	ldr	r3, [r7, #4]
 802a960:	2b00      	cmp	r3, #0
 802a962:	d008      	beq.n	802a976 <tcp_accept+0x22>
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	7d1b      	ldrb	r3, [r3, #20]
 802a968:	2b01      	cmp	r3, #1
 802a96a:	d104      	bne.n	802a976 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 802a96c:	687b      	ldr	r3, [r7, #4]
 802a96e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 802a970:	68fb      	ldr	r3, [r7, #12]
 802a972:	683a      	ldr	r2, [r7, #0]
 802a974:	619a      	str	r2, [r3, #24]
  }
}
 802a976:	bf00      	nop
 802a978:	3714      	adds	r7, #20
 802a97a:	46bd      	mov	sp, r7
 802a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a980:	4770      	bx	lr
	...

0802a984 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 802a984:	b580      	push	{r7, lr}
 802a986:	b084      	sub	sp, #16
 802a988:	af00      	add	r7, sp, #0
 802a98a:	60f8      	str	r0, [r7, #12]
 802a98c:	60b9      	str	r1, [r7, #8]
 802a98e:	4613      	mov	r3, r2
 802a990:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 802a992:	68fb      	ldr	r3, [r7, #12]
 802a994:	7d1b      	ldrb	r3, [r3, #20]
 802a996:	2b01      	cmp	r3, #1
 802a998:	d106      	bne.n	802a9a8 <tcp_poll+0x24>
 802a99a:	4b09      	ldr	r3, [pc, #36]	; (802a9c0 <tcp_poll+0x3c>)
 802a99c:	f240 7203 	movw	r2, #1795	; 0x703
 802a9a0:	4908      	ldr	r1, [pc, #32]	; (802a9c4 <tcp_poll+0x40>)
 802a9a2:	4809      	ldr	r0, [pc, #36]	; (802a9c8 <tcp_poll+0x44>)
 802a9a4:	f006 fd0e 	bl	80313c4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 802a9a8:	68fb      	ldr	r3, [r7, #12]
 802a9aa:	68ba      	ldr	r2, [r7, #8]
 802a9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 802a9b0:	68fb      	ldr	r3, [r7, #12]
 802a9b2:	79fa      	ldrb	r2, [r7, #7]
 802a9b4:	771a      	strb	r2, [r3, #28]
}
 802a9b6:	bf00      	nop
 802a9b8:	3710      	adds	r7, #16
 802a9ba:	46bd      	mov	sp, r7
 802a9bc:	bd80      	pop	{r7, pc}
 802a9be:	bf00      	nop
 802a9c0:	08033fbc 	.word	0x08033fbc
 802a9c4:	08034354 	.word	0x08034354
 802a9c8:	08033ff8 	.word	0x08033ff8

0802a9cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 802a9cc:	b580      	push	{r7, lr}
 802a9ce:	b082      	sub	sp, #8
 802a9d0:	af00      	add	r7, sp, #0
 802a9d2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 802a9d4:	687b      	ldr	r3, [r7, #4]
 802a9d6:	7d1b      	ldrb	r3, [r3, #20]
 802a9d8:	2b00      	cmp	r3, #0
 802a9da:	d034      	beq.n	802aa46 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 802a9dc:	687b      	ldr	r3, [r7, #4]
 802a9de:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 802a9e0:	2b0a      	cmp	r3, #10
 802a9e2:	d030      	beq.n	802aa46 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 802a9e4:	687b      	ldr	r3, [r7, #4]
 802a9e6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 802a9e8:	2b01      	cmp	r3, #1
 802a9ea:	d02c      	beq.n	802aa46 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 802a9ec:	687b      	ldr	r3, [r7, #4]
 802a9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a9f0:	2b00      	cmp	r3, #0
 802a9f2:	d007      	beq.n	802aa04 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 802a9f4:	687b      	ldr	r3, [r7, #4]
 802a9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a9f8:	4618      	mov	r0, r3
 802a9fa:	f7fe fa95 	bl	8028f28 <pbuf_free>
      pcb->refused_data = NULL;
 802a9fe:	687b      	ldr	r3, [r7, #4]
 802aa00:	2200      	movs	r2, #0
 802aa02:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 802aa04:	687b      	ldr	r3, [r7, #4]
 802aa06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa08:	4618      	mov	r0, r3
 802aa0a:	f7ff fd6c 	bl	802a4e6 <tcp_segs_free>
    pcb->ooseq = NULL;
 802aa0e:	687b      	ldr	r3, [r7, #4]
 802aa10:	2200      	movs	r2, #0
 802aa12:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 802aa14:	687b      	ldr	r3, [r7, #4]
 802aa16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802aa1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 802aa1c:	687b      	ldr	r3, [r7, #4]
 802aa1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802aa20:	4618      	mov	r0, r3
 802aa22:	f7ff fd60 	bl	802a4e6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 802aa26:	687b      	ldr	r3, [r7, #4]
 802aa28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802aa2a:	4618      	mov	r0, r3
 802aa2c:	f7ff fd5b 	bl	802a4e6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 802aa30:	687b      	ldr	r3, [r7, #4]
 802aa32:	2200      	movs	r2, #0
 802aa34:	669a      	str	r2, [r3, #104]	; 0x68
 802aa36:	687b      	ldr	r3, [r7, #4]
 802aa38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 802aa3a:	687b      	ldr	r3, [r7, #4]
 802aa3c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 802aa3e:	687b      	ldr	r3, [r7, #4]
 802aa40:	2200      	movs	r2, #0
 802aa42:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 802aa46:	bf00      	nop
 802aa48:	3708      	adds	r7, #8
 802aa4a:	46bd      	mov	sp, r7
 802aa4c:	bd80      	pop	{r7, pc}
	...

0802aa50 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 802aa50:	b580      	push	{r7, lr}
 802aa52:	b084      	sub	sp, #16
 802aa54:	af00      	add	r7, sp, #0
 802aa56:	6078      	str	r0, [r7, #4]
 802aa58:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 802aa5a:	687b      	ldr	r3, [r7, #4]
 802aa5c:	681b      	ldr	r3, [r3, #0]
 802aa5e:	683a      	ldr	r2, [r7, #0]
 802aa60:	429a      	cmp	r2, r3
 802aa62:	d105      	bne.n	802aa70 <tcp_pcb_remove+0x20>
 802aa64:	687b      	ldr	r3, [r7, #4]
 802aa66:	681b      	ldr	r3, [r3, #0]
 802aa68:	68da      	ldr	r2, [r3, #12]
 802aa6a:	687b      	ldr	r3, [r7, #4]
 802aa6c:	601a      	str	r2, [r3, #0]
 802aa6e:	e013      	b.n	802aa98 <tcp_pcb_remove+0x48>
 802aa70:	687b      	ldr	r3, [r7, #4]
 802aa72:	681b      	ldr	r3, [r3, #0]
 802aa74:	60fb      	str	r3, [r7, #12]
 802aa76:	e00c      	b.n	802aa92 <tcp_pcb_remove+0x42>
 802aa78:	68fb      	ldr	r3, [r7, #12]
 802aa7a:	68db      	ldr	r3, [r3, #12]
 802aa7c:	683a      	ldr	r2, [r7, #0]
 802aa7e:	429a      	cmp	r2, r3
 802aa80:	d104      	bne.n	802aa8c <tcp_pcb_remove+0x3c>
 802aa82:	683b      	ldr	r3, [r7, #0]
 802aa84:	68da      	ldr	r2, [r3, #12]
 802aa86:	68fb      	ldr	r3, [r7, #12]
 802aa88:	60da      	str	r2, [r3, #12]
 802aa8a:	e005      	b.n	802aa98 <tcp_pcb_remove+0x48>
 802aa8c:	68fb      	ldr	r3, [r7, #12]
 802aa8e:	68db      	ldr	r3, [r3, #12]
 802aa90:	60fb      	str	r3, [r7, #12]
 802aa92:	68fb      	ldr	r3, [r7, #12]
 802aa94:	2b00      	cmp	r3, #0
 802aa96:	d1ef      	bne.n	802aa78 <tcp_pcb_remove+0x28>
 802aa98:	683b      	ldr	r3, [r7, #0]
 802aa9a:	2200      	movs	r2, #0
 802aa9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 802aa9e:	6838      	ldr	r0, [r7, #0]
 802aaa0:	f7ff ff94 	bl	802a9cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 802aaa4:	683b      	ldr	r3, [r7, #0]
 802aaa6:	7d1b      	ldrb	r3, [r3, #20]
 802aaa8:	2b0a      	cmp	r3, #10
 802aaaa:	d013      	beq.n	802aad4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 802aaac:	683b      	ldr	r3, [r7, #0]
 802aaae:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 802aab0:	2b01      	cmp	r3, #1
 802aab2:	d00f      	beq.n	802aad4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 802aab4:	683b      	ldr	r3, [r7, #0]
 802aab6:	7e9b      	ldrb	r3, [r3, #26]
 802aab8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 802aabc:	2b00      	cmp	r3, #0
 802aabe:	d009      	beq.n	802aad4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 802aac0:	683b      	ldr	r3, [r7, #0]
 802aac2:	7e9b      	ldrb	r3, [r3, #26]
 802aac4:	f043 0302 	orr.w	r3, r3, #2
 802aac8:	b2da      	uxtb	r2, r3
 802aaca:	683b      	ldr	r3, [r7, #0]
 802aacc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 802aace:	6838      	ldr	r0, [r7, #0]
 802aad0:	f003 f9bc 	bl	802de4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 802aad4:	683b      	ldr	r3, [r7, #0]
 802aad6:	7d1b      	ldrb	r3, [r3, #20]
 802aad8:	2b01      	cmp	r3, #1
 802aada:	d020      	beq.n	802ab1e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 802aadc:	683b      	ldr	r3, [r7, #0]
 802aade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802aae0:	2b00      	cmp	r3, #0
 802aae2:	d006      	beq.n	802aaf2 <tcp_pcb_remove+0xa2>
 802aae4:	4b13      	ldr	r3, [pc, #76]	; (802ab34 <tcp_pcb_remove+0xe4>)
 802aae6:	f240 7253 	movw	r2, #1875	; 0x753
 802aaea:	4913      	ldr	r1, [pc, #76]	; (802ab38 <tcp_pcb_remove+0xe8>)
 802aaec:	4813      	ldr	r0, [pc, #76]	; (802ab3c <tcp_pcb_remove+0xec>)
 802aaee:	f006 fc69 	bl	80313c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 802aaf2:	683b      	ldr	r3, [r7, #0]
 802aaf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802aaf6:	2b00      	cmp	r3, #0
 802aaf8:	d006      	beq.n	802ab08 <tcp_pcb_remove+0xb8>
 802aafa:	4b0e      	ldr	r3, [pc, #56]	; (802ab34 <tcp_pcb_remove+0xe4>)
 802aafc:	f240 7254 	movw	r2, #1876	; 0x754
 802ab00:	490f      	ldr	r1, [pc, #60]	; (802ab40 <tcp_pcb_remove+0xf0>)
 802ab02:	480e      	ldr	r0, [pc, #56]	; (802ab3c <tcp_pcb_remove+0xec>)
 802ab04:	f006 fc5e 	bl	80313c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 802ab08:	683b      	ldr	r3, [r7, #0]
 802ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ab0c:	2b00      	cmp	r3, #0
 802ab0e:	d006      	beq.n	802ab1e <tcp_pcb_remove+0xce>
 802ab10:	4b08      	ldr	r3, [pc, #32]	; (802ab34 <tcp_pcb_remove+0xe4>)
 802ab12:	f240 7256 	movw	r2, #1878	; 0x756
 802ab16:	490b      	ldr	r1, [pc, #44]	; (802ab44 <tcp_pcb_remove+0xf4>)
 802ab18:	4808      	ldr	r0, [pc, #32]	; (802ab3c <tcp_pcb_remove+0xec>)
 802ab1a:	f006 fc53 	bl	80313c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 802ab1e:	683b      	ldr	r3, [r7, #0]
 802ab20:	2200      	movs	r2, #0
 802ab22:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 802ab24:	683b      	ldr	r3, [r7, #0]
 802ab26:	2200      	movs	r2, #0
 802ab28:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 802ab2a:	bf00      	nop
 802ab2c:	3710      	adds	r7, #16
 802ab2e:	46bd      	mov	sp, r7
 802ab30:	bd80      	pop	{r7, pc}
 802ab32:	bf00      	nop
 802ab34:	08033fbc 	.word	0x08033fbc
 802ab38:	08034374 	.word	0x08034374
 802ab3c:	08033ff8 	.word	0x08033ff8
 802ab40:	0803438c 	.word	0x0803438c
 802ab44:	080343a8 	.word	0x080343a8

0802ab48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 802ab48:	b480      	push	{r7}
 802ab4a:	b083      	sub	sp, #12
 802ab4c:	af00      	add	r7, sp, #0
 802ab4e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 802ab50:	4b07      	ldr	r3, [pc, #28]	; (802ab70 <tcp_next_iss+0x28>)
 802ab52:	681a      	ldr	r2, [r3, #0]
 802ab54:	4b07      	ldr	r3, [pc, #28]	; (802ab74 <tcp_next_iss+0x2c>)
 802ab56:	681b      	ldr	r3, [r3, #0]
 802ab58:	4413      	add	r3, r2
 802ab5a:	4a05      	ldr	r2, [pc, #20]	; (802ab70 <tcp_next_iss+0x28>)
 802ab5c:	6013      	str	r3, [r2, #0]
  return iss;
 802ab5e:	4b04      	ldr	r3, [pc, #16]	; (802ab70 <tcp_next_iss+0x28>)
 802ab60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 802ab62:	4618      	mov	r0, r3
 802ab64:	370c      	adds	r7, #12
 802ab66:	46bd      	mov	sp, r7
 802ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab6c:	4770      	bx	lr
 802ab6e:	bf00      	nop
 802ab70:	20000090 	.word	0x20000090
 802ab74:	20006a40 	.word	0x20006a40

0802ab78 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 802ab78:	b580      	push	{r7, lr}
 802ab7a:	b084      	sub	sp, #16
 802ab7c:	af00      	add	r7, sp, #0
 802ab7e:	4603      	mov	r3, r0
 802ab80:	6039      	str	r1, [r7, #0]
 802ab82:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 802ab84:	6838      	ldr	r0, [r7, #0]
 802ab86:	f005 f97f 	bl	802fe88 <ip4_route>
 802ab8a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 802ab8c:	68fb      	ldr	r3, [r7, #12]
 802ab8e:	2b00      	cmp	r3, #0
 802ab90:	d101      	bne.n	802ab96 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 802ab92:	88fb      	ldrh	r3, [r7, #6]
 802ab94:	e010      	b.n	802abb8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 802ab96:	68fb      	ldr	r3, [r7, #12]
 802ab98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 802ab9a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 802ab9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802aba0:	2b00      	cmp	r3, #0
 802aba2:	d008      	beq.n	802abb6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 802aba4:	897b      	ldrh	r3, [r7, #10]
 802aba6:	3b28      	subs	r3, #40	; 0x28
 802aba8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 802abaa:	893a      	ldrh	r2, [r7, #8]
 802abac:	88fb      	ldrh	r3, [r7, #6]
 802abae:	4293      	cmp	r3, r2
 802abb0:	bf28      	it	cs
 802abb2:	4613      	movcs	r3, r2
 802abb4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 802abb6:	88fb      	ldrh	r3, [r7, #6]
}
 802abb8:	4618      	mov	r0, r3
 802abba:	3710      	adds	r7, #16
 802abbc:	46bd      	mov	sp, r7
 802abbe:	bd80      	pop	{r7, pc}

0802abc0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 802abc0:	b580      	push	{r7, lr}
 802abc2:	b084      	sub	sp, #16
 802abc4:	af00      	add	r7, sp, #0
 802abc6:	6078      	str	r0, [r7, #4]
 802abc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 802abca:	683b      	ldr	r3, [r7, #0]
 802abcc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 802abce:	e011      	b.n	802abf4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 802abd0:	68fb      	ldr	r3, [r7, #12]
 802abd2:	681a      	ldr	r2, [r3, #0]
 802abd4:	687b      	ldr	r3, [r7, #4]
 802abd6:	681b      	ldr	r3, [r3, #0]
 802abd8:	429a      	cmp	r2, r3
 802abda:	d108      	bne.n	802abee <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 802abdc:	68fb      	ldr	r3, [r7, #12]
 802abde:	68db      	ldr	r3, [r3, #12]
 802abe0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 802abe2:	68f8      	ldr	r0, [r7, #12]
 802abe4:	f7fe feac 	bl	8029940 <tcp_abort>
      pcb = next;
 802abe8:	68bb      	ldr	r3, [r7, #8]
 802abea:	60fb      	str	r3, [r7, #12]
 802abec:	e002      	b.n	802abf4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 802abee:	68fb      	ldr	r3, [r7, #12]
 802abf0:	68db      	ldr	r3, [r3, #12]
 802abf2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 802abf4:	68fb      	ldr	r3, [r7, #12]
 802abf6:	2b00      	cmp	r3, #0
 802abf8:	d1ea      	bne.n	802abd0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 802abfa:	bf00      	nop
 802abfc:	bf00      	nop
 802abfe:	3710      	adds	r7, #16
 802ac00:	46bd      	mov	sp, r7
 802ac02:	bd80      	pop	{r7, pc}

0802ac04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 802ac04:	b580      	push	{r7, lr}
 802ac06:	b084      	sub	sp, #16
 802ac08:	af00      	add	r7, sp, #0
 802ac0a:	6078      	str	r0, [r7, #4]
 802ac0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 802ac0e:	687b      	ldr	r3, [r7, #4]
 802ac10:	2b00      	cmp	r3, #0
 802ac12:	d02c      	beq.n	802ac6e <tcp_netif_ip_addr_changed+0x6a>
 802ac14:	687b      	ldr	r3, [r7, #4]
 802ac16:	681b      	ldr	r3, [r3, #0]
 802ac18:	2b00      	cmp	r3, #0
 802ac1a:	d028      	beq.n	802ac6e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 802ac1c:	4b16      	ldr	r3, [pc, #88]	; (802ac78 <tcp_netif_ip_addr_changed+0x74>)
 802ac1e:	681b      	ldr	r3, [r3, #0]
 802ac20:	4619      	mov	r1, r3
 802ac22:	6878      	ldr	r0, [r7, #4]
 802ac24:	f7ff ffcc 	bl	802abc0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 802ac28:	4b14      	ldr	r3, [pc, #80]	; (802ac7c <tcp_netif_ip_addr_changed+0x78>)
 802ac2a:	681b      	ldr	r3, [r3, #0]
 802ac2c:	4619      	mov	r1, r3
 802ac2e:	6878      	ldr	r0, [r7, #4]
 802ac30:	f7ff ffc6 	bl	802abc0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 802ac34:	683b      	ldr	r3, [r7, #0]
 802ac36:	2b00      	cmp	r3, #0
 802ac38:	d019      	beq.n	802ac6e <tcp_netif_ip_addr_changed+0x6a>
 802ac3a:	683b      	ldr	r3, [r7, #0]
 802ac3c:	681b      	ldr	r3, [r3, #0]
 802ac3e:	2b00      	cmp	r3, #0
 802ac40:	d015      	beq.n	802ac6e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 802ac42:	4b0f      	ldr	r3, [pc, #60]	; (802ac80 <tcp_netif_ip_addr_changed+0x7c>)
 802ac44:	681b      	ldr	r3, [r3, #0]
 802ac46:	60fb      	str	r3, [r7, #12]
 802ac48:	e00e      	b.n	802ac68 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 802ac4a:	68fb      	ldr	r3, [r7, #12]
 802ac4c:	68db      	ldr	r3, [r3, #12]
 802ac4e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	681a      	ldr	r2, [r3, #0]
 802ac54:	687b      	ldr	r3, [r7, #4]
 802ac56:	681b      	ldr	r3, [r3, #0]
 802ac58:	429a      	cmp	r2, r3
 802ac5a:	d103      	bne.n	802ac64 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 802ac5c:	683b      	ldr	r3, [r7, #0]
 802ac5e:	681a      	ldr	r2, [r3, #0]
 802ac60:	68fb      	ldr	r3, [r7, #12]
 802ac62:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 802ac64:	68bb      	ldr	r3, [r7, #8]
 802ac66:	60fb      	str	r3, [r7, #12]
 802ac68:	68fb      	ldr	r3, [r7, #12]
 802ac6a:	2b00      	cmp	r3, #0
 802ac6c:	d1ed      	bne.n	802ac4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 802ac6e:	bf00      	nop
 802ac70:	3710      	adds	r7, #16
 802ac72:	46bd      	mov	sp, r7
 802ac74:	bd80      	pop	{r7, pc}
 802ac76:	bf00      	nop
 802ac78:	20006a4c 	.word	0x20006a4c
 802ac7c:	20006a44 	.word	0x20006a44
 802ac80:	20006a48 	.word	0x20006a48

0802ac84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 802ac84:	b590      	push	{r4, r7, lr}
 802ac86:	b08b      	sub	sp, #44	; 0x2c
 802ac88:	af02      	add	r7, sp, #8
 802ac8a:	6078      	str	r0, [r7, #4]
 802ac8c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 802ac8e:	687b      	ldr	r3, [r7, #4]
 802ac90:	685b      	ldr	r3, [r3, #4]
 802ac92:	4a82      	ldr	r2, [pc, #520]	; (802ae9c <tcp_input+0x218>)
 802ac94:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 802ac96:	687b      	ldr	r3, [r7, #4]
 802ac98:	895b      	ldrh	r3, [r3, #10]
 802ac9a:	2b13      	cmp	r3, #19
 802ac9c:	f240 8398 	bls.w	802b3d0 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 802aca0:	4b7f      	ldr	r3, [pc, #508]	; (802aea0 <tcp_input+0x21c>)
 802aca2:	695b      	ldr	r3, [r3, #20]
 802aca4:	4a7e      	ldr	r2, [pc, #504]	; (802aea0 <tcp_input+0x21c>)
 802aca6:	6812      	ldr	r2, [r2, #0]
 802aca8:	4611      	mov	r1, r2
 802acaa:	4618      	mov	r0, r3
 802acac:	f005 fb68 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802acb0:	4603      	mov	r3, r0
 802acb2:	2b00      	cmp	r3, #0
 802acb4:	f040 838e 	bne.w	802b3d4 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 802acb8:	4b79      	ldr	r3, [pc, #484]	; (802aea0 <tcp_input+0x21c>)
 802acba:	695b      	ldr	r3, [r3, #20]
 802acbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 802acc0:	2be0      	cmp	r3, #224	; 0xe0
 802acc2:	f000 8387 	beq.w	802b3d4 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 802acc6:	4b75      	ldr	r3, [pc, #468]	; (802ae9c <tcp_input+0x218>)
 802acc8:	681b      	ldr	r3, [r3, #0]
 802acca:	899b      	ldrh	r3, [r3, #12]
 802accc:	b29b      	uxth	r3, r3
 802acce:	4618      	mov	r0, r3
 802acd0:	f7fd f801 	bl	8027cd6 <lwip_htons>
 802acd4:	4603      	mov	r3, r0
 802acd6:	0b1b      	lsrs	r3, r3, #12
 802acd8:	b29b      	uxth	r3, r3
 802acda:	b2db      	uxtb	r3, r3
 802acdc:	009b      	lsls	r3, r3, #2
 802acde:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 802ace0:	7cbb      	ldrb	r3, [r7, #18]
 802ace2:	2b13      	cmp	r3, #19
 802ace4:	f240 8378 	bls.w	802b3d8 <tcp_input+0x754>
 802ace8:	7cbb      	ldrb	r3, [r7, #18]
 802acea:	b29a      	uxth	r2, r3
 802acec:	687b      	ldr	r3, [r7, #4]
 802acee:	891b      	ldrh	r3, [r3, #8]
 802acf0:	429a      	cmp	r2, r3
 802acf2:	f200 8371 	bhi.w	802b3d8 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 802acf6:	7cbb      	ldrb	r3, [r7, #18]
 802acf8:	b29b      	uxth	r3, r3
 802acfa:	3b14      	subs	r3, #20
 802acfc:	b29a      	uxth	r2, r3
 802acfe:	4b69      	ldr	r3, [pc, #420]	; (802aea4 <tcp_input+0x220>)
 802ad00:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 802ad02:	4b69      	ldr	r3, [pc, #420]	; (802aea8 <tcp_input+0x224>)
 802ad04:	2200      	movs	r2, #0
 802ad06:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 802ad08:	687b      	ldr	r3, [r7, #4]
 802ad0a:	895a      	ldrh	r2, [r3, #10]
 802ad0c:	7cbb      	ldrb	r3, [r7, #18]
 802ad0e:	b29b      	uxth	r3, r3
 802ad10:	429a      	cmp	r2, r3
 802ad12:	d30d      	bcc.n	802ad30 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 802ad14:	4b63      	ldr	r3, [pc, #396]	; (802aea4 <tcp_input+0x220>)
 802ad16:	881a      	ldrh	r2, [r3, #0]
 802ad18:	4b64      	ldr	r3, [pc, #400]	; (802aeac <tcp_input+0x228>)
 802ad1a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 802ad1c:	7cbb      	ldrb	r3, [r7, #18]
 802ad1e:	b29b      	uxth	r3, r3
 802ad20:	425b      	negs	r3, r3
 802ad22:	b29b      	uxth	r3, r3
 802ad24:	b21b      	sxth	r3, r3
 802ad26:	4619      	mov	r1, r3
 802ad28:	6878      	ldr	r0, [r7, #4]
 802ad2a:	f7fe f8d9 	bl	8028ee0 <pbuf_header>
 802ad2e:	e055      	b.n	802addc <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 802ad30:	687b      	ldr	r3, [r7, #4]
 802ad32:	681b      	ldr	r3, [r3, #0]
 802ad34:	2b00      	cmp	r3, #0
 802ad36:	d105      	bne.n	802ad44 <tcp_input+0xc0>
 802ad38:	4b5d      	ldr	r3, [pc, #372]	; (802aeb0 <tcp_input+0x22c>)
 802ad3a:	22b2      	movs	r2, #178	; 0xb2
 802ad3c:	495d      	ldr	r1, [pc, #372]	; (802aeb4 <tcp_input+0x230>)
 802ad3e:	485e      	ldr	r0, [pc, #376]	; (802aeb8 <tcp_input+0x234>)
 802ad40:	f006 fb40 	bl	80313c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 802ad44:	f06f 0113 	mvn.w	r1, #19
 802ad48:	6878      	ldr	r0, [r7, #4]
 802ad4a:	f7fe f8c9 	bl	8028ee0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 802ad4e:	687b      	ldr	r3, [r7, #4]
 802ad50:	895a      	ldrh	r2, [r3, #10]
 802ad52:	4b56      	ldr	r3, [pc, #344]	; (802aeac <tcp_input+0x228>)
 802ad54:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 802ad56:	4b53      	ldr	r3, [pc, #332]	; (802aea4 <tcp_input+0x220>)
 802ad58:	881a      	ldrh	r2, [r3, #0]
 802ad5a:	4b54      	ldr	r3, [pc, #336]	; (802aeac <tcp_input+0x228>)
 802ad5c:	881b      	ldrh	r3, [r3, #0]
 802ad5e:	1ad3      	subs	r3, r2, r3
 802ad60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 802ad62:	4b52      	ldr	r3, [pc, #328]	; (802aeac <tcp_input+0x228>)
 802ad64:	881b      	ldrh	r3, [r3, #0]
 802ad66:	425b      	negs	r3, r3
 802ad68:	b29b      	uxth	r3, r3
 802ad6a:	b21b      	sxth	r3, r3
 802ad6c:	4619      	mov	r1, r3
 802ad6e:	6878      	ldr	r0, [r7, #4]
 802ad70:	f7fe f8b6 	bl	8028ee0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 802ad74:	687b      	ldr	r3, [r7, #4]
 802ad76:	681b      	ldr	r3, [r3, #0]
 802ad78:	895b      	ldrh	r3, [r3, #10]
 802ad7a:	8a3a      	ldrh	r2, [r7, #16]
 802ad7c:	429a      	cmp	r2, r3
 802ad7e:	f200 832d 	bhi.w	802b3dc <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	681b      	ldr	r3, [r3, #0]
 802ad86:	685b      	ldr	r3, [r3, #4]
 802ad88:	4a47      	ldr	r2, [pc, #284]	; (802aea8 <tcp_input+0x224>)
 802ad8a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	681a      	ldr	r2, [r3, #0]
 802ad90:	8a3b      	ldrh	r3, [r7, #16]
 802ad92:	425b      	negs	r3, r3
 802ad94:	b29b      	uxth	r3, r3
 802ad96:	b21b      	sxth	r3, r3
 802ad98:	4619      	mov	r1, r3
 802ad9a:	4610      	mov	r0, r2
 802ad9c:	f7fe f8a0 	bl	8028ee0 <pbuf_header>
    p->tot_len -= opt2len;
 802ada0:	687b      	ldr	r3, [r7, #4]
 802ada2:	891a      	ldrh	r2, [r3, #8]
 802ada4:	8a3b      	ldrh	r3, [r7, #16]
 802ada6:	1ad3      	subs	r3, r2, r3
 802ada8:	b29a      	uxth	r2, r3
 802adaa:	687b      	ldr	r3, [r7, #4]
 802adac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 802adae:	687b      	ldr	r3, [r7, #4]
 802adb0:	895b      	ldrh	r3, [r3, #10]
 802adb2:	2b00      	cmp	r3, #0
 802adb4:	d005      	beq.n	802adc2 <tcp_input+0x13e>
 802adb6:	4b3e      	ldr	r3, [pc, #248]	; (802aeb0 <tcp_input+0x22c>)
 802adb8:	22cf      	movs	r2, #207	; 0xcf
 802adba:	4940      	ldr	r1, [pc, #256]	; (802aebc <tcp_input+0x238>)
 802adbc:	483e      	ldr	r0, [pc, #248]	; (802aeb8 <tcp_input+0x234>)
 802adbe:	f006 fb01 	bl	80313c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	891a      	ldrh	r2, [r3, #8]
 802adc6:	687b      	ldr	r3, [r7, #4]
 802adc8:	681b      	ldr	r3, [r3, #0]
 802adca:	891b      	ldrh	r3, [r3, #8]
 802adcc:	429a      	cmp	r2, r3
 802adce:	d005      	beq.n	802addc <tcp_input+0x158>
 802add0:	4b37      	ldr	r3, [pc, #220]	; (802aeb0 <tcp_input+0x22c>)
 802add2:	22d0      	movs	r2, #208	; 0xd0
 802add4:	493a      	ldr	r1, [pc, #232]	; (802aec0 <tcp_input+0x23c>)
 802add6:	4838      	ldr	r0, [pc, #224]	; (802aeb8 <tcp_input+0x234>)
 802add8:	f006 faf4 	bl	80313c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 802addc:	4b2f      	ldr	r3, [pc, #188]	; (802ae9c <tcp_input+0x218>)
 802adde:	681b      	ldr	r3, [r3, #0]
 802ade0:	881b      	ldrh	r3, [r3, #0]
 802ade2:	b29b      	uxth	r3, r3
 802ade4:	4a2d      	ldr	r2, [pc, #180]	; (802ae9c <tcp_input+0x218>)
 802ade6:	6814      	ldr	r4, [r2, #0]
 802ade8:	4618      	mov	r0, r3
 802adea:	f7fc ff74 	bl	8027cd6 <lwip_htons>
 802adee:	4603      	mov	r3, r0
 802adf0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 802adf2:	4b2a      	ldr	r3, [pc, #168]	; (802ae9c <tcp_input+0x218>)
 802adf4:	681b      	ldr	r3, [r3, #0]
 802adf6:	885b      	ldrh	r3, [r3, #2]
 802adf8:	b29b      	uxth	r3, r3
 802adfa:	4a28      	ldr	r2, [pc, #160]	; (802ae9c <tcp_input+0x218>)
 802adfc:	6814      	ldr	r4, [r2, #0]
 802adfe:	4618      	mov	r0, r3
 802ae00:	f7fc ff69 	bl	8027cd6 <lwip_htons>
 802ae04:	4603      	mov	r3, r0
 802ae06:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 802ae08:	4b24      	ldr	r3, [pc, #144]	; (802ae9c <tcp_input+0x218>)
 802ae0a:	681b      	ldr	r3, [r3, #0]
 802ae0c:	685b      	ldr	r3, [r3, #4]
 802ae0e:	4a23      	ldr	r2, [pc, #140]	; (802ae9c <tcp_input+0x218>)
 802ae10:	6814      	ldr	r4, [r2, #0]
 802ae12:	4618      	mov	r0, r3
 802ae14:	f7fc ff6d 	bl	8027cf2 <lwip_htonl>
 802ae18:	4603      	mov	r3, r0
 802ae1a:	6063      	str	r3, [r4, #4]
 802ae1c:	6863      	ldr	r3, [r4, #4]
 802ae1e:	4a29      	ldr	r2, [pc, #164]	; (802aec4 <tcp_input+0x240>)
 802ae20:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 802ae22:	4b1e      	ldr	r3, [pc, #120]	; (802ae9c <tcp_input+0x218>)
 802ae24:	681b      	ldr	r3, [r3, #0]
 802ae26:	689b      	ldr	r3, [r3, #8]
 802ae28:	4a1c      	ldr	r2, [pc, #112]	; (802ae9c <tcp_input+0x218>)
 802ae2a:	6814      	ldr	r4, [r2, #0]
 802ae2c:	4618      	mov	r0, r3
 802ae2e:	f7fc ff60 	bl	8027cf2 <lwip_htonl>
 802ae32:	4603      	mov	r3, r0
 802ae34:	60a3      	str	r3, [r4, #8]
 802ae36:	68a3      	ldr	r3, [r4, #8]
 802ae38:	4a23      	ldr	r2, [pc, #140]	; (802aec8 <tcp_input+0x244>)
 802ae3a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 802ae3c:	4b17      	ldr	r3, [pc, #92]	; (802ae9c <tcp_input+0x218>)
 802ae3e:	681b      	ldr	r3, [r3, #0]
 802ae40:	89db      	ldrh	r3, [r3, #14]
 802ae42:	b29b      	uxth	r3, r3
 802ae44:	4a15      	ldr	r2, [pc, #84]	; (802ae9c <tcp_input+0x218>)
 802ae46:	6814      	ldr	r4, [r2, #0]
 802ae48:	4618      	mov	r0, r3
 802ae4a:	f7fc ff44 	bl	8027cd6 <lwip_htons>
 802ae4e:	4603      	mov	r3, r0
 802ae50:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 802ae52:	4b12      	ldr	r3, [pc, #72]	; (802ae9c <tcp_input+0x218>)
 802ae54:	681b      	ldr	r3, [r3, #0]
 802ae56:	899b      	ldrh	r3, [r3, #12]
 802ae58:	b29b      	uxth	r3, r3
 802ae5a:	4618      	mov	r0, r3
 802ae5c:	f7fc ff3b 	bl	8027cd6 <lwip_htons>
 802ae60:	4603      	mov	r3, r0
 802ae62:	b2db      	uxtb	r3, r3
 802ae64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ae68:	b2da      	uxtb	r2, r3
 802ae6a:	4b18      	ldr	r3, [pc, #96]	; (802aecc <tcp_input+0x248>)
 802ae6c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 802ae6e:	687b      	ldr	r3, [r7, #4]
 802ae70:	891a      	ldrh	r2, [r3, #8]
 802ae72:	4b16      	ldr	r3, [pc, #88]	; (802aecc <tcp_input+0x248>)
 802ae74:	781b      	ldrb	r3, [r3, #0]
 802ae76:	f003 0303 	and.w	r3, r3, #3
 802ae7a:	2b00      	cmp	r3, #0
 802ae7c:	bf14      	ite	ne
 802ae7e:	2301      	movne	r3, #1
 802ae80:	2300      	moveq	r3, #0
 802ae82:	b2db      	uxtb	r3, r3
 802ae84:	b29b      	uxth	r3, r3
 802ae86:	4413      	add	r3, r2
 802ae88:	b29a      	uxth	r2, r3
 802ae8a:	4b11      	ldr	r3, [pc, #68]	; (802aed0 <tcp_input+0x24c>)
 802ae8c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 802ae8e:	2300      	movs	r3, #0
 802ae90:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802ae92:	4b10      	ldr	r3, [pc, #64]	; (802aed4 <tcp_input+0x250>)
 802ae94:	681b      	ldr	r3, [r3, #0]
 802ae96:	61fb      	str	r3, [r7, #28]
 802ae98:	e082      	b.n	802afa0 <tcp_input+0x31c>
 802ae9a:	bf00      	nop
 802ae9c:	20006a68 	.word	0x20006a68
 802aea0:	200034e4 	.word	0x200034e4
 802aea4:	20006a6c 	.word	0x20006a6c
 802aea8:	20006a70 	.word	0x20006a70
 802aeac:	20006a6e 	.word	0x20006a6e
 802aeb0:	080343c0 	.word	0x080343c0
 802aeb4:	080343f4 	.word	0x080343f4
 802aeb8:	08034404 	.word	0x08034404
 802aebc:	0803442c 	.word	0x0803442c
 802aec0:	08034438 	.word	0x08034438
 802aec4:	20006a78 	.word	0x20006a78
 802aec8:	20006a7c 	.word	0x20006a7c
 802aecc:	20006a84 	.word	0x20006a84
 802aed0:	20006a82 	.word	0x20006a82
 802aed4:	20006a4c 	.word	0x20006a4c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 802aed8:	69fb      	ldr	r3, [r7, #28]
 802aeda:	7d1b      	ldrb	r3, [r3, #20]
 802aedc:	2b00      	cmp	r3, #0
 802aede:	d105      	bne.n	802aeec <tcp_input+0x268>
 802aee0:	4b6e      	ldr	r3, [pc, #440]	; (802b09c <tcp_input+0x418>)
 802aee2:	22e2      	movs	r2, #226	; 0xe2
 802aee4:	496e      	ldr	r1, [pc, #440]	; (802b0a0 <tcp_input+0x41c>)
 802aee6:	486f      	ldr	r0, [pc, #444]	; (802b0a4 <tcp_input+0x420>)
 802aee8:	f006 fa6c 	bl	80313c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 802aeec:	69fb      	ldr	r3, [r7, #28]
 802aeee:	7d1b      	ldrb	r3, [r3, #20]
 802aef0:	2b0a      	cmp	r3, #10
 802aef2:	d105      	bne.n	802af00 <tcp_input+0x27c>
 802aef4:	4b69      	ldr	r3, [pc, #420]	; (802b09c <tcp_input+0x418>)
 802aef6:	22e3      	movs	r2, #227	; 0xe3
 802aef8:	496b      	ldr	r1, [pc, #428]	; (802b0a8 <tcp_input+0x424>)
 802aefa:	486a      	ldr	r0, [pc, #424]	; (802b0a4 <tcp_input+0x420>)
 802aefc:	f006 fa62 	bl	80313c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 802af00:	69fb      	ldr	r3, [r7, #28]
 802af02:	7d1b      	ldrb	r3, [r3, #20]
 802af04:	2b01      	cmp	r3, #1
 802af06:	d105      	bne.n	802af14 <tcp_input+0x290>
 802af08:	4b64      	ldr	r3, [pc, #400]	; (802b09c <tcp_input+0x418>)
 802af0a:	22e4      	movs	r2, #228	; 0xe4
 802af0c:	4967      	ldr	r1, [pc, #412]	; (802b0ac <tcp_input+0x428>)
 802af0e:	4865      	ldr	r0, [pc, #404]	; (802b0a4 <tcp_input+0x420>)
 802af10:	f006 fa58 	bl	80313c4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 802af14:	69fb      	ldr	r3, [r7, #28]
 802af16:	8b1a      	ldrh	r2, [r3, #24]
 802af18:	4b65      	ldr	r3, [pc, #404]	; (802b0b0 <tcp_input+0x42c>)
 802af1a:	681b      	ldr	r3, [r3, #0]
 802af1c:	881b      	ldrh	r3, [r3, #0]
 802af1e:	b29b      	uxth	r3, r3
 802af20:	429a      	cmp	r2, r3
 802af22:	d138      	bne.n	802af96 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 802af24:	69fb      	ldr	r3, [r7, #28]
 802af26:	8ada      	ldrh	r2, [r3, #22]
 802af28:	4b61      	ldr	r3, [pc, #388]	; (802b0b0 <tcp_input+0x42c>)
 802af2a:	681b      	ldr	r3, [r3, #0]
 802af2c:	885b      	ldrh	r3, [r3, #2]
 802af2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 802af30:	429a      	cmp	r2, r3
 802af32:	d130      	bne.n	802af96 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802af34:	69fb      	ldr	r3, [r7, #28]
 802af36:	685a      	ldr	r2, [r3, #4]
 802af38:	4b5e      	ldr	r3, [pc, #376]	; (802b0b4 <tcp_input+0x430>)
 802af3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 802af3c:	429a      	cmp	r2, r3
 802af3e:	d12a      	bne.n	802af96 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802af40:	69fb      	ldr	r3, [r7, #28]
 802af42:	681a      	ldr	r2, [r3, #0]
 802af44:	4b5b      	ldr	r3, [pc, #364]	; (802b0b4 <tcp_input+0x430>)
 802af46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802af48:	429a      	cmp	r2, r3
 802af4a:	d124      	bne.n	802af96 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 802af4c:	69fb      	ldr	r3, [r7, #28]
 802af4e:	68db      	ldr	r3, [r3, #12]
 802af50:	69fa      	ldr	r2, [r7, #28]
 802af52:	429a      	cmp	r2, r3
 802af54:	d105      	bne.n	802af62 <tcp_input+0x2de>
 802af56:	4b51      	ldr	r3, [pc, #324]	; (802b09c <tcp_input+0x418>)
 802af58:	22ec      	movs	r2, #236	; 0xec
 802af5a:	4957      	ldr	r1, [pc, #348]	; (802b0b8 <tcp_input+0x434>)
 802af5c:	4851      	ldr	r0, [pc, #324]	; (802b0a4 <tcp_input+0x420>)
 802af5e:	f006 fa31 	bl	80313c4 <iprintf>
      if (prev != NULL) {
 802af62:	69bb      	ldr	r3, [r7, #24]
 802af64:	2b00      	cmp	r3, #0
 802af66:	d00a      	beq.n	802af7e <tcp_input+0x2fa>
        prev->next = pcb->next;
 802af68:	69fb      	ldr	r3, [r7, #28]
 802af6a:	68da      	ldr	r2, [r3, #12]
 802af6c:	69bb      	ldr	r3, [r7, #24]
 802af6e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 802af70:	4b52      	ldr	r3, [pc, #328]	; (802b0bc <tcp_input+0x438>)
 802af72:	681a      	ldr	r2, [r3, #0]
 802af74:	69fb      	ldr	r3, [r7, #28]
 802af76:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 802af78:	4a50      	ldr	r2, [pc, #320]	; (802b0bc <tcp_input+0x438>)
 802af7a:	69fb      	ldr	r3, [r7, #28]
 802af7c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 802af7e:	69fb      	ldr	r3, [r7, #28]
 802af80:	68db      	ldr	r3, [r3, #12]
 802af82:	69fa      	ldr	r2, [r7, #28]
 802af84:	429a      	cmp	r2, r3
 802af86:	d10f      	bne.n	802afa8 <tcp_input+0x324>
 802af88:	4b44      	ldr	r3, [pc, #272]	; (802b09c <tcp_input+0x418>)
 802af8a:	22f4      	movs	r2, #244	; 0xf4
 802af8c:	494c      	ldr	r1, [pc, #304]	; (802b0c0 <tcp_input+0x43c>)
 802af8e:	4845      	ldr	r0, [pc, #276]	; (802b0a4 <tcp_input+0x420>)
 802af90:	f006 fa18 	bl	80313c4 <iprintf>
      break;
 802af94:	e008      	b.n	802afa8 <tcp_input+0x324>
    }
    prev = pcb;
 802af96:	69fb      	ldr	r3, [r7, #28]
 802af98:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802af9a:	69fb      	ldr	r3, [r7, #28]
 802af9c:	68db      	ldr	r3, [r3, #12]
 802af9e:	61fb      	str	r3, [r7, #28]
 802afa0:	69fb      	ldr	r3, [r7, #28]
 802afa2:	2b00      	cmp	r3, #0
 802afa4:	d198      	bne.n	802aed8 <tcp_input+0x254>
 802afa6:	e000      	b.n	802afaa <tcp_input+0x326>
      break;
 802afa8:	bf00      	nop
  }

  if (pcb == NULL) {
 802afaa:	69fb      	ldr	r3, [r7, #28]
 802afac:	2b00      	cmp	r3, #0
 802afae:	f040 808f 	bne.w	802b0d0 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802afb2:	4b44      	ldr	r3, [pc, #272]	; (802b0c4 <tcp_input+0x440>)
 802afb4:	681b      	ldr	r3, [r3, #0]
 802afb6:	61fb      	str	r3, [r7, #28]
 802afb8:	e02f      	b.n	802b01a <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 802afba:	69fb      	ldr	r3, [r7, #28]
 802afbc:	7d1b      	ldrb	r3, [r3, #20]
 802afbe:	2b0a      	cmp	r3, #10
 802afc0:	d005      	beq.n	802afce <tcp_input+0x34a>
 802afc2:	4b36      	ldr	r3, [pc, #216]	; (802b09c <tcp_input+0x418>)
 802afc4:	22fe      	movs	r2, #254	; 0xfe
 802afc6:	4940      	ldr	r1, [pc, #256]	; (802b0c8 <tcp_input+0x444>)
 802afc8:	4836      	ldr	r0, [pc, #216]	; (802b0a4 <tcp_input+0x420>)
 802afca:	f006 f9fb 	bl	80313c4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 802afce:	69fb      	ldr	r3, [r7, #28]
 802afd0:	8b1a      	ldrh	r2, [r3, #24]
 802afd2:	4b37      	ldr	r3, [pc, #220]	; (802b0b0 <tcp_input+0x42c>)
 802afd4:	681b      	ldr	r3, [r3, #0]
 802afd6:	881b      	ldrh	r3, [r3, #0]
 802afd8:	b29b      	uxth	r3, r3
 802afda:	429a      	cmp	r2, r3
 802afdc:	d11a      	bne.n	802b014 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 802afde:	69fb      	ldr	r3, [r7, #28]
 802afe0:	8ada      	ldrh	r2, [r3, #22]
 802afe2:	4b33      	ldr	r3, [pc, #204]	; (802b0b0 <tcp_input+0x42c>)
 802afe4:	681b      	ldr	r3, [r3, #0]
 802afe6:	885b      	ldrh	r3, [r3, #2]
 802afe8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 802afea:	429a      	cmp	r2, r3
 802afec:	d112      	bne.n	802b014 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802afee:	69fb      	ldr	r3, [r7, #28]
 802aff0:	685a      	ldr	r2, [r3, #4]
 802aff2:	4b30      	ldr	r3, [pc, #192]	; (802b0b4 <tcp_input+0x430>)
 802aff4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 802aff6:	429a      	cmp	r2, r3
 802aff8:	d10c      	bne.n	802b014 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802affa:	69fb      	ldr	r3, [r7, #28]
 802affc:	681a      	ldr	r2, [r3, #0]
 802affe:	4b2d      	ldr	r3, [pc, #180]	; (802b0b4 <tcp_input+0x430>)
 802b000:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802b002:	429a      	cmp	r2, r3
 802b004:	d106      	bne.n	802b014 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 802b006:	69f8      	ldr	r0, [r7, #28]
 802b008:	f000 fb16 	bl	802b638 <tcp_timewait_input>
        pbuf_free(p);
 802b00c:	6878      	ldr	r0, [r7, #4]
 802b00e:	f7fd ff8b 	bl	8028f28 <pbuf_free>
        return;
 802b012:	e1e9      	b.n	802b3e8 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802b014:	69fb      	ldr	r3, [r7, #28]
 802b016:	68db      	ldr	r3, [r3, #12]
 802b018:	61fb      	str	r3, [r7, #28]
 802b01a:	69fb      	ldr	r3, [r7, #28]
 802b01c:	2b00      	cmp	r3, #0
 802b01e:	d1cc      	bne.n	802afba <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 802b020:	2300      	movs	r3, #0
 802b022:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802b024:	4b29      	ldr	r3, [pc, #164]	; (802b0cc <tcp_input+0x448>)
 802b026:	681b      	ldr	r3, [r3, #0]
 802b028:	617b      	str	r3, [r7, #20]
 802b02a:	e019      	b.n	802b060 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 802b02c:	697b      	ldr	r3, [r7, #20]
 802b02e:	8ada      	ldrh	r2, [r3, #22]
 802b030:	4b1f      	ldr	r3, [pc, #124]	; (802b0b0 <tcp_input+0x42c>)
 802b032:	681b      	ldr	r3, [r3, #0]
 802b034:	885b      	ldrh	r3, [r3, #2]
 802b036:	b29b      	uxth	r3, r3
 802b038:	429a      	cmp	r2, r3
 802b03a:	d10c      	bne.n	802b056 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 802b03c:	697b      	ldr	r3, [r7, #20]
 802b03e:	681a      	ldr	r2, [r3, #0]
 802b040:	4b1c      	ldr	r3, [pc, #112]	; (802b0b4 <tcp_input+0x430>)
 802b042:	695b      	ldr	r3, [r3, #20]
 802b044:	429a      	cmp	r2, r3
 802b046:	d00f      	beq.n	802b068 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 802b048:	697b      	ldr	r3, [r7, #20]
 802b04a:	2b00      	cmp	r3, #0
 802b04c:	d00d      	beq.n	802b06a <tcp_input+0x3e6>
 802b04e:	697b      	ldr	r3, [r7, #20]
 802b050:	681b      	ldr	r3, [r3, #0]
 802b052:	2b00      	cmp	r3, #0
 802b054:	d009      	beq.n	802b06a <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 802b056:	697b      	ldr	r3, [r7, #20]
 802b058:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802b05a:	697b      	ldr	r3, [r7, #20]
 802b05c:	68db      	ldr	r3, [r3, #12]
 802b05e:	617b      	str	r3, [r7, #20]
 802b060:	697b      	ldr	r3, [r7, #20]
 802b062:	2b00      	cmp	r3, #0
 802b064:	d1e2      	bne.n	802b02c <tcp_input+0x3a8>
 802b066:	e000      	b.n	802b06a <tcp_input+0x3e6>
            break;
 802b068:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 802b06a:	697b      	ldr	r3, [r7, #20]
 802b06c:	2b00      	cmp	r3, #0
 802b06e:	d02f      	beq.n	802b0d0 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 802b070:	69bb      	ldr	r3, [r7, #24]
 802b072:	2b00      	cmp	r3, #0
 802b074:	d00a      	beq.n	802b08c <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 802b076:	697b      	ldr	r3, [r7, #20]
 802b078:	68da      	ldr	r2, [r3, #12]
 802b07a:	69bb      	ldr	r3, [r7, #24]
 802b07c:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 802b07e:	4b13      	ldr	r3, [pc, #76]	; (802b0cc <tcp_input+0x448>)
 802b080:	681a      	ldr	r2, [r3, #0]
 802b082:	697b      	ldr	r3, [r7, #20]
 802b084:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 802b086:	4a11      	ldr	r2, [pc, #68]	; (802b0cc <tcp_input+0x448>)
 802b088:	697b      	ldr	r3, [r7, #20]
 802b08a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 802b08c:	6978      	ldr	r0, [r7, #20]
 802b08e:	f000 f9f3 	bl	802b478 <tcp_listen_input>
      pbuf_free(p);
 802b092:	6878      	ldr	r0, [r7, #4]
 802b094:	f7fd ff48 	bl	8028f28 <pbuf_free>
      return;
 802b098:	e1a6      	b.n	802b3e8 <tcp_input+0x764>
 802b09a:	bf00      	nop
 802b09c:	080343c0 	.word	0x080343c0
 802b0a0:	08034458 	.word	0x08034458
 802b0a4:	08034404 	.word	0x08034404
 802b0a8:	08034480 	.word	0x08034480
 802b0ac:	080344ac 	.word	0x080344ac
 802b0b0:	20006a68 	.word	0x20006a68
 802b0b4:	200034e4 	.word	0x200034e4
 802b0b8:	080344d4 	.word	0x080344d4
 802b0bc:	20006a4c 	.word	0x20006a4c
 802b0c0:	08034500 	.word	0x08034500
 802b0c4:	20006a50 	.word	0x20006a50
 802b0c8:	0803452c 	.word	0x0803452c
 802b0cc:	20006a48 	.word	0x20006a48
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 802b0d0:	69fb      	ldr	r3, [r7, #28]
 802b0d2:	2b00      	cmp	r3, #0
 802b0d4:	f000 8156 	beq.w	802b384 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 802b0d8:	4b94      	ldr	r3, [pc, #592]	; (802b32c <tcp_input+0x6a8>)
 802b0da:	2200      	movs	r2, #0
 802b0dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 802b0de:	687b      	ldr	r3, [r7, #4]
 802b0e0:	891a      	ldrh	r2, [r3, #8]
 802b0e2:	4b92      	ldr	r3, [pc, #584]	; (802b32c <tcp_input+0x6a8>)
 802b0e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 802b0e6:	4a91      	ldr	r2, [pc, #580]	; (802b32c <tcp_input+0x6a8>)
 802b0e8:	687b      	ldr	r3, [r7, #4]
 802b0ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 802b0ec:	4b90      	ldr	r3, [pc, #576]	; (802b330 <tcp_input+0x6ac>)
 802b0ee:	681b      	ldr	r3, [r3, #0]
 802b0f0:	4a8e      	ldr	r2, [pc, #568]	; (802b32c <tcp_input+0x6a8>)
 802b0f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 802b0f4:	4b8f      	ldr	r3, [pc, #572]	; (802b334 <tcp_input+0x6b0>)
 802b0f6:	2200      	movs	r2, #0
 802b0f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 802b0fa:	4b8f      	ldr	r3, [pc, #572]	; (802b338 <tcp_input+0x6b4>)
 802b0fc:	2200      	movs	r2, #0
 802b0fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 802b100:	4b8e      	ldr	r3, [pc, #568]	; (802b33c <tcp_input+0x6b8>)
 802b102:	2200      	movs	r2, #0
 802b104:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 802b106:	4b8e      	ldr	r3, [pc, #568]	; (802b340 <tcp_input+0x6bc>)
 802b108:	781b      	ldrb	r3, [r3, #0]
 802b10a:	f003 0308 	and.w	r3, r3, #8
 802b10e:	2b00      	cmp	r3, #0
 802b110:	d006      	beq.n	802b120 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 802b112:	687b      	ldr	r3, [r7, #4]
 802b114:	7b5b      	ldrb	r3, [r3, #13]
 802b116:	f043 0301 	orr.w	r3, r3, #1
 802b11a:	b2da      	uxtb	r2, r3
 802b11c:	687b      	ldr	r3, [r7, #4]
 802b11e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 802b120:	69fb      	ldr	r3, [r7, #28]
 802b122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b124:	2b00      	cmp	r3, #0
 802b126:	d017      	beq.n	802b158 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 802b128:	69f8      	ldr	r0, [r7, #28]
 802b12a:	f7ff f973 	bl	802a414 <tcp_process_refused_data>
 802b12e:	4603      	mov	r3, r0
 802b130:	f113 0f0d 	cmn.w	r3, #13
 802b134:	d007      	beq.n	802b146 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 802b136:	69fb      	ldr	r3, [r7, #28]
 802b138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 802b13a:	2b00      	cmp	r3, #0
 802b13c:	d00c      	beq.n	802b158 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 802b13e:	4b81      	ldr	r3, [pc, #516]	; (802b344 <tcp_input+0x6c0>)
 802b140:	881b      	ldrh	r3, [r3, #0]
 802b142:	2b00      	cmp	r3, #0
 802b144:	d008      	beq.n	802b158 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 802b146:	69fb      	ldr	r3, [r7, #28]
 802b148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b14a:	2b00      	cmp	r3, #0
 802b14c:	f040 80e2 	bne.w	802b314 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 802b150:	69f8      	ldr	r0, [r7, #28]
 802b152:	f002 fe1f 	bl	802dd94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 802b156:	e0dd      	b.n	802b314 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 802b158:	4a7b      	ldr	r2, [pc, #492]	; (802b348 <tcp_input+0x6c4>)
 802b15a:	69fb      	ldr	r3, [r7, #28]
 802b15c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 802b15e:	69f8      	ldr	r0, [r7, #28]
 802b160:	f000 fad2 	bl	802b708 <tcp_process>
 802b164:	4603      	mov	r3, r0
 802b166:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 802b168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802b16c:	f113 0f0d 	cmn.w	r3, #13
 802b170:	f000 80d2 	beq.w	802b318 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 802b174:	4b70      	ldr	r3, [pc, #448]	; (802b338 <tcp_input+0x6b4>)
 802b176:	781b      	ldrb	r3, [r3, #0]
 802b178:	f003 0308 	and.w	r3, r3, #8
 802b17c:	2b00      	cmp	r3, #0
 802b17e:	d016      	beq.n	802b1ae <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 802b180:	69fb      	ldr	r3, [r7, #28]
 802b182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b186:	2b00      	cmp	r3, #0
 802b188:	d008      	beq.n	802b19c <tcp_input+0x518>
 802b18a:	69fb      	ldr	r3, [r7, #28]
 802b18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b190:	69fa      	ldr	r2, [r7, #28]
 802b192:	6912      	ldr	r2, [r2, #16]
 802b194:	f06f 010d 	mvn.w	r1, #13
 802b198:	4610      	mov	r0, r2
 802b19a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 802b19c:	69f9      	ldr	r1, [r7, #28]
 802b19e:	486b      	ldr	r0, [pc, #428]	; (802b34c <tcp_input+0x6c8>)
 802b1a0:	f7ff fc56 	bl	802aa50 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 802b1a4:	69f9      	ldr	r1, [r7, #28]
 802b1a6:	2001      	movs	r0, #1
 802b1a8:	f7fd f98e 	bl	80284c8 <memp_free>
 802b1ac:	e0d7      	b.n	802b35e <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 802b1ae:	2300      	movs	r3, #0
 802b1b0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 802b1b2:	4b62      	ldr	r3, [pc, #392]	; (802b33c <tcp_input+0x6b8>)
 802b1b4:	881b      	ldrh	r3, [r3, #0]
 802b1b6:	2b00      	cmp	r3, #0
 802b1b8:	d01b      	beq.n	802b1f2 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 802b1ba:	4b60      	ldr	r3, [pc, #384]	; (802b33c <tcp_input+0x6b8>)
 802b1bc:	881b      	ldrh	r3, [r3, #0]
 802b1be:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 802b1c0:	69fb      	ldr	r3, [r7, #28]
 802b1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b1c4:	2b00      	cmp	r3, #0
 802b1c6:	d009      	beq.n	802b1dc <tcp_input+0x558>
 802b1c8:	69fb      	ldr	r3, [r7, #28]
 802b1ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b1cc:	69fa      	ldr	r2, [r7, #28]
 802b1ce:	6910      	ldr	r0, [r2, #16]
 802b1d0:	89fa      	ldrh	r2, [r7, #14]
 802b1d2:	69f9      	ldr	r1, [r7, #28]
 802b1d4:	4798      	blx	r3
 802b1d6:	4603      	mov	r3, r0
 802b1d8:	74fb      	strb	r3, [r7, #19]
 802b1da:	e001      	b.n	802b1e0 <tcp_input+0x55c>
 802b1dc:	2300      	movs	r3, #0
 802b1de:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 802b1e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802b1e4:	f113 0f0d 	cmn.w	r3, #13
 802b1e8:	f000 8098 	beq.w	802b31c <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 802b1ec:	4b53      	ldr	r3, [pc, #332]	; (802b33c <tcp_input+0x6b8>)
 802b1ee:	2200      	movs	r2, #0
 802b1f0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 802b1f2:	69f8      	ldr	r0, [r7, #28]
 802b1f4:	f000 f90e 	bl	802b414 <tcp_input_delayed_close>
 802b1f8:	4603      	mov	r3, r0
 802b1fa:	2b00      	cmp	r3, #0
 802b1fc:	f040 8090 	bne.w	802b320 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 802b200:	4b4c      	ldr	r3, [pc, #304]	; (802b334 <tcp_input+0x6b0>)
 802b202:	681b      	ldr	r3, [r3, #0]
 802b204:	2b00      	cmp	r3, #0
 802b206:	d041      	beq.n	802b28c <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 802b208:	69fb      	ldr	r3, [r7, #28]
 802b20a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b20c:	2b00      	cmp	r3, #0
 802b20e:	d006      	beq.n	802b21e <tcp_input+0x59a>
 802b210:	4b4f      	ldr	r3, [pc, #316]	; (802b350 <tcp_input+0x6cc>)
 802b212:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 802b216:	494f      	ldr	r1, [pc, #316]	; (802b354 <tcp_input+0x6d0>)
 802b218:	484f      	ldr	r0, [pc, #316]	; (802b358 <tcp_input+0x6d4>)
 802b21a:	f006 f8d3 	bl	80313c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 802b21e:	69fb      	ldr	r3, [r7, #28]
 802b220:	7e9b      	ldrb	r3, [r3, #26]
 802b222:	f003 0310 	and.w	r3, r3, #16
 802b226:	2b00      	cmp	r3, #0
 802b228:	d008      	beq.n	802b23c <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 802b22a:	4b42      	ldr	r3, [pc, #264]	; (802b334 <tcp_input+0x6b0>)
 802b22c:	681b      	ldr	r3, [r3, #0]
 802b22e:	4618      	mov	r0, r3
 802b230:	f7fd fe7a 	bl	8028f28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 802b234:	69f8      	ldr	r0, [r7, #28]
 802b236:	f7fe fb83 	bl	8029940 <tcp_abort>
            goto aborted;
 802b23a:	e090      	b.n	802b35e <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 802b23c:	69fb      	ldr	r3, [r7, #28]
 802b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802b242:	2b00      	cmp	r3, #0
 802b244:	d00c      	beq.n	802b260 <tcp_input+0x5dc>
 802b246:	69fb      	ldr	r3, [r7, #28]
 802b248:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 802b24c:	69fb      	ldr	r3, [r7, #28]
 802b24e:	6918      	ldr	r0, [r3, #16]
 802b250:	4b38      	ldr	r3, [pc, #224]	; (802b334 <tcp_input+0x6b0>)
 802b252:	681a      	ldr	r2, [r3, #0]
 802b254:	2300      	movs	r3, #0
 802b256:	69f9      	ldr	r1, [r7, #28]
 802b258:	47a0      	blx	r4
 802b25a:	4603      	mov	r3, r0
 802b25c:	74fb      	strb	r3, [r7, #19]
 802b25e:	e008      	b.n	802b272 <tcp_input+0x5ee>
 802b260:	4b34      	ldr	r3, [pc, #208]	; (802b334 <tcp_input+0x6b0>)
 802b262:	681a      	ldr	r2, [r3, #0]
 802b264:	2300      	movs	r3, #0
 802b266:	69f9      	ldr	r1, [r7, #28]
 802b268:	2000      	movs	r0, #0
 802b26a:	f7ff f994 	bl	802a596 <tcp_recv_null>
 802b26e:	4603      	mov	r3, r0
 802b270:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 802b272:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802b276:	f113 0f0d 	cmn.w	r3, #13
 802b27a:	d053      	beq.n	802b324 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 802b27c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802b280:	2b00      	cmp	r3, #0
 802b282:	d003      	beq.n	802b28c <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 802b284:	4b2b      	ldr	r3, [pc, #172]	; (802b334 <tcp_input+0x6b0>)
 802b286:	681a      	ldr	r2, [r3, #0]
 802b288:	69fb      	ldr	r3, [r7, #28]
 802b28a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 802b28c:	4b2a      	ldr	r3, [pc, #168]	; (802b338 <tcp_input+0x6b4>)
 802b28e:	781b      	ldrb	r3, [r3, #0]
 802b290:	f003 0320 	and.w	r3, r3, #32
 802b294:	2b00      	cmp	r3, #0
 802b296:	d030      	beq.n	802b2fa <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 802b298:	69fb      	ldr	r3, [r7, #28]
 802b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b29c:	2b00      	cmp	r3, #0
 802b29e:	d009      	beq.n	802b2b4 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 802b2a0:	69fb      	ldr	r3, [r7, #28]
 802b2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b2a4:	7b5a      	ldrb	r2, [r3, #13]
 802b2a6:	69fb      	ldr	r3, [r7, #28]
 802b2a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b2aa:	f042 0220 	orr.w	r2, r2, #32
 802b2ae:	b2d2      	uxtb	r2, r2
 802b2b0:	735a      	strb	r2, [r3, #13]
 802b2b2:	e022      	b.n	802b2fa <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 802b2b4:	69fb      	ldr	r3, [r7, #28]
 802b2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b2b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802b2bc:	d005      	beq.n	802b2ca <tcp_input+0x646>
              pcb->rcv_wnd++;
 802b2be:	69fb      	ldr	r3, [r7, #28]
 802b2c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b2c2:	3301      	adds	r3, #1
 802b2c4:	b29a      	uxth	r2, r3
 802b2c6:	69fb      	ldr	r3, [r7, #28]
 802b2c8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 802b2ca:	69fb      	ldr	r3, [r7, #28]
 802b2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802b2d0:	2b00      	cmp	r3, #0
 802b2d2:	d00b      	beq.n	802b2ec <tcp_input+0x668>
 802b2d4:	69fb      	ldr	r3, [r7, #28]
 802b2d6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 802b2da:	69fb      	ldr	r3, [r7, #28]
 802b2dc:	6918      	ldr	r0, [r3, #16]
 802b2de:	2300      	movs	r3, #0
 802b2e0:	2200      	movs	r2, #0
 802b2e2:	69f9      	ldr	r1, [r7, #28]
 802b2e4:	47a0      	blx	r4
 802b2e6:	4603      	mov	r3, r0
 802b2e8:	74fb      	strb	r3, [r7, #19]
 802b2ea:	e001      	b.n	802b2f0 <tcp_input+0x66c>
 802b2ec:	2300      	movs	r3, #0
 802b2ee:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 802b2f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802b2f4:	f113 0f0d 	cmn.w	r3, #13
 802b2f8:	d016      	beq.n	802b328 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 802b2fa:	4b13      	ldr	r3, [pc, #76]	; (802b348 <tcp_input+0x6c4>)
 802b2fc:	2200      	movs	r2, #0
 802b2fe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 802b300:	69f8      	ldr	r0, [r7, #28]
 802b302:	f000 f887 	bl	802b414 <tcp_input_delayed_close>
 802b306:	4603      	mov	r3, r0
 802b308:	2b00      	cmp	r3, #0
 802b30a:	d127      	bne.n	802b35c <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 802b30c:	69f8      	ldr	r0, [r7, #28]
 802b30e:	f002 fd9d 	bl	802de4c <tcp_output>
 802b312:	e024      	b.n	802b35e <tcp_input+0x6da>
        goto aborted;
 802b314:	bf00      	nop
 802b316:	e022      	b.n	802b35e <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 802b318:	bf00      	nop
 802b31a:	e020      	b.n	802b35e <tcp_input+0x6da>
              goto aborted;
 802b31c:	bf00      	nop
 802b31e:	e01e      	b.n	802b35e <tcp_input+0x6da>
          goto aborted;
 802b320:	bf00      	nop
 802b322:	e01c      	b.n	802b35e <tcp_input+0x6da>
            goto aborted;
 802b324:	bf00      	nop
 802b326:	e01a      	b.n	802b35e <tcp_input+0x6da>
              goto aborted;
 802b328:	bf00      	nop
 802b32a:	e018      	b.n	802b35e <tcp_input+0x6da>
 802b32c:	20006a58 	.word	0x20006a58
 802b330:	20006a68 	.word	0x20006a68
 802b334:	20006a88 	.word	0x20006a88
 802b338:	20006a85 	.word	0x20006a85
 802b33c:	20006a80 	.word	0x20006a80
 802b340:	20006a84 	.word	0x20006a84
 802b344:	20006a82 	.word	0x20006a82
 802b348:	20006a8c 	.word	0x20006a8c
 802b34c:	20006a4c 	.word	0x20006a4c
 802b350:	080343c0 	.word	0x080343c0
 802b354:	0803455c 	.word	0x0803455c
 802b358:	08034404 	.word	0x08034404
          goto aborted;
 802b35c:	bf00      	nop
    tcp_input_pcb = NULL;
 802b35e:	4b24      	ldr	r3, [pc, #144]	; (802b3f0 <tcp_input+0x76c>)
 802b360:	2200      	movs	r2, #0
 802b362:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 802b364:	4b23      	ldr	r3, [pc, #140]	; (802b3f4 <tcp_input+0x770>)
 802b366:	2200      	movs	r2, #0
 802b368:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 802b36a:	4b23      	ldr	r3, [pc, #140]	; (802b3f8 <tcp_input+0x774>)
 802b36c:	685b      	ldr	r3, [r3, #4]
 802b36e:	2b00      	cmp	r3, #0
 802b370:	d039      	beq.n	802b3e6 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 802b372:	4b21      	ldr	r3, [pc, #132]	; (802b3f8 <tcp_input+0x774>)
 802b374:	685b      	ldr	r3, [r3, #4]
 802b376:	4618      	mov	r0, r3
 802b378:	f7fd fdd6 	bl	8028f28 <pbuf_free>
      inseg.p = NULL;
 802b37c:	4b1e      	ldr	r3, [pc, #120]	; (802b3f8 <tcp_input+0x774>)
 802b37e:	2200      	movs	r2, #0
 802b380:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 802b382:	e030      	b.n	802b3e6 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 802b384:	4b1d      	ldr	r3, [pc, #116]	; (802b3fc <tcp_input+0x778>)
 802b386:	681b      	ldr	r3, [r3, #0]
 802b388:	899b      	ldrh	r3, [r3, #12]
 802b38a:	b29b      	uxth	r3, r3
 802b38c:	4618      	mov	r0, r3
 802b38e:	f7fc fca2 	bl	8027cd6 <lwip_htons>
 802b392:	4603      	mov	r3, r0
 802b394:	f003 0304 	and.w	r3, r3, #4
 802b398:	2b00      	cmp	r3, #0
 802b39a:	d115      	bne.n	802b3c8 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b39c:	4b18      	ldr	r3, [pc, #96]	; (802b400 <tcp_input+0x77c>)
 802b39e:	6818      	ldr	r0, [r3, #0]
 802b3a0:	4b18      	ldr	r3, [pc, #96]	; (802b404 <tcp_input+0x780>)
 802b3a2:	881b      	ldrh	r3, [r3, #0]
 802b3a4:	461a      	mov	r2, r3
 802b3a6:	4b18      	ldr	r3, [pc, #96]	; (802b408 <tcp_input+0x784>)
 802b3a8:	681b      	ldr	r3, [r3, #0]
 802b3aa:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b3ac:	4b13      	ldr	r3, [pc, #76]	; (802b3fc <tcp_input+0x778>)
 802b3ae:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b3b0:	885b      	ldrh	r3, [r3, #2]
 802b3b2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b3b4:	4a11      	ldr	r2, [pc, #68]	; (802b3fc <tcp_input+0x778>)
 802b3b6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b3b8:	8812      	ldrh	r2, [r2, #0]
 802b3ba:	b292      	uxth	r2, r2
 802b3bc:	9201      	str	r2, [sp, #4]
 802b3be:	9300      	str	r3, [sp, #0]
 802b3c0:	4b12      	ldr	r3, [pc, #72]	; (802b40c <tcp_input+0x788>)
 802b3c2:	4a13      	ldr	r2, [pc, #76]	; (802b410 <tcp_input+0x78c>)
 802b3c4:	f002 ffc6 	bl	802e354 <tcp_rst>
    pbuf_free(p);
 802b3c8:	6878      	ldr	r0, [r7, #4]
 802b3ca:	f7fd fdad 	bl	8028f28 <pbuf_free>
  return;
 802b3ce:	e00a      	b.n	802b3e6 <tcp_input+0x762>
    goto dropped;
 802b3d0:	bf00      	nop
 802b3d2:	e004      	b.n	802b3de <tcp_input+0x75a>
    goto dropped;
 802b3d4:	bf00      	nop
 802b3d6:	e002      	b.n	802b3de <tcp_input+0x75a>
    goto dropped;
 802b3d8:	bf00      	nop
 802b3da:	e000      	b.n	802b3de <tcp_input+0x75a>
      goto dropped;
 802b3dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 802b3de:	6878      	ldr	r0, [r7, #4]
 802b3e0:	f7fd fda2 	bl	8028f28 <pbuf_free>
 802b3e4:	e000      	b.n	802b3e8 <tcp_input+0x764>
  return;
 802b3e6:	bf00      	nop
}
 802b3e8:	3724      	adds	r7, #36	; 0x24
 802b3ea:	46bd      	mov	sp, r7
 802b3ec:	bd90      	pop	{r4, r7, pc}
 802b3ee:	bf00      	nop
 802b3f0:	20006a8c 	.word	0x20006a8c
 802b3f4:	20006a88 	.word	0x20006a88
 802b3f8:	20006a58 	.word	0x20006a58
 802b3fc:	20006a68 	.word	0x20006a68
 802b400:	20006a7c 	.word	0x20006a7c
 802b404:	20006a82 	.word	0x20006a82
 802b408:	20006a78 	.word	0x20006a78
 802b40c:	200034f4 	.word	0x200034f4
 802b410:	200034f8 	.word	0x200034f8

0802b414 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 802b414:	b580      	push	{r7, lr}
 802b416:	b082      	sub	sp, #8
 802b418:	af00      	add	r7, sp, #0
 802b41a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 802b41c:	4b14      	ldr	r3, [pc, #80]	; (802b470 <tcp_input_delayed_close+0x5c>)
 802b41e:	781b      	ldrb	r3, [r3, #0]
 802b420:	f003 0310 	and.w	r3, r3, #16
 802b424:	2b00      	cmp	r3, #0
 802b426:	d01d      	beq.n	802b464 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 802b428:	687b      	ldr	r3, [r7, #4]
 802b42a:	7e9b      	ldrb	r3, [r3, #26]
 802b42c:	f003 0310 	and.w	r3, r3, #16
 802b430:	2b00      	cmp	r3, #0
 802b432:	d10d      	bne.n	802b450 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 802b434:	687b      	ldr	r3, [r7, #4]
 802b436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b43a:	2b00      	cmp	r3, #0
 802b43c:	d008      	beq.n	802b450 <tcp_input_delayed_close+0x3c>
 802b43e:	687b      	ldr	r3, [r7, #4]
 802b440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802b444:	687a      	ldr	r2, [r7, #4]
 802b446:	6912      	ldr	r2, [r2, #16]
 802b448:	f06f 010e 	mvn.w	r1, #14
 802b44c:	4610      	mov	r0, r2
 802b44e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 802b450:	6879      	ldr	r1, [r7, #4]
 802b452:	4808      	ldr	r0, [pc, #32]	; (802b474 <tcp_input_delayed_close+0x60>)
 802b454:	f7ff fafc 	bl	802aa50 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 802b458:	6879      	ldr	r1, [r7, #4]
 802b45a:	2001      	movs	r0, #1
 802b45c:	f7fd f834 	bl	80284c8 <memp_free>
    return 1;
 802b460:	2301      	movs	r3, #1
 802b462:	e000      	b.n	802b466 <tcp_input_delayed_close+0x52>
  }
  return 0;
 802b464:	2300      	movs	r3, #0
}
 802b466:	4618      	mov	r0, r3
 802b468:	3708      	adds	r7, #8
 802b46a:	46bd      	mov	sp, r7
 802b46c:	bd80      	pop	{r7, pc}
 802b46e:	bf00      	nop
 802b470:	20006a85 	.word	0x20006a85
 802b474:	20006a4c 	.word	0x20006a4c

0802b478 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 802b478:	b580      	push	{r7, lr}
 802b47a:	b088      	sub	sp, #32
 802b47c:	af02      	add	r7, sp, #8
 802b47e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 802b480:	4b63      	ldr	r3, [pc, #396]	; (802b610 <tcp_listen_input+0x198>)
 802b482:	781b      	ldrb	r3, [r3, #0]
 802b484:	f003 0304 	and.w	r3, r3, #4
 802b488:	2b00      	cmp	r3, #0
 802b48a:	f040 80bb 	bne.w	802b604 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 802b48e:	4b60      	ldr	r3, [pc, #384]	; (802b610 <tcp_listen_input+0x198>)
 802b490:	781b      	ldrb	r3, [r3, #0]
 802b492:	f003 0310 	and.w	r3, r3, #16
 802b496:	2b00      	cmp	r3, #0
 802b498:	d016      	beq.n	802b4c8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b49a:	4b5e      	ldr	r3, [pc, #376]	; (802b614 <tcp_listen_input+0x19c>)
 802b49c:	6818      	ldr	r0, [r3, #0]
 802b49e:	4b5e      	ldr	r3, [pc, #376]	; (802b618 <tcp_listen_input+0x1a0>)
 802b4a0:	881b      	ldrh	r3, [r3, #0]
 802b4a2:	461a      	mov	r2, r3
 802b4a4:	4b5d      	ldr	r3, [pc, #372]	; (802b61c <tcp_listen_input+0x1a4>)
 802b4a6:	681b      	ldr	r3, [r3, #0]
 802b4a8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b4aa:	4b5d      	ldr	r3, [pc, #372]	; (802b620 <tcp_listen_input+0x1a8>)
 802b4ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b4ae:	885b      	ldrh	r3, [r3, #2]
 802b4b0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b4b2:	4a5b      	ldr	r2, [pc, #364]	; (802b620 <tcp_listen_input+0x1a8>)
 802b4b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b4b6:	8812      	ldrh	r2, [r2, #0]
 802b4b8:	b292      	uxth	r2, r2
 802b4ba:	9201      	str	r2, [sp, #4]
 802b4bc:	9300      	str	r3, [sp, #0]
 802b4be:	4b59      	ldr	r3, [pc, #356]	; (802b624 <tcp_listen_input+0x1ac>)
 802b4c0:	4a59      	ldr	r2, [pc, #356]	; (802b628 <tcp_listen_input+0x1b0>)
 802b4c2:	f002 ff47 	bl	802e354 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 802b4c6:	e09f      	b.n	802b608 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 802b4c8:	4b51      	ldr	r3, [pc, #324]	; (802b610 <tcp_listen_input+0x198>)
 802b4ca:	781b      	ldrb	r3, [r3, #0]
 802b4cc:	f003 0302 	and.w	r3, r3, #2
 802b4d0:	2b00      	cmp	r3, #0
 802b4d2:	f000 8099 	beq.w	802b608 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	7d5b      	ldrb	r3, [r3, #21]
 802b4da:	4618      	mov	r0, r3
 802b4dc:	f7ff f93a 	bl	802a754 <tcp_alloc>
 802b4e0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 802b4e2:	697b      	ldr	r3, [r7, #20]
 802b4e4:	2b00      	cmp	r3, #0
 802b4e6:	d111      	bne.n	802b50c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 802b4e8:	687b      	ldr	r3, [r7, #4]
 802b4ea:	699b      	ldr	r3, [r3, #24]
 802b4ec:	2b00      	cmp	r3, #0
 802b4ee:	d00a      	beq.n	802b506 <tcp_listen_input+0x8e>
 802b4f0:	687b      	ldr	r3, [r7, #4]
 802b4f2:	699b      	ldr	r3, [r3, #24]
 802b4f4:	687a      	ldr	r2, [r7, #4]
 802b4f6:	6910      	ldr	r0, [r2, #16]
 802b4f8:	f04f 32ff 	mov.w	r2, #4294967295
 802b4fc:	2100      	movs	r1, #0
 802b4fe:	4798      	blx	r3
 802b500:	4603      	mov	r3, r0
 802b502:	73bb      	strb	r3, [r7, #14]
      return;
 802b504:	e081      	b.n	802b60a <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 802b506:	23f0      	movs	r3, #240	; 0xf0
 802b508:	73bb      	strb	r3, [r7, #14]
      return;
 802b50a:	e07e      	b.n	802b60a <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 802b50c:	4b47      	ldr	r3, [pc, #284]	; (802b62c <tcp_listen_input+0x1b4>)
 802b50e:	695a      	ldr	r2, [r3, #20]
 802b510:	697b      	ldr	r3, [r7, #20]
 802b512:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 802b514:	4b45      	ldr	r3, [pc, #276]	; (802b62c <tcp_listen_input+0x1b4>)
 802b516:	691a      	ldr	r2, [r3, #16]
 802b518:	697b      	ldr	r3, [r7, #20]
 802b51a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 802b51c:	687b      	ldr	r3, [r7, #4]
 802b51e:	8ada      	ldrh	r2, [r3, #22]
 802b520:	697b      	ldr	r3, [r7, #20]
 802b522:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 802b524:	4b3e      	ldr	r3, [pc, #248]	; (802b620 <tcp_listen_input+0x1a8>)
 802b526:	681b      	ldr	r3, [r3, #0]
 802b528:	881b      	ldrh	r3, [r3, #0]
 802b52a:	b29a      	uxth	r2, r3
 802b52c:	697b      	ldr	r3, [r7, #20]
 802b52e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 802b530:	697b      	ldr	r3, [r7, #20]
 802b532:	2203      	movs	r2, #3
 802b534:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 802b536:	4b39      	ldr	r3, [pc, #228]	; (802b61c <tcp_listen_input+0x1a4>)
 802b538:	681b      	ldr	r3, [r3, #0]
 802b53a:	1c5a      	adds	r2, r3, #1
 802b53c:	697b      	ldr	r3, [r7, #20]
 802b53e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 802b540:	697b      	ldr	r3, [r7, #20]
 802b542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b544:	697b      	ldr	r3, [r7, #20]
 802b546:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 802b548:	6978      	ldr	r0, [r7, #20]
 802b54a:	f7ff fafd 	bl	802ab48 <tcp_next_iss>
 802b54e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 802b550:	697b      	ldr	r3, [r7, #20]
 802b552:	693a      	ldr	r2, [r7, #16]
 802b554:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 802b556:	697b      	ldr	r3, [r7, #20]
 802b558:	693a      	ldr	r2, [r7, #16]
 802b55a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 802b55c:	697b      	ldr	r3, [r7, #20]
 802b55e:	693a      	ldr	r2, [r7, #16]
 802b560:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 802b562:	697b      	ldr	r3, [r7, #20]
 802b564:	693a      	ldr	r2, [r7, #16]
 802b566:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 802b568:	4b2c      	ldr	r3, [pc, #176]	; (802b61c <tcp_listen_input+0x1a4>)
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	1e5a      	subs	r2, r3, #1
 802b56e:	697b      	ldr	r3, [r7, #20]
 802b570:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 802b572:	687b      	ldr	r3, [r7, #4]
 802b574:	691a      	ldr	r2, [r3, #16]
 802b576:	697b      	ldr	r3, [r7, #20]
 802b578:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 802b57a:	697b      	ldr	r3, [r7, #20]
 802b57c:	687a      	ldr	r2, [r7, #4]
 802b57e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 802b580:	687b      	ldr	r3, [r7, #4]
 802b582:	7a1b      	ldrb	r3, [r3, #8]
 802b584:	f003 030c 	and.w	r3, r3, #12
 802b588:	b2da      	uxtb	r2, r3
 802b58a:	697b      	ldr	r3, [r7, #20]
 802b58c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 802b58e:	4b28      	ldr	r3, [pc, #160]	; (802b630 <tcp_listen_input+0x1b8>)
 802b590:	681a      	ldr	r2, [r3, #0]
 802b592:	697b      	ldr	r3, [r7, #20]
 802b594:	60da      	str	r2, [r3, #12]
 802b596:	4a26      	ldr	r2, [pc, #152]	; (802b630 <tcp_listen_input+0x1b8>)
 802b598:	697b      	ldr	r3, [r7, #20]
 802b59a:	6013      	str	r3, [r2, #0]
 802b59c:	f003 f922 	bl	802e7e4 <tcp_timer_needed>
 802b5a0:	4b24      	ldr	r3, [pc, #144]	; (802b634 <tcp_listen_input+0x1bc>)
 802b5a2:	2201      	movs	r2, #1
 802b5a4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 802b5a6:	6978      	ldr	r0, [r7, #20]
 802b5a8:	f001 fd0e 	bl	802cfc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 802b5ac:	4b1c      	ldr	r3, [pc, #112]	; (802b620 <tcp_listen_input+0x1a8>)
 802b5ae:	681b      	ldr	r3, [r3, #0]
 802b5b0:	89db      	ldrh	r3, [r3, #14]
 802b5b2:	b29a      	uxth	r2, r3
 802b5b4:	697b      	ldr	r3, [r7, #20]
 802b5b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 802b5ba:	697b      	ldr	r3, [r7, #20]
 802b5bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802b5c0:	697b      	ldr	r3, [r7, #20]
 802b5c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 802b5c6:	697b      	ldr	r3, [r7, #20]
 802b5c8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 802b5ca:	697b      	ldr	r3, [r7, #20]
 802b5cc:	3304      	adds	r3, #4
 802b5ce:	4619      	mov	r1, r3
 802b5d0:	4610      	mov	r0, r2
 802b5d2:	f7ff fad1 	bl	802ab78 <tcp_eff_send_mss_impl>
 802b5d6:	4603      	mov	r3, r0
 802b5d8:	461a      	mov	r2, r3
 802b5da:	697b      	ldr	r3, [r7, #20]
 802b5dc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 802b5de:	2112      	movs	r1, #18
 802b5e0:	6978      	ldr	r0, [r7, #20]
 802b5e2:	f002 fadb 	bl	802db9c <tcp_enqueue_flags>
 802b5e6:	4603      	mov	r3, r0
 802b5e8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 802b5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	d004      	beq.n	802b5fc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 802b5f2:	2100      	movs	r1, #0
 802b5f4:	6978      	ldr	r0, [r7, #20]
 802b5f6:	f7fe f8f1 	bl	80297dc <tcp_abandon>
      return;
 802b5fa:	e006      	b.n	802b60a <tcp_listen_input+0x192>
    tcp_output(npcb);
 802b5fc:	6978      	ldr	r0, [r7, #20]
 802b5fe:	f002 fc25 	bl	802de4c <tcp_output>
  return;
 802b602:	e001      	b.n	802b608 <tcp_listen_input+0x190>
    return;
 802b604:	bf00      	nop
 802b606:	e000      	b.n	802b60a <tcp_listen_input+0x192>
  return;
 802b608:	bf00      	nop
}
 802b60a:	3718      	adds	r7, #24
 802b60c:	46bd      	mov	sp, r7
 802b60e:	bd80      	pop	{r7, pc}
 802b610:	20006a84 	.word	0x20006a84
 802b614:	20006a7c 	.word	0x20006a7c
 802b618:	20006a82 	.word	0x20006a82
 802b61c:	20006a78 	.word	0x20006a78
 802b620:	20006a68 	.word	0x20006a68
 802b624:	200034f4 	.word	0x200034f4
 802b628:	200034f8 	.word	0x200034f8
 802b62c:	200034e4 	.word	0x200034e4
 802b630:	20006a4c 	.word	0x20006a4c
 802b634:	20006a54 	.word	0x20006a54

0802b638 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 802b638:	b580      	push	{r7, lr}
 802b63a:	b084      	sub	sp, #16
 802b63c:	af02      	add	r7, sp, #8
 802b63e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 802b640:	4b29      	ldr	r3, [pc, #164]	; (802b6e8 <tcp_timewait_input+0xb0>)
 802b642:	781b      	ldrb	r3, [r3, #0]
 802b644:	f003 0304 	and.w	r3, r3, #4
 802b648:	2b00      	cmp	r3, #0
 802b64a:	d146      	bne.n	802b6da <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 802b64c:	4b26      	ldr	r3, [pc, #152]	; (802b6e8 <tcp_timewait_input+0xb0>)
 802b64e:	781b      	ldrb	r3, [r3, #0]
 802b650:	f003 0302 	and.w	r3, r3, #2
 802b654:	2b00      	cmp	r3, #0
 802b656:	d027      	beq.n	802b6a8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 802b658:	4b24      	ldr	r3, [pc, #144]	; (802b6ec <tcp_timewait_input+0xb4>)
 802b65a:	681a      	ldr	r2, [r3, #0]
 802b65c:	687b      	ldr	r3, [r7, #4]
 802b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b660:	1ad3      	subs	r3, r2, r3
 802b662:	2b00      	cmp	r3, #0
 802b664:	db2a      	blt.n	802b6bc <tcp_timewait_input+0x84>
 802b666:	4b21      	ldr	r3, [pc, #132]	; (802b6ec <tcp_timewait_input+0xb4>)
 802b668:	681a      	ldr	r2, [r3, #0]
 802b66a:	687b      	ldr	r3, [r7, #4]
 802b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b66e:	6879      	ldr	r1, [r7, #4]
 802b670:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802b672:	440b      	add	r3, r1
 802b674:	1ad3      	subs	r3, r2, r3
 802b676:	2b00      	cmp	r3, #0
 802b678:	dc20      	bgt.n	802b6bc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b67a:	4b1d      	ldr	r3, [pc, #116]	; (802b6f0 <tcp_timewait_input+0xb8>)
 802b67c:	6818      	ldr	r0, [r3, #0]
 802b67e:	4b1d      	ldr	r3, [pc, #116]	; (802b6f4 <tcp_timewait_input+0xbc>)
 802b680:	881b      	ldrh	r3, [r3, #0]
 802b682:	461a      	mov	r2, r3
 802b684:	4b19      	ldr	r3, [pc, #100]	; (802b6ec <tcp_timewait_input+0xb4>)
 802b686:	681b      	ldr	r3, [r3, #0]
 802b688:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b68a:	4b1b      	ldr	r3, [pc, #108]	; (802b6f8 <tcp_timewait_input+0xc0>)
 802b68c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b68e:	885b      	ldrh	r3, [r3, #2]
 802b690:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802b692:	4a19      	ldr	r2, [pc, #100]	; (802b6f8 <tcp_timewait_input+0xc0>)
 802b694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b696:	8812      	ldrh	r2, [r2, #0]
 802b698:	b292      	uxth	r2, r2
 802b69a:	9201      	str	r2, [sp, #4]
 802b69c:	9300      	str	r3, [sp, #0]
 802b69e:	4b17      	ldr	r3, [pc, #92]	; (802b6fc <tcp_timewait_input+0xc4>)
 802b6a0:	4a17      	ldr	r2, [pc, #92]	; (802b700 <tcp_timewait_input+0xc8>)
 802b6a2:	f002 fe57 	bl	802e354 <tcp_rst>
      return;
 802b6a6:	e01b      	b.n	802b6e0 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 802b6a8:	4b0f      	ldr	r3, [pc, #60]	; (802b6e8 <tcp_timewait_input+0xb0>)
 802b6aa:	781b      	ldrb	r3, [r3, #0]
 802b6ac:	f003 0301 	and.w	r3, r3, #1
 802b6b0:	2b00      	cmp	r3, #0
 802b6b2:	d003      	beq.n	802b6bc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 802b6b4:	4b13      	ldr	r3, [pc, #76]	; (802b704 <tcp_timewait_input+0xcc>)
 802b6b6:	681a      	ldr	r2, [r3, #0]
 802b6b8:	687b      	ldr	r3, [r7, #4]
 802b6ba:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 802b6bc:	4b0d      	ldr	r3, [pc, #52]	; (802b6f4 <tcp_timewait_input+0xbc>)
 802b6be:	881b      	ldrh	r3, [r3, #0]
 802b6c0:	2b00      	cmp	r3, #0
 802b6c2:	d00c      	beq.n	802b6de <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 802b6c4:	687b      	ldr	r3, [r7, #4]
 802b6c6:	7e9b      	ldrb	r3, [r3, #26]
 802b6c8:	f043 0302 	orr.w	r3, r3, #2
 802b6cc:	b2da      	uxtb	r2, r3
 802b6ce:	687b      	ldr	r3, [r7, #4]
 802b6d0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 802b6d2:	6878      	ldr	r0, [r7, #4]
 802b6d4:	f002 fbba 	bl	802de4c <tcp_output>
  }
  return;
 802b6d8:	e001      	b.n	802b6de <tcp_timewait_input+0xa6>
    return;
 802b6da:	bf00      	nop
 802b6dc:	e000      	b.n	802b6e0 <tcp_timewait_input+0xa8>
  return;
 802b6de:	bf00      	nop
}
 802b6e0:	3708      	adds	r7, #8
 802b6e2:	46bd      	mov	sp, r7
 802b6e4:	bd80      	pop	{r7, pc}
 802b6e6:	bf00      	nop
 802b6e8:	20006a84 	.word	0x20006a84
 802b6ec:	20006a78 	.word	0x20006a78
 802b6f0:	20006a7c 	.word	0x20006a7c
 802b6f4:	20006a82 	.word	0x20006a82
 802b6f8:	20006a68 	.word	0x20006a68
 802b6fc:	200034f4 	.word	0x200034f4
 802b700:	200034f8 	.word	0x200034f8
 802b704:	20006a40 	.word	0x20006a40

0802b708 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 802b708:	b580      	push	{r7, lr}
 802b70a:	b08a      	sub	sp, #40	; 0x28
 802b70c:	af02      	add	r7, sp, #8
 802b70e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 802b710:	2300      	movs	r3, #0
 802b712:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 802b714:	2300      	movs	r3, #0
 802b716:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 802b718:	4b93      	ldr	r3, [pc, #588]	; (802b968 <tcp_process+0x260>)
 802b71a:	781b      	ldrb	r3, [r3, #0]
 802b71c:	f003 0304 	and.w	r3, r3, #4
 802b720:	2b00      	cmp	r3, #0
 802b722:	d04e      	beq.n	802b7c2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 802b724:	687b      	ldr	r3, [r7, #4]
 802b726:	7d1b      	ldrb	r3, [r3, #20]
 802b728:	2b02      	cmp	r3, #2
 802b72a:	d108      	bne.n	802b73e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 802b72c:	687b      	ldr	r3, [r7, #4]
 802b72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b730:	4b8e      	ldr	r3, [pc, #568]	; (802b96c <tcp_process+0x264>)
 802b732:	681b      	ldr	r3, [r3, #0]
 802b734:	429a      	cmp	r2, r3
 802b736:	d123      	bne.n	802b780 <tcp_process+0x78>
        acceptable = 1;
 802b738:	2301      	movs	r3, #1
 802b73a:	76fb      	strb	r3, [r7, #27]
 802b73c:	e020      	b.n	802b780 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 802b73e:	687b      	ldr	r3, [r7, #4]
 802b740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b742:	4b8b      	ldr	r3, [pc, #556]	; (802b970 <tcp_process+0x268>)
 802b744:	681b      	ldr	r3, [r3, #0]
 802b746:	429a      	cmp	r2, r3
 802b748:	d102      	bne.n	802b750 <tcp_process+0x48>
        acceptable = 1;
 802b74a:	2301      	movs	r3, #1
 802b74c:	76fb      	strb	r3, [r7, #27]
 802b74e:	e017      	b.n	802b780 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 802b750:	4b87      	ldr	r3, [pc, #540]	; (802b970 <tcp_process+0x268>)
 802b752:	681a      	ldr	r2, [r3, #0]
 802b754:	687b      	ldr	r3, [r7, #4]
 802b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b758:	1ad3      	subs	r3, r2, r3
 802b75a:	2b00      	cmp	r3, #0
 802b75c:	db10      	blt.n	802b780 <tcp_process+0x78>
 802b75e:	4b84      	ldr	r3, [pc, #528]	; (802b970 <tcp_process+0x268>)
 802b760:	681a      	ldr	r2, [r3, #0]
 802b762:	687b      	ldr	r3, [r7, #4]
 802b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b766:	6879      	ldr	r1, [r7, #4]
 802b768:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802b76a:	440b      	add	r3, r1
 802b76c:	1ad3      	subs	r3, r2, r3
 802b76e:	2b00      	cmp	r3, #0
 802b770:	dc06      	bgt.n	802b780 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	7e9b      	ldrb	r3, [r3, #26]
 802b776:	f043 0302 	orr.w	r3, r3, #2
 802b77a:	b2da      	uxtb	r2, r3
 802b77c:	687b      	ldr	r3, [r7, #4]
 802b77e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 802b780:	7efb      	ldrb	r3, [r7, #27]
 802b782:	2b00      	cmp	r3, #0
 802b784:	d01b      	beq.n	802b7be <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 802b786:	687b      	ldr	r3, [r7, #4]
 802b788:	7d1b      	ldrb	r3, [r3, #20]
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d106      	bne.n	802b79c <tcp_process+0x94>
 802b78e:	4b79      	ldr	r3, [pc, #484]	; (802b974 <tcp_process+0x26c>)
 802b790:	f240 22e7 	movw	r2, #743	; 0x2e7
 802b794:	4978      	ldr	r1, [pc, #480]	; (802b978 <tcp_process+0x270>)
 802b796:	4879      	ldr	r0, [pc, #484]	; (802b97c <tcp_process+0x274>)
 802b798:	f005 fe14 	bl	80313c4 <iprintf>
      recv_flags |= TF_RESET;
 802b79c:	4b78      	ldr	r3, [pc, #480]	; (802b980 <tcp_process+0x278>)
 802b79e:	781b      	ldrb	r3, [r3, #0]
 802b7a0:	f043 0308 	orr.w	r3, r3, #8
 802b7a4:	b2da      	uxtb	r2, r3
 802b7a6:	4b76      	ldr	r3, [pc, #472]	; (802b980 <tcp_process+0x278>)
 802b7a8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 802b7aa:	687b      	ldr	r3, [r7, #4]
 802b7ac:	7e9b      	ldrb	r3, [r3, #26]
 802b7ae:	f023 0301 	bic.w	r3, r3, #1
 802b7b2:	b2da      	uxtb	r2, r3
 802b7b4:	687b      	ldr	r3, [r7, #4]
 802b7b6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 802b7b8:	f06f 030d 	mvn.w	r3, #13
 802b7bc:	e348      	b.n	802be50 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 802b7be:	2300      	movs	r3, #0
 802b7c0:	e346      	b.n	802be50 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 802b7c2:	4b69      	ldr	r3, [pc, #420]	; (802b968 <tcp_process+0x260>)
 802b7c4:	781b      	ldrb	r3, [r3, #0]
 802b7c6:	f003 0302 	and.w	r3, r3, #2
 802b7ca:	2b00      	cmp	r3, #0
 802b7cc:	d010      	beq.n	802b7f0 <tcp_process+0xe8>
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	7d1b      	ldrb	r3, [r3, #20]
 802b7d2:	2b02      	cmp	r3, #2
 802b7d4:	d00c      	beq.n	802b7f0 <tcp_process+0xe8>
 802b7d6:	687b      	ldr	r3, [r7, #4]
 802b7d8:	7d1b      	ldrb	r3, [r3, #20]
 802b7da:	2b03      	cmp	r3, #3
 802b7dc:	d008      	beq.n	802b7f0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 802b7de:	687b      	ldr	r3, [r7, #4]
 802b7e0:	7e9b      	ldrb	r3, [r3, #26]
 802b7e2:	f043 0302 	orr.w	r3, r3, #2
 802b7e6:	b2da      	uxtb	r2, r3
 802b7e8:	687b      	ldr	r3, [r7, #4]
 802b7ea:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 802b7ec:	2300      	movs	r3, #0
 802b7ee:	e32f      	b.n	802be50 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 802b7f0:	687b      	ldr	r3, [r7, #4]
 802b7f2:	7e9b      	ldrb	r3, [r3, #26]
 802b7f4:	f003 0310 	and.w	r3, r3, #16
 802b7f8:	2b00      	cmp	r3, #0
 802b7fa:	d103      	bne.n	802b804 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 802b7fc:	4b61      	ldr	r3, [pc, #388]	; (802b984 <tcp_process+0x27c>)
 802b7fe:	681a      	ldr	r2, [r3, #0]
 802b800:	687b      	ldr	r3, [r7, #4]
 802b802:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 802b804:	687b      	ldr	r3, [r7, #4]
 802b806:	2200      	movs	r2, #0
 802b808:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 802b80c:	6878      	ldr	r0, [r7, #4]
 802b80e:	f001 fbdb 	bl	802cfc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 802b812:	687b      	ldr	r3, [r7, #4]
 802b814:	7d1b      	ldrb	r3, [r3, #20]
 802b816:	3b02      	subs	r3, #2
 802b818:	2b07      	cmp	r3, #7
 802b81a:	f200 8309 	bhi.w	802be30 <tcp_process+0x728>
 802b81e:	a201      	add	r2, pc, #4	; (adr r2, 802b824 <tcp_process+0x11c>)
 802b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b824:	0802b845 	.word	0x0802b845
 802b828:	0802ba3b 	.word	0x0802ba3b
 802b82c:	0802bb93 	.word	0x0802bb93
 802b830:	0802bbbd 	.word	0x0802bbbd
 802b834:	0802bcdf 	.word	0x0802bcdf
 802b838:	0802bb93 	.word	0x0802bb93
 802b83c:	0802bd6b 	.word	0x0802bd6b
 802b840:	0802bdfb 	.word	0x0802bdfb
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 802b844:	4b48      	ldr	r3, [pc, #288]	; (802b968 <tcp_process+0x260>)
 802b846:	781b      	ldrb	r3, [r3, #0]
 802b848:	f003 0310 	and.w	r3, r3, #16
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	f000 80ca 	beq.w	802b9e6 <tcp_process+0x2de>
 802b852:	4b45      	ldr	r3, [pc, #276]	; (802b968 <tcp_process+0x260>)
 802b854:	781b      	ldrb	r3, [r3, #0]
 802b856:	f003 0302 	and.w	r3, r3, #2
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	f000 80c3 	beq.w	802b9e6 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 802b860:	687b      	ldr	r3, [r7, #4]
 802b862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b864:	1c5a      	adds	r2, r3, #1
 802b866:	4b41      	ldr	r3, [pc, #260]	; (802b96c <tcp_process+0x264>)
 802b868:	681b      	ldr	r3, [r3, #0]
 802b86a:	429a      	cmp	r2, r3
 802b86c:	f040 80bb 	bne.w	802b9e6 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 802b870:	4b3f      	ldr	r3, [pc, #252]	; (802b970 <tcp_process+0x268>)
 802b872:	681b      	ldr	r3, [r3, #0]
 802b874:	1c5a      	adds	r2, r3, #1
 802b876:	687b      	ldr	r3, [r7, #4]
 802b878:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 802b87a:	687b      	ldr	r3, [r7, #4]
 802b87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b87e:	687b      	ldr	r3, [r7, #4]
 802b880:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 802b882:	4b3a      	ldr	r3, [pc, #232]	; (802b96c <tcp_process+0x264>)
 802b884:	681a      	ldr	r2, [r3, #0]
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 802b88a:	4b3f      	ldr	r3, [pc, #252]	; (802b988 <tcp_process+0x280>)
 802b88c:	681b      	ldr	r3, [r3, #0]
 802b88e:	89db      	ldrh	r3, [r3, #14]
 802b890:	b29a      	uxth	r2, r3
 802b892:	687b      	ldr	r3, [r7, #4]
 802b894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 802b898:	687b      	ldr	r3, [r7, #4]
 802b89a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802b89e:	687b      	ldr	r3, [r7, #4]
 802b8a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 802b8a4:	4b32      	ldr	r3, [pc, #200]	; (802b970 <tcp_process+0x268>)
 802b8a6:	681b      	ldr	r3, [r3, #0]
 802b8a8:	1e5a      	subs	r2, r3, #1
 802b8aa:	687b      	ldr	r3, [r7, #4]
 802b8ac:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 802b8ae:	687b      	ldr	r3, [r7, #4]
 802b8b0:	2204      	movs	r2, #4
 802b8b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 802b8b4:	687b      	ldr	r3, [r7, #4]
 802b8b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	3304      	adds	r3, #4
 802b8bc:	4619      	mov	r1, r3
 802b8be:	4610      	mov	r0, r2
 802b8c0:	f7ff f95a 	bl	802ab78 <tcp_eff_send_mss_impl>
 802b8c4:	4603      	mov	r3, r0
 802b8c6:	461a      	mov	r2, r3
 802b8c8:	687b      	ldr	r3, [r7, #4]
 802b8ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802b8cc:	687b      	ldr	r3, [r7, #4]
 802b8ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802b8d0:	005b      	lsls	r3, r3, #1
 802b8d2:	f241 121c 	movw	r2, #4380	; 0x111c
 802b8d6:	429a      	cmp	r2, r3
 802b8d8:	bf38      	it	cc
 802b8da:	461a      	movcc	r2, r3
 802b8dc:	687b      	ldr	r3, [r7, #4]
 802b8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802b8e0:	009b      	lsls	r3, r3, #2
 802b8e2:	4293      	cmp	r3, r2
 802b8e4:	bf28      	it	cs
 802b8e6:	4613      	movcs	r3, r2
 802b8e8:	b29a      	uxth	r2, r3
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 802b8f0:	687b      	ldr	r3, [r7, #4]
 802b8f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802b8f6:	2b00      	cmp	r3, #0
 802b8f8:	d106      	bne.n	802b908 <tcp_process+0x200>
 802b8fa:	4b1e      	ldr	r3, [pc, #120]	; (802b974 <tcp_process+0x26c>)
 802b8fc:	f240 321a 	movw	r2, #794	; 0x31a
 802b900:	4922      	ldr	r1, [pc, #136]	; (802b98c <tcp_process+0x284>)
 802b902:	481e      	ldr	r0, [pc, #120]	; (802b97c <tcp_process+0x274>)
 802b904:	f005 fd5e 	bl	80313c4 <iprintf>
      --pcb->snd_queuelen;
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802b90e:	3b01      	subs	r3, #1
 802b910:	b29a      	uxth	r2, r3
 802b912:	687b      	ldr	r3, [r7, #4]
 802b914:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 802b918:	687b      	ldr	r3, [r7, #4]
 802b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b91c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 802b91e:	69fb      	ldr	r3, [r7, #28]
 802b920:	2b00      	cmp	r3, #0
 802b922:	d111      	bne.n	802b948 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 802b924:	687b      	ldr	r3, [r7, #4]
 802b926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802b928:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 802b92a:	69fb      	ldr	r3, [r7, #28]
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d106      	bne.n	802b93e <tcp_process+0x236>
 802b930:	4b10      	ldr	r3, [pc, #64]	; (802b974 <tcp_process+0x26c>)
 802b932:	f240 3222 	movw	r2, #802	; 0x322
 802b936:	4916      	ldr	r1, [pc, #88]	; (802b990 <tcp_process+0x288>)
 802b938:	4810      	ldr	r0, [pc, #64]	; (802b97c <tcp_process+0x274>)
 802b93a:	f005 fd43 	bl	80313c4 <iprintf>
        pcb->unsent = rseg->next;
 802b93e:	69fb      	ldr	r3, [r7, #28]
 802b940:	681a      	ldr	r2, [r3, #0]
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	669a      	str	r2, [r3, #104]	; 0x68
 802b946:	e003      	b.n	802b950 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 802b948:	69fb      	ldr	r3, [r7, #28]
 802b94a:	681a      	ldr	r2, [r3, #0]
 802b94c:	687b      	ldr	r3, [r7, #4]
 802b94e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 802b950:	69f8      	ldr	r0, [r7, #28]
 802b952:	f7fe fddd 	bl	802a510 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 802b956:	687b      	ldr	r3, [r7, #4]
 802b958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802b95a:	2b00      	cmp	r3, #0
 802b95c:	d11a      	bne.n	802b994 <tcp_process+0x28c>
        pcb->rtime = -1;
 802b95e:	687b      	ldr	r3, [r7, #4]
 802b960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b964:	861a      	strh	r2, [r3, #48]	; 0x30
 802b966:	e01c      	b.n	802b9a2 <tcp_process+0x29a>
 802b968:	20006a84 	.word	0x20006a84
 802b96c:	20006a7c 	.word	0x20006a7c
 802b970:	20006a78 	.word	0x20006a78
 802b974:	080343c0 	.word	0x080343c0
 802b978:	08034578 	.word	0x08034578
 802b97c:	08034404 	.word	0x08034404
 802b980:	20006a85 	.word	0x20006a85
 802b984:	20006a40 	.word	0x20006a40
 802b988:	20006a68 	.word	0x20006a68
 802b98c:	08034598 	.word	0x08034598
 802b990:	080345b0 	.word	0x080345b0
      } else {
        pcb->rtime = 0;
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	2200      	movs	r2, #0
 802b998:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	2200      	movs	r2, #0
 802b99e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 802b9a2:	687b      	ldr	r3, [r7, #4]
 802b9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b9a8:	2b00      	cmp	r3, #0
 802b9aa:	d00a      	beq.n	802b9c2 <tcp_process+0x2ba>
 802b9ac:	687b      	ldr	r3, [r7, #4]
 802b9ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b9b2:	687a      	ldr	r2, [r7, #4]
 802b9b4:	6910      	ldr	r0, [r2, #16]
 802b9b6:	2200      	movs	r2, #0
 802b9b8:	6879      	ldr	r1, [r7, #4]
 802b9ba:	4798      	blx	r3
 802b9bc:	4603      	mov	r3, r0
 802b9be:	76bb      	strb	r3, [r7, #26]
 802b9c0:	e001      	b.n	802b9c6 <tcp_process+0x2be>
 802b9c2:	2300      	movs	r3, #0
 802b9c4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 802b9c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802b9ca:	f113 0f0d 	cmn.w	r3, #13
 802b9ce:	d102      	bne.n	802b9d6 <tcp_process+0x2ce>
        return ERR_ABRT;
 802b9d0:	f06f 030c 	mvn.w	r3, #12
 802b9d4:	e23c      	b.n	802be50 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	7e9b      	ldrb	r3, [r3, #26]
 802b9da:	f043 0302 	orr.w	r3, r3, #2
 802b9de:	b2da      	uxtb	r2, r3
 802b9e0:	687b      	ldr	r3, [r7, #4]
 802b9e2:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 802b9e4:	e226      	b.n	802be34 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 802b9e6:	4b93      	ldr	r3, [pc, #588]	; (802bc34 <tcp_process+0x52c>)
 802b9e8:	781b      	ldrb	r3, [r3, #0]
 802b9ea:	f003 0310 	and.w	r3, r3, #16
 802b9ee:	2b00      	cmp	r3, #0
 802b9f0:	f000 8220 	beq.w	802be34 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802b9f4:	4b90      	ldr	r3, [pc, #576]	; (802bc38 <tcp_process+0x530>)
 802b9f6:	6818      	ldr	r0, [r3, #0]
 802b9f8:	4b90      	ldr	r3, [pc, #576]	; (802bc3c <tcp_process+0x534>)
 802b9fa:	881b      	ldrh	r3, [r3, #0]
 802b9fc:	461a      	mov	r2, r3
 802b9fe:	4b90      	ldr	r3, [pc, #576]	; (802bc40 <tcp_process+0x538>)
 802ba00:	681b      	ldr	r3, [r3, #0]
 802ba02:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802ba04:	4b8f      	ldr	r3, [pc, #572]	; (802bc44 <tcp_process+0x53c>)
 802ba06:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802ba08:	885b      	ldrh	r3, [r3, #2]
 802ba0a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802ba0c:	4a8d      	ldr	r2, [pc, #564]	; (802bc44 <tcp_process+0x53c>)
 802ba0e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802ba10:	8812      	ldrh	r2, [r2, #0]
 802ba12:	b292      	uxth	r2, r2
 802ba14:	9201      	str	r2, [sp, #4]
 802ba16:	9300      	str	r3, [sp, #0]
 802ba18:	4b8b      	ldr	r3, [pc, #556]	; (802bc48 <tcp_process+0x540>)
 802ba1a:	4a8c      	ldr	r2, [pc, #560]	; (802bc4c <tcp_process+0x544>)
 802ba1c:	f002 fc9a 	bl	802e354 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802ba26:	2b05      	cmp	r3, #5
 802ba28:	f200 8204 	bhi.w	802be34 <tcp_process+0x72c>
        pcb->rtime = 0;
 802ba2c:	687b      	ldr	r3, [r7, #4]
 802ba2e:	2200      	movs	r2, #0
 802ba30:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 802ba32:	6878      	ldr	r0, [r7, #4]
 802ba34:	f002 fd04 	bl	802e440 <tcp_rexmit_rto>
    break;
 802ba38:	e1fc      	b.n	802be34 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 802ba3a:	4b7e      	ldr	r3, [pc, #504]	; (802bc34 <tcp_process+0x52c>)
 802ba3c:	781b      	ldrb	r3, [r3, #0]
 802ba3e:	f003 0310 	and.w	r3, r3, #16
 802ba42:	2b00      	cmp	r3, #0
 802ba44:	f000 8091 	beq.w	802bb6a <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 802ba48:	4b7b      	ldr	r3, [pc, #492]	; (802bc38 <tcp_process+0x530>)
 802ba4a:	681a      	ldr	r2, [r3, #0]
 802ba4c:	687b      	ldr	r3, [r7, #4]
 802ba4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ba50:	1ad3      	subs	r3, r2, r3
 802ba52:	3b01      	subs	r3, #1
 802ba54:	2b00      	cmp	r3, #0
 802ba56:	db71      	blt.n	802bb3c <tcp_process+0x434>
 802ba58:	4b77      	ldr	r3, [pc, #476]	; (802bc38 <tcp_process+0x530>)
 802ba5a:	681a      	ldr	r2, [r3, #0]
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ba60:	1ad3      	subs	r3, r2, r3
 802ba62:	2b00      	cmp	r3, #0
 802ba64:	dc6a      	bgt.n	802bb3c <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 802ba66:	687b      	ldr	r3, [r7, #4]
 802ba68:	2204      	movs	r2, #4
 802ba6a:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ba70:	2b00      	cmp	r3, #0
 802ba72:	d00b      	beq.n	802ba8c <tcp_process+0x384>
 802ba74:	687b      	ldr	r3, [r7, #4]
 802ba76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ba78:	699b      	ldr	r3, [r3, #24]
 802ba7a:	2b00      	cmp	r3, #0
 802ba7c:	d106      	bne.n	802ba8c <tcp_process+0x384>
 802ba7e:	4b74      	ldr	r3, [pc, #464]	; (802bc50 <tcp_process+0x548>)
 802ba80:	f44f 7254 	mov.w	r2, #848	; 0x350
 802ba84:	4973      	ldr	r1, [pc, #460]	; (802bc54 <tcp_process+0x54c>)
 802ba86:	4874      	ldr	r0, [pc, #464]	; (802bc58 <tcp_process+0x550>)
 802ba88:	f005 fc9c 	bl	80313c4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 802ba8c:	687b      	ldr	r3, [r7, #4]
 802ba8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ba90:	2b00      	cmp	r3, #0
 802ba92:	d102      	bne.n	802ba9a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 802ba94:	23fa      	movs	r3, #250	; 0xfa
 802ba96:	76bb      	strb	r3, [r7, #26]
 802ba98:	e011      	b.n	802babe <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 802ba9a:	687b      	ldr	r3, [r7, #4]
 802ba9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ba9e:	699b      	ldr	r3, [r3, #24]
 802baa0:	2b00      	cmp	r3, #0
 802baa2:	d00a      	beq.n	802baba <tcp_process+0x3b2>
 802baa4:	687b      	ldr	r3, [r7, #4]
 802baa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802baa8:	699b      	ldr	r3, [r3, #24]
 802baaa:	687a      	ldr	r2, [r7, #4]
 802baac:	6910      	ldr	r0, [r2, #16]
 802baae:	2200      	movs	r2, #0
 802bab0:	6879      	ldr	r1, [r7, #4]
 802bab2:	4798      	blx	r3
 802bab4:	4603      	mov	r3, r0
 802bab6:	76bb      	strb	r3, [r7, #26]
 802bab8:	e001      	b.n	802babe <tcp_process+0x3b6>
 802baba:	23f0      	movs	r3, #240	; 0xf0
 802babc:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 802babe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802bac2:	2b00      	cmp	r3, #0
 802bac4:	d00a      	beq.n	802badc <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 802bac6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802baca:	f113 0f0d 	cmn.w	r3, #13
 802bace:	d002      	beq.n	802bad6 <tcp_process+0x3ce>
            tcp_abort(pcb);
 802bad0:	6878      	ldr	r0, [r7, #4]
 802bad2:	f7fd ff35 	bl	8029940 <tcp_abort>
          }
          return ERR_ABRT;
 802bad6:	f06f 030c 	mvn.w	r3, #12
 802bada:	e1b9      	b.n	802be50 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 802badc:	6878      	ldr	r0, [r7, #4]
 802bade:	f000 fa3d 	bl	802bf5c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 802bae2:	4b5e      	ldr	r3, [pc, #376]	; (802bc5c <tcp_process+0x554>)
 802bae4:	881b      	ldrh	r3, [r3, #0]
 802bae6:	2b00      	cmp	r3, #0
 802bae8:	d005      	beq.n	802baf6 <tcp_process+0x3ee>
          recv_acked--;
 802baea:	4b5c      	ldr	r3, [pc, #368]	; (802bc5c <tcp_process+0x554>)
 802baec:	881b      	ldrh	r3, [r3, #0]
 802baee:	3b01      	subs	r3, #1
 802baf0:	b29a      	uxth	r2, r3
 802baf2:	4b5a      	ldr	r3, [pc, #360]	; (802bc5c <tcp_process+0x554>)
 802baf4:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802baf6:	687b      	ldr	r3, [r7, #4]
 802baf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802bafa:	005b      	lsls	r3, r3, #1
 802bafc:	f241 121c 	movw	r2, #4380	; 0x111c
 802bb00:	429a      	cmp	r2, r3
 802bb02:	bf38      	it	cc
 802bb04:	461a      	movcc	r2, r3
 802bb06:	687b      	ldr	r3, [r7, #4]
 802bb08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802bb0a:	009b      	lsls	r3, r3, #2
 802bb0c:	4293      	cmp	r3, r2
 802bb0e:	bf28      	it	cs
 802bb10:	4613      	movcs	r3, r2
 802bb12:	b29a      	uxth	r2, r3
 802bb14:	687b      	ldr	r3, [r7, #4]
 802bb16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 802bb1a:	4b51      	ldr	r3, [pc, #324]	; (802bc60 <tcp_process+0x558>)
 802bb1c:	781b      	ldrb	r3, [r3, #0]
 802bb1e:	f003 0320 	and.w	r3, r3, #32
 802bb22:	2b00      	cmp	r3, #0
 802bb24:	d034      	beq.n	802bb90 <tcp_process+0x488>
          tcp_ack_now(pcb);
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	7e9b      	ldrb	r3, [r3, #26]
 802bb2a:	f043 0302 	orr.w	r3, r3, #2
 802bb2e:	b2da      	uxtb	r2, r3
 802bb30:	687b      	ldr	r3, [r7, #4]
 802bb32:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 802bb34:	687b      	ldr	r3, [r7, #4]
 802bb36:	2207      	movs	r2, #7
 802bb38:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 802bb3a:	e029      	b.n	802bb90 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802bb3c:	4b3e      	ldr	r3, [pc, #248]	; (802bc38 <tcp_process+0x530>)
 802bb3e:	6818      	ldr	r0, [r3, #0]
 802bb40:	4b3e      	ldr	r3, [pc, #248]	; (802bc3c <tcp_process+0x534>)
 802bb42:	881b      	ldrh	r3, [r3, #0]
 802bb44:	461a      	mov	r2, r3
 802bb46:	4b3e      	ldr	r3, [pc, #248]	; (802bc40 <tcp_process+0x538>)
 802bb48:	681b      	ldr	r3, [r3, #0]
 802bb4a:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802bb4c:	4b3d      	ldr	r3, [pc, #244]	; (802bc44 <tcp_process+0x53c>)
 802bb4e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802bb50:	885b      	ldrh	r3, [r3, #2]
 802bb52:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802bb54:	4a3b      	ldr	r2, [pc, #236]	; (802bc44 <tcp_process+0x53c>)
 802bb56:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 802bb58:	8812      	ldrh	r2, [r2, #0]
 802bb5a:	b292      	uxth	r2, r2
 802bb5c:	9201      	str	r2, [sp, #4]
 802bb5e:	9300      	str	r3, [sp, #0]
 802bb60:	4b39      	ldr	r3, [pc, #228]	; (802bc48 <tcp_process+0x540>)
 802bb62:	4a3a      	ldr	r2, [pc, #232]	; (802bc4c <tcp_process+0x544>)
 802bb64:	f002 fbf6 	bl	802e354 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 802bb68:	e166      	b.n	802be38 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 802bb6a:	4b32      	ldr	r3, [pc, #200]	; (802bc34 <tcp_process+0x52c>)
 802bb6c:	781b      	ldrb	r3, [r3, #0]
 802bb6e:	f003 0302 	and.w	r3, r3, #2
 802bb72:	2b00      	cmp	r3, #0
 802bb74:	f000 8160 	beq.w	802be38 <tcp_process+0x730>
 802bb78:	687b      	ldr	r3, [r7, #4]
 802bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bb7c:	1e5a      	subs	r2, r3, #1
 802bb7e:	4b30      	ldr	r3, [pc, #192]	; (802bc40 <tcp_process+0x538>)
 802bb80:	681b      	ldr	r3, [r3, #0]
 802bb82:	429a      	cmp	r2, r3
 802bb84:	f040 8158 	bne.w	802be38 <tcp_process+0x730>
      tcp_rexmit(pcb);
 802bb88:	6878      	ldr	r0, [r7, #4]
 802bb8a:	f002 fc8f 	bl	802e4ac <tcp_rexmit>
    break;
 802bb8e:	e153      	b.n	802be38 <tcp_process+0x730>
 802bb90:	e152      	b.n	802be38 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 802bb92:	6878      	ldr	r0, [r7, #4]
 802bb94:	f000 f9e2 	bl	802bf5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 802bb98:	4b31      	ldr	r3, [pc, #196]	; (802bc60 <tcp_process+0x558>)
 802bb9a:	781b      	ldrb	r3, [r3, #0]
 802bb9c:	f003 0320 	and.w	r3, r3, #32
 802bba0:	2b00      	cmp	r3, #0
 802bba2:	f000 814b 	beq.w	802be3c <tcp_process+0x734>
      tcp_ack_now(pcb);
 802bba6:	687b      	ldr	r3, [r7, #4]
 802bba8:	7e9b      	ldrb	r3, [r3, #26]
 802bbaa:	f043 0302 	orr.w	r3, r3, #2
 802bbae:	b2da      	uxtb	r2, r3
 802bbb0:	687b      	ldr	r3, [r7, #4]
 802bbb2:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 802bbb4:	687b      	ldr	r3, [r7, #4]
 802bbb6:	2207      	movs	r2, #7
 802bbb8:	751a      	strb	r2, [r3, #20]
    }
    break;
 802bbba:	e13f      	b.n	802be3c <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 802bbbc:	6878      	ldr	r0, [r7, #4]
 802bbbe:	f000 f9cd 	bl	802bf5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 802bbc2:	4b27      	ldr	r3, [pc, #156]	; (802bc60 <tcp_process+0x558>)
 802bbc4:	781b      	ldrb	r3, [r3, #0]
 802bbc6:	f003 0320 	and.w	r3, r3, #32
 802bbca:	2b00      	cmp	r3, #0
 802bbcc:	d070      	beq.n	802bcb0 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802bbce:	4b19      	ldr	r3, [pc, #100]	; (802bc34 <tcp_process+0x52c>)
 802bbd0:	781b      	ldrb	r3, [r3, #0]
 802bbd2:	f003 0310 	and.w	r3, r3, #16
 802bbd6:	2b00      	cmp	r3, #0
 802bbd8:	d05f      	beq.n	802bc9a <tcp_process+0x592>
 802bbda:	687b      	ldr	r3, [r7, #4]
 802bbdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802bbde:	4b16      	ldr	r3, [pc, #88]	; (802bc38 <tcp_process+0x530>)
 802bbe0:	681b      	ldr	r3, [r3, #0]
 802bbe2:	429a      	cmp	r2, r3
 802bbe4:	d159      	bne.n	802bc9a <tcp_process+0x592>
          pcb->unsent == NULL) {
 802bbe6:	687b      	ldr	r3, [r7, #4]
 802bbe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802bbea:	2b00      	cmp	r3, #0
 802bbec:	d155      	bne.n	802bc9a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 802bbee:	687b      	ldr	r3, [r7, #4]
 802bbf0:	7e9b      	ldrb	r3, [r3, #26]
 802bbf2:	f043 0302 	orr.w	r3, r3, #2
 802bbf6:	b2da      	uxtb	r2, r3
 802bbf8:	687b      	ldr	r3, [r7, #4]
 802bbfa:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 802bbfc:	6878      	ldr	r0, [r7, #4]
 802bbfe:	f7fe fee5 	bl	802a9cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 802bc02:	4b18      	ldr	r3, [pc, #96]	; (802bc64 <tcp_process+0x55c>)
 802bc04:	681b      	ldr	r3, [r3, #0]
 802bc06:	687a      	ldr	r2, [r7, #4]
 802bc08:	429a      	cmp	r2, r3
 802bc0a:	d105      	bne.n	802bc18 <tcp_process+0x510>
 802bc0c:	4b15      	ldr	r3, [pc, #84]	; (802bc64 <tcp_process+0x55c>)
 802bc0e:	681b      	ldr	r3, [r3, #0]
 802bc10:	68db      	ldr	r3, [r3, #12]
 802bc12:	4a14      	ldr	r2, [pc, #80]	; (802bc64 <tcp_process+0x55c>)
 802bc14:	6013      	str	r3, [r2, #0]
 802bc16:	e02d      	b.n	802bc74 <tcp_process+0x56c>
 802bc18:	4b12      	ldr	r3, [pc, #72]	; (802bc64 <tcp_process+0x55c>)
 802bc1a:	681b      	ldr	r3, [r3, #0]
 802bc1c:	617b      	str	r3, [r7, #20]
 802bc1e:	e026      	b.n	802bc6e <tcp_process+0x566>
 802bc20:	697b      	ldr	r3, [r7, #20]
 802bc22:	68db      	ldr	r3, [r3, #12]
 802bc24:	687a      	ldr	r2, [r7, #4]
 802bc26:	429a      	cmp	r2, r3
 802bc28:	d11e      	bne.n	802bc68 <tcp_process+0x560>
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	68da      	ldr	r2, [r3, #12]
 802bc2e:	697b      	ldr	r3, [r7, #20]
 802bc30:	60da      	str	r2, [r3, #12]
 802bc32:	e01f      	b.n	802bc74 <tcp_process+0x56c>
 802bc34:	20006a84 	.word	0x20006a84
 802bc38:	20006a7c 	.word	0x20006a7c
 802bc3c:	20006a82 	.word	0x20006a82
 802bc40:	20006a78 	.word	0x20006a78
 802bc44:	20006a68 	.word	0x20006a68
 802bc48:	200034f4 	.word	0x200034f4
 802bc4c:	200034f8 	.word	0x200034f8
 802bc50:	080343c0 	.word	0x080343c0
 802bc54:	080345c4 	.word	0x080345c4
 802bc58:	08034404 	.word	0x08034404
 802bc5c:	20006a80 	.word	0x20006a80
 802bc60:	20006a85 	.word	0x20006a85
 802bc64:	20006a4c 	.word	0x20006a4c
 802bc68:	697b      	ldr	r3, [r7, #20]
 802bc6a:	68db      	ldr	r3, [r3, #12]
 802bc6c:	617b      	str	r3, [r7, #20]
 802bc6e:	697b      	ldr	r3, [r7, #20]
 802bc70:	2b00      	cmp	r3, #0
 802bc72:	d1d5      	bne.n	802bc20 <tcp_process+0x518>
 802bc74:	687b      	ldr	r3, [r7, #4]
 802bc76:	2200      	movs	r2, #0
 802bc78:	60da      	str	r2, [r3, #12]
 802bc7a:	4b77      	ldr	r3, [pc, #476]	; (802be58 <tcp_process+0x750>)
 802bc7c:	2201      	movs	r2, #1
 802bc7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	220a      	movs	r2, #10
 802bc84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 802bc86:	4b75      	ldr	r3, [pc, #468]	; (802be5c <tcp_process+0x754>)
 802bc88:	681a      	ldr	r2, [r3, #0]
 802bc8a:	687b      	ldr	r3, [r7, #4]
 802bc8c:	60da      	str	r2, [r3, #12]
 802bc8e:	4a73      	ldr	r2, [pc, #460]	; (802be5c <tcp_process+0x754>)
 802bc90:	687b      	ldr	r3, [r7, #4]
 802bc92:	6013      	str	r3, [r2, #0]
 802bc94:	f002 fda6 	bl	802e7e4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 802bc98:	e0d2      	b.n	802be40 <tcp_process+0x738>
        tcp_ack_now(pcb);
 802bc9a:	687b      	ldr	r3, [r7, #4]
 802bc9c:	7e9b      	ldrb	r3, [r3, #26]
 802bc9e:	f043 0302 	orr.w	r3, r3, #2
 802bca2:	b2da      	uxtb	r2, r3
 802bca4:	687b      	ldr	r3, [r7, #4]
 802bca6:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	2208      	movs	r2, #8
 802bcac:	751a      	strb	r2, [r3, #20]
    break;
 802bcae:	e0c7      	b.n	802be40 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802bcb0:	4b6b      	ldr	r3, [pc, #428]	; (802be60 <tcp_process+0x758>)
 802bcb2:	781b      	ldrb	r3, [r3, #0]
 802bcb4:	f003 0310 	and.w	r3, r3, #16
 802bcb8:	2b00      	cmp	r3, #0
 802bcba:	f000 80c1 	beq.w	802be40 <tcp_process+0x738>
 802bcbe:	687b      	ldr	r3, [r7, #4]
 802bcc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802bcc2:	4b68      	ldr	r3, [pc, #416]	; (802be64 <tcp_process+0x75c>)
 802bcc4:	681b      	ldr	r3, [r3, #0]
 802bcc6:	429a      	cmp	r2, r3
 802bcc8:	f040 80ba 	bne.w	802be40 <tcp_process+0x738>
               pcb->unsent == NULL) {
 802bccc:	687b      	ldr	r3, [r7, #4]
 802bcce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802bcd0:	2b00      	cmp	r3, #0
 802bcd2:	f040 80b5 	bne.w	802be40 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	2206      	movs	r2, #6
 802bcda:	751a      	strb	r2, [r3, #20]
    break;
 802bcdc:	e0b0      	b.n	802be40 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 802bcde:	6878      	ldr	r0, [r7, #4]
 802bce0:	f000 f93c 	bl	802bf5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 802bce4:	4b60      	ldr	r3, [pc, #384]	; (802be68 <tcp_process+0x760>)
 802bce6:	781b      	ldrb	r3, [r3, #0]
 802bce8:	f003 0320 	and.w	r3, r3, #32
 802bcec:	2b00      	cmp	r3, #0
 802bcee:	f000 80a9 	beq.w	802be44 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 802bcf2:	687b      	ldr	r3, [r7, #4]
 802bcf4:	7e9b      	ldrb	r3, [r3, #26]
 802bcf6:	f043 0302 	orr.w	r3, r3, #2
 802bcfa:	b2da      	uxtb	r2, r3
 802bcfc:	687b      	ldr	r3, [r7, #4]
 802bcfe:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 802bd00:	6878      	ldr	r0, [r7, #4]
 802bd02:	f7fe fe63 	bl	802a9cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 802bd06:	4b59      	ldr	r3, [pc, #356]	; (802be6c <tcp_process+0x764>)
 802bd08:	681b      	ldr	r3, [r3, #0]
 802bd0a:	687a      	ldr	r2, [r7, #4]
 802bd0c:	429a      	cmp	r2, r3
 802bd0e:	d105      	bne.n	802bd1c <tcp_process+0x614>
 802bd10:	4b56      	ldr	r3, [pc, #344]	; (802be6c <tcp_process+0x764>)
 802bd12:	681b      	ldr	r3, [r3, #0]
 802bd14:	68db      	ldr	r3, [r3, #12]
 802bd16:	4a55      	ldr	r2, [pc, #340]	; (802be6c <tcp_process+0x764>)
 802bd18:	6013      	str	r3, [r2, #0]
 802bd1a:	e013      	b.n	802bd44 <tcp_process+0x63c>
 802bd1c:	4b53      	ldr	r3, [pc, #332]	; (802be6c <tcp_process+0x764>)
 802bd1e:	681b      	ldr	r3, [r3, #0]
 802bd20:	613b      	str	r3, [r7, #16]
 802bd22:	e00c      	b.n	802bd3e <tcp_process+0x636>
 802bd24:	693b      	ldr	r3, [r7, #16]
 802bd26:	68db      	ldr	r3, [r3, #12]
 802bd28:	687a      	ldr	r2, [r7, #4]
 802bd2a:	429a      	cmp	r2, r3
 802bd2c:	d104      	bne.n	802bd38 <tcp_process+0x630>
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	68da      	ldr	r2, [r3, #12]
 802bd32:	693b      	ldr	r3, [r7, #16]
 802bd34:	60da      	str	r2, [r3, #12]
 802bd36:	e005      	b.n	802bd44 <tcp_process+0x63c>
 802bd38:	693b      	ldr	r3, [r7, #16]
 802bd3a:	68db      	ldr	r3, [r3, #12]
 802bd3c:	613b      	str	r3, [r7, #16]
 802bd3e:	693b      	ldr	r3, [r7, #16]
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	d1ef      	bne.n	802bd24 <tcp_process+0x61c>
 802bd44:	687b      	ldr	r3, [r7, #4]
 802bd46:	2200      	movs	r2, #0
 802bd48:	60da      	str	r2, [r3, #12]
 802bd4a:	4b43      	ldr	r3, [pc, #268]	; (802be58 <tcp_process+0x750>)
 802bd4c:	2201      	movs	r2, #1
 802bd4e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 802bd50:	687b      	ldr	r3, [r7, #4]
 802bd52:	220a      	movs	r2, #10
 802bd54:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 802bd56:	4b41      	ldr	r3, [pc, #260]	; (802be5c <tcp_process+0x754>)
 802bd58:	681a      	ldr	r2, [r3, #0]
 802bd5a:	687b      	ldr	r3, [r7, #4]
 802bd5c:	60da      	str	r2, [r3, #12]
 802bd5e:	4a3f      	ldr	r2, [pc, #252]	; (802be5c <tcp_process+0x754>)
 802bd60:	687b      	ldr	r3, [r7, #4]
 802bd62:	6013      	str	r3, [r2, #0]
 802bd64:	f002 fd3e 	bl	802e7e4 <tcp_timer_needed>
    }
    break;
 802bd68:	e06c      	b.n	802be44 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 802bd6a:	6878      	ldr	r0, [r7, #4]
 802bd6c:	f000 f8f6 	bl	802bf5c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 802bd70:	4b3b      	ldr	r3, [pc, #236]	; (802be60 <tcp_process+0x758>)
 802bd72:	781b      	ldrb	r3, [r3, #0]
 802bd74:	f003 0310 	and.w	r3, r3, #16
 802bd78:	2b00      	cmp	r3, #0
 802bd7a:	d065      	beq.n	802be48 <tcp_process+0x740>
 802bd7c:	687b      	ldr	r3, [r7, #4]
 802bd7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802bd80:	4b38      	ldr	r3, [pc, #224]	; (802be64 <tcp_process+0x75c>)
 802bd82:	681b      	ldr	r3, [r3, #0]
 802bd84:	429a      	cmp	r2, r3
 802bd86:	d15f      	bne.n	802be48 <tcp_process+0x740>
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802bd8c:	2b00      	cmp	r3, #0
 802bd8e:	d15b      	bne.n	802be48 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 802bd90:	6878      	ldr	r0, [r7, #4]
 802bd92:	f7fe fe1b 	bl	802a9cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 802bd96:	4b35      	ldr	r3, [pc, #212]	; (802be6c <tcp_process+0x764>)
 802bd98:	681b      	ldr	r3, [r3, #0]
 802bd9a:	687a      	ldr	r2, [r7, #4]
 802bd9c:	429a      	cmp	r2, r3
 802bd9e:	d105      	bne.n	802bdac <tcp_process+0x6a4>
 802bda0:	4b32      	ldr	r3, [pc, #200]	; (802be6c <tcp_process+0x764>)
 802bda2:	681b      	ldr	r3, [r3, #0]
 802bda4:	68db      	ldr	r3, [r3, #12]
 802bda6:	4a31      	ldr	r2, [pc, #196]	; (802be6c <tcp_process+0x764>)
 802bda8:	6013      	str	r3, [r2, #0]
 802bdaa:	e013      	b.n	802bdd4 <tcp_process+0x6cc>
 802bdac:	4b2f      	ldr	r3, [pc, #188]	; (802be6c <tcp_process+0x764>)
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	60fb      	str	r3, [r7, #12]
 802bdb2:	e00c      	b.n	802bdce <tcp_process+0x6c6>
 802bdb4:	68fb      	ldr	r3, [r7, #12]
 802bdb6:	68db      	ldr	r3, [r3, #12]
 802bdb8:	687a      	ldr	r2, [r7, #4]
 802bdba:	429a      	cmp	r2, r3
 802bdbc:	d104      	bne.n	802bdc8 <tcp_process+0x6c0>
 802bdbe:	687b      	ldr	r3, [r7, #4]
 802bdc0:	68da      	ldr	r2, [r3, #12]
 802bdc2:	68fb      	ldr	r3, [r7, #12]
 802bdc4:	60da      	str	r2, [r3, #12]
 802bdc6:	e005      	b.n	802bdd4 <tcp_process+0x6cc>
 802bdc8:	68fb      	ldr	r3, [r7, #12]
 802bdca:	68db      	ldr	r3, [r3, #12]
 802bdcc:	60fb      	str	r3, [r7, #12]
 802bdce:	68fb      	ldr	r3, [r7, #12]
 802bdd0:	2b00      	cmp	r3, #0
 802bdd2:	d1ef      	bne.n	802bdb4 <tcp_process+0x6ac>
 802bdd4:	687b      	ldr	r3, [r7, #4]
 802bdd6:	2200      	movs	r2, #0
 802bdd8:	60da      	str	r2, [r3, #12]
 802bdda:	4b1f      	ldr	r3, [pc, #124]	; (802be58 <tcp_process+0x750>)
 802bddc:	2201      	movs	r2, #1
 802bdde:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 802bde0:	687b      	ldr	r3, [r7, #4]
 802bde2:	220a      	movs	r2, #10
 802bde4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 802bde6:	4b1d      	ldr	r3, [pc, #116]	; (802be5c <tcp_process+0x754>)
 802bde8:	681a      	ldr	r2, [r3, #0]
 802bdea:	687b      	ldr	r3, [r7, #4]
 802bdec:	60da      	str	r2, [r3, #12]
 802bdee:	4a1b      	ldr	r2, [pc, #108]	; (802be5c <tcp_process+0x754>)
 802bdf0:	687b      	ldr	r3, [r7, #4]
 802bdf2:	6013      	str	r3, [r2, #0]
 802bdf4:	f002 fcf6 	bl	802e7e4 <tcp_timer_needed>
    }
    break;
 802bdf8:	e026      	b.n	802be48 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 802bdfa:	6878      	ldr	r0, [r7, #4]
 802bdfc:	f000 f8ae 	bl	802bf5c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 802be00:	4b17      	ldr	r3, [pc, #92]	; (802be60 <tcp_process+0x758>)
 802be02:	781b      	ldrb	r3, [r3, #0]
 802be04:	f003 0310 	and.w	r3, r3, #16
 802be08:	2b00      	cmp	r3, #0
 802be0a:	d01f      	beq.n	802be4c <tcp_process+0x744>
 802be0c:	687b      	ldr	r3, [r7, #4]
 802be0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802be10:	4b14      	ldr	r3, [pc, #80]	; (802be64 <tcp_process+0x75c>)
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	429a      	cmp	r2, r3
 802be16:	d119      	bne.n	802be4c <tcp_process+0x744>
 802be18:	687b      	ldr	r3, [r7, #4]
 802be1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802be1c:	2b00      	cmp	r3, #0
 802be1e:	d115      	bne.n	802be4c <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 802be20:	4b11      	ldr	r3, [pc, #68]	; (802be68 <tcp_process+0x760>)
 802be22:	781b      	ldrb	r3, [r3, #0]
 802be24:	f043 0310 	orr.w	r3, r3, #16
 802be28:	b2da      	uxtb	r2, r3
 802be2a:	4b0f      	ldr	r3, [pc, #60]	; (802be68 <tcp_process+0x760>)
 802be2c:	701a      	strb	r2, [r3, #0]
    }
    break;
 802be2e:	e00d      	b.n	802be4c <tcp_process+0x744>
  default:
    break;
 802be30:	bf00      	nop
 802be32:	e00c      	b.n	802be4e <tcp_process+0x746>
    break;
 802be34:	bf00      	nop
 802be36:	e00a      	b.n	802be4e <tcp_process+0x746>
    break;
 802be38:	bf00      	nop
 802be3a:	e008      	b.n	802be4e <tcp_process+0x746>
    break;
 802be3c:	bf00      	nop
 802be3e:	e006      	b.n	802be4e <tcp_process+0x746>
    break;
 802be40:	bf00      	nop
 802be42:	e004      	b.n	802be4e <tcp_process+0x746>
    break;
 802be44:	bf00      	nop
 802be46:	e002      	b.n	802be4e <tcp_process+0x746>
    break;
 802be48:	bf00      	nop
 802be4a:	e000      	b.n	802be4e <tcp_process+0x746>
    break;
 802be4c:	bf00      	nop
  }
  return ERR_OK;
 802be4e:	2300      	movs	r3, #0
}
 802be50:	4618      	mov	r0, r3
 802be52:	3720      	adds	r7, #32
 802be54:	46bd      	mov	sp, r7
 802be56:	bd80      	pop	{r7, pc}
 802be58:	20006a54 	.word	0x20006a54
 802be5c:	20006a50 	.word	0x20006a50
 802be60:	20006a84 	.word	0x20006a84
 802be64:	20006a7c 	.word	0x20006a7c
 802be68:	20006a85 	.word	0x20006a85
 802be6c:	20006a4c 	.word	0x20006a4c

0802be70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 802be70:	b590      	push	{r4, r7, lr}
 802be72:	b085      	sub	sp, #20
 802be74:	af00      	add	r7, sp, #0
 802be76:	6078      	str	r0, [r7, #4]
 802be78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 802be7a:	687b      	ldr	r3, [r7, #4]
 802be7c:	68db      	ldr	r3, [r3, #12]
 802be7e:	899b      	ldrh	r3, [r3, #12]
 802be80:	b29b      	uxth	r3, r3
 802be82:	4618      	mov	r0, r3
 802be84:	f7fb ff27 	bl	8027cd6 <lwip_htons>
 802be88:	4603      	mov	r3, r0
 802be8a:	f003 0301 	and.w	r3, r3, #1
 802be8e:	2b00      	cmp	r3, #0
 802be90:	d027      	beq.n	802bee2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 802be92:	6838      	ldr	r0, [r7, #0]
 802be94:	f7fe fb27 	bl	802a4e6 <tcp_segs_free>
    next = NULL;
 802be98:	2300      	movs	r3, #0
 802be9a:	603b      	str	r3, [r7, #0]
 802be9c:	e055      	b.n	802bf4a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 802be9e:	683b      	ldr	r3, [r7, #0]
 802bea0:	68db      	ldr	r3, [r3, #12]
 802bea2:	899b      	ldrh	r3, [r3, #12]
 802bea4:	b29b      	uxth	r3, r3
 802bea6:	4618      	mov	r0, r3
 802bea8:	f7fb ff15 	bl	8027cd6 <lwip_htons>
 802beac:	4603      	mov	r3, r0
 802beae:	f003 0301 	and.w	r3, r3, #1
 802beb2:	2b00      	cmp	r3, #0
 802beb4:	d00d      	beq.n	802bed2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 802beb6:	687b      	ldr	r3, [r7, #4]
 802beb8:	68db      	ldr	r3, [r3, #12]
 802beba:	899b      	ldrh	r3, [r3, #12]
 802bebc:	b29c      	uxth	r4, r3
 802bebe:	2001      	movs	r0, #1
 802bec0:	f7fb ff09 	bl	8027cd6 <lwip_htons>
 802bec4:	4603      	mov	r3, r0
 802bec6:	461a      	mov	r2, r3
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	68db      	ldr	r3, [r3, #12]
 802becc:	4322      	orrs	r2, r4
 802bece:	b292      	uxth	r2, r2
 802bed0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 802bed2:	683b      	ldr	r3, [r7, #0]
 802bed4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 802bed6:	683b      	ldr	r3, [r7, #0]
 802bed8:	681b      	ldr	r3, [r3, #0]
 802beda:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 802bedc:	68f8      	ldr	r0, [r7, #12]
 802bede:	f7fe fb17 	bl	802a510 <tcp_seg_free>
    while (next &&
 802bee2:	683b      	ldr	r3, [r7, #0]
 802bee4:	2b00      	cmp	r3, #0
 802bee6:	d00e      	beq.n	802bf06 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 802bee8:	687b      	ldr	r3, [r7, #4]
 802beea:	891b      	ldrh	r3, [r3, #8]
 802beec:	461a      	mov	r2, r3
 802beee:	4b1a      	ldr	r3, [pc, #104]	; (802bf58 <tcp_oos_insert_segment+0xe8>)
 802bef0:	681b      	ldr	r3, [r3, #0]
 802bef2:	441a      	add	r2, r3
 802bef4:	683b      	ldr	r3, [r7, #0]
 802bef6:	68db      	ldr	r3, [r3, #12]
 802bef8:	685b      	ldr	r3, [r3, #4]
 802befa:	6839      	ldr	r1, [r7, #0]
 802befc:	8909      	ldrh	r1, [r1, #8]
 802befe:	440b      	add	r3, r1
 802bf00:	1ad3      	subs	r3, r2, r3
    while (next &&
 802bf02:	2b00      	cmp	r3, #0
 802bf04:	dacb      	bge.n	802be9e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 802bf06:	683b      	ldr	r3, [r7, #0]
 802bf08:	2b00      	cmp	r3, #0
 802bf0a:	d01e      	beq.n	802bf4a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 802bf0c:	687b      	ldr	r3, [r7, #4]
 802bf0e:	891b      	ldrh	r3, [r3, #8]
 802bf10:	461a      	mov	r2, r3
 802bf12:	4b11      	ldr	r3, [pc, #68]	; (802bf58 <tcp_oos_insert_segment+0xe8>)
 802bf14:	681b      	ldr	r3, [r3, #0]
 802bf16:	441a      	add	r2, r3
 802bf18:	683b      	ldr	r3, [r7, #0]
 802bf1a:	68db      	ldr	r3, [r3, #12]
 802bf1c:	685b      	ldr	r3, [r3, #4]
 802bf1e:	1ad3      	subs	r3, r2, r3
    if (next &&
 802bf20:	2b00      	cmp	r3, #0
 802bf22:	dd12      	ble.n	802bf4a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 802bf24:	683b      	ldr	r3, [r7, #0]
 802bf26:	68db      	ldr	r3, [r3, #12]
 802bf28:	685b      	ldr	r3, [r3, #4]
 802bf2a:	b29a      	uxth	r2, r3
 802bf2c:	4b0a      	ldr	r3, [pc, #40]	; (802bf58 <tcp_oos_insert_segment+0xe8>)
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	b29b      	uxth	r3, r3
 802bf32:	1ad3      	subs	r3, r2, r3
 802bf34:	b29a      	uxth	r2, r3
 802bf36:	687b      	ldr	r3, [r7, #4]
 802bf38:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 802bf3a:	687b      	ldr	r3, [r7, #4]
 802bf3c:	685a      	ldr	r2, [r3, #4]
 802bf3e:	687b      	ldr	r3, [r7, #4]
 802bf40:	891b      	ldrh	r3, [r3, #8]
 802bf42:	4619      	mov	r1, r3
 802bf44:	4610      	mov	r0, r2
 802bf46:	f7fc fe7b 	bl	8028c40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 802bf4a:	687b      	ldr	r3, [r7, #4]
 802bf4c:	683a      	ldr	r2, [r7, #0]
 802bf4e:	601a      	str	r2, [r3, #0]
}
 802bf50:	bf00      	nop
 802bf52:	3714      	adds	r7, #20
 802bf54:	46bd      	mov	sp, r7
 802bf56:	bd90      	pop	{r4, r7, pc}
 802bf58:	20006a78 	.word	0x20006a78

0802bf5c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 802bf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bf5e:	b08d      	sub	sp, #52	; 0x34
 802bf60:	af00      	add	r7, sp, #0
 802bf62:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 802bf64:	2300      	movs	r3, #0
 802bf66:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 802bf68:	687b      	ldr	r3, [r7, #4]
 802bf6a:	7d1b      	ldrb	r3, [r3, #20]
 802bf6c:	2b03      	cmp	r3, #3
 802bf6e:	d806      	bhi.n	802bf7e <tcp_receive+0x22>
 802bf70:	4b98      	ldr	r3, [pc, #608]	; (802c1d4 <tcp_receive+0x278>)
 802bf72:	f44f 6281 	mov.w	r2, #1032	; 0x408
 802bf76:	4998      	ldr	r1, [pc, #608]	; (802c1d8 <tcp_receive+0x27c>)
 802bf78:	4898      	ldr	r0, [pc, #608]	; (802c1dc <tcp_receive+0x280>)
 802bf7a:	f005 fa23 	bl	80313c4 <iprintf>

  if (flags & TCP_ACK) {
 802bf7e:	4b98      	ldr	r3, [pc, #608]	; (802c1e0 <tcp_receive+0x284>)
 802bf80:	781b      	ldrb	r3, [r3, #0]
 802bf82:	f003 0310 	and.w	r3, r3, #16
 802bf86:	2b00      	cmp	r3, #0
 802bf88:	f000 82c1 	beq.w	802c50e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 802bf8c:	687b      	ldr	r3, [r7, #4]
 802bf8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802bf92:	461a      	mov	r2, r3
 802bf94:	687b      	ldr	r3, [r7, #4]
 802bf96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bf98:	4413      	add	r3, r2
 802bf9a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 802bf9c:	687b      	ldr	r3, [r7, #4]
 802bf9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802bfa0:	4b90      	ldr	r3, [pc, #576]	; (802c1e4 <tcp_receive+0x288>)
 802bfa2:	681b      	ldr	r3, [r3, #0]
 802bfa4:	1ad3      	subs	r3, r2, r3
 802bfa6:	2b00      	cmp	r3, #0
 802bfa8:	db1b      	blt.n	802bfe2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802bfaa:	687b      	ldr	r3, [r7, #4]
 802bfac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802bfae:	4b8d      	ldr	r3, [pc, #564]	; (802c1e4 <tcp_receive+0x288>)
 802bfb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 802bfb2:	429a      	cmp	r2, r3
 802bfb4:	d106      	bne.n	802bfc4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802bfb6:	687b      	ldr	r3, [r7, #4]
 802bfb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802bfba:	4b8b      	ldr	r3, [pc, #556]	; (802c1e8 <tcp_receive+0x28c>)
 802bfbc:	681b      	ldr	r3, [r3, #0]
 802bfbe:	1ad3      	subs	r3, r2, r3
 802bfc0:	2b00      	cmp	r3, #0
 802bfc2:	db0e      	blt.n	802bfe2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 802bfc4:	687b      	ldr	r3, [r7, #4]
 802bfc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802bfc8:	4b87      	ldr	r3, [pc, #540]	; (802c1e8 <tcp_receive+0x28c>)
 802bfca:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802bfcc:	429a      	cmp	r2, r3
 802bfce:	d141      	bne.n	802c054 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 802bfd0:	4b86      	ldr	r3, [pc, #536]	; (802c1ec <tcp_receive+0x290>)
 802bfd2:	681b      	ldr	r3, [r3, #0]
 802bfd4:	89db      	ldrh	r3, [r3, #14]
 802bfd6:	b29a      	uxth	r2, r3
 802bfd8:	687b      	ldr	r3, [r7, #4]
 802bfda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802bfde:	429a      	cmp	r2, r3
 802bfe0:	d938      	bls.n	802c054 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 802bfe2:	4b82      	ldr	r3, [pc, #520]	; (802c1ec <tcp_receive+0x290>)
 802bfe4:	681b      	ldr	r3, [r3, #0]
 802bfe6:	89db      	ldrh	r3, [r3, #14]
 802bfe8:	b29a      	uxth	r2, r3
 802bfea:	687b      	ldr	r3, [r7, #4]
 802bfec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 802bff0:	687b      	ldr	r3, [r7, #4]
 802bff2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 802bff6:	687b      	ldr	r3, [r7, #4]
 802bff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802bffc:	429a      	cmp	r2, r3
 802bffe:	d205      	bcs.n	802c00c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 802c000:	687b      	ldr	r3, [r7, #4]
 802c002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802c006:	687b      	ldr	r3, [r7, #4]
 802c008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 802c00c:	4b75      	ldr	r3, [pc, #468]	; (802c1e4 <tcp_receive+0x288>)
 802c00e:	681a      	ldr	r2, [r3, #0]
 802c010:	687b      	ldr	r3, [r7, #4]
 802c012:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 802c014:	4b74      	ldr	r3, [pc, #464]	; (802c1e8 <tcp_receive+0x28c>)
 802c016:	681a      	ldr	r2, [r3, #0]
 802c018:	687b      	ldr	r3, [r7, #4]
 802c01a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802c022:	2b00      	cmp	r3, #0
 802c024:	d10d      	bne.n	802c042 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 802c026:	687b      	ldr	r3, [r7, #4]
 802c028:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 802c02c:	2b00      	cmp	r3, #0
 802c02e:	d111      	bne.n	802c054 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 802c030:	687b      	ldr	r3, [r7, #4]
 802c032:	2200      	movs	r2, #0
 802c034:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 802c038:	687b      	ldr	r3, [r7, #4]
 802c03a:	2201      	movs	r2, #1
 802c03c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 802c040:	e008      	b.n	802c054 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 802c042:	687b      	ldr	r3, [r7, #4]
 802c044:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 802c048:	2b00      	cmp	r3, #0
 802c04a:	d003      	beq.n	802c054 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	2200      	movs	r2, #0
 802c050:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 802c054:	4b64      	ldr	r3, [pc, #400]	; (802c1e8 <tcp_receive+0x28c>)
 802c056:	681a      	ldr	r2, [r3, #0]
 802c058:	687b      	ldr	r3, [r7, #4]
 802c05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c05c:	1ad3      	subs	r3, r2, r3
 802c05e:	2b00      	cmp	r3, #0
 802c060:	dc53      	bgt.n	802c10a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 802c062:	4b63      	ldr	r3, [pc, #396]	; (802c1f0 <tcp_receive+0x294>)
 802c064:	881b      	ldrh	r3, [r3, #0]
 802c066:	2b00      	cmp	r3, #0
 802c068:	d146      	bne.n	802c0f8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c06e:	687a      	ldr	r2, [r7, #4]
 802c070:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 802c074:	4413      	add	r3, r2
 802c076:	697a      	ldr	r2, [r7, #20]
 802c078:	429a      	cmp	r2, r3
 802c07a:	d13d      	bne.n	802c0f8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 802c07c:	687b      	ldr	r3, [r7, #4]
 802c07e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802c082:	2b00      	cmp	r3, #0
 802c084:	db38      	blt.n	802c0f8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 802c086:	687b      	ldr	r3, [r7, #4]
 802c088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802c08a:	4b57      	ldr	r3, [pc, #348]	; (802c1e8 <tcp_receive+0x28c>)
 802c08c:	681b      	ldr	r3, [r3, #0]
 802c08e:	429a      	cmp	r2, r3
 802c090:	d132      	bne.n	802c0f8 <tcp_receive+0x19c>
              found_dupack = 1;
 802c092:	2301      	movs	r3, #1
 802c094:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 802c096:	687b      	ldr	r3, [r7, #4]
 802c098:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802c09c:	2bff      	cmp	r3, #255	; 0xff
 802c09e:	d007      	beq.n	802c0b0 <tcp_receive+0x154>
                ++pcb->dupacks;
 802c0a0:	687b      	ldr	r3, [r7, #4]
 802c0a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802c0a6:	3301      	adds	r3, #1
 802c0a8:	b2da      	uxtb	r2, r3
 802c0aa:	687b      	ldr	r3, [r7, #4]
 802c0ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 802c0b0:	687b      	ldr	r3, [r7, #4]
 802c0b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802c0b6:	2b03      	cmp	r3, #3
 802c0b8:	d916      	bls.n	802c0e8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c0c0:	687b      	ldr	r3, [r7, #4]
 802c0c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c0c4:	4413      	add	r3, r2
 802c0c6:	b29a      	uxth	r2, r3
 802c0c8:	687b      	ldr	r3, [r7, #4]
 802c0ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802c0ce:	429a      	cmp	r2, r3
 802c0d0:	d912      	bls.n	802c0f8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 802c0d2:	687b      	ldr	r3, [r7, #4]
 802c0d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c0d8:	687b      	ldr	r3, [r7, #4]
 802c0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c0dc:	4413      	add	r3, r2
 802c0de:	b29a      	uxth	r2, r3
 802c0e0:	687b      	ldr	r3, [r7, #4]
 802c0e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802c0e6:	e007      	b.n	802c0f8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 802c0e8:	687b      	ldr	r3, [r7, #4]
 802c0ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802c0ee:	2b03      	cmp	r3, #3
 802c0f0:	d102      	bne.n	802c0f8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 802c0f2:	6878      	ldr	r0, [r7, #4]
 802c0f4:	f002 fa2a 	bl	802e54c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 802c0f8:	69fb      	ldr	r3, [r7, #28]
 802c0fa:	2b00      	cmp	r3, #0
 802c0fc:	f040 816a 	bne.w	802c3d4 <tcp_receive+0x478>
        pcb->dupacks = 0;
 802c100:	687b      	ldr	r3, [r7, #4]
 802c102:	2200      	movs	r2, #0
 802c104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802c108:	e164      	b.n	802c3d4 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 802c10a:	4b37      	ldr	r3, [pc, #220]	; (802c1e8 <tcp_receive+0x28c>)
 802c10c:	681a      	ldr	r2, [r3, #0]
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c112:	1ad3      	subs	r3, r2, r3
 802c114:	3b01      	subs	r3, #1
 802c116:	2b00      	cmp	r3, #0
 802c118:	f2c0 8108 	blt.w	802c32c <tcp_receive+0x3d0>
 802c11c:	4b32      	ldr	r3, [pc, #200]	; (802c1e8 <tcp_receive+0x28c>)
 802c11e:	681a      	ldr	r2, [r3, #0]
 802c120:	687b      	ldr	r3, [r7, #4]
 802c122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c124:	1ad3      	subs	r3, r2, r3
 802c126:	2b00      	cmp	r3, #0
 802c128:	f300 8100 	bgt.w	802c32c <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 802c12c:	687b      	ldr	r3, [r7, #4]
 802c12e:	7e9b      	ldrb	r3, [r3, #26]
 802c130:	f003 0304 	and.w	r3, r3, #4
 802c134:	2b00      	cmp	r3, #0
 802c136:	d00c      	beq.n	802c152 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 802c138:	687b      	ldr	r3, [r7, #4]
 802c13a:	7e9b      	ldrb	r3, [r3, #26]
 802c13c:	f023 0304 	bic.w	r3, r3, #4
 802c140:	b2da      	uxtb	r2, r3
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 802c146:	687b      	ldr	r3, [r7, #4]
 802c148:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802c14c:	687b      	ldr	r3, [r7, #4]
 802c14e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 802c152:	687b      	ldr	r3, [r7, #4]
 802c154:	2200      	movs	r2, #0
 802c156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 802c15a:	687b      	ldr	r3, [r7, #4]
 802c15c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802c160:	10db      	asrs	r3, r3, #3
 802c162:	b21b      	sxth	r3, r3
 802c164:	b29a      	uxth	r2, r3
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802c16c:	b29b      	uxth	r3, r3
 802c16e:	4413      	add	r3, r2
 802c170:	b29b      	uxth	r3, r3
 802c172:	b21a      	sxth	r2, r3
 802c174:	687b      	ldr	r3, [r7, #4]
 802c176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 802c17a:	687b      	ldr	r3, [r7, #4]
 802c17c:	2200      	movs	r2, #0
 802c17e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 802c182:	4b19      	ldr	r3, [pc, #100]	; (802c1e8 <tcp_receive+0x28c>)
 802c184:	681a      	ldr	r2, [r3, #0]
 802c186:	687b      	ldr	r3, [r7, #4]
 802c188:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 802c18a:	687b      	ldr	r3, [r7, #4]
 802c18c:	7d1b      	ldrb	r3, [r3, #20]
 802c18e:	2b03      	cmp	r3, #3
 802c190:	f240 8095 	bls.w	802c2be <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 802c194:	687b      	ldr	r3, [r7, #4]
 802c196:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c19a:	687b      	ldr	r3, [r7, #4]
 802c19c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 802c1a0:	429a      	cmp	r2, r3
 802c1a2:	d227      	bcs.n	802c1f4 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 802c1a4:	687b      	ldr	r3, [r7, #4]
 802c1a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c1aa:	687b      	ldr	r3, [r7, #4]
 802c1ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c1ae:	4413      	add	r3, r2
 802c1b0:	b29a      	uxth	r2, r3
 802c1b2:	687b      	ldr	r3, [r7, #4]
 802c1b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802c1b8:	429a      	cmp	r2, r3
 802c1ba:	f240 8080 	bls.w	802c2be <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 802c1be:	687b      	ldr	r3, [r7, #4]
 802c1c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c1c4:	687b      	ldr	r3, [r7, #4]
 802c1c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c1c8:	4413      	add	r3, r2
 802c1ca:	b29a      	uxth	r2, r3
 802c1cc:	687b      	ldr	r3, [r7, #4]
 802c1ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802c1d2:	e074      	b.n	802c2be <tcp_receive+0x362>
 802c1d4:	080343c0 	.word	0x080343c0
 802c1d8:	080345e4 	.word	0x080345e4
 802c1dc:	08034404 	.word	0x08034404
 802c1e0:	20006a84 	.word	0x20006a84
 802c1e4:	20006a78 	.word	0x20006a78
 802c1e8:	20006a7c 	.word	0x20006a7c
 802c1ec:	20006a68 	.word	0x20006a68
 802c1f0:	20006a82 	.word	0x20006a82
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802c1fa:	687b      	ldr	r3, [r7, #4]
 802c1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c1fe:	4619      	mov	r1, r3
 802c200:	687b      	ldr	r3, [r7, #4]
 802c202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802c204:	fb01 f303 	mul.w	r3, r1, r3
 802c208:	6879      	ldr	r1, [r7, #4]
 802c20a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 802c20e:	fb93 f3f1 	sdiv	r3, r3, r1
 802c212:	b29b      	uxth	r3, r3
 802c214:	4413      	add	r3, r2
 802c216:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 802c218:	687b      	ldr	r3, [r7, #4]
 802c21a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802c21e:	8a7a      	ldrh	r2, [r7, #18]
 802c220:	429a      	cmp	r2, r3
 802c222:	d94c      	bls.n	802c2be <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 802c224:	687b      	ldr	r3, [r7, #4]
 802c226:	8a7a      	ldrh	r2, [r7, #18]
 802c228:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 802c22c:	e047      	b.n	802c2be <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c232:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 802c234:	687b      	ldr	r3, [r7, #4]
 802c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c238:	681a      	ldr	r2, [r3, #0]
 802c23a:	687b      	ldr	r3, [r7, #4]
 802c23c:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 802c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c246:	685b      	ldr	r3, [r3, #4]
 802c248:	4618      	mov	r0, r3
 802c24a:	f7fc ff01 	bl	8029050 <pbuf_clen>
 802c24e:	4603      	mov	r3, r0
 802c250:	429c      	cmp	r4, r3
 802c252:	d206      	bcs.n	802c262 <tcp_receive+0x306>
 802c254:	4b70      	ldr	r3, [pc, #448]	; (802c418 <tcp_receive+0x4bc>)
 802c256:	f240 429e 	movw	r2, #1182	; 0x49e
 802c25a:	4970      	ldr	r1, [pc, #448]	; (802c41c <tcp_receive+0x4c0>)
 802c25c:	4870      	ldr	r0, [pc, #448]	; (802c420 <tcp_receive+0x4c4>)
 802c25e:	f005 f8b1 	bl	80313c4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 802c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c264:	685b      	ldr	r3, [r3, #4]
 802c266:	4618      	mov	r0, r3
 802c268:	f7fc fef2 	bl	8029050 <pbuf_clen>
 802c26c:	4603      	mov	r3, r0
 802c26e:	461a      	mov	r2, r3
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802c276:	1a9b      	subs	r3, r3, r2
 802c278:	b29a      	uxth	r2, r3
 802c27a:	687b      	ldr	r3, [r7, #4]
 802c27c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 802c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c282:	891a      	ldrh	r2, [r3, #8]
 802c284:	4b67      	ldr	r3, [pc, #412]	; (802c424 <tcp_receive+0x4c8>)
 802c286:	881b      	ldrh	r3, [r3, #0]
 802c288:	4413      	add	r3, r2
 802c28a:	b29a      	uxth	r2, r3
 802c28c:	4b65      	ldr	r3, [pc, #404]	; (802c424 <tcp_receive+0x4c8>)
 802c28e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 802c290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802c292:	f7fe f93d 	bl	802a510 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802c29c:	2b00      	cmp	r3, #0
 802c29e:	d00e      	beq.n	802c2be <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c2a4:	2b00      	cmp	r3, #0
 802c2a6:	d10a      	bne.n	802c2be <tcp_receive+0x362>
 802c2a8:	687b      	ldr	r3, [r7, #4]
 802c2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c2ac:	2b00      	cmp	r3, #0
 802c2ae:	d106      	bne.n	802c2be <tcp_receive+0x362>
 802c2b0:	4b59      	ldr	r3, [pc, #356]	; (802c418 <tcp_receive+0x4bc>)
 802c2b2:	f240 42a6 	movw	r2, #1190	; 0x4a6
 802c2b6:	495c      	ldr	r1, [pc, #368]	; (802c428 <tcp_receive+0x4cc>)
 802c2b8:	4859      	ldr	r0, [pc, #356]	; (802c420 <tcp_receive+0x4c4>)
 802c2ba:	f005 f883 	bl	80313c4 <iprintf>
      while (pcb->unacked != NULL &&
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c2c2:	2b00      	cmp	r3, #0
 802c2c4:	d022      	beq.n	802c30c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 802c2c6:	687b      	ldr	r3, [r7, #4]
 802c2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c2ca:	68db      	ldr	r3, [r3, #12]
 802c2cc:	685b      	ldr	r3, [r3, #4]
 802c2ce:	4618      	mov	r0, r3
 802c2d0:	f7fb fd0f 	bl	8027cf2 <lwip_htonl>
 802c2d4:	4604      	mov	r4, r0
 802c2d6:	687b      	ldr	r3, [r7, #4]
 802c2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c2da:	891b      	ldrh	r3, [r3, #8]
 802c2dc:	461d      	mov	r5, r3
 802c2de:	687b      	ldr	r3, [r7, #4]
 802c2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c2e2:	68db      	ldr	r3, [r3, #12]
 802c2e4:	899b      	ldrh	r3, [r3, #12]
 802c2e6:	b29b      	uxth	r3, r3
 802c2e8:	4618      	mov	r0, r3
 802c2ea:	f7fb fcf4 	bl	8027cd6 <lwip_htons>
 802c2ee:	4603      	mov	r3, r0
 802c2f0:	f003 0303 	and.w	r3, r3, #3
 802c2f4:	2b00      	cmp	r3, #0
 802c2f6:	d001      	beq.n	802c2fc <tcp_receive+0x3a0>
 802c2f8:	2301      	movs	r3, #1
 802c2fa:	e000      	b.n	802c2fe <tcp_receive+0x3a2>
 802c2fc:	2300      	movs	r3, #0
 802c2fe:	442b      	add	r3, r5
 802c300:	18e2      	adds	r2, r4, r3
 802c302:	4b4a      	ldr	r3, [pc, #296]	; (802c42c <tcp_receive+0x4d0>)
 802c304:	681b      	ldr	r3, [r3, #0]
 802c306:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 802c308:	2b00      	cmp	r3, #0
 802c30a:	dd90      	ble.n	802c22e <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 802c30c:	687b      	ldr	r3, [r7, #4]
 802c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c310:	2b00      	cmp	r3, #0
 802c312:	d104      	bne.n	802c31e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802c31a:	861a      	strh	r2, [r3, #48]	; 0x30
 802c31c:	e002      	b.n	802c324 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 802c31e:	687b      	ldr	r3, [r7, #4]
 802c320:	2200      	movs	r2, #0
 802c322:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 802c324:	687b      	ldr	r3, [r7, #4]
 802c326:	2200      	movs	r2, #0
 802c328:	76da      	strb	r2, [r3, #27]
 802c32a:	e002      	b.n	802c332 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 802c32c:	6878      	ldr	r0, [r7, #4]
 802c32e:	f001 fd31 	bl	802dd94 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 802c332:	e04f      	b.n	802c3d4 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c338:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 802c33a:	687b      	ldr	r3, [r7, #4]
 802c33c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c33e:	681a      	ldr	r2, [r3, #0]
 802c340:	687b      	ldr	r3, [r7, #4]
 802c342:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 802c344:	687b      	ldr	r3, [r7, #4]
 802c346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c348:	2b00      	cmp	r3, #0
 802c34a:	d103      	bne.n	802c354 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 802c34c:	687b      	ldr	r3, [r7, #4]
 802c34e:	2200      	movs	r2, #0
 802c350:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 802c354:	687b      	ldr	r3, [r7, #4]
 802c356:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 802c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c35c:	685b      	ldr	r3, [r3, #4]
 802c35e:	4618      	mov	r0, r3
 802c360:	f7fc fe76 	bl	8029050 <pbuf_clen>
 802c364:	4603      	mov	r3, r0
 802c366:	429c      	cmp	r4, r3
 802c368:	d206      	bcs.n	802c378 <tcp_receive+0x41c>
 802c36a:	4b2b      	ldr	r3, [pc, #172]	; (802c418 <tcp_receive+0x4bc>)
 802c36c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 802c370:	492a      	ldr	r1, [pc, #168]	; (802c41c <tcp_receive+0x4c0>)
 802c372:	482b      	ldr	r0, [pc, #172]	; (802c420 <tcp_receive+0x4c4>)
 802c374:	f005 f826 	bl	80313c4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 802c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c37a:	685b      	ldr	r3, [r3, #4]
 802c37c:	4618      	mov	r0, r3
 802c37e:	f7fc fe67 	bl	8029050 <pbuf_clen>
 802c382:	4603      	mov	r3, r0
 802c384:	461a      	mov	r2, r3
 802c386:	687b      	ldr	r3, [r7, #4]
 802c388:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802c38c:	1a9b      	subs	r3, r3, r2
 802c38e:	b29a      	uxth	r2, r3
 802c390:	687b      	ldr	r3, [r7, #4]
 802c392:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 802c396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c398:	891a      	ldrh	r2, [r3, #8]
 802c39a:	4b22      	ldr	r3, [pc, #136]	; (802c424 <tcp_receive+0x4c8>)
 802c39c:	881b      	ldrh	r3, [r3, #0]
 802c39e:	4413      	add	r3, r2
 802c3a0:	b29a      	uxth	r2, r3
 802c3a2:	4b20      	ldr	r3, [pc, #128]	; (802c424 <tcp_receive+0x4c8>)
 802c3a4:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 802c3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802c3a8:	f7fe f8b2 	bl	802a510 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 802c3ac:	687b      	ldr	r3, [r7, #4]
 802c3ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802c3b2:	2b00      	cmp	r3, #0
 802c3b4:	d00e      	beq.n	802c3d4 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c3ba:	2b00      	cmp	r3, #0
 802c3bc:	d10a      	bne.n	802c3d4 <tcp_receive+0x478>
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c3c2:	2b00      	cmp	r3, #0
 802c3c4:	d106      	bne.n	802c3d4 <tcp_receive+0x478>
 802c3c6:	4b14      	ldr	r3, [pc, #80]	; (802c418 <tcp_receive+0x4bc>)
 802c3c8:	f240 42dc 	movw	r2, #1244	; 0x4dc
 802c3cc:	4916      	ldr	r1, [pc, #88]	; (802c428 <tcp_receive+0x4cc>)
 802c3ce:	4814      	ldr	r0, [pc, #80]	; (802c420 <tcp_receive+0x4c4>)
 802c3d0:	f004 fff8 	bl	80313c4 <iprintf>
    while (pcb->unsent != NULL &&
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c3d8:	2b00      	cmp	r3, #0
 802c3da:	d037      	beq.n	802c44c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 802c3dc:	4b13      	ldr	r3, [pc, #76]	; (802c42c <tcp_receive+0x4d0>)
 802c3de:	681c      	ldr	r4, [r3, #0]
 802c3e0:	687b      	ldr	r3, [r7, #4]
 802c3e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c3e4:	68db      	ldr	r3, [r3, #12]
 802c3e6:	685b      	ldr	r3, [r3, #4]
 802c3e8:	4618      	mov	r0, r3
 802c3ea:	f7fb fc82 	bl	8027cf2 <lwip_htonl>
 802c3ee:	4605      	mov	r5, r0
 802c3f0:	687b      	ldr	r3, [r7, #4]
 802c3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c3f4:	891b      	ldrh	r3, [r3, #8]
 802c3f6:	461e      	mov	r6, r3
 802c3f8:	687b      	ldr	r3, [r7, #4]
 802c3fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c3fc:	68db      	ldr	r3, [r3, #12]
 802c3fe:	899b      	ldrh	r3, [r3, #12]
 802c400:	b29b      	uxth	r3, r3
 802c402:	4618      	mov	r0, r3
 802c404:	f7fb fc67 	bl	8027cd6 <lwip_htons>
 802c408:	4603      	mov	r3, r0
 802c40a:	f003 0303 	and.w	r3, r3, #3
 802c40e:	2b00      	cmp	r3, #0
 802c410:	d00e      	beq.n	802c430 <tcp_receive+0x4d4>
 802c412:	2301      	movs	r3, #1
 802c414:	e00d      	b.n	802c432 <tcp_receive+0x4d6>
 802c416:	bf00      	nop
 802c418:	080343c0 	.word	0x080343c0
 802c41c:	08034600 	.word	0x08034600
 802c420:	08034404 	.word	0x08034404
 802c424:	20006a80 	.word	0x20006a80
 802c428:	08034628 	.word	0x08034628
 802c42c:	20006a7c 	.word	0x20006a7c
 802c430:	2300      	movs	r3, #0
 802c432:	4433      	add	r3, r6
 802c434:	442b      	add	r3, r5
 802c436:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 802c438:	2b00      	cmp	r3, #0
 802c43a:	db07      	blt.n	802c44c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 802c43c:	4b8d      	ldr	r3, [pc, #564]	; (802c674 <tcp_receive+0x718>)
 802c43e:	681a      	ldr	r2, [r3, #0]
 802c440:	687b      	ldr	r3, [r7, #4]
 802c442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c444:	1ad3      	subs	r3, r2, r3
 802c446:	2b00      	cmp	r3, #0
 802c448:	f77f af74 	ble.w	802c334 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 802c44c:	687b      	ldr	r3, [r7, #4]
 802c44e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802c452:	4b89      	ldr	r3, [pc, #548]	; (802c678 <tcp_receive+0x71c>)
 802c454:	881b      	ldrh	r3, [r3, #0]
 802c456:	4413      	add	r3, r2
 802c458:	b29a      	uxth	r2, r3
 802c45a:	687b      	ldr	r3, [r7, #4]
 802c45c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 802c460:	687b      	ldr	r3, [r7, #4]
 802c462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c464:	2b00      	cmp	r3, #0
 802c466:	d052      	beq.n	802c50e <tcp_receive+0x5b2>
 802c468:	687b      	ldr	r3, [r7, #4]
 802c46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802c46c:	4b81      	ldr	r3, [pc, #516]	; (802c674 <tcp_receive+0x718>)
 802c46e:	681b      	ldr	r3, [r3, #0]
 802c470:	1ad3      	subs	r3, r2, r3
 802c472:	2b00      	cmp	r3, #0
 802c474:	da4b      	bge.n	802c50e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802c476:	4b81      	ldr	r3, [pc, #516]	; (802c67c <tcp_receive+0x720>)
 802c478:	681b      	ldr	r3, [r3, #0]
 802c47a:	b29a      	uxth	r2, r3
 802c47c:	687b      	ldr	r3, [r7, #4]
 802c47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c480:	b29b      	uxth	r3, r3
 802c482:	1ad3      	subs	r3, r2, r3
 802c484:	b29b      	uxth	r3, r3
 802c486:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 802c488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802c48a:	687b      	ldr	r3, [r7, #4]
 802c48c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802c490:	10db      	asrs	r3, r3, #3
 802c492:	b21b      	sxth	r3, r3
 802c494:	b29b      	uxth	r3, r3
 802c496:	1ad3      	subs	r3, r2, r3
 802c498:	b29b      	uxth	r3, r3
 802c49a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 802c49c:	687b      	ldr	r3, [r7, #4]
 802c49e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802c4a2:	b29a      	uxth	r2, r3
 802c4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c4a6:	4413      	add	r3, r2
 802c4a8:	b29b      	uxth	r3, r3
 802c4aa:	b21a      	sxth	r2, r3
 802c4ac:	687b      	ldr	r3, [r7, #4]
 802c4ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 802c4b0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802c4b4:	2b00      	cmp	r3, #0
 802c4b6:	da03      	bge.n	802c4c0 <tcp_receive+0x564>
        m = -m;
 802c4b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c4ba:	425b      	negs	r3, r3
 802c4bc:	b29b      	uxth	r3, r3
 802c4be:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 802c4c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802c4c8:	109b      	asrs	r3, r3, #2
 802c4ca:	b21b      	sxth	r3, r3
 802c4cc:	b29b      	uxth	r3, r3
 802c4ce:	1ad3      	subs	r3, r2, r3
 802c4d0:	b29b      	uxth	r3, r3
 802c4d2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802c4da:	b29a      	uxth	r2, r3
 802c4dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c4de:	4413      	add	r3, r2
 802c4e0:	b29b      	uxth	r3, r3
 802c4e2:	b21a      	sxth	r2, r3
 802c4e4:	687b      	ldr	r3, [r7, #4]
 802c4e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802c4ee:	10db      	asrs	r3, r3, #3
 802c4f0:	b21b      	sxth	r3, r3
 802c4f2:	b29a      	uxth	r2, r3
 802c4f4:	687b      	ldr	r3, [r7, #4]
 802c4f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802c4fa:	b29b      	uxth	r3, r3
 802c4fc:	4413      	add	r3, r2
 802c4fe:	b29b      	uxth	r3, r3
 802c500:	b21a      	sxth	r2, r3
 802c502:	687b      	ldr	r3, [r7, #4]
 802c504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	2200      	movs	r2, #0
 802c50c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 802c50e:	4b5c      	ldr	r3, [pc, #368]	; (802c680 <tcp_receive+0x724>)
 802c510:	881b      	ldrh	r3, [r3, #0]
 802c512:	2b00      	cmp	r3, #0
 802c514:	f000 84f1 	beq.w	802cefa <tcp_receive+0xf9e>
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	7d1b      	ldrb	r3, [r3, #20]
 802c51c:	2b06      	cmp	r3, #6
 802c51e:	f200 84ec 	bhi.w	802cefa <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802c522:	687b      	ldr	r3, [r7, #4]
 802c524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c526:	4b57      	ldr	r3, [pc, #348]	; (802c684 <tcp_receive+0x728>)
 802c528:	681b      	ldr	r3, [r3, #0]
 802c52a:	1ad3      	subs	r3, r2, r3
 802c52c:	3b01      	subs	r3, #1
 802c52e:	2b00      	cmp	r3, #0
 802c530:	f2c0 80b8 	blt.w	802c6a4 <tcp_receive+0x748>
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c538:	4b51      	ldr	r3, [pc, #324]	; (802c680 <tcp_receive+0x724>)
 802c53a:	881b      	ldrh	r3, [r3, #0]
 802c53c:	4619      	mov	r1, r3
 802c53e:	4b51      	ldr	r3, [pc, #324]	; (802c684 <tcp_receive+0x728>)
 802c540:	681b      	ldr	r3, [r3, #0]
 802c542:	440b      	add	r3, r1
 802c544:	1ad3      	subs	r3, r2, r3
 802c546:	3301      	adds	r3, #1
 802c548:	2b00      	cmp	r3, #0
 802c54a:	f300 80ab 	bgt.w	802c6a4 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 802c54e:	4b4e      	ldr	r3, [pc, #312]	; (802c688 <tcp_receive+0x72c>)
 802c550:	685b      	ldr	r3, [r3, #4]
 802c552:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c558:	4b4a      	ldr	r3, [pc, #296]	; (802c684 <tcp_receive+0x728>)
 802c55a:	681b      	ldr	r3, [r3, #0]
 802c55c:	1ad3      	subs	r3, r2, r3
 802c55e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 802c560:	4b49      	ldr	r3, [pc, #292]	; (802c688 <tcp_receive+0x72c>)
 802c562:	685b      	ldr	r3, [r3, #4]
 802c564:	2b00      	cmp	r3, #0
 802c566:	d106      	bne.n	802c576 <tcp_receive+0x61a>
 802c568:	4b48      	ldr	r3, [pc, #288]	; (802c68c <tcp_receive+0x730>)
 802c56a:	f240 523c 	movw	r2, #1340	; 0x53c
 802c56e:	4948      	ldr	r1, [pc, #288]	; (802c690 <tcp_receive+0x734>)
 802c570:	4848      	ldr	r0, [pc, #288]	; (802c694 <tcp_receive+0x738>)
 802c572:	f004 ff27 	bl	80313c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 802c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c578:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 802c57c:	4293      	cmp	r3, r2
 802c57e:	dd06      	ble.n	802c58e <tcp_receive+0x632>
 802c580:	4b42      	ldr	r3, [pc, #264]	; (802c68c <tcp_receive+0x730>)
 802c582:	f240 523d 	movw	r2, #1341	; 0x53d
 802c586:	4944      	ldr	r1, [pc, #272]	; (802c698 <tcp_receive+0x73c>)
 802c588:	4842      	ldr	r0, [pc, #264]	; (802c694 <tcp_receive+0x738>)
 802c58a:	f004 ff1b 	bl	80313c4 <iprintf>
      if (inseg.p->len < off) {
 802c58e:	4b3e      	ldr	r3, [pc, #248]	; (802c688 <tcp_receive+0x72c>)
 802c590:	685b      	ldr	r3, [r3, #4]
 802c592:	895b      	ldrh	r3, [r3, #10]
 802c594:	461a      	mov	r2, r3
 802c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c598:	4293      	cmp	r3, r2
 802c59a:	dd3e      	ble.n	802c61a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 802c59c:	4b3a      	ldr	r3, [pc, #232]	; (802c688 <tcp_receive+0x72c>)
 802c59e:	685b      	ldr	r3, [r3, #4]
 802c5a0:	891b      	ldrh	r3, [r3, #8]
 802c5a2:	461a      	mov	r2, r3
 802c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c5a6:	4293      	cmp	r3, r2
 802c5a8:	dd06      	ble.n	802c5b8 <tcp_receive+0x65c>
 802c5aa:	4b38      	ldr	r3, [pc, #224]	; (802c68c <tcp_receive+0x730>)
 802c5ac:	f240 523f 	movw	r2, #1343	; 0x53f
 802c5b0:	493a      	ldr	r1, [pc, #232]	; (802c69c <tcp_receive+0x740>)
 802c5b2:	4838      	ldr	r0, [pc, #224]	; (802c694 <tcp_receive+0x738>)
 802c5b4:	f004 ff06 	bl	80313c4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 802c5b8:	4b33      	ldr	r3, [pc, #204]	; (802c688 <tcp_receive+0x72c>)
 802c5ba:	685b      	ldr	r3, [r3, #4]
 802c5bc:	891a      	ldrh	r2, [r3, #8]
 802c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c5c0:	b29b      	uxth	r3, r3
 802c5c2:	1ad3      	subs	r3, r2, r3
 802c5c4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 802c5c6:	e00e      	b.n	802c5e6 <tcp_receive+0x68a>
          off -= p->len;
 802c5c8:	69bb      	ldr	r3, [r7, #24]
 802c5ca:	895b      	ldrh	r3, [r3, #10]
 802c5cc:	461a      	mov	r2, r3
 802c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c5d0:	1a9b      	subs	r3, r3, r2
 802c5d2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 802c5d4:	69bb      	ldr	r3, [r7, #24]
 802c5d6:	8a3a      	ldrh	r2, [r7, #16]
 802c5d8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 802c5da:	69bb      	ldr	r3, [r7, #24]
 802c5dc:	2200      	movs	r2, #0
 802c5de:	815a      	strh	r2, [r3, #10]
          p = p->next;
 802c5e0:	69bb      	ldr	r3, [r7, #24]
 802c5e2:	681b      	ldr	r3, [r3, #0]
 802c5e4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 802c5e6:	69bb      	ldr	r3, [r7, #24]
 802c5e8:	895b      	ldrh	r3, [r3, #10]
 802c5ea:	461a      	mov	r2, r3
 802c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c5ee:	4293      	cmp	r3, r2
 802c5f0:	dcea      	bgt.n	802c5c8 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 802c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c5f4:	b29b      	uxth	r3, r3
 802c5f6:	425b      	negs	r3, r3
 802c5f8:	b29b      	uxth	r3, r3
 802c5fa:	b21b      	sxth	r3, r3
 802c5fc:	4619      	mov	r1, r3
 802c5fe:	69b8      	ldr	r0, [r7, #24]
 802c600:	f7fc fc6e 	bl	8028ee0 <pbuf_header>
 802c604:	4603      	mov	r3, r0
 802c606:	2b00      	cmp	r3, #0
 802c608:	d01c      	beq.n	802c644 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 802c60a:	4b20      	ldr	r3, [pc, #128]	; (802c68c <tcp_receive+0x730>)
 802c60c:	f240 524c 	movw	r2, #1356	; 0x54c
 802c610:	4923      	ldr	r1, [pc, #140]	; (802c6a0 <tcp_receive+0x744>)
 802c612:	4820      	ldr	r0, [pc, #128]	; (802c694 <tcp_receive+0x738>)
 802c614:	f004 fed6 	bl	80313c4 <iprintf>
 802c618:	e014      	b.n	802c644 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 802c61a:	4b1b      	ldr	r3, [pc, #108]	; (802c688 <tcp_receive+0x72c>)
 802c61c:	685b      	ldr	r3, [r3, #4]
 802c61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c620:	b292      	uxth	r2, r2
 802c622:	4252      	negs	r2, r2
 802c624:	b292      	uxth	r2, r2
 802c626:	b212      	sxth	r2, r2
 802c628:	4611      	mov	r1, r2
 802c62a:	4618      	mov	r0, r3
 802c62c:	f7fc fc58 	bl	8028ee0 <pbuf_header>
 802c630:	4603      	mov	r3, r0
 802c632:	2b00      	cmp	r3, #0
 802c634:	d006      	beq.n	802c644 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 802c636:	4b15      	ldr	r3, [pc, #84]	; (802c68c <tcp_receive+0x730>)
 802c638:	f240 5251 	movw	r2, #1361	; 0x551
 802c63c:	4918      	ldr	r1, [pc, #96]	; (802c6a0 <tcp_receive+0x744>)
 802c63e:	4815      	ldr	r0, [pc, #84]	; (802c694 <tcp_receive+0x738>)
 802c640:	f004 fec0 	bl	80313c4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 802c644:	4b10      	ldr	r3, [pc, #64]	; (802c688 <tcp_receive+0x72c>)
 802c646:	891a      	ldrh	r2, [r3, #8]
 802c648:	4b0e      	ldr	r3, [pc, #56]	; (802c684 <tcp_receive+0x728>)
 802c64a:	681b      	ldr	r3, [r3, #0]
 802c64c:	b299      	uxth	r1, r3
 802c64e:	687b      	ldr	r3, [r7, #4]
 802c650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c652:	b29b      	uxth	r3, r3
 802c654:	1acb      	subs	r3, r1, r3
 802c656:	b29b      	uxth	r3, r3
 802c658:	4413      	add	r3, r2
 802c65a:	b29a      	uxth	r2, r3
 802c65c:	4b0a      	ldr	r3, [pc, #40]	; (802c688 <tcp_receive+0x72c>)
 802c65e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 802c660:	687b      	ldr	r3, [r7, #4]
 802c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c664:	4a07      	ldr	r2, [pc, #28]	; (802c684 <tcp_receive+0x728>)
 802c666:	6013      	str	r3, [r2, #0]
 802c668:	4b07      	ldr	r3, [pc, #28]	; (802c688 <tcp_receive+0x72c>)
 802c66a:	68db      	ldr	r3, [r3, #12]
 802c66c:	4a05      	ldr	r2, [pc, #20]	; (802c684 <tcp_receive+0x728>)
 802c66e:	6812      	ldr	r2, [r2, #0]
 802c670:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802c672:	e025      	b.n	802c6c0 <tcp_receive+0x764>
 802c674:	20006a7c 	.word	0x20006a7c
 802c678:	20006a80 	.word	0x20006a80
 802c67c:	20006a40 	.word	0x20006a40
 802c680:	20006a82 	.word	0x20006a82
 802c684:	20006a78 	.word	0x20006a78
 802c688:	20006a58 	.word	0x20006a58
 802c68c:	080343c0 	.word	0x080343c0
 802c690:	08034648 	.word	0x08034648
 802c694:	08034404 	.word	0x08034404
 802c698:	08034658 	.word	0x08034658
 802c69c:	08034668 	.word	0x08034668
 802c6a0:	08034678 	.word	0x08034678
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 802c6a4:	4b87      	ldr	r3, [pc, #540]	; (802c8c4 <tcp_receive+0x968>)
 802c6a6:	681a      	ldr	r2, [r3, #0]
 802c6a8:	687b      	ldr	r3, [r7, #4]
 802c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c6ac:	1ad3      	subs	r3, r2, r3
 802c6ae:	2b00      	cmp	r3, #0
 802c6b0:	da06      	bge.n	802c6c0 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 802c6b2:	687b      	ldr	r3, [r7, #4]
 802c6b4:	7e9b      	ldrb	r3, [r3, #26]
 802c6b6:	f043 0302 	orr.w	r3, r3, #2
 802c6ba:	b2da      	uxtb	r2, r3
 802c6bc:	687b      	ldr	r3, [r7, #4]
 802c6be:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 802c6c0:	4b80      	ldr	r3, [pc, #512]	; (802c8c4 <tcp_receive+0x968>)
 802c6c2:	681a      	ldr	r2, [r3, #0]
 802c6c4:	687b      	ldr	r3, [r7, #4]
 802c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c6c8:	1ad3      	subs	r3, r2, r3
 802c6ca:	2b00      	cmp	r3, #0
 802c6cc:	f2c0 8410 	blt.w	802cef0 <tcp_receive+0xf94>
 802c6d0:	4b7c      	ldr	r3, [pc, #496]	; (802c8c4 <tcp_receive+0x968>)
 802c6d2:	681a      	ldr	r2, [r3, #0]
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c6d8:	6879      	ldr	r1, [r7, #4]
 802c6da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802c6dc:	440b      	add	r3, r1
 802c6de:	1ad3      	subs	r3, r2, r3
 802c6e0:	3301      	adds	r3, #1
 802c6e2:	2b00      	cmp	r3, #0
 802c6e4:	f300 8404 	bgt.w	802cef0 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c6ec:	4b75      	ldr	r3, [pc, #468]	; (802c8c4 <tcp_receive+0x968>)
 802c6ee:	681b      	ldr	r3, [r3, #0]
 802c6f0:	429a      	cmp	r2, r3
 802c6f2:	f040 8287 	bne.w	802cc04 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802c6f6:	4b74      	ldr	r3, [pc, #464]	; (802c8c8 <tcp_receive+0x96c>)
 802c6f8:	891c      	ldrh	r4, [r3, #8]
 802c6fa:	4b73      	ldr	r3, [pc, #460]	; (802c8c8 <tcp_receive+0x96c>)
 802c6fc:	68db      	ldr	r3, [r3, #12]
 802c6fe:	899b      	ldrh	r3, [r3, #12]
 802c700:	b29b      	uxth	r3, r3
 802c702:	4618      	mov	r0, r3
 802c704:	f7fb fae7 	bl	8027cd6 <lwip_htons>
 802c708:	4603      	mov	r3, r0
 802c70a:	f003 0303 	and.w	r3, r3, #3
 802c70e:	2b00      	cmp	r3, #0
 802c710:	d001      	beq.n	802c716 <tcp_receive+0x7ba>
 802c712:	2301      	movs	r3, #1
 802c714:	e000      	b.n	802c718 <tcp_receive+0x7bc>
 802c716:	2300      	movs	r3, #0
 802c718:	4423      	add	r3, r4
 802c71a:	b29a      	uxth	r2, r3
 802c71c:	4b6b      	ldr	r3, [pc, #428]	; (802c8cc <tcp_receive+0x970>)
 802c71e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 802c720:	687b      	ldr	r3, [r7, #4]
 802c722:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802c724:	4b69      	ldr	r3, [pc, #420]	; (802c8cc <tcp_receive+0x970>)
 802c726:	881b      	ldrh	r3, [r3, #0]
 802c728:	429a      	cmp	r2, r3
 802c72a:	d26e      	bcs.n	802c80a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802c72c:	4b66      	ldr	r3, [pc, #408]	; (802c8c8 <tcp_receive+0x96c>)
 802c72e:	68db      	ldr	r3, [r3, #12]
 802c730:	899b      	ldrh	r3, [r3, #12]
 802c732:	b29b      	uxth	r3, r3
 802c734:	4618      	mov	r0, r3
 802c736:	f7fb face 	bl	8027cd6 <lwip_htons>
 802c73a:	4603      	mov	r3, r0
 802c73c:	f003 0301 	and.w	r3, r3, #1
 802c740:	2b00      	cmp	r3, #0
 802c742:	d01b      	beq.n	802c77c <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 802c744:	4b60      	ldr	r3, [pc, #384]	; (802c8c8 <tcp_receive+0x96c>)
 802c746:	68db      	ldr	r3, [r3, #12]
 802c748:	899b      	ldrh	r3, [r3, #12]
 802c74a:	b29b      	uxth	r3, r3
 802c74c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802c750:	b29c      	uxth	r4, r3
 802c752:	4b5d      	ldr	r3, [pc, #372]	; (802c8c8 <tcp_receive+0x96c>)
 802c754:	68db      	ldr	r3, [r3, #12]
 802c756:	899b      	ldrh	r3, [r3, #12]
 802c758:	b29b      	uxth	r3, r3
 802c75a:	4618      	mov	r0, r3
 802c75c:	f7fb fabb 	bl	8027cd6 <lwip_htons>
 802c760:	4603      	mov	r3, r0
 802c762:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802c766:	b29b      	uxth	r3, r3
 802c768:	4618      	mov	r0, r3
 802c76a:	f7fb fab4 	bl	8027cd6 <lwip_htons>
 802c76e:	4603      	mov	r3, r0
 802c770:	461a      	mov	r2, r3
 802c772:	4b55      	ldr	r3, [pc, #340]	; (802c8c8 <tcp_receive+0x96c>)
 802c774:	68db      	ldr	r3, [r3, #12]
 802c776:	4322      	orrs	r2, r4
 802c778:	b292      	uxth	r2, r2
 802c77a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 802c77c:	687b      	ldr	r3, [r7, #4]
 802c77e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802c780:	4b51      	ldr	r3, [pc, #324]	; (802c8c8 <tcp_receive+0x96c>)
 802c782:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802c784:	4b50      	ldr	r3, [pc, #320]	; (802c8c8 <tcp_receive+0x96c>)
 802c786:	68db      	ldr	r3, [r3, #12]
 802c788:	899b      	ldrh	r3, [r3, #12]
 802c78a:	b29b      	uxth	r3, r3
 802c78c:	4618      	mov	r0, r3
 802c78e:	f7fb faa2 	bl	8027cd6 <lwip_htons>
 802c792:	4603      	mov	r3, r0
 802c794:	f003 0302 	and.w	r3, r3, #2
 802c798:	2b00      	cmp	r3, #0
 802c79a:	d005      	beq.n	802c7a8 <tcp_receive+0x84c>
            inseg.len -= 1;
 802c79c:	4b4a      	ldr	r3, [pc, #296]	; (802c8c8 <tcp_receive+0x96c>)
 802c79e:	891b      	ldrh	r3, [r3, #8]
 802c7a0:	3b01      	subs	r3, #1
 802c7a2:	b29a      	uxth	r2, r3
 802c7a4:	4b48      	ldr	r3, [pc, #288]	; (802c8c8 <tcp_receive+0x96c>)
 802c7a6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802c7a8:	4b47      	ldr	r3, [pc, #284]	; (802c8c8 <tcp_receive+0x96c>)
 802c7aa:	685b      	ldr	r3, [r3, #4]
 802c7ac:	4a46      	ldr	r2, [pc, #280]	; (802c8c8 <tcp_receive+0x96c>)
 802c7ae:	8912      	ldrh	r2, [r2, #8]
 802c7b0:	4611      	mov	r1, r2
 802c7b2:	4618      	mov	r0, r3
 802c7b4:	f7fc fa44 	bl	8028c40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802c7b8:	4b43      	ldr	r3, [pc, #268]	; (802c8c8 <tcp_receive+0x96c>)
 802c7ba:	891c      	ldrh	r4, [r3, #8]
 802c7bc:	4b42      	ldr	r3, [pc, #264]	; (802c8c8 <tcp_receive+0x96c>)
 802c7be:	68db      	ldr	r3, [r3, #12]
 802c7c0:	899b      	ldrh	r3, [r3, #12]
 802c7c2:	b29b      	uxth	r3, r3
 802c7c4:	4618      	mov	r0, r3
 802c7c6:	f7fb fa86 	bl	8027cd6 <lwip_htons>
 802c7ca:	4603      	mov	r3, r0
 802c7cc:	f003 0303 	and.w	r3, r3, #3
 802c7d0:	2b00      	cmp	r3, #0
 802c7d2:	d001      	beq.n	802c7d8 <tcp_receive+0x87c>
 802c7d4:	2301      	movs	r3, #1
 802c7d6:	e000      	b.n	802c7da <tcp_receive+0x87e>
 802c7d8:	2300      	movs	r3, #0
 802c7da:	4423      	add	r3, r4
 802c7dc:	b29a      	uxth	r2, r3
 802c7de:	4b3b      	ldr	r3, [pc, #236]	; (802c8cc <tcp_receive+0x970>)
 802c7e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 802c7e2:	4b3a      	ldr	r3, [pc, #232]	; (802c8cc <tcp_receive+0x970>)
 802c7e4:	881b      	ldrh	r3, [r3, #0]
 802c7e6:	461a      	mov	r2, r3
 802c7e8:	4b36      	ldr	r3, [pc, #216]	; (802c8c4 <tcp_receive+0x968>)
 802c7ea:	681b      	ldr	r3, [r3, #0]
 802c7ec:	441a      	add	r2, r3
 802c7ee:	687b      	ldr	r3, [r7, #4]
 802c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c7f2:	6879      	ldr	r1, [r7, #4]
 802c7f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802c7f6:	440b      	add	r3, r1
 802c7f8:	429a      	cmp	r2, r3
 802c7fa:	d006      	beq.n	802c80a <tcp_receive+0x8ae>
 802c7fc:	4b34      	ldr	r3, [pc, #208]	; (802c8d0 <tcp_receive+0x974>)
 802c7fe:	f240 527e 	movw	r2, #1406	; 0x57e
 802c802:	4934      	ldr	r1, [pc, #208]	; (802c8d4 <tcp_receive+0x978>)
 802c804:	4834      	ldr	r0, [pc, #208]	; (802c8d8 <tcp_receive+0x97c>)
 802c806:	f004 fddd 	bl	80313c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 802c80a:	687b      	ldr	r3, [r7, #4]
 802c80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c80e:	2b00      	cmp	r3, #0
 802c810:	f000 80e1 	beq.w	802c9d6 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802c814:	4b2c      	ldr	r3, [pc, #176]	; (802c8c8 <tcp_receive+0x96c>)
 802c816:	68db      	ldr	r3, [r3, #12]
 802c818:	899b      	ldrh	r3, [r3, #12]
 802c81a:	b29b      	uxth	r3, r3
 802c81c:	4618      	mov	r0, r3
 802c81e:	f7fb fa5a 	bl	8027cd6 <lwip_htons>
 802c822:	4603      	mov	r3, r0
 802c824:	f003 0301 	and.w	r3, r3, #1
 802c828:	2b00      	cmp	r3, #0
 802c82a:	d010      	beq.n	802c84e <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 802c82c:	e00a      	b.n	802c844 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 802c82e:	687b      	ldr	r3, [r7, #4]
 802c830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c832:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 802c834:	687b      	ldr	r3, [r7, #4]
 802c836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c838:	681a      	ldr	r2, [r3, #0]
 802c83a:	687b      	ldr	r3, [r7, #4]
 802c83c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 802c83e:	68b8      	ldr	r0, [r7, #8]
 802c840:	f7fd fe66 	bl	802a510 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 802c844:	687b      	ldr	r3, [r7, #4]
 802c846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c848:	2b00      	cmp	r3, #0
 802c84a:	d1f0      	bne.n	802c82e <tcp_receive+0x8d2>
 802c84c:	e0c3      	b.n	802c9d6 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 802c84e:	687b      	ldr	r3, [r7, #4]
 802c850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c852:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 802c854:	e04f      	b.n	802c8f6 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c858:	68db      	ldr	r3, [r3, #12]
 802c85a:	899b      	ldrh	r3, [r3, #12]
 802c85c:	b29b      	uxth	r3, r3
 802c85e:	4618      	mov	r0, r3
 802c860:	f7fb fa39 	bl	8027cd6 <lwip_htons>
 802c864:	4603      	mov	r3, r0
 802c866:	f003 0301 	and.w	r3, r3, #1
 802c86a:	2b00      	cmp	r3, #0
 802c86c:	d03b      	beq.n	802c8e6 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 802c86e:	4b16      	ldr	r3, [pc, #88]	; (802c8c8 <tcp_receive+0x96c>)
 802c870:	68db      	ldr	r3, [r3, #12]
 802c872:	899b      	ldrh	r3, [r3, #12]
 802c874:	b29b      	uxth	r3, r3
 802c876:	4618      	mov	r0, r3
 802c878:	f7fb fa2d 	bl	8027cd6 <lwip_htons>
 802c87c:	4603      	mov	r3, r0
 802c87e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802c882:	2b00      	cmp	r3, #0
 802c884:	d12f      	bne.n	802c8e6 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 802c886:	4b10      	ldr	r3, [pc, #64]	; (802c8c8 <tcp_receive+0x96c>)
 802c888:	68db      	ldr	r3, [r3, #12]
 802c88a:	899b      	ldrh	r3, [r3, #12]
 802c88c:	b29c      	uxth	r4, r3
 802c88e:	2001      	movs	r0, #1
 802c890:	f7fb fa21 	bl	8027cd6 <lwip_htons>
 802c894:	4603      	mov	r3, r0
 802c896:	461a      	mov	r2, r3
 802c898:	4b0b      	ldr	r3, [pc, #44]	; (802c8c8 <tcp_receive+0x96c>)
 802c89a:	68db      	ldr	r3, [r3, #12]
 802c89c:	4322      	orrs	r2, r4
 802c89e:	b292      	uxth	r2, r2
 802c8a0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 802c8a2:	4b09      	ldr	r3, [pc, #36]	; (802c8c8 <tcp_receive+0x96c>)
 802c8a4:	891c      	ldrh	r4, [r3, #8]
 802c8a6:	4b08      	ldr	r3, [pc, #32]	; (802c8c8 <tcp_receive+0x96c>)
 802c8a8:	68db      	ldr	r3, [r3, #12]
 802c8aa:	899b      	ldrh	r3, [r3, #12]
 802c8ac:	b29b      	uxth	r3, r3
 802c8ae:	4618      	mov	r0, r3
 802c8b0:	f7fb fa11 	bl	8027cd6 <lwip_htons>
 802c8b4:	4603      	mov	r3, r0
 802c8b6:	f003 0303 	and.w	r3, r3, #3
 802c8ba:	2b00      	cmp	r3, #0
 802c8bc:	d00e      	beq.n	802c8dc <tcp_receive+0x980>
 802c8be:	2301      	movs	r3, #1
 802c8c0:	e00d      	b.n	802c8de <tcp_receive+0x982>
 802c8c2:	bf00      	nop
 802c8c4:	20006a78 	.word	0x20006a78
 802c8c8:	20006a58 	.word	0x20006a58
 802c8cc:	20006a82 	.word	0x20006a82
 802c8d0:	080343c0 	.word	0x080343c0
 802c8d4:	0803468c 	.word	0x0803468c
 802c8d8:	08034404 	.word	0x08034404
 802c8dc:	2300      	movs	r3, #0
 802c8de:	4423      	add	r3, r4
 802c8e0:	b29a      	uxth	r2, r3
 802c8e2:	4b95      	ldr	r3, [pc, #596]	; (802cb38 <tcp_receive+0xbdc>)
 802c8e4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 802c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c8e8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 802c8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c8ec:	681b      	ldr	r3, [r3, #0]
 802c8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 802c8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c8f2:	f7fd fe0d 	bl	802a510 <tcp_seg_free>
            while (next &&
 802c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c8f8:	2b00      	cmp	r3, #0
 802c8fa:	d00e      	beq.n	802c91a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 802c8fc:	4b8e      	ldr	r3, [pc, #568]	; (802cb38 <tcp_receive+0xbdc>)
 802c8fe:	881b      	ldrh	r3, [r3, #0]
 802c900:	461a      	mov	r2, r3
 802c902:	4b8e      	ldr	r3, [pc, #568]	; (802cb3c <tcp_receive+0xbe0>)
 802c904:	681b      	ldr	r3, [r3, #0]
 802c906:	441a      	add	r2, r3
 802c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c90a:	68db      	ldr	r3, [r3, #12]
 802c90c:	685b      	ldr	r3, [r3, #4]
 802c90e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802c910:	8909      	ldrh	r1, [r1, #8]
 802c912:	440b      	add	r3, r1
 802c914:	1ad3      	subs	r3, r2, r3
            while (next &&
 802c916:	2b00      	cmp	r3, #0
 802c918:	da9d      	bge.n	802c856 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 802c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	d057      	beq.n	802c9d0 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 802c920:	4b85      	ldr	r3, [pc, #532]	; (802cb38 <tcp_receive+0xbdc>)
 802c922:	881b      	ldrh	r3, [r3, #0]
 802c924:	461a      	mov	r2, r3
 802c926:	4b85      	ldr	r3, [pc, #532]	; (802cb3c <tcp_receive+0xbe0>)
 802c928:	681b      	ldr	r3, [r3, #0]
 802c92a:	441a      	add	r2, r3
 802c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c92e:	68db      	ldr	r3, [r3, #12]
 802c930:	685b      	ldr	r3, [r3, #4]
 802c932:	1ad3      	subs	r3, r2, r3
            if (next &&
 802c934:	2b00      	cmp	r3, #0
 802c936:	dd4b      	ble.n	802c9d0 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 802c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c93a:	68db      	ldr	r3, [r3, #12]
 802c93c:	685b      	ldr	r3, [r3, #4]
 802c93e:	b29a      	uxth	r2, r3
 802c940:	4b7e      	ldr	r3, [pc, #504]	; (802cb3c <tcp_receive+0xbe0>)
 802c942:	681b      	ldr	r3, [r3, #0]
 802c944:	b29b      	uxth	r3, r3
 802c946:	1ad3      	subs	r3, r2, r3
 802c948:	b29a      	uxth	r2, r3
 802c94a:	4b7d      	ldr	r3, [pc, #500]	; (802cb40 <tcp_receive+0xbe4>)
 802c94c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802c94e:	4b7c      	ldr	r3, [pc, #496]	; (802cb40 <tcp_receive+0xbe4>)
 802c950:	68db      	ldr	r3, [r3, #12]
 802c952:	899b      	ldrh	r3, [r3, #12]
 802c954:	b29b      	uxth	r3, r3
 802c956:	4618      	mov	r0, r3
 802c958:	f7fb f9bd 	bl	8027cd6 <lwip_htons>
 802c95c:	4603      	mov	r3, r0
 802c95e:	f003 0302 	and.w	r3, r3, #2
 802c962:	2b00      	cmp	r3, #0
 802c964:	d005      	beq.n	802c972 <tcp_receive+0xa16>
                inseg.len -= 1;
 802c966:	4b76      	ldr	r3, [pc, #472]	; (802cb40 <tcp_receive+0xbe4>)
 802c968:	891b      	ldrh	r3, [r3, #8]
 802c96a:	3b01      	subs	r3, #1
 802c96c:	b29a      	uxth	r2, r3
 802c96e:	4b74      	ldr	r3, [pc, #464]	; (802cb40 <tcp_receive+0xbe4>)
 802c970:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 802c972:	4b73      	ldr	r3, [pc, #460]	; (802cb40 <tcp_receive+0xbe4>)
 802c974:	685b      	ldr	r3, [r3, #4]
 802c976:	4a72      	ldr	r2, [pc, #456]	; (802cb40 <tcp_receive+0xbe4>)
 802c978:	8912      	ldrh	r2, [r2, #8]
 802c97a:	4611      	mov	r1, r2
 802c97c:	4618      	mov	r0, r3
 802c97e:	f7fc f95f 	bl	8028c40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 802c982:	4b6f      	ldr	r3, [pc, #444]	; (802cb40 <tcp_receive+0xbe4>)
 802c984:	891c      	ldrh	r4, [r3, #8]
 802c986:	4b6e      	ldr	r3, [pc, #440]	; (802cb40 <tcp_receive+0xbe4>)
 802c988:	68db      	ldr	r3, [r3, #12]
 802c98a:	899b      	ldrh	r3, [r3, #12]
 802c98c:	b29b      	uxth	r3, r3
 802c98e:	4618      	mov	r0, r3
 802c990:	f7fb f9a1 	bl	8027cd6 <lwip_htons>
 802c994:	4603      	mov	r3, r0
 802c996:	f003 0303 	and.w	r3, r3, #3
 802c99a:	2b00      	cmp	r3, #0
 802c99c:	d001      	beq.n	802c9a2 <tcp_receive+0xa46>
 802c99e:	2301      	movs	r3, #1
 802c9a0:	e000      	b.n	802c9a4 <tcp_receive+0xa48>
 802c9a2:	2300      	movs	r3, #0
 802c9a4:	4423      	add	r3, r4
 802c9a6:	b29a      	uxth	r2, r3
 802c9a8:	4b63      	ldr	r3, [pc, #396]	; (802cb38 <tcp_receive+0xbdc>)
 802c9aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 802c9ac:	4b62      	ldr	r3, [pc, #392]	; (802cb38 <tcp_receive+0xbdc>)
 802c9ae:	881b      	ldrh	r3, [r3, #0]
 802c9b0:	461a      	mov	r2, r3
 802c9b2:	4b62      	ldr	r3, [pc, #392]	; (802cb3c <tcp_receive+0xbe0>)
 802c9b4:	681b      	ldr	r3, [r3, #0]
 802c9b6:	441a      	add	r2, r3
 802c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c9ba:	68db      	ldr	r3, [r3, #12]
 802c9bc:	685b      	ldr	r3, [r3, #4]
 802c9be:	429a      	cmp	r2, r3
 802c9c0:	d006      	beq.n	802c9d0 <tcp_receive+0xa74>
 802c9c2:	4b60      	ldr	r3, [pc, #384]	; (802cb44 <tcp_receive+0xbe8>)
 802c9c4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802c9c8:	495f      	ldr	r1, [pc, #380]	; (802cb48 <tcp_receive+0xbec>)
 802c9ca:	4860      	ldr	r0, [pc, #384]	; (802cb4c <tcp_receive+0xbf0>)
 802c9cc:	f004 fcfa 	bl	80313c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 802c9d0:	687b      	ldr	r3, [r7, #4]
 802c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c9d4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 802c9d6:	4b58      	ldr	r3, [pc, #352]	; (802cb38 <tcp_receive+0xbdc>)
 802c9d8:	881b      	ldrh	r3, [r3, #0]
 802c9da:	461a      	mov	r2, r3
 802c9dc:	4b57      	ldr	r3, [pc, #348]	; (802cb3c <tcp_receive+0xbe0>)
 802c9de:	681b      	ldr	r3, [r3, #0]
 802c9e0:	441a      	add	r2, r3
 802c9e2:	687b      	ldr	r3, [r7, #4]
 802c9e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 802c9e6:	687b      	ldr	r3, [r7, #4]
 802c9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802c9ea:	4b53      	ldr	r3, [pc, #332]	; (802cb38 <tcp_receive+0xbdc>)
 802c9ec:	881b      	ldrh	r3, [r3, #0]
 802c9ee:	429a      	cmp	r2, r3
 802c9f0:	d206      	bcs.n	802ca00 <tcp_receive+0xaa4>
 802c9f2:	4b54      	ldr	r3, [pc, #336]	; (802cb44 <tcp_receive+0xbe8>)
 802c9f4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 802c9f8:	4955      	ldr	r1, [pc, #340]	; (802cb50 <tcp_receive+0xbf4>)
 802c9fa:	4854      	ldr	r0, [pc, #336]	; (802cb4c <tcp_receive+0xbf0>)
 802c9fc:	f004 fce2 	bl	80313c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 802ca00:	687b      	ldr	r3, [r7, #4]
 802ca02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802ca04:	4b4c      	ldr	r3, [pc, #304]	; (802cb38 <tcp_receive+0xbdc>)
 802ca06:	881b      	ldrh	r3, [r3, #0]
 802ca08:	1ad3      	subs	r3, r2, r3
 802ca0a:	b29a      	uxth	r2, r3
 802ca0c:	687b      	ldr	r3, [r7, #4]
 802ca0e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 802ca10:	6878      	ldr	r0, [r7, #4]
 802ca12:	f7fd f8ed 	bl	8029bf0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 802ca16:	4b4a      	ldr	r3, [pc, #296]	; (802cb40 <tcp_receive+0xbe4>)
 802ca18:	685b      	ldr	r3, [r3, #4]
 802ca1a:	891b      	ldrh	r3, [r3, #8]
 802ca1c:	2b00      	cmp	r3, #0
 802ca1e:	d006      	beq.n	802ca2e <tcp_receive+0xad2>
          recv_data = inseg.p;
 802ca20:	4b47      	ldr	r3, [pc, #284]	; (802cb40 <tcp_receive+0xbe4>)
 802ca22:	685b      	ldr	r3, [r3, #4]
 802ca24:	4a4b      	ldr	r2, [pc, #300]	; (802cb54 <tcp_receive+0xbf8>)
 802ca26:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 802ca28:	4b45      	ldr	r3, [pc, #276]	; (802cb40 <tcp_receive+0xbe4>)
 802ca2a:	2200      	movs	r2, #0
 802ca2c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802ca2e:	4b44      	ldr	r3, [pc, #272]	; (802cb40 <tcp_receive+0xbe4>)
 802ca30:	68db      	ldr	r3, [r3, #12]
 802ca32:	899b      	ldrh	r3, [r3, #12]
 802ca34:	b29b      	uxth	r3, r3
 802ca36:	4618      	mov	r0, r3
 802ca38:	f7fb f94d 	bl	8027cd6 <lwip_htons>
 802ca3c:	4603      	mov	r3, r0
 802ca3e:	f003 0301 	and.w	r3, r3, #1
 802ca42:	2b00      	cmp	r3, #0
 802ca44:	f000 80b4 	beq.w	802cbb0 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 802ca48:	4b43      	ldr	r3, [pc, #268]	; (802cb58 <tcp_receive+0xbfc>)
 802ca4a:	781b      	ldrb	r3, [r3, #0]
 802ca4c:	f043 0320 	orr.w	r3, r3, #32
 802ca50:	b2da      	uxtb	r2, r3
 802ca52:	4b41      	ldr	r3, [pc, #260]	; (802cb58 <tcp_receive+0xbfc>)
 802ca54:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 802ca56:	e0ab      	b.n	802cbb0 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 802ca58:	687b      	ldr	r3, [r7, #4]
 802ca5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ca5c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 802ca5e:	687b      	ldr	r3, [r7, #4]
 802ca60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ca62:	68db      	ldr	r3, [r3, #12]
 802ca64:	685b      	ldr	r3, [r3, #4]
 802ca66:	4a35      	ldr	r2, [pc, #212]	; (802cb3c <tcp_receive+0xbe0>)
 802ca68:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 802ca6a:	68fb      	ldr	r3, [r7, #12]
 802ca6c:	891b      	ldrh	r3, [r3, #8]
 802ca6e:	461c      	mov	r4, r3
 802ca70:	68fb      	ldr	r3, [r7, #12]
 802ca72:	68db      	ldr	r3, [r3, #12]
 802ca74:	899b      	ldrh	r3, [r3, #12]
 802ca76:	b29b      	uxth	r3, r3
 802ca78:	4618      	mov	r0, r3
 802ca7a:	f7fb f92c 	bl	8027cd6 <lwip_htons>
 802ca7e:	4603      	mov	r3, r0
 802ca80:	f003 0303 	and.w	r3, r3, #3
 802ca84:	2b00      	cmp	r3, #0
 802ca86:	d001      	beq.n	802ca8c <tcp_receive+0xb30>
 802ca88:	2301      	movs	r3, #1
 802ca8a:	e000      	b.n	802ca8e <tcp_receive+0xb32>
 802ca8c:	2300      	movs	r3, #0
 802ca8e:	191a      	adds	r2, r3, r4
 802ca90:	687b      	ldr	r3, [r7, #4]
 802ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ca94:	441a      	add	r2, r3
 802ca96:	687b      	ldr	r3, [r7, #4]
 802ca98:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ca9e:	461c      	mov	r4, r3
 802caa0:	68fb      	ldr	r3, [r7, #12]
 802caa2:	891b      	ldrh	r3, [r3, #8]
 802caa4:	461d      	mov	r5, r3
 802caa6:	68fb      	ldr	r3, [r7, #12]
 802caa8:	68db      	ldr	r3, [r3, #12]
 802caaa:	899b      	ldrh	r3, [r3, #12]
 802caac:	b29b      	uxth	r3, r3
 802caae:	4618      	mov	r0, r3
 802cab0:	f7fb f911 	bl	8027cd6 <lwip_htons>
 802cab4:	4603      	mov	r3, r0
 802cab6:	f003 0303 	and.w	r3, r3, #3
 802caba:	2b00      	cmp	r3, #0
 802cabc:	d001      	beq.n	802cac2 <tcp_receive+0xb66>
 802cabe:	2301      	movs	r3, #1
 802cac0:	e000      	b.n	802cac4 <tcp_receive+0xb68>
 802cac2:	2300      	movs	r3, #0
 802cac4:	442b      	add	r3, r5
 802cac6:	429c      	cmp	r4, r3
 802cac8:	d206      	bcs.n	802cad8 <tcp_receive+0xb7c>
 802caca:	4b1e      	ldr	r3, [pc, #120]	; (802cb44 <tcp_receive+0xbe8>)
 802cacc:	f240 52dd 	movw	r2, #1501	; 0x5dd
 802cad0:	4922      	ldr	r1, [pc, #136]	; (802cb5c <tcp_receive+0xc00>)
 802cad2:	481e      	ldr	r0, [pc, #120]	; (802cb4c <tcp_receive+0xbf0>)
 802cad4:	f004 fc76 	bl	80313c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 802cad8:	68fb      	ldr	r3, [r7, #12]
 802cada:	891b      	ldrh	r3, [r3, #8]
 802cadc:	461c      	mov	r4, r3
 802cade:	68fb      	ldr	r3, [r7, #12]
 802cae0:	68db      	ldr	r3, [r3, #12]
 802cae2:	899b      	ldrh	r3, [r3, #12]
 802cae4:	b29b      	uxth	r3, r3
 802cae6:	4618      	mov	r0, r3
 802cae8:	f7fb f8f5 	bl	8027cd6 <lwip_htons>
 802caec:	4603      	mov	r3, r0
 802caee:	f003 0303 	and.w	r3, r3, #3
 802caf2:	2b00      	cmp	r3, #0
 802caf4:	d001      	beq.n	802cafa <tcp_receive+0xb9e>
 802caf6:	2301      	movs	r3, #1
 802caf8:	e000      	b.n	802cafc <tcp_receive+0xba0>
 802cafa:	2300      	movs	r3, #0
 802cafc:	1919      	adds	r1, r3, r4
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802cb02:	b28b      	uxth	r3, r1
 802cb04:	1ad3      	subs	r3, r2, r3
 802cb06:	b29a      	uxth	r2, r3
 802cb08:	687b      	ldr	r3, [r7, #4]
 802cb0a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 802cb0c:	6878      	ldr	r0, [r7, #4]
 802cb0e:	f7fd f86f 	bl	8029bf0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 802cb12:	68fb      	ldr	r3, [r7, #12]
 802cb14:	685b      	ldr	r3, [r3, #4]
 802cb16:	891b      	ldrh	r3, [r3, #8]
 802cb18:	2b00      	cmp	r3, #0
 802cb1a:	d028      	beq.n	802cb6e <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 802cb1c:	4b0d      	ldr	r3, [pc, #52]	; (802cb54 <tcp_receive+0xbf8>)
 802cb1e:	681b      	ldr	r3, [r3, #0]
 802cb20:	2b00      	cmp	r3, #0
 802cb22:	d01d      	beq.n	802cb60 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 802cb24:	4b0b      	ldr	r3, [pc, #44]	; (802cb54 <tcp_receive+0xbf8>)
 802cb26:	681a      	ldr	r2, [r3, #0]
 802cb28:	68fb      	ldr	r3, [r7, #12]
 802cb2a:	685b      	ldr	r3, [r3, #4]
 802cb2c:	4619      	mov	r1, r3
 802cb2e:	4610      	mov	r0, r2
 802cb30:	f7fc fac8 	bl	80290c4 <pbuf_cat>
 802cb34:	e018      	b.n	802cb68 <tcp_receive+0xc0c>
 802cb36:	bf00      	nop
 802cb38:	20006a82 	.word	0x20006a82
 802cb3c:	20006a78 	.word	0x20006a78
 802cb40:	20006a58 	.word	0x20006a58
 802cb44:	080343c0 	.word	0x080343c0
 802cb48:	080346c4 	.word	0x080346c4
 802cb4c:	08034404 	.word	0x08034404
 802cb50:	08034700 	.word	0x08034700
 802cb54:	20006a88 	.word	0x20006a88
 802cb58:	20006a85 	.word	0x20006a85
 802cb5c:	08034720 	.word	0x08034720
            } else {
              recv_data = cseg->p;
 802cb60:	68fb      	ldr	r3, [r7, #12]
 802cb62:	685b      	ldr	r3, [r3, #4]
 802cb64:	4a71      	ldr	r2, [pc, #452]	; (802cd2c <tcp_receive+0xdd0>)
 802cb66:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 802cb68:	68fb      	ldr	r3, [r7, #12]
 802cb6a:	2200      	movs	r2, #0
 802cb6c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 802cb6e:	68fb      	ldr	r3, [r7, #12]
 802cb70:	68db      	ldr	r3, [r3, #12]
 802cb72:	899b      	ldrh	r3, [r3, #12]
 802cb74:	b29b      	uxth	r3, r3
 802cb76:	4618      	mov	r0, r3
 802cb78:	f7fb f8ad 	bl	8027cd6 <lwip_htons>
 802cb7c:	4603      	mov	r3, r0
 802cb7e:	f003 0301 	and.w	r3, r3, #1
 802cb82:	2b00      	cmp	r3, #0
 802cb84:	d00d      	beq.n	802cba2 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 802cb86:	4b6a      	ldr	r3, [pc, #424]	; (802cd30 <tcp_receive+0xdd4>)
 802cb88:	781b      	ldrb	r3, [r3, #0]
 802cb8a:	f043 0320 	orr.w	r3, r3, #32
 802cb8e:	b2da      	uxtb	r2, r3
 802cb90:	4b67      	ldr	r3, [pc, #412]	; (802cd30 <tcp_receive+0xdd4>)
 802cb92:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 802cb94:	687b      	ldr	r3, [r7, #4]
 802cb96:	7d1b      	ldrb	r3, [r3, #20]
 802cb98:	2b04      	cmp	r3, #4
 802cb9a:	d102      	bne.n	802cba2 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 802cb9c:	687b      	ldr	r3, [r7, #4]
 802cb9e:	2207      	movs	r2, #7
 802cba0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 802cba2:	68fb      	ldr	r3, [r7, #12]
 802cba4:	681a      	ldr	r2, [r3, #0]
 802cba6:	687b      	ldr	r3, [r7, #4]
 802cba8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 802cbaa:	68f8      	ldr	r0, [r7, #12]
 802cbac:	f7fd fcb0 	bl	802a510 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 802cbb0:	687b      	ldr	r3, [r7, #4]
 802cbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cbb4:	2b00      	cmp	r3, #0
 802cbb6:	d008      	beq.n	802cbca <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cbbc:	68db      	ldr	r3, [r3, #12]
 802cbbe:	685a      	ldr	r2, [r3, #4]
 802cbc0:	687b      	ldr	r3, [r7, #4]
 802cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 802cbc4:	429a      	cmp	r2, r3
 802cbc6:	f43f af47 	beq.w	802ca58 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 802cbca:	687b      	ldr	r3, [r7, #4]
 802cbcc:	7e9b      	ldrb	r3, [r3, #26]
 802cbce:	f003 0301 	and.w	r3, r3, #1
 802cbd2:	2b00      	cmp	r3, #0
 802cbd4:	d00e      	beq.n	802cbf4 <tcp_receive+0xc98>
 802cbd6:	687b      	ldr	r3, [r7, #4]
 802cbd8:	7e9b      	ldrb	r3, [r3, #26]
 802cbda:	f023 0301 	bic.w	r3, r3, #1
 802cbde:	b2da      	uxtb	r2, r3
 802cbe0:	687b      	ldr	r3, [r7, #4]
 802cbe2:	769a      	strb	r2, [r3, #26]
 802cbe4:	687b      	ldr	r3, [r7, #4]
 802cbe6:	7e9b      	ldrb	r3, [r3, #26]
 802cbe8:	f043 0302 	orr.w	r3, r3, #2
 802cbec:	b2da      	uxtb	r2, r3
 802cbee:	687b      	ldr	r3, [r7, #4]
 802cbf0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 802cbf2:	e181      	b.n	802cef8 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 802cbf4:	687b      	ldr	r3, [r7, #4]
 802cbf6:	7e9b      	ldrb	r3, [r3, #26]
 802cbf8:	f043 0301 	orr.w	r3, r3, #1
 802cbfc:	b2da      	uxtb	r2, r3
 802cbfe:	687b      	ldr	r3, [r7, #4]
 802cc00:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 802cc02:	e179      	b.n	802cef8 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 802cc04:	6878      	ldr	r0, [r7, #4]
 802cc06:	f001 f8c5 	bl	802dd94 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 802cc0a:	687b      	ldr	r3, [r7, #4]
 802cc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cc0e:	2b00      	cmp	r3, #0
 802cc10:	d106      	bne.n	802cc20 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 802cc12:	4848      	ldr	r0, [pc, #288]	; (802cd34 <tcp_receive+0xdd8>)
 802cc14:	f7fd fca3 	bl	802a55e <tcp_seg_copy>
 802cc18:	4602      	mov	r2, r0
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 802cc1e:	e16b      	b.n	802cef8 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 802cc20:	2300      	movs	r3, #0
 802cc22:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 802cc24:	687b      	ldr	r3, [r7, #4]
 802cc26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cc28:	62fb      	str	r3, [r7, #44]	; 0x2c
 802cc2a:	e150      	b.n	802cece <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 802cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cc2e:	68db      	ldr	r3, [r3, #12]
 802cc30:	685a      	ldr	r2, [r3, #4]
 802cc32:	4b41      	ldr	r3, [pc, #260]	; (802cd38 <tcp_receive+0xddc>)
 802cc34:	681b      	ldr	r3, [r3, #0]
 802cc36:	429a      	cmp	r2, r3
 802cc38:	d11d      	bne.n	802cc76 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 802cc3a:	4b3e      	ldr	r3, [pc, #248]	; (802cd34 <tcp_receive+0xdd8>)
 802cc3c:	891a      	ldrh	r2, [r3, #8]
 802cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cc40:	891b      	ldrh	r3, [r3, #8]
 802cc42:	429a      	cmp	r2, r3
 802cc44:	f240 8148 	bls.w	802ced8 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 802cc48:	483a      	ldr	r0, [pc, #232]	; (802cd34 <tcp_receive+0xdd8>)
 802cc4a:	f7fd fc88 	bl	802a55e <tcp_seg_copy>
 802cc4e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 802cc50:	68fb      	ldr	r3, [r7, #12]
 802cc52:	2b00      	cmp	r3, #0
 802cc54:	f000 8142 	beq.w	802cedc <tcp_receive+0xf80>
                  if (prev != NULL) {
 802cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cc5a:	2b00      	cmp	r3, #0
 802cc5c:	d003      	beq.n	802cc66 <tcp_receive+0xd0a>
                    prev->next = cseg;
 802cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cc60:	68fa      	ldr	r2, [r7, #12]
 802cc62:	601a      	str	r2, [r3, #0]
 802cc64:	e002      	b.n	802cc6c <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 802cc66:	687b      	ldr	r3, [r7, #4]
 802cc68:	68fa      	ldr	r2, [r7, #12]
 802cc6a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 802cc6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802cc6e:	68f8      	ldr	r0, [r7, #12]
 802cc70:	f7ff f8fe 	bl	802be70 <tcp_oos_insert_segment>
                }
                break;
 802cc74:	e132      	b.n	802cedc <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 802cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cc78:	2b00      	cmp	r3, #0
 802cc7a:	d117      	bne.n	802ccac <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 802cc7c:	4b2e      	ldr	r3, [pc, #184]	; (802cd38 <tcp_receive+0xddc>)
 802cc7e:	681a      	ldr	r2, [r3, #0]
 802cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cc82:	68db      	ldr	r3, [r3, #12]
 802cc84:	685b      	ldr	r3, [r3, #4]
 802cc86:	1ad3      	subs	r3, r2, r3
 802cc88:	2b00      	cmp	r3, #0
 802cc8a:	da57      	bge.n	802cd3c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 802cc8c:	4829      	ldr	r0, [pc, #164]	; (802cd34 <tcp_receive+0xdd8>)
 802cc8e:	f7fd fc66 	bl	802a55e <tcp_seg_copy>
 802cc92:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 802cc94:	68fb      	ldr	r3, [r7, #12]
 802cc96:	2b00      	cmp	r3, #0
 802cc98:	f000 8122 	beq.w	802cee0 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 802cc9c:	687b      	ldr	r3, [r7, #4]
 802cc9e:	68fa      	ldr	r2, [r7, #12]
 802cca0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 802cca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802cca4:	68f8      	ldr	r0, [r7, #12]
 802cca6:	f7ff f8e3 	bl	802be70 <tcp_oos_insert_segment>
                  }
                  break;
 802ccaa:	e119      	b.n	802cee0 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 802ccac:	4b22      	ldr	r3, [pc, #136]	; (802cd38 <tcp_receive+0xddc>)
 802ccae:	681a      	ldr	r2, [r3, #0]
 802ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ccb2:	68db      	ldr	r3, [r3, #12]
 802ccb4:	685b      	ldr	r3, [r3, #4]
 802ccb6:	1ad3      	subs	r3, r2, r3
 802ccb8:	3b01      	subs	r3, #1
 802ccba:	2b00      	cmp	r3, #0
 802ccbc:	db3e      	blt.n	802cd3c <tcp_receive+0xde0>
 802ccbe:	4b1e      	ldr	r3, [pc, #120]	; (802cd38 <tcp_receive+0xddc>)
 802ccc0:	681a      	ldr	r2, [r3, #0]
 802ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ccc4:	68db      	ldr	r3, [r3, #12]
 802ccc6:	685b      	ldr	r3, [r3, #4]
 802ccc8:	1ad3      	subs	r3, r2, r3
 802ccca:	3301      	adds	r3, #1
 802cccc:	2b00      	cmp	r3, #0
 802ccce:	dc35      	bgt.n	802cd3c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 802ccd0:	4818      	ldr	r0, [pc, #96]	; (802cd34 <tcp_receive+0xdd8>)
 802ccd2:	f7fd fc44 	bl	802a55e <tcp_seg_copy>
 802ccd6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 802ccd8:	68fb      	ldr	r3, [r7, #12]
 802ccda:	2b00      	cmp	r3, #0
 802ccdc:	f000 8102 	beq.w	802cee4 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 802cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cce2:	68db      	ldr	r3, [r3, #12]
 802cce4:	685b      	ldr	r3, [r3, #4]
 802cce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cce8:	8912      	ldrh	r2, [r2, #8]
 802ccea:	441a      	add	r2, r3
 802ccec:	4b12      	ldr	r3, [pc, #72]	; (802cd38 <tcp_receive+0xddc>)
 802ccee:	681b      	ldr	r3, [r3, #0]
 802ccf0:	1ad3      	subs	r3, r2, r3
 802ccf2:	2b00      	cmp	r3, #0
 802ccf4:	dd12      	ble.n	802cd1c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 802ccf6:	4b10      	ldr	r3, [pc, #64]	; (802cd38 <tcp_receive+0xddc>)
 802ccf8:	681b      	ldr	r3, [r3, #0]
 802ccfa:	b29a      	uxth	r2, r3
 802ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ccfe:	68db      	ldr	r3, [r3, #12]
 802cd00:	685b      	ldr	r3, [r3, #4]
 802cd02:	b29b      	uxth	r3, r3
 802cd04:	1ad3      	subs	r3, r2, r3
 802cd06:	b29a      	uxth	r2, r3
 802cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cd0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 802cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cd0e:	685a      	ldr	r2, [r3, #4]
 802cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cd12:	891b      	ldrh	r3, [r3, #8]
 802cd14:	4619      	mov	r1, r3
 802cd16:	4610      	mov	r0, r2
 802cd18:	f7fb ff92 	bl	8028c40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 802cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cd1e:	68fa      	ldr	r2, [r7, #12]
 802cd20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 802cd22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802cd24:	68f8      	ldr	r0, [r7, #12]
 802cd26:	f7ff f8a3 	bl	802be70 <tcp_oos_insert_segment>
                  }
                  break;
 802cd2a:	e0db      	b.n	802cee4 <tcp_receive+0xf88>
 802cd2c:	20006a88 	.word	0x20006a88
 802cd30:	20006a85 	.word	0x20006a85
 802cd34:	20006a58 	.word	0x20006a58
 802cd38:	20006a78 	.word	0x20006a78
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 802cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd3e:	681b      	ldr	r3, [r3, #0]
 802cd40:	2b00      	cmp	r3, #0
 802cd42:	f040 80bf 	bne.w	802cec4 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 802cd46:	4b7c      	ldr	r3, [pc, #496]	; (802cf38 <tcp_receive+0xfdc>)
 802cd48:	681a      	ldr	r2, [r3, #0]
 802cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd4c:	68db      	ldr	r3, [r3, #12]
 802cd4e:	685b      	ldr	r3, [r3, #4]
 802cd50:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 802cd52:	2b00      	cmp	r3, #0
 802cd54:	f340 80b6 	ble.w	802cec4 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 802cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd5a:	68db      	ldr	r3, [r3, #12]
 802cd5c:	899b      	ldrh	r3, [r3, #12]
 802cd5e:	b29b      	uxth	r3, r3
 802cd60:	4618      	mov	r0, r3
 802cd62:	f7fa ffb8 	bl	8027cd6 <lwip_htons>
 802cd66:	4603      	mov	r3, r0
 802cd68:	f003 0301 	and.w	r3, r3, #1
 802cd6c:	2b00      	cmp	r3, #0
 802cd6e:	f040 80bb 	bne.w	802cee8 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 802cd72:	4872      	ldr	r0, [pc, #456]	; (802cf3c <tcp_receive+0xfe0>)
 802cd74:	f7fd fbf3 	bl	802a55e <tcp_seg_copy>
 802cd78:	4602      	mov	r2, r0
 802cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd7c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 802cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd80:	681b      	ldr	r3, [r3, #0]
 802cd82:	2b00      	cmp	r3, #0
 802cd84:	f000 80b2 	beq.w	802ceec <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 802cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cd8a:	68db      	ldr	r3, [r3, #12]
 802cd8c:	685b      	ldr	r3, [r3, #4]
 802cd8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802cd90:	8912      	ldrh	r2, [r2, #8]
 802cd92:	441a      	add	r2, r3
 802cd94:	4b68      	ldr	r3, [pc, #416]	; (802cf38 <tcp_receive+0xfdc>)
 802cd96:	681b      	ldr	r3, [r3, #0]
 802cd98:	1ad3      	subs	r3, r2, r3
 802cd9a:	2b00      	cmp	r3, #0
 802cd9c:	dd12      	ble.n	802cdc4 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 802cd9e:	4b66      	ldr	r3, [pc, #408]	; (802cf38 <tcp_receive+0xfdc>)
 802cda0:	681b      	ldr	r3, [r3, #0]
 802cda2:	b29a      	uxth	r2, r3
 802cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cda6:	68db      	ldr	r3, [r3, #12]
 802cda8:	685b      	ldr	r3, [r3, #4]
 802cdaa:	b29b      	uxth	r3, r3
 802cdac:	1ad3      	subs	r3, r2, r3
 802cdae:	b29a      	uxth	r2, r3
 802cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cdb2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 802cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cdb6:	685a      	ldr	r2, [r3, #4]
 802cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cdba:	891b      	ldrh	r3, [r3, #8]
 802cdbc:	4619      	mov	r1, r3
 802cdbe:	4610      	mov	r0, r2
 802cdc0:	f7fb ff3e 	bl	8028c40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 802cdc4:	4b5e      	ldr	r3, [pc, #376]	; (802cf40 <tcp_receive+0xfe4>)
 802cdc6:	881b      	ldrh	r3, [r3, #0]
 802cdc8:	461a      	mov	r2, r3
 802cdca:	4b5b      	ldr	r3, [pc, #364]	; (802cf38 <tcp_receive+0xfdc>)
 802cdcc:	681b      	ldr	r3, [r3, #0]
 802cdce:	441a      	add	r2, r3
 802cdd0:	687b      	ldr	r3, [r7, #4]
 802cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cdd4:	6879      	ldr	r1, [r7, #4]
 802cdd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802cdd8:	440b      	add	r3, r1
 802cdda:	1ad3      	subs	r3, r2, r3
 802cddc:	2b00      	cmp	r3, #0
 802cdde:	f340 8085 	ble.w	802ceec <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 802cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cde4:	681b      	ldr	r3, [r3, #0]
 802cde6:	68db      	ldr	r3, [r3, #12]
 802cde8:	899b      	ldrh	r3, [r3, #12]
 802cdea:	b29b      	uxth	r3, r3
 802cdec:	4618      	mov	r0, r3
 802cdee:	f7fa ff72 	bl	8027cd6 <lwip_htons>
 802cdf2:	4603      	mov	r3, r0
 802cdf4:	f003 0301 	and.w	r3, r3, #1
 802cdf8:	2b00      	cmp	r3, #0
 802cdfa:	d01e      	beq.n	802ce3a <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 802cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cdfe:	681b      	ldr	r3, [r3, #0]
 802ce00:	68db      	ldr	r3, [r3, #12]
 802ce02:	899b      	ldrh	r3, [r3, #12]
 802ce04:	b29b      	uxth	r3, r3
 802ce06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802ce0a:	b29c      	uxth	r4, r3
 802ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce0e:	681b      	ldr	r3, [r3, #0]
 802ce10:	68db      	ldr	r3, [r3, #12]
 802ce12:	899b      	ldrh	r3, [r3, #12]
 802ce14:	b29b      	uxth	r3, r3
 802ce16:	4618      	mov	r0, r3
 802ce18:	f7fa ff5d 	bl	8027cd6 <lwip_htons>
 802ce1c:	4603      	mov	r3, r0
 802ce1e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802ce22:	b29b      	uxth	r3, r3
 802ce24:	4618      	mov	r0, r3
 802ce26:	f7fa ff56 	bl	8027cd6 <lwip_htons>
 802ce2a:	4603      	mov	r3, r0
 802ce2c:	461a      	mov	r2, r3
 802ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce30:	681b      	ldr	r3, [r3, #0]
 802ce32:	68db      	ldr	r3, [r3, #12]
 802ce34:	4322      	orrs	r2, r4
 802ce36:	b292      	uxth	r2, r2
 802ce38:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 802ce3a:	687b      	ldr	r3, [r7, #4]
 802ce3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce3e:	b29a      	uxth	r2, r3
 802ce40:	687b      	ldr	r3, [r7, #4]
 802ce42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ce44:	4413      	add	r3, r2
 802ce46:	b299      	uxth	r1, r3
 802ce48:	4b3b      	ldr	r3, [pc, #236]	; (802cf38 <tcp_receive+0xfdc>)
 802ce4a:	681b      	ldr	r3, [r3, #0]
 802ce4c:	b29a      	uxth	r2, r3
 802ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce50:	681b      	ldr	r3, [r3, #0]
 802ce52:	1a8a      	subs	r2, r1, r2
 802ce54:	b292      	uxth	r2, r2
 802ce56:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 802ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce5a:	681b      	ldr	r3, [r3, #0]
 802ce5c:	685a      	ldr	r2, [r3, #4]
 802ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce60:	681b      	ldr	r3, [r3, #0]
 802ce62:	891b      	ldrh	r3, [r3, #8]
 802ce64:	4619      	mov	r1, r3
 802ce66:	4610      	mov	r0, r2
 802ce68:	f7fb feea 	bl	8028c40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 802ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce6e:	681b      	ldr	r3, [r3, #0]
 802ce70:	891c      	ldrh	r4, [r3, #8]
 802ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ce74:	681b      	ldr	r3, [r3, #0]
 802ce76:	68db      	ldr	r3, [r3, #12]
 802ce78:	899b      	ldrh	r3, [r3, #12]
 802ce7a:	b29b      	uxth	r3, r3
 802ce7c:	4618      	mov	r0, r3
 802ce7e:	f7fa ff2a 	bl	8027cd6 <lwip_htons>
 802ce82:	4603      	mov	r3, r0
 802ce84:	f003 0303 	and.w	r3, r3, #3
 802ce88:	2b00      	cmp	r3, #0
 802ce8a:	d001      	beq.n	802ce90 <tcp_receive+0xf34>
 802ce8c:	2301      	movs	r3, #1
 802ce8e:	e000      	b.n	802ce92 <tcp_receive+0xf36>
 802ce90:	2300      	movs	r3, #0
 802ce92:	4423      	add	r3, r4
 802ce94:	b29a      	uxth	r2, r3
 802ce96:	4b2a      	ldr	r3, [pc, #168]	; (802cf40 <tcp_receive+0xfe4>)
 802ce98:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 802ce9a:	4b29      	ldr	r3, [pc, #164]	; (802cf40 <tcp_receive+0xfe4>)
 802ce9c:	881b      	ldrh	r3, [r3, #0]
 802ce9e:	461a      	mov	r2, r3
 802cea0:	4b25      	ldr	r3, [pc, #148]	; (802cf38 <tcp_receive+0xfdc>)
 802cea2:	681b      	ldr	r3, [r3, #0]
 802cea4:	441a      	add	r2, r3
 802cea6:	687b      	ldr	r3, [r7, #4]
 802cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ceaa:	6879      	ldr	r1, [r7, #4]
 802ceac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802ceae:	440b      	add	r3, r1
 802ceb0:	429a      	cmp	r2, r3
 802ceb2:	d01b      	beq.n	802ceec <tcp_receive+0xf90>
 802ceb4:	4b23      	ldr	r3, [pc, #140]	; (802cf44 <tcp_receive+0xfe8>)
 802ceb6:	f240 627a 	movw	r2, #1658	; 0x67a
 802ceba:	4923      	ldr	r1, [pc, #140]	; (802cf48 <tcp_receive+0xfec>)
 802cebc:	4823      	ldr	r0, [pc, #140]	; (802cf4c <tcp_receive+0xff0>)
 802cebe:	f004 fa81 	bl	80313c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 802cec2:	e013      	b.n	802ceec <tcp_receive+0xf90>
              }
            }
            prev = next;
 802cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cec6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 802cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ceca:	681b      	ldr	r3, [r3, #0]
 802cecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ced0:	2b00      	cmp	r3, #0
 802ced2:	f47f aeab 	bne.w	802cc2c <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 802ced6:	e00f      	b.n	802cef8 <tcp_receive+0xf9c>
                break;
 802ced8:	bf00      	nop
 802ceda:	e00d      	b.n	802cef8 <tcp_receive+0xf9c>
                break;
 802cedc:	bf00      	nop
 802cede:	e00b      	b.n	802cef8 <tcp_receive+0xf9c>
                  break;
 802cee0:	bf00      	nop
 802cee2:	e009      	b.n	802cef8 <tcp_receive+0xf9c>
                  break;
 802cee4:	bf00      	nop
 802cee6:	e007      	b.n	802cef8 <tcp_receive+0xf9c>
                  break;
 802cee8:	bf00      	nop
 802ceea:	e005      	b.n	802cef8 <tcp_receive+0xf9c>
                break;
 802ceec:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 802ceee:	e003      	b.n	802cef8 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 802cef0:	6878      	ldr	r0, [r7, #4]
 802cef2:	f000 ff4f 	bl	802dd94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 802cef6:	e01a      	b.n	802cf2e <tcp_receive+0xfd2>
 802cef8:	e019      	b.n	802cf2e <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 802cefa:	4b0f      	ldr	r3, [pc, #60]	; (802cf38 <tcp_receive+0xfdc>)
 802cefc:	681a      	ldr	r2, [r3, #0]
 802cefe:	687b      	ldr	r3, [r7, #4]
 802cf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cf02:	1ad3      	subs	r3, r2, r3
 802cf04:	2b00      	cmp	r3, #0
 802cf06:	db0a      	blt.n	802cf1e <tcp_receive+0xfc2>
 802cf08:	4b0b      	ldr	r3, [pc, #44]	; (802cf38 <tcp_receive+0xfdc>)
 802cf0a:	681a      	ldr	r2, [r3, #0]
 802cf0c:	687b      	ldr	r3, [r7, #4]
 802cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cf10:	6879      	ldr	r1, [r7, #4]
 802cf12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802cf14:	440b      	add	r3, r1
 802cf16:	1ad3      	subs	r3, r2, r3
 802cf18:	3301      	adds	r3, #1
 802cf1a:	2b00      	cmp	r3, #0
 802cf1c:	dd07      	ble.n	802cf2e <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 802cf1e:	687b      	ldr	r3, [r7, #4]
 802cf20:	7e9b      	ldrb	r3, [r3, #26]
 802cf22:	f043 0302 	orr.w	r3, r3, #2
 802cf26:	b2da      	uxtb	r2, r3
 802cf28:	687b      	ldr	r3, [r7, #4]
 802cf2a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 802cf2c:	e7ff      	b.n	802cf2e <tcp_receive+0xfd2>
 802cf2e:	bf00      	nop
 802cf30:	3734      	adds	r7, #52	; 0x34
 802cf32:	46bd      	mov	sp, r7
 802cf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cf36:	bf00      	nop
 802cf38:	20006a78 	.word	0x20006a78
 802cf3c:	20006a58 	.word	0x20006a58
 802cf40:	20006a82 	.word	0x20006a82
 802cf44:	080343c0 	.word	0x080343c0
 802cf48:	0803468c 	.word	0x0803468c
 802cf4c:	08034404 	.word	0x08034404

0802cf50 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 802cf50:	b480      	push	{r7}
 802cf52:	b083      	sub	sp, #12
 802cf54:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 802cf56:	4b18      	ldr	r3, [pc, #96]	; (802cfb8 <tcp_getoptbyte+0x68>)
 802cf58:	681b      	ldr	r3, [r3, #0]
 802cf5a:	2b00      	cmp	r3, #0
 802cf5c:	d005      	beq.n	802cf6a <tcp_getoptbyte+0x1a>
 802cf5e:	4b17      	ldr	r3, [pc, #92]	; (802cfbc <tcp_getoptbyte+0x6c>)
 802cf60:	881a      	ldrh	r2, [r3, #0]
 802cf62:	4b17      	ldr	r3, [pc, #92]	; (802cfc0 <tcp_getoptbyte+0x70>)
 802cf64:	881b      	ldrh	r3, [r3, #0]
 802cf66:	429a      	cmp	r2, r3
 802cf68:	d20e      	bcs.n	802cf88 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 802cf6a:	4b16      	ldr	r3, [pc, #88]	; (802cfc4 <tcp_getoptbyte+0x74>)
 802cf6c:	681b      	ldr	r3, [r3, #0]
 802cf6e:	3314      	adds	r3, #20
 802cf70:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 802cf72:	4b12      	ldr	r3, [pc, #72]	; (802cfbc <tcp_getoptbyte+0x6c>)
 802cf74:	881b      	ldrh	r3, [r3, #0]
 802cf76:	1c5a      	adds	r2, r3, #1
 802cf78:	b291      	uxth	r1, r2
 802cf7a:	4a10      	ldr	r2, [pc, #64]	; (802cfbc <tcp_getoptbyte+0x6c>)
 802cf7c:	8011      	strh	r1, [r2, #0]
 802cf7e:	461a      	mov	r2, r3
 802cf80:	683b      	ldr	r3, [r7, #0]
 802cf82:	4413      	add	r3, r2
 802cf84:	781b      	ldrb	r3, [r3, #0]
 802cf86:	e010      	b.n	802cfaa <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 802cf88:	4b0c      	ldr	r3, [pc, #48]	; (802cfbc <tcp_getoptbyte+0x6c>)
 802cf8a:	881b      	ldrh	r3, [r3, #0]
 802cf8c:	1c5a      	adds	r2, r3, #1
 802cf8e:	b291      	uxth	r1, r2
 802cf90:	4a0a      	ldr	r2, [pc, #40]	; (802cfbc <tcp_getoptbyte+0x6c>)
 802cf92:	8011      	strh	r1, [r2, #0]
 802cf94:	b2da      	uxtb	r2, r3
 802cf96:	4b0a      	ldr	r3, [pc, #40]	; (802cfc0 <tcp_getoptbyte+0x70>)
 802cf98:	881b      	ldrh	r3, [r3, #0]
 802cf9a:	b2db      	uxtb	r3, r3
 802cf9c:	1ad3      	subs	r3, r2, r3
 802cf9e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 802cfa0:	4b05      	ldr	r3, [pc, #20]	; (802cfb8 <tcp_getoptbyte+0x68>)
 802cfa2:	681a      	ldr	r2, [r3, #0]
 802cfa4:	79fb      	ldrb	r3, [r7, #7]
 802cfa6:	4413      	add	r3, r2
 802cfa8:	781b      	ldrb	r3, [r3, #0]
  }
}
 802cfaa:	4618      	mov	r0, r3
 802cfac:	370c      	adds	r7, #12
 802cfae:	46bd      	mov	sp, r7
 802cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfb4:	4770      	bx	lr
 802cfb6:	bf00      	nop
 802cfb8:	20006a70 	.word	0x20006a70
 802cfbc:	20006a74 	.word	0x20006a74
 802cfc0:	20006a6e 	.word	0x20006a6e
 802cfc4:	20006a68 	.word	0x20006a68

0802cfc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 802cfc8:	b580      	push	{r7, lr}
 802cfca:	b084      	sub	sp, #16
 802cfcc:	af00      	add	r7, sp, #0
 802cfce:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 802cfd0:	4b2e      	ldr	r3, [pc, #184]	; (802d08c <tcp_parseopt+0xc4>)
 802cfd2:	881b      	ldrh	r3, [r3, #0]
 802cfd4:	2b00      	cmp	r3, #0
 802cfd6:	d055      	beq.n	802d084 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 802cfd8:	4b2d      	ldr	r3, [pc, #180]	; (802d090 <tcp_parseopt+0xc8>)
 802cfda:	2200      	movs	r2, #0
 802cfdc:	801a      	strh	r2, [r3, #0]
 802cfde:	e045      	b.n	802d06c <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 802cfe0:	f7ff ffb6 	bl	802cf50 <tcp_getoptbyte>
 802cfe4:	4603      	mov	r3, r0
 802cfe6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 802cfe8:	7bfb      	ldrb	r3, [r7, #15]
 802cfea:	2b02      	cmp	r3, #2
 802cfec:	d006      	beq.n	802cffc <tcp_parseopt+0x34>
 802cfee:	2b02      	cmp	r3, #2
 802cff0:	dc2b      	bgt.n	802d04a <tcp_parseopt+0x82>
 802cff2:	2b00      	cmp	r3, #0
 802cff4:	d041      	beq.n	802d07a <tcp_parseopt+0xb2>
 802cff6:	2b01      	cmp	r3, #1
 802cff8:	d127      	bne.n	802d04a <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 802cffa:	e037      	b.n	802d06c <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 802cffc:	f7ff ffa8 	bl	802cf50 <tcp_getoptbyte>
 802d000:	4603      	mov	r3, r0
 802d002:	2b04      	cmp	r3, #4
 802d004:	d13b      	bne.n	802d07e <tcp_parseopt+0xb6>
 802d006:	4b22      	ldr	r3, [pc, #136]	; (802d090 <tcp_parseopt+0xc8>)
 802d008:	881b      	ldrh	r3, [r3, #0]
 802d00a:	3301      	adds	r3, #1
 802d00c:	4a1f      	ldr	r2, [pc, #124]	; (802d08c <tcp_parseopt+0xc4>)
 802d00e:	8812      	ldrh	r2, [r2, #0]
 802d010:	4293      	cmp	r3, r2
 802d012:	da34      	bge.n	802d07e <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 802d014:	f7ff ff9c 	bl	802cf50 <tcp_getoptbyte>
 802d018:	4603      	mov	r3, r0
 802d01a:	b29b      	uxth	r3, r3
 802d01c:	021b      	lsls	r3, r3, #8
 802d01e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 802d020:	f7ff ff96 	bl	802cf50 <tcp_getoptbyte>
 802d024:	4603      	mov	r3, r0
 802d026:	b29a      	uxth	r2, r3
 802d028:	89bb      	ldrh	r3, [r7, #12]
 802d02a:	4313      	orrs	r3, r2
 802d02c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 802d02e:	89bb      	ldrh	r3, [r7, #12]
 802d030:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 802d034:	d804      	bhi.n	802d040 <tcp_parseopt+0x78>
 802d036:	89bb      	ldrh	r3, [r7, #12]
 802d038:	2b00      	cmp	r3, #0
 802d03a:	d001      	beq.n	802d040 <tcp_parseopt+0x78>
 802d03c:	89ba      	ldrh	r2, [r7, #12]
 802d03e:	e001      	b.n	802d044 <tcp_parseopt+0x7c>
 802d040:	f44f 7206 	mov.w	r2, #536	; 0x218
 802d044:	687b      	ldr	r3, [r7, #4]
 802d046:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 802d048:	e010      	b.n	802d06c <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 802d04a:	f7ff ff81 	bl	802cf50 <tcp_getoptbyte>
 802d04e:	4603      	mov	r3, r0
 802d050:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 802d052:	7afb      	ldrb	r3, [r7, #11]
 802d054:	2b01      	cmp	r3, #1
 802d056:	d914      	bls.n	802d082 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 802d058:	7afb      	ldrb	r3, [r7, #11]
 802d05a:	b29a      	uxth	r2, r3
 802d05c:	4b0c      	ldr	r3, [pc, #48]	; (802d090 <tcp_parseopt+0xc8>)
 802d05e:	881b      	ldrh	r3, [r3, #0]
 802d060:	4413      	add	r3, r2
 802d062:	b29b      	uxth	r3, r3
 802d064:	3b02      	subs	r3, #2
 802d066:	b29a      	uxth	r2, r3
 802d068:	4b09      	ldr	r3, [pc, #36]	; (802d090 <tcp_parseopt+0xc8>)
 802d06a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 802d06c:	4b08      	ldr	r3, [pc, #32]	; (802d090 <tcp_parseopt+0xc8>)
 802d06e:	881a      	ldrh	r2, [r3, #0]
 802d070:	4b06      	ldr	r3, [pc, #24]	; (802d08c <tcp_parseopt+0xc4>)
 802d072:	881b      	ldrh	r3, [r3, #0]
 802d074:	429a      	cmp	r2, r3
 802d076:	d3b3      	bcc.n	802cfe0 <tcp_parseopt+0x18>
 802d078:	e004      	b.n	802d084 <tcp_parseopt+0xbc>
        return;
 802d07a:	bf00      	nop
 802d07c:	e002      	b.n	802d084 <tcp_parseopt+0xbc>
          return;
 802d07e:	bf00      	nop
 802d080:	e000      	b.n	802d084 <tcp_parseopt+0xbc>
          return;
 802d082:	bf00      	nop
      }
    }
  }
}
 802d084:	3710      	adds	r7, #16
 802d086:	46bd      	mov	sp, r7
 802d088:	bd80      	pop	{r7, pc}
 802d08a:	bf00      	nop
 802d08c:	20006a6c 	.word	0x20006a6c
 802d090:	20006a74 	.word	0x20006a74

0802d094 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 802d094:	b480      	push	{r7}
 802d096:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 802d098:	4b05      	ldr	r3, [pc, #20]	; (802d0b0 <tcp_trigger_input_pcb_close+0x1c>)
 802d09a:	781b      	ldrb	r3, [r3, #0]
 802d09c:	f043 0310 	orr.w	r3, r3, #16
 802d0a0:	b2da      	uxtb	r2, r3
 802d0a2:	4b03      	ldr	r3, [pc, #12]	; (802d0b0 <tcp_trigger_input_pcb_close+0x1c>)
 802d0a4:	701a      	strb	r2, [r3, #0]
}
 802d0a6:	bf00      	nop
 802d0a8:	46bd      	mov	sp, r7
 802d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d0ae:	4770      	bx	lr
 802d0b0:	20006a85 	.word	0x20006a85

0802d0b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 802d0b4:	b580      	push	{r7, lr}
 802d0b6:	b086      	sub	sp, #24
 802d0b8:	af00      	add	r7, sp, #0
 802d0ba:	60f8      	str	r0, [r7, #12]
 802d0bc:	607b      	str	r3, [r7, #4]
 802d0be:	460b      	mov	r3, r1
 802d0c0:	817b      	strh	r3, [r7, #10]
 802d0c2:	4613      	mov	r3, r2
 802d0c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 802d0c6:	897a      	ldrh	r2, [r7, #10]
 802d0c8:	893b      	ldrh	r3, [r7, #8]
 802d0ca:	4413      	add	r3, r2
 802d0cc:	b29b      	uxth	r3, r3
 802d0ce:	3314      	adds	r3, #20
 802d0d0:	b29b      	uxth	r3, r3
 802d0d2:	2200      	movs	r2, #0
 802d0d4:	4619      	mov	r1, r3
 802d0d6:	2001      	movs	r0, #1
 802d0d8:	f7fb fbae 	bl	8028838 <pbuf_alloc>
 802d0dc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 802d0de:	697b      	ldr	r3, [r7, #20]
 802d0e0:	2b00      	cmp	r3, #0
 802d0e2:	d056      	beq.n	802d192 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 802d0e4:	897b      	ldrh	r3, [r7, #10]
 802d0e6:	3313      	adds	r3, #19
 802d0e8:	697a      	ldr	r2, [r7, #20]
 802d0ea:	8952      	ldrh	r2, [r2, #10]
 802d0ec:	4293      	cmp	r3, r2
 802d0ee:	db05      	blt.n	802d0fc <tcp_output_alloc_header+0x48>
 802d0f0:	4b2a      	ldr	r3, [pc, #168]	; (802d19c <tcp_output_alloc_header+0xe8>)
 802d0f2:	2272      	movs	r2, #114	; 0x72
 802d0f4:	492a      	ldr	r1, [pc, #168]	; (802d1a0 <tcp_output_alloc_header+0xec>)
 802d0f6:	482b      	ldr	r0, [pc, #172]	; (802d1a4 <tcp_output_alloc_header+0xf0>)
 802d0f8:	f004 f964 	bl	80313c4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 802d0fc:	697b      	ldr	r3, [r7, #20]
 802d0fe:	685b      	ldr	r3, [r3, #4]
 802d100:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 802d102:	68fb      	ldr	r3, [r7, #12]
 802d104:	8adb      	ldrh	r3, [r3, #22]
 802d106:	4618      	mov	r0, r3
 802d108:	f7fa fde5 	bl	8027cd6 <lwip_htons>
 802d10c:	4603      	mov	r3, r0
 802d10e:	461a      	mov	r2, r3
 802d110:	693b      	ldr	r3, [r7, #16]
 802d112:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 802d114:	68fb      	ldr	r3, [r7, #12]
 802d116:	8b1b      	ldrh	r3, [r3, #24]
 802d118:	4618      	mov	r0, r3
 802d11a:	f7fa fddc 	bl	8027cd6 <lwip_htons>
 802d11e:	4603      	mov	r3, r0
 802d120:	461a      	mov	r2, r3
 802d122:	693b      	ldr	r3, [r7, #16]
 802d124:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802d126:	693b      	ldr	r3, [r7, #16]
 802d128:	687a      	ldr	r2, [r7, #4]
 802d12a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802d12c:	68fb      	ldr	r3, [r7, #12]
 802d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d130:	4618      	mov	r0, r3
 802d132:	f7fa fdde 	bl	8027cf2 <lwip_htonl>
 802d136:	4602      	mov	r2, r0
 802d138:	693b      	ldr	r3, [r7, #16]
 802d13a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 802d13c:	897b      	ldrh	r3, [r7, #10]
 802d13e:	089b      	lsrs	r3, r3, #2
 802d140:	b29b      	uxth	r3, r3
 802d142:	3305      	adds	r3, #5
 802d144:	b29b      	uxth	r3, r3
 802d146:	031b      	lsls	r3, r3, #12
 802d148:	b29b      	uxth	r3, r3
 802d14a:	f043 0310 	orr.w	r3, r3, #16
 802d14e:	b29b      	uxth	r3, r3
 802d150:	4618      	mov	r0, r3
 802d152:	f7fa fdc0 	bl	8027cd6 <lwip_htons>
 802d156:	4603      	mov	r3, r0
 802d158:	461a      	mov	r2, r3
 802d15a:	693b      	ldr	r3, [r7, #16]
 802d15c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802d15e:	68fb      	ldr	r3, [r7, #12]
 802d160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802d162:	4618      	mov	r0, r3
 802d164:	f7fa fdb7 	bl	8027cd6 <lwip_htons>
 802d168:	4603      	mov	r3, r0
 802d16a:	461a      	mov	r2, r3
 802d16c:	693b      	ldr	r3, [r7, #16]
 802d16e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 802d170:	693b      	ldr	r3, [r7, #16]
 802d172:	2200      	movs	r2, #0
 802d174:	741a      	strb	r2, [r3, #16]
 802d176:	2200      	movs	r2, #0
 802d178:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802d17a:	693b      	ldr	r3, [r7, #16]
 802d17c:	2200      	movs	r2, #0
 802d17e:	749a      	strb	r2, [r3, #18]
 802d180:	2200      	movs	r2, #0
 802d182:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802d184:	68fb      	ldr	r3, [r7, #12]
 802d186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d188:	68fa      	ldr	r2, [r7, #12]
 802d18a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 802d18c:	441a      	add	r2, r3
 802d18e:	68fb      	ldr	r3, [r7, #12]
 802d190:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 802d192:	697b      	ldr	r3, [r7, #20]
}
 802d194:	4618      	mov	r0, r3
 802d196:	3718      	adds	r7, #24
 802d198:	46bd      	mov	sp, r7
 802d19a:	bd80      	pop	{r7, pc}
 802d19c:	08034748 	.word	0x08034748
 802d1a0:	0803477c 	.word	0x0803477c
 802d1a4:	080347ac 	.word	0x080347ac

0802d1a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 802d1a8:	b590      	push	{r4, r7, lr}
 802d1aa:	b085      	sub	sp, #20
 802d1ac:	af00      	add	r7, sp, #0
 802d1ae:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 802d1b0:	687b      	ldr	r3, [r7, #4]
 802d1b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d1b4:	2b00      	cmp	r3, #0
 802d1b6:	d02d      	beq.n	802d214 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802d1b8:	687b      	ldr	r3, [r7, #4]
 802d1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d1bc:	60fb      	str	r3, [r7, #12]
 802d1be:	e002      	b.n	802d1c6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 802d1c0:	68fb      	ldr	r3, [r7, #12]
 802d1c2:	681b      	ldr	r3, [r3, #0]
 802d1c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802d1c6:	68fb      	ldr	r3, [r7, #12]
 802d1c8:	681b      	ldr	r3, [r3, #0]
 802d1ca:	2b00      	cmp	r3, #0
 802d1cc:	d1f8      	bne.n	802d1c0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 802d1ce:	68fb      	ldr	r3, [r7, #12]
 802d1d0:	68db      	ldr	r3, [r3, #12]
 802d1d2:	899b      	ldrh	r3, [r3, #12]
 802d1d4:	b29b      	uxth	r3, r3
 802d1d6:	4618      	mov	r0, r3
 802d1d8:	f7fa fd7d 	bl	8027cd6 <lwip_htons>
 802d1dc:	4603      	mov	r3, r0
 802d1de:	f003 0307 	and.w	r3, r3, #7
 802d1e2:	2b00      	cmp	r3, #0
 802d1e4:	d116      	bne.n	802d214 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802d1e6:	68fb      	ldr	r3, [r7, #12]
 802d1e8:	68db      	ldr	r3, [r3, #12]
 802d1ea:	899b      	ldrh	r3, [r3, #12]
 802d1ec:	b29c      	uxth	r4, r3
 802d1ee:	2001      	movs	r0, #1
 802d1f0:	f7fa fd71 	bl	8027cd6 <lwip_htons>
 802d1f4:	4603      	mov	r3, r0
 802d1f6:	461a      	mov	r2, r3
 802d1f8:	68fb      	ldr	r3, [r7, #12]
 802d1fa:	68db      	ldr	r3, [r3, #12]
 802d1fc:	4322      	orrs	r2, r4
 802d1fe:	b292      	uxth	r2, r2
 802d200:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 802d202:	687b      	ldr	r3, [r7, #4]
 802d204:	7e9b      	ldrb	r3, [r3, #26]
 802d206:	f043 0320 	orr.w	r3, r3, #32
 802d20a:	b2da      	uxtb	r2, r3
 802d20c:	687b      	ldr	r3, [r7, #4]
 802d20e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 802d210:	2300      	movs	r3, #0
 802d212:	e004      	b.n	802d21e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 802d214:	2101      	movs	r1, #1
 802d216:	6878      	ldr	r0, [r7, #4]
 802d218:	f000 fcc0 	bl	802db9c <tcp_enqueue_flags>
 802d21c:	4603      	mov	r3, r0
}
 802d21e:	4618      	mov	r0, r3
 802d220:	3714      	adds	r7, #20
 802d222:	46bd      	mov	sp, r7
 802d224:	bd90      	pop	{r4, r7, pc}
	...

0802d228 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 802d228:	b590      	push	{r4, r7, lr}
 802d22a:	b087      	sub	sp, #28
 802d22c:	af00      	add	r7, sp, #0
 802d22e:	60f8      	str	r0, [r7, #12]
 802d230:	60b9      	str	r1, [r7, #8]
 802d232:	603b      	str	r3, [r7, #0]
 802d234:	4613      	mov	r3, r2
 802d236:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 802d238:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802d23c:	009b      	lsls	r3, r3, #2
 802d23e:	b2db      	uxtb	r3, r3
 802d240:	f003 0304 	and.w	r3, r3, #4
 802d244:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 802d246:	2003      	movs	r0, #3
 802d248:	f7fb f8f2 	bl	8028430 <memp_malloc>
 802d24c:	6138      	str	r0, [r7, #16]
 802d24e:	693b      	ldr	r3, [r7, #16]
 802d250:	2b00      	cmp	r3, #0
 802d252:	d104      	bne.n	802d25e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 802d254:	68b8      	ldr	r0, [r7, #8]
 802d256:	f7fb fe67 	bl	8028f28 <pbuf_free>
    return NULL;
 802d25a:	2300      	movs	r3, #0
 802d25c:	e061      	b.n	802d322 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 802d25e:	693b      	ldr	r3, [r7, #16]
 802d260:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802d264:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 802d266:	693b      	ldr	r3, [r7, #16]
 802d268:	2200      	movs	r2, #0
 802d26a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 802d26c:	693b      	ldr	r3, [r7, #16]
 802d26e:	68ba      	ldr	r2, [r7, #8]
 802d270:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 802d272:	68bb      	ldr	r3, [r7, #8]
 802d274:	891a      	ldrh	r2, [r3, #8]
 802d276:	7dfb      	ldrb	r3, [r7, #23]
 802d278:	b29b      	uxth	r3, r3
 802d27a:	429a      	cmp	r2, r3
 802d27c:	d205      	bcs.n	802d28a <tcp_create_segment+0x62>
 802d27e:	4b2b      	ldr	r3, [pc, #172]	; (802d32c <tcp_create_segment+0x104>)
 802d280:	22ba      	movs	r2, #186	; 0xba
 802d282:	492b      	ldr	r1, [pc, #172]	; (802d330 <tcp_create_segment+0x108>)
 802d284:	482b      	ldr	r0, [pc, #172]	; (802d334 <tcp_create_segment+0x10c>)
 802d286:	f004 f89d 	bl	80313c4 <iprintf>
  seg->len = p->tot_len - optlen;
 802d28a:	68bb      	ldr	r3, [r7, #8]
 802d28c:	891a      	ldrh	r2, [r3, #8]
 802d28e:	7dfb      	ldrb	r3, [r7, #23]
 802d290:	b29b      	uxth	r3, r3
 802d292:	1ad3      	subs	r3, r2, r3
 802d294:	b29a      	uxth	r2, r3
 802d296:	693b      	ldr	r3, [r7, #16]
 802d298:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 802d29a:	2114      	movs	r1, #20
 802d29c:	68b8      	ldr	r0, [r7, #8]
 802d29e:	f7fb fe1f 	bl	8028ee0 <pbuf_header>
 802d2a2:	4603      	mov	r3, r0
 802d2a4:	2b00      	cmp	r3, #0
 802d2a6:	d004      	beq.n	802d2b2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 802d2a8:	6938      	ldr	r0, [r7, #16]
 802d2aa:	f7fd f931 	bl	802a510 <tcp_seg_free>
    return NULL;
 802d2ae:	2300      	movs	r3, #0
 802d2b0:	e037      	b.n	802d322 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 802d2b2:	693b      	ldr	r3, [r7, #16]
 802d2b4:	685b      	ldr	r3, [r3, #4]
 802d2b6:	685a      	ldr	r2, [r3, #4]
 802d2b8:	693b      	ldr	r3, [r7, #16]
 802d2ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 802d2bc:	68fb      	ldr	r3, [r7, #12]
 802d2be:	8ada      	ldrh	r2, [r3, #22]
 802d2c0:	693b      	ldr	r3, [r7, #16]
 802d2c2:	68dc      	ldr	r4, [r3, #12]
 802d2c4:	4610      	mov	r0, r2
 802d2c6:	f7fa fd06 	bl	8027cd6 <lwip_htons>
 802d2ca:	4603      	mov	r3, r0
 802d2cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 802d2ce:	68fb      	ldr	r3, [r7, #12]
 802d2d0:	8b1a      	ldrh	r2, [r3, #24]
 802d2d2:	693b      	ldr	r3, [r7, #16]
 802d2d4:	68dc      	ldr	r4, [r3, #12]
 802d2d6:	4610      	mov	r0, r2
 802d2d8:	f7fa fcfd 	bl	8027cd6 <lwip_htons>
 802d2dc:	4603      	mov	r3, r0
 802d2de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 802d2e0:	693b      	ldr	r3, [r7, #16]
 802d2e2:	68dc      	ldr	r4, [r3, #12]
 802d2e4:	6838      	ldr	r0, [r7, #0]
 802d2e6:	f7fa fd04 	bl	8027cf2 <lwip_htonl>
 802d2ea:	4603      	mov	r3, r0
 802d2ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 802d2ee:	7dfb      	ldrb	r3, [r7, #23]
 802d2f0:	089b      	lsrs	r3, r3, #2
 802d2f2:	b2db      	uxtb	r3, r3
 802d2f4:	b29b      	uxth	r3, r3
 802d2f6:	3305      	adds	r3, #5
 802d2f8:	b29b      	uxth	r3, r3
 802d2fa:	031b      	lsls	r3, r3, #12
 802d2fc:	b29a      	uxth	r2, r3
 802d2fe:	79fb      	ldrb	r3, [r7, #7]
 802d300:	b29b      	uxth	r3, r3
 802d302:	4313      	orrs	r3, r2
 802d304:	b29a      	uxth	r2, r3
 802d306:	693b      	ldr	r3, [r7, #16]
 802d308:	68dc      	ldr	r4, [r3, #12]
 802d30a:	4610      	mov	r0, r2
 802d30c:	f7fa fce3 	bl	8027cd6 <lwip_htons>
 802d310:	4603      	mov	r3, r0
 802d312:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 802d314:	693b      	ldr	r3, [r7, #16]
 802d316:	68db      	ldr	r3, [r3, #12]
 802d318:	2200      	movs	r2, #0
 802d31a:	749a      	strb	r2, [r3, #18]
 802d31c:	2200      	movs	r2, #0
 802d31e:	74da      	strb	r2, [r3, #19]
  return seg;
 802d320:	693b      	ldr	r3, [r7, #16]
}
 802d322:	4618      	mov	r0, r3
 802d324:	371c      	adds	r7, #28
 802d326:	46bd      	mov	sp, r7
 802d328:	bd90      	pop	{r4, r7, pc}
 802d32a:	bf00      	nop
 802d32c:	08034748 	.word	0x08034748
 802d330:	080347d4 	.word	0x080347d4
 802d334:	080347ac 	.word	0x080347ac

0802d338 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 802d338:	b580      	push	{r7, lr}
 802d33a:	b086      	sub	sp, #24
 802d33c:	af00      	add	r7, sp, #0
 802d33e:	607b      	str	r3, [r7, #4]
 802d340:	4603      	mov	r3, r0
 802d342:	73fb      	strb	r3, [r7, #15]
 802d344:	460b      	mov	r3, r1
 802d346:	81bb      	strh	r3, [r7, #12]
 802d348:	4613      	mov	r3, r2
 802d34a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 802d34c:	89bb      	ldrh	r3, [r7, #12]
 802d34e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 802d350:	89ba      	ldrh	r2, [r7, #12]
 802d352:	897b      	ldrh	r3, [r7, #10]
 802d354:	429a      	cmp	r2, r3
 802d356:	d221      	bcs.n	802d39c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 802d358:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d35c:	f003 0302 	and.w	r3, r3, #2
 802d360:	2b00      	cmp	r3, #0
 802d362:	d111      	bne.n	802d388 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 802d364:	6a3b      	ldr	r3, [r7, #32]
 802d366:	7e9b      	ldrb	r3, [r3, #26]
 802d368:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 802d36c:	2b00      	cmp	r3, #0
 802d36e:	d115      	bne.n	802d39c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 802d370:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802d374:	2b00      	cmp	r3, #0
 802d376:	d007      	beq.n	802d388 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 802d378:	6a3b      	ldr	r3, [r7, #32]
 802d37a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 802d37c:	2b00      	cmp	r3, #0
 802d37e:	d103      	bne.n	802d388 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 802d380:	6a3b      	ldr	r3, [r7, #32]
 802d382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 802d384:	2b00      	cmp	r3, #0
 802d386:	d009      	beq.n	802d39c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 802d388:	89bb      	ldrh	r3, [r7, #12]
 802d38a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 802d38e:	f023 0203 	bic.w	r2, r3, #3
 802d392:	897b      	ldrh	r3, [r7, #10]
 802d394:	4293      	cmp	r3, r2
 802d396:	bf28      	it	cs
 802d398:	4613      	movcs	r3, r2
 802d39a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 802d39c:	8af9      	ldrh	r1, [r7, #22]
 802d39e:	7bfb      	ldrb	r3, [r7, #15]
 802d3a0:	2200      	movs	r2, #0
 802d3a2:	4618      	mov	r0, r3
 802d3a4:	f7fb fa48 	bl	8028838 <pbuf_alloc>
 802d3a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802d3aa:	693b      	ldr	r3, [r7, #16]
 802d3ac:	2b00      	cmp	r3, #0
 802d3ae:	d101      	bne.n	802d3b4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 802d3b0:	2300      	movs	r3, #0
 802d3b2:	e019      	b.n	802d3e8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 802d3b4:	693b      	ldr	r3, [r7, #16]
 802d3b6:	681b      	ldr	r3, [r3, #0]
 802d3b8:	2b00      	cmp	r3, #0
 802d3ba:	d006      	beq.n	802d3ca <tcp_pbuf_prealloc+0x92>
 802d3bc:	4b0c      	ldr	r3, [pc, #48]	; (802d3f0 <tcp_pbuf_prealloc+0xb8>)
 802d3be:	f44f 7288 	mov.w	r2, #272	; 0x110
 802d3c2:	490c      	ldr	r1, [pc, #48]	; (802d3f4 <tcp_pbuf_prealloc+0xbc>)
 802d3c4:	480c      	ldr	r0, [pc, #48]	; (802d3f8 <tcp_pbuf_prealloc+0xc0>)
 802d3c6:	f003 fffd 	bl	80313c4 <iprintf>
  *oversize = p->len - length;
 802d3ca:	693b      	ldr	r3, [r7, #16]
 802d3cc:	895a      	ldrh	r2, [r3, #10]
 802d3ce:	89bb      	ldrh	r3, [r7, #12]
 802d3d0:	1ad3      	subs	r3, r2, r3
 802d3d2:	b29a      	uxth	r2, r3
 802d3d4:	687b      	ldr	r3, [r7, #4]
 802d3d6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 802d3d8:	693b      	ldr	r3, [r7, #16]
 802d3da:	89ba      	ldrh	r2, [r7, #12]
 802d3dc:	811a      	strh	r2, [r3, #8]
 802d3de:	693b      	ldr	r3, [r7, #16]
 802d3e0:	891a      	ldrh	r2, [r3, #8]
 802d3e2:	693b      	ldr	r3, [r7, #16]
 802d3e4:	815a      	strh	r2, [r3, #10]
  return p;
 802d3e6:	693b      	ldr	r3, [r7, #16]
}
 802d3e8:	4618      	mov	r0, r3
 802d3ea:	3718      	adds	r7, #24
 802d3ec:	46bd      	mov	sp, r7
 802d3ee:	bd80      	pop	{r7, pc}
 802d3f0:	08034748 	.word	0x08034748
 802d3f4:	080347ec 	.word	0x080347ec
 802d3f8:	080347ac 	.word	0x080347ac

0802d3fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 802d3fc:	b580      	push	{r7, lr}
 802d3fe:	b082      	sub	sp, #8
 802d400:	af00      	add	r7, sp, #0
 802d402:	6078      	str	r0, [r7, #4]
 802d404:	460b      	mov	r3, r1
 802d406:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 802d408:	687b      	ldr	r3, [r7, #4]
 802d40a:	7d1b      	ldrb	r3, [r3, #20]
 802d40c:	2b04      	cmp	r3, #4
 802d40e:	d00e      	beq.n	802d42e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 802d410:	687b      	ldr	r3, [r7, #4]
 802d412:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 802d414:	2b07      	cmp	r3, #7
 802d416:	d00a      	beq.n	802d42e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 802d418:	687b      	ldr	r3, [r7, #4]
 802d41a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 802d41c:	2b02      	cmp	r3, #2
 802d41e:	d006      	beq.n	802d42e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 802d420:	687b      	ldr	r3, [r7, #4]
 802d422:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 802d424:	2b03      	cmp	r3, #3
 802d426:	d002      	beq.n	802d42e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 802d428:	f06f 030a 	mvn.w	r3, #10
 802d42c:	e04f      	b.n	802d4ce <tcp_write_checks+0xd2>
  } else if (len == 0) {
 802d42e:	887b      	ldrh	r3, [r7, #2]
 802d430:	2b00      	cmp	r3, #0
 802d432:	d101      	bne.n	802d438 <tcp_write_checks+0x3c>
    return ERR_OK;
 802d434:	2300      	movs	r3, #0
 802d436:	e04a      	b.n	802d4ce <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 802d438:	687b      	ldr	r3, [r7, #4]
 802d43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802d43e:	887a      	ldrh	r2, [r7, #2]
 802d440:	429a      	cmp	r2, r3
 802d442:	d909      	bls.n	802d458 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	7e9b      	ldrb	r3, [r3, #26]
 802d448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d44c:	b2da      	uxtb	r2, r3
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802d452:	f04f 33ff 	mov.w	r3, #4294967295
 802d456:	e03a      	b.n	802d4ce <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 802d458:	687b      	ldr	r3, [r7, #4]
 802d45a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802d45e:	2b08      	cmp	r3, #8
 802d460:	d806      	bhi.n	802d470 <tcp_write_checks+0x74>
 802d462:	687b      	ldr	r3, [r7, #4]
 802d464:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802d468:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802d46c:	4293      	cmp	r3, r2
 802d46e:	d909      	bls.n	802d484 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 802d470:	687b      	ldr	r3, [r7, #4]
 802d472:	7e9b      	ldrb	r3, [r3, #26]
 802d474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d478:	b2da      	uxtb	r2, r3
 802d47a:	687b      	ldr	r3, [r7, #4]
 802d47c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802d47e:	f04f 33ff 	mov.w	r3, #4294967295
 802d482:	e024      	b.n	802d4ce <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 802d484:	687b      	ldr	r3, [r7, #4]
 802d486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802d48a:	2b00      	cmp	r3, #0
 802d48c:	d00f      	beq.n	802d4ae <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802d48e:	687b      	ldr	r3, [r7, #4]
 802d490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d492:	2b00      	cmp	r3, #0
 802d494:	d11a      	bne.n	802d4cc <tcp_write_checks+0xd0>
 802d496:	687b      	ldr	r3, [r7, #4]
 802d498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d49a:	2b00      	cmp	r3, #0
 802d49c:	d116      	bne.n	802d4cc <tcp_write_checks+0xd0>
 802d49e:	4b0e      	ldr	r3, [pc, #56]	; (802d4d8 <tcp_write_checks+0xdc>)
 802d4a0:	f240 1255 	movw	r2, #341	; 0x155
 802d4a4:	490d      	ldr	r1, [pc, #52]	; (802d4dc <tcp_write_checks+0xe0>)
 802d4a6:	480e      	ldr	r0, [pc, #56]	; (802d4e0 <tcp_write_checks+0xe4>)
 802d4a8:	f003 ff8c 	bl	80313c4 <iprintf>
 802d4ac:	e00e      	b.n	802d4cc <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802d4ae:	687b      	ldr	r3, [r7, #4]
 802d4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d4b2:	2b00      	cmp	r3, #0
 802d4b4:	d103      	bne.n	802d4be <tcp_write_checks+0xc2>
 802d4b6:	687b      	ldr	r3, [r7, #4]
 802d4b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d4ba:	2b00      	cmp	r3, #0
 802d4bc:	d006      	beq.n	802d4cc <tcp_write_checks+0xd0>
 802d4be:	4b06      	ldr	r3, [pc, #24]	; (802d4d8 <tcp_write_checks+0xdc>)
 802d4c0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 802d4c4:	4907      	ldr	r1, [pc, #28]	; (802d4e4 <tcp_write_checks+0xe8>)
 802d4c6:	4806      	ldr	r0, [pc, #24]	; (802d4e0 <tcp_write_checks+0xe4>)
 802d4c8:	f003 ff7c 	bl	80313c4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 802d4cc:	2300      	movs	r3, #0
}
 802d4ce:	4618      	mov	r0, r3
 802d4d0:	3708      	adds	r7, #8
 802d4d2:	46bd      	mov	sp, r7
 802d4d4:	bd80      	pop	{r7, pc}
 802d4d6:	bf00      	nop
 802d4d8:	08034748 	.word	0x08034748
 802d4dc:	08034800 	.word	0x08034800
 802d4e0:	080347ac 	.word	0x080347ac
 802d4e4:	0803483c 	.word	0x0803483c

0802d4e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 802d4e8:	b590      	push	{r4, r7, lr}
 802d4ea:	b09b      	sub	sp, #108	; 0x6c
 802d4ec:	af04      	add	r7, sp, #16
 802d4ee:	60f8      	str	r0, [r7, #12]
 802d4f0:	60b9      	str	r1, [r7, #8]
 802d4f2:	4611      	mov	r1, r2
 802d4f4:	461a      	mov	r2, r3
 802d4f6:	460b      	mov	r3, r1
 802d4f8:	80fb      	strh	r3, [r7, #6]
 802d4fa:	4613      	mov	r3, r2
 802d4fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 802d4fe:	2300      	movs	r3, #0
 802d500:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 802d502:	2300      	movs	r3, #0
 802d504:	653b      	str	r3, [r7, #80]	; 0x50
 802d506:	2300      	movs	r3, #0
 802d508:	64fb      	str	r3, [r7, #76]	; 0x4c
 802d50a:	2300      	movs	r3, #0
 802d50c:	64bb      	str	r3, [r7, #72]	; 0x48
 802d50e:	2300      	movs	r3, #0
 802d510:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 802d512:	2300      	movs	r3, #0
 802d514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 802d518:	2300      	movs	r3, #0
 802d51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 802d51e:	2300      	movs	r3, #0
 802d520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 802d524:	2300      	movs	r3, #0
 802d526:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 802d528:	2300      	movs	r3, #0
 802d52a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 802d52c:	2300      	movs	r3, #0
 802d52e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 802d530:	68fb      	ldr	r3, [r7, #12]
 802d532:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802d536:	085b      	lsrs	r3, r3, #1
 802d538:	b29a      	uxth	r2, r3
 802d53a:	68fb      	ldr	r3, [r7, #12]
 802d53c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802d53e:	4293      	cmp	r3, r2
 802d540:	bf28      	it	cs
 802d542:	4613      	movcs	r3, r2
 802d544:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 802d546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802d548:	2b00      	cmp	r3, #0
 802d54a:	d102      	bne.n	802d552 <tcp_write+0x6a>
 802d54c:	68fb      	ldr	r3, [r7, #12]
 802d54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802d550:	e000      	b.n	802d554 <tcp_write+0x6c>
 802d552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802d554:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 802d556:	68bb      	ldr	r3, [r7, #8]
 802d558:	2b00      	cmp	r3, #0
 802d55a:	d109      	bne.n	802d570 <tcp_write+0x88>
 802d55c:	4b92      	ldr	r3, [pc, #584]	; (802d7a8 <tcp_write+0x2c0>)
 802d55e:	f240 1291 	movw	r2, #401	; 0x191
 802d562:	4992      	ldr	r1, [pc, #584]	; (802d7ac <tcp_write+0x2c4>)
 802d564:	4892      	ldr	r0, [pc, #584]	; (802d7b0 <tcp_write+0x2c8>)
 802d566:	f003 ff2d 	bl	80313c4 <iprintf>
 802d56a:	f06f 030f 	mvn.w	r3, #15
 802d56e:	e30a      	b.n	802db86 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 802d570:	88fb      	ldrh	r3, [r7, #6]
 802d572:	4619      	mov	r1, r3
 802d574:	68f8      	ldr	r0, [r7, #12]
 802d576:	f7ff ff41 	bl	802d3fc <tcp_write_checks>
 802d57a:	4603      	mov	r3, r0
 802d57c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 802d580:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 802d584:	2b00      	cmp	r3, #0
 802d586:	d002      	beq.n	802d58e <tcp_write+0xa6>
    return err;
 802d588:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 802d58c:	e2fb      	b.n	802db86 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 802d58e:	68fb      	ldr	r3, [r7, #12]
 802d590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802d594:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 802d598:	68fb      	ldr	r3, [r7, #12]
 802d59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d59c:	2b00      	cmp	r3, #0
 802d59e:	f000 80f4 	beq.w	802d78a <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802d5a2:	68fb      	ldr	r3, [r7, #12]
 802d5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d5a6:	653b      	str	r3, [r7, #80]	; 0x50
 802d5a8:	e002      	b.n	802d5b0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 802d5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d5ac:	681b      	ldr	r3, [r3, #0]
 802d5ae:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802d5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d5b2:	681b      	ldr	r3, [r3, #0]
 802d5b4:	2b00      	cmp	r3, #0
 802d5b6:	d1f8      	bne.n	802d5aa <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 802d5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d5ba:	7a9b      	ldrb	r3, [r3, #10]
 802d5bc:	009b      	lsls	r3, r3, #2
 802d5be:	b29b      	uxth	r3, r3
 802d5c0:	f003 0304 	and.w	r3, r3, #4
 802d5c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 802d5c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802d5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d5ca:	891b      	ldrh	r3, [r3, #8]
 802d5cc:	4619      	mov	r1, r3
 802d5ce:	8c3b      	ldrh	r3, [r7, #32]
 802d5d0:	440b      	add	r3, r1
 802d5d2:	429a      	cmp	r2, r3
 802d5d4:	da06      	bge.n	802d5e4 <tcp_write+0xfc>
 802d5d6:	4b74      	ldr	r3, [pc, #464]	; (802d7a8 <tcp_write+0x2c0>)
 802d5d8:	f240 12c7 	movw	r2, #455	; 0x1c7
 802d5dc:	4975      	ldr	r1, [pc, #468]	; (802d7b4 <tcp_write+0x2cc>)
 802d5de:	4874      	ldr	r0, [pc, #464]	; (802d7b0 <tcp_write+0x2c8>)
 802d5e0:	f003 fef0 	bl	80313c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 802d5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d5e6:	891a      	ldrh	r2, [r3, #8]
 802d5e8:	8c3b      	ldrh	r3, [r7, #32]
 802d5ea:	4413      	add	r3, r2
 802d5ec:	b29b      	uxth	r3, r3
 802d5ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802d5f0:	1ad3      	subs	r3, r2, r3
 802d5f2:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 802d5f4:	68fb      	ldr	r3, [r7, #12]
 802d5f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802d5fa:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802d5fc:	8a7b      	ldrh	r3, [r7, #18]
 802d5fe:	2b00      	cmp	r3, #0
 802d600:	d026      	beq.n	802d650 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 802d602:	8a7b      	ldrh	r3, [r7, #18]
 802d604:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802d606:	429a      	cmp	r2, r3
 802d608:	d206      	bcs.n	802d618 <tcp_write+0x130>
 802d60a:	4b67      	ldr	r3, [pc, #412]	; (802d7a8 <tcp_write+0x2c0>)
 802d60c:	f240 12d9 	movw	r2, #473	; 0x1d9
 802d610:	4969      	ldr	r1, [pc, #420]	; (802d7b8 <tcp_write+0x2d0>)
 802d612:	4867      	ldr	r0, [pc, #412]	; (802d7b0 <tcp_write+0x2c8>)
 802d614:	f003 fed6 	bl	80313c4 <iprintf>
      seg = last_unsent;
 802d618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d61a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802d61c:	8a7b      	ldrh	r3, [r7, #18]
 802d61e:	88fa      	ldrh	r2, [r7, #6]
 802d620:	4293      	cmp	r3, r2
 802d622:	bf28      	it	cs
 802d624:	4613      	movcs	r3, r2
 802d626:	b29b      	uxth	r3, r3
 802d628:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802d62a:	4293      	cmp	r3, r2
 802d62c:	bf28      	it	cs
 802d62e:	4613      	movcs	r3, r2
 802d630:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 802d632:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d636:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d638:	4413      	add	r3, r2
 802d63a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 802d63e:	8a7a      	ldrh	r2, [r7, #18]
 802d640:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d642:	1ad3      	subs	r3, r2, r3
 802d644:	b29b      	uxth	r3, r3
 802d646:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 802d648:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802d64a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d64c:	1ad3      	subs	r3, r2, r3
 802d64e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 802d650:	8a7b      	ldrh	r3, [r7, #18]
 802d652:	2b00      	cmp	r3, #0
 802d654:	d00b      	beq.n	802d66e <tcp_write+0x186>
 802d656:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d65a:	88fb      	ldrh	r3, [r7, #6]
 802d65c:	429a      	cmp	r2, r3
 802d65e:	d006      	beq.n	802d66e <tcp_write+0x186>
 802d660:	4b51      	ldr	r3, [pc, #324]	; (802d7a8 <tcp_write+0x2c0>)
 802d662:	f240 12e1 	movw	r2, #481	; 0x1e1
 802d666:	4955      	ldr	r1, [pc, #340]	; (802d7bc <tcp_write+0x2d4>)
 802d668:	4851      	ldr	r0, [pc, #324]	; (802d7b0 <tcp_write+0x2c8>)
 802d66a:	f003 feab 	bl	80313c4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 802d66e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d672:	88fb      	ldrh	r3, [r7, #6]
 802d674:	429a      	cmp	r2, r3
 802d676:	f080 8169 	bcs.w	802d94c <tcp_write+0x464>
 802d67a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802d67c:	2b00      	cmp	r3, #0
 802d67e:	f000 8165 	beq.w	802d94c <tcp_write+0x464>
 802d682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d684:	891b      	ldrh	r3, [r3, #8]
 802d686:	2b00      	cmp	r3, #0
 802d688:	f000 8160 	beq.w	802d94c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 802d68c:	88fa      	ldrh	r2, [r7, #6]
 802d68e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d692:	1ad2      	subs	r2, r2, r3
 802d694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802d696:	4293      	cmp	r3, r2
 802d698:	bfa8      	it	ge
 802d69a:	4613      	movge	r3, r2
 802d69c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 802d69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d6a0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 802d6a2:	797b      	ldrb	r3, [r7, #5]
 802d6a4:	f003 0301 	and.w	r3, r3, #1
 802d6a8:	2b00      	cmp	r3, #0
 802d6aa:	d027      	beq.n	802d6fc <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 802d6ac:	f107 0012 	add.w	r0, r7, #18
 802d6b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802d6b2:	8bf9      	ldrh	r1, [r7, #30]
 802d6b4:	2301      	movs	r3, #1
 802d6b6:	9302      	str	r3, [sp, #8]
 802d6b8:	797b      	ldrb	r3, [r7, #5]
 802d6ba:	9301      	str	r3, [sp, #4]
 802d6bc:	68fb      	ldr	r3, [r7, #12]
 802d6be:	9300      	str	r3, [sp, #0]
 802d6c0:	4603      	mov	r3, r0
 802d6c2:	2004      	movs	r0, #4
 802d6c4:	f7ff fe38 	bl	802d338 <tcp_pbuf_prealloc>
 802d6c8:	6578      	str	r0, [r7, #84]	; 0x54
 802d6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d6cc:	2b00      	cmp	r3, #0
 802d6ce:	f000 8228 	beq.w	802db22 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 802d6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d6d4:	6858      	ldr	r0, [r3, #4]
 802d6d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d6da:	68ba      	ldr	r2, [r7, #8]
 802d6dc:	4413      	add	r3, r2
 802d6de:	8bfa      	ldrh	r2, [r7, #30]
 802d6e0:	4619      	mov	r1, r3
 802d6e2:	f003 fd79 	bl	80311d8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 802d6e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d6e8:	f7fb fcb2 	bl	8029050 <pbuf_clen>
 802d6ec:	4603      	mov	r3, r0
 802d6ee:	461a      	mov	r2, r3
 802d6f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802d6f4:	4413      	add	r3, r2
 802d6f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802d6fa:	e03f      	b.n	802d77c <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 802d6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d6fe:	685b      	ldr	r3, [r3, #4]
 802d700:	637b      	str	r3, [r7, #52]	; 0x34
 802d702:	e002      	b.n	802d70a <tcp_write+0x222>
 802d704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d706:	681b      	ldr	r3, [r3, #0]
 802d708:	637b      	str	r3, [r7, #52]	; 0x34
 802d70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d70c:	681b      	ldr	r3, [r3, #0]
 802d70e:	2b00      	cmp	r3, #0
 802d710:	d1f8      	bne.n	802d704 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 802d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d714:	7b1b      	ldrb	r3, [r3, #12]
 802d716:	2b01      	cmp	r3, #1
 802d718:	d115      	bne.n	802d746 <tcp_write+0x25e>
 802d71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d71c:	685b      	ldr	r3, [r3, #4]
 802d71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802d720:	8952      	ldrh	r2, [r2, #10]
 802d722:	4413      	add	r3, r2
 802d724:	68ba      	ldr	r2, [r7, #8]
 802d726:	429a      	cmp	r2, r3
 802d728:	d10d      	bne.n	802d746 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 802d72a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d72e:	2b00      	cmp	r3, #0
 802d730:	d006      	beq.n	802d740 <tcp_write+0x258>
 802d732:	4b1d      	ldr	r3, [pc, #116]	; (802d7a8 <tcp_write+0x2c0>)
 802d734:	f44f 7203 	mov.w	r2, #524	; 0x20c
 802d738:	4921      	ldr	r1, [pc, #132]	; (802d7c0 <tcp_write+0x2d8>)
 802d73a:	481d      	ldr	r0, [pc, #116]	; (802d7b0 <tcp_write+0x2c8>)
 802d73c:	f003 fe42 	bl	80313c4 <iprintf>
          extendlen = seglen;
 802d740:	8bfb      	ldrh	r3, [r7, #30]
 802d742:	87bb      	strh	r3, [r7, #60]	; 0x3c
 802d744:	e01a      	b.n	802d77c <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 802d746:	8bfb      	ldrh	r3, [r7, #30]
 802d748:	2201      	movs	r2, #1
 802d74a:	4619      	mov	r1, r3
 802d74c:	2004      	movs	r0, #4
 802d74e:	f7fb f873 	bl	8028838 <pbuf_alloc>
 802d752:	6578      	str	r0, [r7, #84]	; 0x54
 802d754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d756:	2b00      	cmp	r3, #0
 802d758:	f000 81e5 	beq.w	802db26 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 802d75c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d760:	68ba      	ldr	r2, [r7, #8]
 802d762:	441a      	add	r2, r3
 802d764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d766:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 802d768:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d76a:	f7fb fc71 	bl	8029050 <pbuf_clen>
 802d76e:	4603      	mov	r3, r0
 802d770:	461a      	mov	r2, r3
 802d772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802d776:	4413      	add	r3, r2
 802d778:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 802d77c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d780:	8bfb      	ldrh	r3, [r7, #30]
 802d782:	4413      	add	r3, r2
 802d784:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 802d788:	e0e0      	b.n	802d94c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 802d78a:	68fb      	ldr	r3, [r7, #12]
 802d78c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802d790:	2b00      	cmp	r3, #0
 802d792:	f000 80db 	beq.w	802d94c <tcp_write+0x464>
 802d796:	4b04      	ldr	r3, [pc, #16]	; (802d7a8 <tcp_write+0x2c0>)
 802d798:	f44f 7209 	mov.w	r2, #548	; 0x224
 802d79c:	4909      	ldr	r1, [pc, #36]	; (802d7c4 <tcp_write+0x2dc>)
 802d79e:	4804      	ldr	r0, [pc, #16]	; (802d7b0 <tcp_write+0x2c8>)
 802d7a0:	f003 fe10 	bl	80313c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 802d7a4:	e0d2      	b.n	802d94c <tcp_write+0x464>
 802d7a6:	bf00      	nop
 802d7a8:	08034748 	.word	0x08034748
 802d7ac:	08034870 	.word	0x08034870
 802d7b0:	080347ac 	.word	0x080347ac
 802d7b4:	080348a4 	.word	0x080348a4
 802d7b8:	080348bc 	.word	0x080348bc
 802d7bc:	080348dc 	.word	0x080348dc
 802d7c0:	080348fc 	.word	0x080348fc
 802d7c4:	08034928 	.word	0x08034928
    struct pbuf *p;
    u16_t left = len - pos;
 802d7c8:	88fa      	ldrh	r2, [r7, #6]
 802d7ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d7ce:	1ad3      	subs	r3, r2, r3
 802d7d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 802d7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d7d6:	b29b      	uxth	r3, r3
 802d7d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802d7da:	1ad3      	subs	r3, r2, r3
 802d7dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 802d7de:	8b7a      	ldrh	r2, [r7, #26]
 802d7e0:	8bbb      	ldrh	r3, [r7, #28]
 802d7e2:	4293      	cmp	r3, r2
 802d7e4:	bf28      	it	cs
 802d7e6:	4613      	movcs	r3, r2
 802d7e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 802d7ea:	797b      	ldrb	r3, [r7, #5]
 802d7ec:	f003 0301 	and.w	r3, r3, #1
 802d7f0:	2b00      	cmp	r3, #0
 802d7f2:	d036      	beq.n	802d862 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 802d7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d7f8:	b29a      	uxth	r2, r3
 802d7fa:	8b3b      	ldrh	r3, [r7, #24]
 802d7fc:	4413      	add	r3, r2
 802d7fe:	b299      	uxth	r1, r3
 802d800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802d802:	2b00      	cmp	r3, #0
 802d804:	bf0c      	ite	eq
 802d806:	2301      	moveq	r3, #1
 802d808:	2300      	movne	r3, #0
 802d80a:	b2db      	uxtb	r3, r3
 802d80c:	f107 0012 	add.w	r0, r7, #18
 802d810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802d812:	9302      	str	r3, [sp, #8]
 802d814:	797b      	ldrb	r3, [r7, #5]
 802d816:	9301      	str	r3, [sp, #4]
 802d818:	68fb      	ldr	r3, [r7, #12]
 802d81a:	9300      	str	r3, [sp, #0]
 802d81c:	4603      	mov	r3, r0
 802d81e:	2000      	movs	r0, #0
 802d820:	f7ff fd8a 	bl	802d338 <tcp_pbuf_prealloc>
 802d824:	6338      	str	r0, [r7, #48]	; 0x30
 802d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d828:	2b00      	cmp	r3, #0
 802d82a:	f000 817e 	beq.w	802db2a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 802d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d830:	895b      	ldrh	r3, [r3, #10]
 802d832:	8b3a      	ldrh	r2, [r7, #24]
 802d834:	429a      	cmp	r2, r3
 802d836:	d906      	bls.n	802d846 <tcp_write+0x35e>
 802d838:	4b8f      	ldr	r3, [pc, #572]	; (802da78 <tcp_write+0x590>)
 802d83a:	f44f 7210 	mov.w	r2, #576	; 0x240
 802d83e:	498f      	ldr	r1, [pc, #572]	; (802da7c <tcp_write+0x594>)
 802d840:	488f      	ldr	r0, [pc, #572]	; (802da80 <tcp_write+0x598>)
 802d842:	f003 fdbf 	bl	80313c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 802d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d848:	685a      	ldr	r2, [r3, #4]
 802d84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d84e:	18d0      	adds	r0, r2, r3
 802d850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d854:	68ba      	ldr	r2, [r7, #8]
 802d856:	4413      	add	r3, r2
 802d858:	8b3a      	ldrh	r2, [r7, #24]
 802d85a:	4619      	mov	r1, r3
 802d85c:	f003 fcbc 	bl	80311d8 <memcpy>
 802d860:	e02e      	b.n	802d8c0 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 802d862:	8a7b      	ldrh	r3, [r7, #18]
 802d864:	2b00      	cmp	r3, #0
 802d866:	d006      	beq.n	802d876 <tcp_write+0x38e>
 802d868:	4b83      	ldr	r3, [pc, #524]	; (802da78 <tcp_write+0x590>)
 802d86a:	f240 224b 	movw	r2, #587	; 0x24b
 802d86e:	4985      	ldr	r1, [pc, #532]	; (802da84 <tcp_write+0x59c>)
 802d870:	4883      	ldr	r0, [pc, #524]	; (802da80 <tcp_write+0x598>)
 802d872:	f003 fda7 	bl	80313c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802d876:	8b3b      	ldrh	r3, [r7, #24]
 802d878:	2201      	movs	r2, #1
 802d87a:	4619      	mov	r1, r3
 802d87c:	2000      	movs	r0, #0
 802d87e:	f7fa ffdb 	bl	8028838 <pbuf_alloc>
 802d882:	6178      	str	r0, [r7, #20]
 802d884:	697b      	ldr	r3, [r7, #20]
 802d886:	2b00      	cmp	r3, #0
 802d888:	f000 8151 	beq.w	802db2e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 802d88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d890:	68ba      	ldr	r2, [r7, #8]
 802d892:	441a      	add	r2, r3
 802d894:	697b      	ldr	r3, [r7, #20]
 802d896:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802d898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d89c:	b29b      	uxth	r3, r3
 802d89e:	2200      	movs	r2, #0
 802d8a0:	4619      	mov	r1, r3
 802d8a2:	2000      	movs	r0, #0
 802d8a4:	f7fa ffc8 	bl	8028838 <pbuf_alloc>
 802d8a8:	6338      	str	r0, [r7, #48]	; 0x30
 802d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d8ac:	2b00      	cmp	r3, #0
 802d8ae:	d103      	bne.n	802d8b8 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 802d8b0:	6978      	ldr	r0, [r7, #20]
 802d8b2:	f7fb fb39 	bl	8028f28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 802d8b6:	e13d      	b.n	802db34 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 802d8b8:	6979      	ldr	r1, [r7, #20]
 802d8ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802d8bc:	f7fb fc02 	bl	80290c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 802d8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802d8c2:	f7fb fbc5 	bl	8029050 <pbuf_clen>
 802d8c6:	4603      	mov	r3, r0
 802d8c8:	461a      	mov	r2, r3
 802d8ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802d8ce:	4413      	add	r3, r2
 802d8d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 802d8d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802d8d8:	2b09      	cmp	r3, #9
 802d8da:	d805      	bhi.n	802d8e8 <tcp_write+0x400>
 802d8dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802d8e0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802d8e4:	4293      	cmp	r3, r2
 802d8e6:	d903      	bls.n	802d8f0 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 802d8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802d8ea:	f7fb fb1d 	bl	8028f28 <pbuf_free>
      goto memerr;
 802d8ee:	e121      	b.n	802db34 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 802d8f0:	68fb      	ldr	r3, [r7, #12]
 802d8f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802d8f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802d8f8:	441a      	add	r2, r3
 802d8fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d8fe:	9300      	str	r3, [sp, #0]
 802d900:	4613      	mov	r3, r2
 802d902:	2200      	movs	r2, #0
 802d904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802d906:	68f8      	ldr	r0, [r7, #12]
 802d908:	f7ff fc8e 	bl	802d228 <tcp_create_segment>
 802d90c:	64f8      	str	r0, [r7, #76]	; 0x4c
 802d90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d910:	2b00      	cmp	r3, #0
 802d912:	f000 810e 	beq.w	802db32 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 802d916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802d918:	2b00      	cmp	r3, #0
 802d91a:	d102      	bne.n	802d922 <tcp_write+0x43a>
      queue = seg;
 802d91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d91e:	647b      	str	r3, [r7, #68]	; 0x44
 802d920:	e00c      	b.n	802d93c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 802d922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d924:	2b00      	cmp	r3, #0
 802d926:	d106      	bne.n	802d936 <tcp_write+0x44e>
 802d928:	4b53      	ldr	r3, [pc, #332]	; (802da78 <tcp_write+0x590>)
 802d92a:	f240 2285 	movw	r2, #645	; 0x285
 802d92e:	4956      	ldr	r1, [pc, #344]	; (802da88 <tcp_write+0x5a0>)
 802d930:	4853      	ldr	r0, [pc, #332]	; (802da80 <tcp_write+0x598>)
 802d932:	f003 fd47 	bl	80313c4 <iprintf>
      prev_seg->next = seg;
 802d936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802d93a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 802d93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d93e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 802d940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d944:	8b3b      	ldrh	r3, [r7, #24]
 802d946:	4413      	add	r3, r2
 802d948:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 802d94c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802d950:	88fb      	ldrh	r3, [r7, #6]
 802d952:	429a      	cmp	r2, r3
 802d954:	f4ff af38 	bcc.w	802d7c8 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 802d958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d95a:	2b00      	cmp	r3, #0
 802d95c:	d02c      	beq.n	802d9b8 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 802d95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d960:	685b      	ldr	r3, [r3, #4]
 802d962:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d964:	e01e      	b.n	802d9a4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 802d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d968:	891a      	ldrh	r2, [r3, #8]
 802d96a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d96c:	4413      	add	r3, r2
 802d96e:	b29a      	uxth	r2, r3
 802d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d972:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 802d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d976:	681b      	ldr	r3, [r3, #0]
 802d978:	2b00      	cmp	r3, #0
 802d97a:	d110      	bne.n	802d99e <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 802d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d97e:	685b      	ldr	r3, [r3, #4]
 802d980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d982:	8952      	ldrh	r2, [r2, #10]
 802d984:	4413      	add	r3, r2
 802d986:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802d988:	68b9      	ldr	r1, [r7, #8]
 802d98a:	4618      	mov	r0, r3
 802d98c:	f003 fc24 	bl	80311d8 <memcpy>
        p->len += oversize_used;
 802d990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d992:	895a      	ldrh	r2, [r3, #10]
 802d994:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d996:	4413      	add	r3, r2
 802d998:	b29a      	uxth	r2, r3
 802d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d99c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 802d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9a0:	681b      	ldr	r3, [r3, #0]
 802d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9a6:	2b00      	cmp	r3, #0
 802d9a8:	d1dd      	bne.n	802d966 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 802d9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9ac:	891a      	ldrh	r2, [r3, #8]
 802d9ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802d9b0:	4413      	add	r3, r2
 802d9b2:	b29a      	uxth	r2, r3
 802d9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9b6:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 802d9b8:	8a7a      	ldrh	r2, [r7, #18]
 802d9ba:	68fb      	ldr	r3, [r7, #12]
 802d9bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 802d9c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d9c2:	2b00      	cmp	r3, #0
 802d9c4:	d018      	beq.n	802d9f8 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 802d9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9c8:	2b00      	cmp	r3, #0
 802d9ca:	d106      	bne.n	802d9da <tcp_write+0x4f2>
 802d9cc:	4b2a      	ldr	r3, [pc, #168]	; (802da78 <tcp_write+0x590>)
 802d9ce:	f240 22ba 	movw	r2, #698	; 0x2ba
 802d9d2:	492e      	ldr	r1, [pc, #184]	; (802da8c <tcp_write+0x5a4>)
 802d9d4:	482a      	ldr	r0, [pc, #168]	; (802da80 <tcp_write+0x598>)
 802d9d6:	f003 fcf5 	bl	80313c4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 802d9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9dc:	685b      	ldr	r3, [r3, #4]
 802d9de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802d9e0:	4618      	mov	r0, r3
 802d9e2:	f7fb fb6f 	bl	80290c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802d9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9e8:	891a      	ldrh	r2, [r3, #8]
 802d9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d9ec:	891b      	ldrh	r3, [r3, #8]
 802d9ee:	4413      	add	r3, r2
 802d9f0:	b29a      	uxth	r2, r3
 802d9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d9f4:	811a      	strh	r2, [r3, #8]
 802d9f6:	e037      	b.n	802da68 <tcp_write+0x580>
  } else if (extendlen > 0) {
 802d9f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802d9fa:	2b00      	cmp	r3, #0
 802d9fc:	d034      	beq.n	802da68 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802d9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da00:	2b00      	cmp	r3, #0
 802da02:	d003      	beq.n	802da0c <tcp_write+0x524>
 802da04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da06:	685b      	ldr	r3, [r3, #4]
 802da08:	2b00      	cmp	r3, #0
 802da0a:	d106      	bne.n	802da1a <tcp_write+0x532>
 802da0c:	4b1a      	ldr	r3, [pc, #104]	; (802da78 <tcp_write+0x590>)
 802da0e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 802da12:	491f      	ldr	r1, [pc, #124]	; (802da90 <tcp_write+0x5a8>)
 802da14:	481a      	ldr	r0, [pc, #104]	; (802da80 <tcp_write+0x598>)
 802da16:	f003 fcd5 	bl	80313c4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802da1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da1c:	685b      	ldr	r3, [r3, #4]
 802da1e:	62bb      	str	r3, [r7, #40]	; 0x28
 802da20:	e009      	b.n	802da36 <tcp_write+0x54e>
      p->tot_len += extendlen;
 802da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da24:	891a      	ldrh	r2, [r3, #8]
 802da26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802da28:	4413      	add	r3, r2
 802da2a:	b29a      	uxth	r2, r3
 802da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da2e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da32:	681b      	ldr	r3, [r3, #0]
 802da34:	62bb      	str	r3, [r7, #40]	; 0x28
 802da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da38:	681b      	ldr	r3, [r3, #0]
 802da3a:	2b00      	cmp	r3, #0
 802da3c:	d1f1      	bne.n	802da22 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 802da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da40:	891a      	ldrh	r2, [r3, #8]
 802da42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802da44:	4413      	add	r3, r2
 802da46:	b29a      	uxth	r2, r3
 802da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da4a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 802da4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da4e:	895a      	ldrh	r2, [r3, #10]
 802da50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802da52:	4413      	add	r3, r2
 802da54:	b29a      	uxth	r2, r3
 802da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da58:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 802da5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da5c:	891a      	ldrh	r2, [r3, #8]
 802da5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802da60:	4413      	add	r3, r2
 802da62:	b29a      	uxth	r2, r3
 802da64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da66:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 802da68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da6a:	2b00      	cmp	r3, #0
 802da6c:	d112      	bne.n	802da94 <tcp_write+0x5ac>
    pcb->unsent = queue;
 802da6e:	68fb      	ldr	r3, [r7, #12]
 802da70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802da72:	669a      	str	r2, [r3, #104]	; 0x68
 802da74:	e011      	b.n	802da9a <tcp_write+0x5b2>
 802da76:	bf00      	nop
 802da78:	08034748 	.word	0x08034748
 802da7c:	08034958 	.word	0x08034958
 802da80:	080347ac 	.word	0x080347ac
 802da84:	08034998 	.word	0x08034998
 802da88:	080349a8 	.word	0x080349a8
 802da8c:	080349bc 	.word	0x080349bc
 802da90:	080349f4 	.word	0x080349f4
  } else {
    last_unsent->next = queue;
 802da94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802da96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802da98:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 802da9a:	68fb      	ldr	r3, [r7, #12]
 802da9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802da9e:	88fb      	ldrh	r3, [r7, #6]
 802daa0:	441a      	add	r2, r3
 802daa2:	68fb      	ldr	r3, [r7, #12]
 802daa4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 802daa6:	68fb      	ldr	r3, [r7, #12]
 802daa8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802daac:	88fb      	ldrh	r3, [r7, #6]
 802daae:	1ad3      	subs	r3, r2, r3
 802dab0:	b29a      	uxth	r2, r3
 802dab2:	68fb      	ldr	r3, [r7, #12]
 802dab4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 802dab8:	68fb      	ldr	r3, [r7, #12]
 802daba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802dabe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 802dac2:	68fb      	ldr	r3, [r7, #12]
 802dac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802dac8:	2b00      	cmp	r3, #0
 802daca:	d00e      	beq.n	802daea <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 802dacc:	68fb      	ldr	r3, [r7, #12]
 802dace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dad0:	2b00      	cmp	r3, #0
 802dad2:	d10a      	bne.n	802daea <tcp_write+0x602>
 802dad4:	68fb      	ldr	r3, [r7, #12]
 802dad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dad8:	2b00      	cmp	r3, #0
 802dada:	d106      	bne.n	802daea <tcp_write+0x602>
 802dadc:	4b2c      	ldr	r3, [pc, #176]	; (802db90 <tcp_write+0x6a8>)
 802dade:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 802dae2:	492c      	ldr	r1, [pc, #176]	; (802db94 <tcp_write+0x6ac>)
 802dae4:	482c      	ldr	r0, [pc, #176]	; (802db98 <tcp_write+0x6b0>)
 802dae6:	f003 fc6d 	bl	80313c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 802daea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802daec:	2b00      	cmp	r3, #0
 802daee:	d016      	beq.n	802db1e <tcp_write+0x636>
 802daf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802daf2:	68db      	ldr	r3, [r3, #12]
 802daf4:	2b00      	cmp	r3, #0
 802daf6:	d012      	beq.n	802db1e <tcp_write+0x636>
 802daf8:	797b      	ldrb	r3, [r7, #5]
 802dafa:	f003 0302 	and.w	r3, r3, #2
 802dafe:	2b00      	cmp	r3, #0
 802db00:	d10d      	bne.n	802db1e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802db02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802db04:	68db      	ldr	r3, [r3, #12]
 802db06:	899b      	ldrh	r3, [r3, #12]
 802db08:	b29c      	uxth	r4, r3
 802db0a:	2008      	movs	r0, #8
 802db0c:	f7fa f8e3 	bl	8027cd6 <lwip_htons>
 802db10:	4603      	mov	r3, r0
 802db12:	461a      	mov	r2, r3
 802db14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802db16:	68db      	ldr	r3, [r3, #12]
 802db18:	4322      	orrs	r2, r4
 802db1a:	b292      	uxth	r2, r2
 802db1c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 802db1e:	2300      	movs	r3, #0
 802db20:	e031      	b.n	802db86 <tcp_write+0x69e>
          goto memerr;
 802db22:	bf00      	nop
 802db24:	e006      	b.n	802db34 <tcp_write+0x64c>
            goto memerr;
 802db26:	bf00      	nop
 802db28:	e004      	b.n	802db34 <tcp_write+0x64c>
        goto memerr;
 802db2a:	bf00      	nop
 802db2c:	e002      	b.n	802db34 <tcp_write+0x64c>
        goto memerr;
 802db2e:	bf00      	nop
 802db30:	e000      	b.n	802db34 <tcp_write+0x64c>
      goto memerr;
 802db32:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 802db34:	68fb      	ldr	r3, [r7, #12]
 802db36:	7e9b      	ldrb	r3, [r3, #26]
 802db38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802db3c:	b2da      	uxtb	r2, r3
 802db3e:	68fb      	ldr	r3, [r7, #12]
 802db40:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 802db42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802db44:	2b00      	cmp	r3, #0
 802db46:	d002      	beq.n	802db4e <tcp_write+0x666>
    pbuf_free(concat_p);
 802db48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802db4a:	f7fb f9ed 	bl	8028f28 <pbuf_free>
  }
  if (queue != NULL) {
 802db4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802db50:	2b00      	cmp	r3, #0
 802db52:	d002      	beq.n	802db5a <tcp_write+0x672>
    tcp_segs_free(queue);
 802db54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802db56:	f7fc fcc6 	bl	802a4e6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 802db5a:	68fb      	ldr	r3, [r7, #12]
 802db5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802db60:	2b00      	cmp	r3, #0
 802db62:	d00e      	beq.n	802db82 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 802db64:	68fb      	ldr	r3, [r7, #12]
 802db66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802db68:	2b00      	cmp	r3, #0
 802db6a:	d10a      	bne.n	802db82 <tcp_write+0x69a>
 802db6c:	68fb      	ldr	r3, [r7, #12]
 802db6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802db70:	2b00      	cmp	r3, #0
 802db72:	d106      	bne.n	802db82 <tcp_write+0x69a>
 802db74:	4b06      	ldr	r3, [pc, #24]	; (802db90 <tcp_write+0x6a8>)
 802db76:	f240 3201 	movw	r2, #769	; 0x301
 802db7a:	4906      	ldr	r1, [pc, #24]	; (802db94 <tcp_write+0x6ac>)
 802db7c:	4806      	ldr	r0, [pc, #24]	; (802db98 <tcp_write+0x6b0>)
 802db7e:	f003 fc21 	bl	80313c4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 802db82:	f04f 33ff 	mov.w	r3, #4294967295
}
 802db86:	4618      	mov	r0, r3
 802db88:	375c      	adds	r7, #92	; 0x5c
 802db8a:	46bd      	mov	sp, r7
 802db8c:	bd90      	pop	{r4, r7, pc}
 802db8e:	bf00      	nop
 802db90:	08034748 	.word	0x08034748
 802db94:	08034a2c 	.word	0x08034a2c
 802db98:	080347ac 	.word	0x080347ac

0802db9c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 802db9c:	b580      	push	{r7, lr}
 802db9e:	b08a      	sub	sp, #40	; 0x28
 802dba0:	af02      	add	r7, sp, #8
 802dba2:	6078      	str	r0, [r7, #4]
 802dba4:	460b      	mov	r3, r1
 802dba6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 802dba8:	2300      	movs	r3, #0
 802dbaa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 802dbac:	2300      	movs	r3, #0
 802dbae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 802dbb0:	78fb      	ldrb	r3, [r7, #3]
 802dbb2:	f003 0303 	and.w	r3, r3, #3
 802dbb6:	2b00      	cmp	r3, #0
 802dbb8:	d106      	bne.n	802dbc8 <tcp_enqueue_flags+0x2c>
 802dbba:	4b6f      	ldr	r3, [pc, #444]	; (802dd78 <tcp_enqueue_flags+0x1dc>)
 802dbbc:	f240 321a 	movw	r2, #794	; 0x31a
 802dbc0:	496e      	ldr	r1, [pc, #440]	; (802dd7c <tcp_enqueue_flags+0x1e0>)
 802dbc2:	486f      	ldr	r0, [pc, #444]	; (802dd80 <tcp_enqueue_flags+0x1e4>)
 802dbc4:	f003 fbfe 	bl	80313c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 802dbc8:	687b      	ldr	r3, [r7, #4]
 802dbca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802dbce:	2b08      	cmp	r3, #8
 802dbd0:	d806      	bhi.n	802dbe0 <tcp_enqueue_flags+0x44>
 802dbd2:	687b      	ldr	r3, [r7, #4]
 802dbd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802dbd8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802dbdc:	4293      	cmp	r3, r2
 802dbde:	d90e      	bls.n	802dbfe <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 802dbe0:	78fb      	ldrb	r3, [r7, #3]
 802dbe2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 802dbe6:	2b00      	cmp	r3, #0
 802dbe8:	d109      	bne.n	802dbfe <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 802dbea:	687b      	ldr	r3, [r7, #4]
 802dbec:	7e9b      	ldrb	r3, [r3, #26]
 802dbee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802dbf2:	b2da      	uxtb	r2, r3
 802dbf4:	687b      	ldr	r3, [r7, #4]
 802dbf6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802dbf8:	f04f 33ff 	mov.w	r3, #4294967295
 802dbfc:	e0b7      	b.n	802dd6e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 802dbfe:	78fb      	ldrb	r3, [r7, #3]
 802dc00:	f003 0302 	and.w	r3, r3, #2
 802dc04:	2b00      	cmp	r3, #0
 802dc06:	d001      	beq.n	802dc0c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 802dc08:	2301      	movs	r3, #1
 802dc0a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 802dc0c:	7ffb      	ldrb	r3, [r7, #31]
 802dc0e:	009b      	lsls	r3, r3, #2
 802dc10:	b2db      	uxtb	r3, r3
 802dc12:	f003 0304 	and.w	r3, r3, #4
 802dc16:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802dc18:	7dfb      	ldrb	r3, [r7, #23]
 802dc1a:	b29b      	uxth	r3, r3
 802dc1c:	2200      	movs	r2, #0
 802dc1e:	4619      	mov	r1, r3
 802dc20:	2000      	movs	r0, #0
 802dc22:	f7fa fe09 	bl	8028838 <pbuf_alloc>
 802dc26:	6138      	str	r0, [r7, #16]
 802dc28:	693b      	ldr	r3, [r7, #16]
 802dc2a:	2b00      	cmp	r3, #0
 802dc2c:	d109      	bne.n	802dc42 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 802dc2e:	687b      	ldr	r3, [r7, #4]
 802dc30:	7e9b      	ldrb	r3, [r3, #26]
 802dc32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802dc36:	b2da      	uxtb	r2, r3
 802dc38:	687b      	ldr	r3, [r7, #4]
 802dc3a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 802dc3c:	f04f 33ff 	mov.w	r3, #4294967295
 802dc40:	e095      	b.n	802dd6e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 802dc42:	693b      	ldr	r3, [r7, #16]
 802dc44:	895a      	ldrh	r2, [r3, #10]
 802dc46:	7dfb      	ldrb	r3, [r7, #23]
 802dc48:	b29b      	uxth	r3, r3
 802dc4a:	429a      	cmp	r2, r3
 802dc4c:	d206      	bcs.n	802dc5c <tcp_enqueue_flags+0xc0>
 802dc4e:	4b4a      	ldr	r3, [pc, #296]	; (802dd78 <tcp_enqueue_flags+0x1dc>)
 802dc50:	f44f 7250 	mov.w	r2, #832	; 0x340
 802dc54:	494b      	ldr	r1, [pc, #300]	; (802dd84 <tcp_enqueue_flags+0x1e8>)
 802dc56:	484a      	ldr	r0, [pc, #296]	; (802dd80 <tcp_enqueue_flags+0x1e4>)
 802dc58:	f003 fbb4 	bl	80313c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 802dc5c:	687b      	ldr	r3, [r7, #4]
 802dc5e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802dc60:	78fa      	ldrb	r2, [r7, #3]
 802dc62:	7ffb      	ldrb	r3, [r7, #31]
 802dc64:	9300      	str	r3, [sp, #0]
 802dc66:	460b      	mov	r3, r1
 802dc68:	6939      	ldr	r1, [r7, #16]
 802dc6a:	6878      	ldr	r0, [r7, #4]
 802dc6c:	f7ff fadc 	bl	802d228 <tcp_create_segment>
 802dc70:	60f8      	str	r0, [r7, #12]
 802dc72:	68fb      	ldr	r3, [r7, #12]
 802dc74:	2b00      	cmp	r3, #0
 802dc76:	d109      	bne.n	802dc8c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 802dc78:	687b      	ldr	r3, [r7, #4]
 802dc7a:	7e9b      	ldrb	r3, [r3, #26]
 802dc7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802dc80:	b2da      	uxtb	r2, r3
 802dc82:	687b      	ldr	r3, [r7, #4]
 802dc84:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 802dc86:	f04f 33ff 	mov.w	r3, #4294967295
 802dc8a:	e070      	b.n	802dd6e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 802dc8c:	68fb      	ldr	r3, [r7, #12]
 802dc8e:	68db      	ldr	r3, [r3, #12]
 802dc90:	f003 0303 	and.w	r3, r3, #3
 802dc94:	2b00      	cmp	r3, #0
 802dc96:	d006      	beq.n	802dca6 <tcp_enqueue_flags+0x10a>
 802dc98:	4b37      	ldr	r3, [pc, #220]	; (802dd78 <tcp_enqueue_flags+0x1dc>)
 802dc9a:	f240 3249 	movw	r2, #841	; 0x349
 802dc9e:	493a      	ldr	r1, [pc, #232]	; (802dd88 <tcp_enqueue_flags+0x1ec>)
 802dca0:	4837      	ldr	r0, [pc, #220]	; (802dd80 <tcp_enqueue_flags+0x1e4>)
 802dca2:	f003 fb8f 	bl	80313c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802dca6:	68fb      	ldr	r3, [r7, #12]
 802dca8:	891b      	ldrh	r3, [r3, #8]
 802dcaa:	2b00      	cmp	r3, #0
 802dcac:	d006      	beq.n	802dcbc <tcp_enqueue_flags+0x120>
 802dcae:	4b32      	ldr	r3, [pc, #200]	; (802dd78 <tcp_enqueue_flags+0x1dc>)
 802dcb0:	f240 324a 	movw	r2, #842	; 0x34a
 802dcb4:	4935      	ldr	r1, [pc, #212]	; (802dd8c <tcp_enqueue_flags+0x1f0>)
 802dcb6:	4832      	ldr	r0, [pc, #200]	; (802dd80 <tcp_enqueue_flags+0x1e4>)
 802dcb8:	f003 fb84 	bl	80313c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 802dcbc:	687b      	ldr	r3, [r7, #4]
 802dcbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dcc0:	2b00      	cmp	r3, #0
 802dcc2:	d103      	bne.n	802dccc <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 802dcc4:	687b      	ldr	r3, [r7, #4]
 802dcc6:	68fa      	ldr	r2, [r7, #12]
 802dcc8:	669a      	str	r2, [r3, #104]	; 0x68
 802dcca:	e00d      	b.n	802dce8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 802dccc:	687b      	ldr	r3, [r7, #4]
 802dcce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dcd0:	61bb      	str	r3, [r7, #24]
 802dcd2:	e002      	b.n	802dcda <tcp_enqueue_flags+0x13e>
 802dcd4:	69bb      	ldr	r3, [r7, #24]
 802dcd6:	681b      	ldr	r3, [r3, #0]
 802dcd8:	61bb      	str	r3, [r7, #24]
 802dcda:	69bb      	ldr	r3, [r7, #24]
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	2b00      	cmp	r3, #0
 802dce0:	d1f8      	bne.n	802dcd4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 802dce2:	69bb      	ldr	r3, [r7, #24]
 802dce4:	68fa      	ldr	r2, [r7, #12]
 802dce6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 802dce8:	687b      	ldr	r3, [r7, #4]
 802dcea:	2200      	movs	r2, #0
 802dcec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 802dcf0:	78fb      	ldrb	r3, [r7, #3]
 802dcf2:	f003 0302 	and.w	r3, r3, #2
 802dcf6:	2b00      	cmp	r3, #0
 802dcf8:	d104      	bne.n	802dd04 <tcp_enqueue_flags+0x168>
 802dcfa:	78fb      	ldrb	r3, [r7, #3]
 802dcfc:	f003 0301 	and.w	r3, r3, #1
 802dd00:	2b00      	cmp	r3, #0
 802dd02:	d004      	beq.n	802dd0e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 802dd04:	687b      	ldr	r3, [r7, #4]
 802dd06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802dd08:	1c5a      	adds	r2, r3, #1
 802dd0a:	687b      	ldr	r3, [r7, #4]
 802dd0c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 802dd0e:	78fb      	ldrb	r3, [r7, #3]
 802dd10:	f003 0301 	and.w	r3, r3, #1
 802dd14:	2b00      	cmp	r3, #0
 802dd16:	d006      	beq.n	802dd26 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 802dd18:	687b      	ldr	r3, [r7, #4]
 802dd1a:	7e9b      	ldrb	r3, [r3, #26]
 802dd1c:	f043 0320 	orr.w	r3, r3, #32
 802dd20:	b2da      	uxtb	r2, r3
 802dd22:	687b      	ldr	r3, [r7, #4]
 802dd24:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802dd26:	68fb      	ldr	r3, [r7, #12]
 802dd28:	685b      	ldr	r3, [r3, #4]
 802dd2a:	4618      	mov	r0, r3
 802dd2c:	f7fb f990 	bl	8029050 <pbuf_clen>
 802dd30:	4603      	mov	r3, r0
 802dd32:	461a      	mov	r2, r3
 802dd34:	687b      	ldr	r3, [r7, #4]
 802dd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802dd3a:	4413      	add	r3, r2
 802dd3c:	b29a      	uxth	r2, r3
 802dd3e:	687b      	ldr	r3, [r7, #4]
 802dd40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 802dd44:	687b      	ldr	r3, [r7, #4]
 802dd46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802dd4a:	2b00      	cmp	r3, #0
 802dd4c:	d00e      	beq.n	802dd6c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802dd4e:	687b      	ldr	r3, [r7, #4]
 802dd50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dd52:	2b00      	cmp	r3, #0
 802dd54:	d10a      	bne.n	802dd6c <tcp_enqueue_flags+0x1d0>
 802dd56:	687b      	ldr	r3, [r7, #4]
 802dd58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dd5a:	2b00      	cmp	r3, #0
 802dd5c:	d106      	bne.n	802dd6c <tcp_enqueue_flags+0x1d0>
 802dd5e:	4b06      	ldr	r3, [pc, #24]	; (802dd78 <tcp_enqueue_flags+0x1dc>)
 802dd60:	f44f 725b 	mov.w	r2, #876	; 0x36c
 802dd64:	490a      	ldr	r1, [pc, #40]	; (802dd90 <tcp_enqueue_flags+0x1f4>)
 802dd66:	4806      	ldr	r0, [pc, #24]	; (802dd80 <tcp_enqueue_flags+0x1e4>)
 802dd68:	f003 fb2c 	bl	80313c4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 802dd6c:	2300      	movs	r3, #0
}
 802dd6e:	4618      	mov	r0, r3
 802dd70:	3720      	adds	r7, #32
 802dd72:	46bd      	mov	sp, r7
 802dd74:	bd80      	pop	{r7, pc}
 802dd76:	bf00      	nop
 802dd78:	08034748 	.word	0x08034748
 802dd7c:	08034a4c 	.word	0x08034a4c
 802dd80:	080347ac 	.word	0x080347ac
 802dd84:	08034aa4 	.word	0x08034aa4
 802dd88:	08034ae0 	.word	0x08034ae0
 802dd8c:	08034af8 	.word	0x08034af8
 802dd90:	08034b24 	.word	0x08034b24

0802dd94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 802dd94:	b590      	push	{r4, r7, lr}
 802dd96:	b08b      	sub	sp, #44	; 0x2c
 802dd98:	af04      	add	r7, sp, #16
 802dd9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 802dd9c:	2300      	movs	r3, #0
 802dd9e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 802dda0:	7dbb      	ldrb	r3, [r7, #22]
 802dda2:	b29c      	uxth	r4, r3
 802dda4:	687b      	ldr	r3, [r7, #4]
 802dda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802dda8:	4618      	mov	r0, r3
 802ddaa:	f7f9 ffa2 	bl	8027cf2 <lwip_htonl>
 802ddae:	4603      	mov	r3, r0
 802ddb0:	2200      	movs	r2, #0
 802ddb2:	4621      	mov	r1, r4
 802ddb4:	6878      	ldr	r0, [r7, #4]
 802ddb6:	f7ff f97d 	bl	802d0b4 <tcp_output_alloc_header>
 802ddba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802ddbc:	693b      	ldr	r3, [r7, #16]
 802ddbe:	2b00      	cmp	r3, #0
 802ddc0:	d109      	bne.n	802ddd6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 802ddc2:	687b      	ldr	r3, [r7, #4]
 802ddc4:	7e9b      	ldrb	r3, [r3, #26]
 802ddc6:	f043 0303 	orr.w	r3, r3, #3
 802ddca:	b2da      	uxtb	r2, r3
 802ddcc:	687b      	ldr	r3, [r7, #4]
 802ddce:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802ddd0:	f06f 0301 	mvn.w	r3, #1
 802ddd4:	e036      	b.n	802de44 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 802ddd6:	687b      	ldr	r3, [r7, #4]
 802ddd8:	3304      	adds	r3, #4
 802ddda:	4618      	mov	r0, r3
 802dddc:	f002 f854 	bl	802fe88 <ip4_route>
 802dde0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 802dde2:	68fb      	ldr	r3, [r7, #12]
 802dde4:	2b00      	cmp	r3, #0
 802dde6:	d102      	bne.n	802ddee <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 802dde8:	23fc      	movs	r3, #252	; 0xfc
 802ddea:	75fb      	strb	r3, [r7, #23]
 802ddec:	e012      	b.n	802de14 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 802ddee:	6879      	ldr	r1, [r7, #4]
 802ddf0:	687b      	ldr	r3, [r7, #4]
 802ddf2:	1d18      	adds	r0, r3, #4
 802ddf4:	687b      	ldr	r3, [r7, #4]
 802ddf6:	7a9c      	ldrb	r4, [r3, #10]
 802ddf8:	687b      	ldr	r3, [r7, #4]
 802ddfa:	7a5b      	ldrb	r3, [r3, #9]
 802ddfc:	68fa      	ldr	r2, [r7, #12]
 802ddfe:	9202      	str	r2, [sp, #8]
 802de00:	2206      	movs	r2, #6
 802de02:	9201      	str	r2, [sp, #4]
 802de04:	9300      	str	r3, [sp, #0]
 802de06:	4623      	mov	r3, r4
 802de08:	4602      	mov	r2, r0
 802de0a:	6938      	ldr	r0, [r7, #16]
 802de0c:	f002 f9e6 	bl	80301dc <ip4_output_if>
 802de10:	4603      	mov	r3, r0
 802de12:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 802de14:	6938      	ldr	r0, [r7, #16]
 802de16:	f7fb f887 	bl	8028f28 <pbuf_free>

  if (err != ERR_OK) {
 802de1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802de1e:	2b00      	cmp	r3, #0
 802de20:	d007      	beq.n	802de32 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 802de22:	687b      	ldr	r3, [r7, #4]
 802de24:	7e9b      	ldrb	r3, [r3, #26]
 802de26:	f043 0303 	orr.w	r3, r3, #3
 802de2a:	b2da      	uxtb	r2, r3
 802de2c:	687b      	ldr	r3, [r7, #4]
 802de2e:	769a      	strb	r2, [r3, #26]
 802de30:	e006      	b.n	802de40 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 802de32:	687b      	ldr	r3, [r7, #4]
 802de34:	7e9b      	ldrb	r3, [r3, #26]
 802de36:	f023 0303 	bic.w	r3, r3, #3
 802de3a:	b2da      	uxtb	r2, r3
 802de3c:	687b      	ldr	r3, [r7, #4]
 802de3e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 802de40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802de44:	4618      	mov	r0, r3
 802de46:	371c      	adds	r7, #28
 802de48:	46bd      	mov	sp, r7
 802de4a:	bd90      	pop	{r4, r7, pc}

0802de4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 802de4c:	b5b0      	push	{r4, r5, r7, lr}
 802de4e:	b08a      	sub	sp, #40	; 0x28
 802de50:	af00      	add	r7, sp, #0
 802de52:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 802de54:	687b      	ldr	r3, [r7, #4]
 802de56:	7d1b      	ldrb	r3, [r3, #20]
 802de58:	2b01      	cmp	r3, #1
 802de5a:	d106      	bne.n	802de6a <tcp_output+0x1e>
 802de5c:	4b99      	ldr	r3, [pc, #612]	; (802e0c4 <tcp_output+0x278>)
 802de5e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 802de62:	4999      	ldr	r1, [pc, #612]	; (802e0c8 <tcp_output+0x27c>)
 802de64:	4899      	ldr	r0, [pc, #612]	; (802e0cc <tcp_output+0x280>)
 802de66:	f003 faad 	bl	80313c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 802de6a:	4b99      	ldr	r3, [pc, #612]	; (802e0d0 <tcp_output+0x284>)
 802de6c:	681b      	ldr	r3, [r3, #0]
 802de6e:	687a      	ldr	r2, [r7, #4]
 802de70:	429a      	cmp	r2, r3
 802de72:	d101      	bne.n	802de78 <tcp_output+0x2c>
    return ERR_OK;
 802de74:	2300      	movs	r3, #0
 802de76:	e1cb      	b.n	802e210 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802de78:	687b      	ldr	r3, [r7, #4]
 802de7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802de7e:	687b      	ldr	r3, [r7, #4]
 802de80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802de84:	4293      	cmp	r3, r2
 802de86:	bf28      	it	cs
 802de88:	4613      	movcs	r3, r2
 802de8a:	b29b      	uxth	r3, r3
 802de8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 802de8e:	687b      	ldr	r3, [r7, #4]
 802de90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802de92:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 802de94:	687b      	ldr	r3, [r7, #4]
 802de96:	7e9b      	ldrb	r3, [r3, #26]
 802de98:	f003 0302 	and.w	r3, r3, #2
 802de9c:	2b00      	cmp	r3, #0
 802de9e:	d017      	beq.n	802ded0 <tcp_output+0x84>
 802dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dea2:	2b00      	cmp	r3, #0
 802dea4:	d00f      	beq.n	802dec6 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 802dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dea8:	68db      	ldr	r3, [r3, #12]
 802deaa:	685b      	ldr	r3, [r3, #4]
 802deac:	4618      	mov	r0, r3
 802deae:	f7f9 ff20 	bl	8027cf2 <lwip_htonl>
 802deb2:	4602      	mov	r2, r0
 802deb4:	687b      	ldr	r3, [r7, #4]
 802deb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802deb8:	1ad3      	subs	r3, r2, r3
 802deba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802debc:	8912      	ldrh	r2, [r2, #8]
 802debe:	4413      	add	r3, r2
     (seg == NULL ||
 802dec0:	69ba      	ldr	r2, [r7, #24]
 802dec2:	429a      	cmp	r2, r3
 802dec4:	d204      	bcs.n	802ded0 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 802dec6:	6878      	ldr	r0, [r7, #4]
 802dec8:	f7ff ff64 	bl	802dd94 <tcp_send_empty_ack>
 802decc:	4603      	mov	r3, r0
 802dece:	e19f      	b.n	802e210 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 802ded0:	687b      	ldr	r3, [r7, #4]
 802ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ded4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 802ded6:	6a3b      	ldr	r3, [r7, #32]
 802ded8:	2b00      	cmp	r3, #0
 802deda:	d007      	beq.n	802deec <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 802dedc:	e002      	b.n	802dee4 <tcp_output+0x98>
 802dede:	6a3b      	ldr	r3, [r7, #32]
 802dee0:	681b      	ldr	r3, [r3, #0]
 802dee2:	623b      	str	r3, [r7, #32]
 802dee4:	6a3b      	ldr	r3, [r7, #32]
 802dee6:	681b      	ldr	r3, [r3, #0]
 802dee8:	2b00      	cmp	r3, #0
 802deea:	d1f8      	bne.n	802dede <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 802deec:	687b      	ldr	r3, [r7, #4]
 802deee:	3304      	adds	r3, #4
 802def0:	4618      	mov	r0, r3
 802def2:	f001 ffc9 	bl	802fe88 <ip4_route>
 802def6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 802def8:	697b      	ldr	r3, [r7, #20]
 802defa:	2b00      	cmp	r3, #0
 802defc:	d102      	bne.n	802df04 <tcp_output+0xb8>
    return ERR_RTE;
 802defe:	f06f 0303 	mvn.w	r3, #3
 802df02:	e185      	b.n	802e210 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 802df04:	687b      	ldr	r3, [r7, #4]
 802df06:	2b00      	cmp	r3, #0
 802df08:	d003      	beq.n	802df12 <tcp_output+0xc6>
 802df0a:	687b      	ldr	r3, [r7, #4]
 802df0c:	681b      	ldr	r3, [r3, #0]
 802df0e:	2b00      	cmp	r3, #0
 802df10:	d111      	bne.n	802df36 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 802df12:	697b      	ldr	r3, [r7, #20]
 802df14:	2b00      	cmp	r3, #0
 802df16:	d002      	beq.n	802df1e <tcp_output+0xd2>
 802df18:	697b      	ldr	r3, [r7, #20]
 802df1a:	3304      	adds	r3, #4
 802df1c:	e000      	b.n	802df20 <tcp_output+0xd4>
 802df1e:	2300      	movs	r3, #0
 802df20:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 802df22:	693b      	ldr	r3, [r7, #16]
 802df24:	2b00      	cmp	r3, #0
 802df26:	d102      	bne.n	802df2e <tcp_output+0xe2>
      return ERR_RTE;
 802df28:	f06f 0303 	mvn.w	r3, #3
 802df2c:	e170      	b.n	802e210 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 802df2e:	693b      	ldr	r3, [r7, #16]
 802df30:	681a      	ldr	r2, [r3, #0]
 802df32:	687b      	ldr	r3, [r7, #4]
 802df34:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 802df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802df38:	2b00      	cmp	r3, #0
 802df3a:	f000 813f 	beq.w	802e1bc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 802df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802df40:	68db      	ldr	r3, [r3, #12]
 802df42:	685b      	ldr	r3, [r3, #4]
 802df44:	4618      	mov	r0, r3
 802df46:	f7f9 fed4 	bl	8027cf2 <lwip_htonl>
 802df4a:	4602      	mov	r2, r0
 802df4c:	687b      	ldr	r3, [r7, #4]
 802df4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802df50:	1ad3      	subs	r3, r2, r3
 802df52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802df54:	8912      	ldrh	r2, [r2, #8]
 802df56:	4413      	add	r3, r2
  if (seg != NULL &&
 802df58:	69ba      	ldr	r2, [r7, #24]
 802df5a:	429a      	cmp	r2, r3
 802df5c:	f080 812e 	bcs.w	802e1bc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 802df60:	69bb      	ldr	r3, [r7, #24]
 802df62:	2b00      	cmp	r3, #0
 802df64:	f000 812a 	beq.w	802e1bc <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 802df68:	687b      	ldr	r3, [r7, #4]
 802df6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802df6e:	461a      	mov	r2, r3
 802df70:	69bb      	ldr	r3, [r7, #24]
 802df72:	4293      	cmp	r3, r2
 802df74:	f040 8122 	bne.w	802e1bc <tcp_output+0x370>
 802df78:	687b      	ldr	r3, [r7, #4]
 802df7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802df7c:	2b00      	cmp	r3, #0
 802df7e:	f040 811d 	bne.w	802e1bc <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 802df82:	687b      	ldr	r3, [r7, #4]
 802df84:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 802df88:	2b00      	cmp	r3, #0
 802df8a:	f040 812c 	bne.w	802e1e6 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 802df8e:	687b      	ldr	r3, [r7, #4]
 802df90:	2200      	movs	r2, #0
 802df92:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 802df96:	687b      	ldr	r3, [r7, #4]
 802df98:	2201      	movs	r2, #1
 802df9a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 802df9e:	e122      	b.n	802e1e6 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 802dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dfa2:	68db      	ldr	r3, [r3, #12]
 802dfa4:	899b      	ldrh	r3, [r3, #12]
 802dfa6:	b29b      	uxth	r3, r3
 802dfa8:	4618      	mov	r0, r3
 802dfaa:	f7f9 fe94 	bl	8027cd6 <lwip_htons>
 802dfae:	4603      	mov	r3, r0
 802dfb0:	f003 0304 	and.w	r3, r3, #4
 802dfb4:	2b00      	cmp	r3, #0
 802dfb6:	d006      	beq.n	802dfc6 <tcp_output+0x17a>
 802dfb8:	4b42      	ldr	r3, [pc, #264]	; (802e0c4 <tcp_output+0x278>)
 802dfba:	f240 4245 	movw	r2, #1093	; 0x445
 802dfbe:	4945      	ldr	r1, [pc, #276]	; (802e0d4 <tcp_output+0x288>)
 802dfc0:	4842      	ldr	r0, [pc, #264]	; (802e0cc <tcp_output+0x280>)
 802dfc2:	f003 f9ff 	bl	80313c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 802dfc6:	687b      	ldr	r3, [r7, #4]
 802dfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dfca:	2b00      	cmp	r3, #0
 802dfcc:	d01f      	beq.n	802e00e <tcp_output+0x1c2>
 802dfce:	687b      	ldr	r3, [r7, #4]
 802dfd0:	7e9b      	ldrb	r3, [r3, #26]
 802dfd2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 802dfd6:	2b00      	cmp	r3, #0
 802dfd8:	d119      	bne.n	802e00e <tcp_output+0x1c2>
 802dfda:	687b      	ldr	r3, [r7, #4]
 802dfdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dfde:	2b00      	cmp	r3, #0
 802dfe0:	d00b      	beq.n	802dffa <tcp_output+0x1ae>
 802dfe2:	687b      	ldr	r3, [r7, #4]
 802dfe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dfe6:	681b      	ldr	r3, [r3, #0]
 802dfe8:	2b00      	cmp	r3, #0
 802dfea:	d110      	bne.n	802e00e <tcp_output+0x1c2>
 802dfec:	687b      	ldr	r3, [r7, #4]
 802dfee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802dff0:	891a      	ldrh	r2, [r3, #8]
 802dff2:	687b      	ldr	r3, [r7, #4]
 802dff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802dff6:	429a      	cmp	r2, r3
 802dff8:	d209      	bcs.n	802e00e <tcp_output+0x1c2>
 802dffa:	687b      	ldr	r3, [r7, #4]
 802dffc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802e000:	2b00      	cmp	r3, #0
 802e002:	d004      	beq.n	802e00e <tcp_output+0x1c2>
 802e004:	687b      	ldr	r3, [r7, #4]
 802e006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e00a:	2b08      	cmp	r3, #8
 802e00c:	d901      	bls.n	802e012 <tcp_output+0x1c6>
 802e00e:	2301      	movs	r3, #1
 802e010:	e000      	b.n	802e014 <tcp_output+0x1c8>
 802e012:	2300      	movs	r3, #0
 802e014:	2b00      	cmp	r3, #0
 802e016:	d106      	bne.n	802e026 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 802e018:	687b      	ldr	r3, [r7, #4]
 802e01a:	7e9b      	ldrb	r3, [r3, #26]
 802e01c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 802e020:	2b00      	cmp	r3, #0
 802e022:	f000 80e2 	beq.w	802e1ea <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 802e026:	687b      	ldr	r3, [r7, #4]
 802e028:	7d1b      	ldrb	r3, [r3, #20]
 802e02a:	2b02      	cmp	r3, #2
 802e02c:	d00d      	beq.n	802e04a <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 802e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e030:	68db      	ldr	r3, [r3, #12]
 802e032:	899b      	ldrh	r3, [r3, #12]
 802e034:	b29c      	uxth	r4, r3
 802e036:	2010      	movs	r0, #16
 802e038:	f7f9 fe4d 	bl	8027cd6 <lwip_htons>
 802e03c:	4603      	mov	r3, r0
 802e03e:	461a      	mov	r2, r3
 802e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e042:	68db      	ldr	r3, [r3, #12]
 802e044:	4322      	orrs	r2, r4
 802e046:	b292      	uxth	r2, r2
 802e048:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 802e04a:	697a      	ldr	r2, [r7, #20]
 802e04c:	6879      	ldr	r1, [r7, #4]
 802e04e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802e050:	f000 f8e2 	bl	802e218 <tcp_output_segment>
 802e054:	4603      	mov	r3, r0
 802e056:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 802e058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802e05c:	2b00      	cmp	r3, #0
 802e05e:	d009      	beq.n	802e074 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 802e060:	687b      	ldr	r3, [r7, #4]
 802e062:	7e9b      	ldrb	r3, [r3, #26]
 802e064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802e068:	b2da      	uxtb	r2, r3
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	769a      	strb	r2, [r3, #26]
      return err;
 802e06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802e072:	e0cd      	b.n	802e210 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 802e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e076:	681a      	ldr	r2, [r3, #0]
 802e078:	687b      	ldr	r3, [r7, #4]
 802e07a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 802e07c:	687b      	ldr	r3, [r7, #4]
 802e07e:	7d1b      	ldrb	r3, [r3, #20]
 802e080:	2b02      	cmp	r3, #2
 802e082:	d006      	beq.n	802e092 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 802e084:	687b      	ldr	r3, [r7, #4]
 802e086:	7e9b      	ldrb	r3, [r3, #26]
 802e088:	f023 0303 	bic.w	r3, r3, #3
 802e08c:	b2da      	uxtb	r2, r3
 802e08e:	687b      	ldr	r3, [r7, #4]
 802e090:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802e092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e094:	68db      	ldr	r3, [r3, #12]
 802e096:	685b      	ldr	r3, [r3, #4]
 802e098:	4618      	mov	r0, r3
 802e09a:	f7f9 fe2a 	bl	8027cf2 <lwip_htonl>
 802e09e:	4604      	mov	r4, r0
 802e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0a2:	891b      	ldrh	r3, [r3, #8]
 802e0a4:	461d      	mov	r5, r3
 802e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0a8:	68db      	ldr	r3, [r3, #12]
 802e0aa:	899b      	ldrh	r3, [r3, #12]
 802e0ac:	b29b      	uxth	r3, r3
 802e0ae:	4618      	mov	r0, r3
 802e0b0:	f7f9 fe11 	bl	8027cd6 <lwip_htons>
 802e0b4:	4603      	mov	r3, r0
 802e0b6:	f003 0303 	and.w	r3, r3, #3
 802e0ba:	2b00      	cmp	r3, #0
 802e0bc:	d00c      	beq.n	802e0d8 <tcp_output+0x28c>
 802e0be:	2301      	movs	r3, #1
 802e0c0:	e00b      	b.n	802e0da <tcp_output+0x28e>
 802e0c2:	bf00      	nop
 802e0c4:	08034748 	.word	0x08034748
 802e0c8:	08034b4c 	.word	0x08034b4c
 802e0cc:	080347ac 	.word	0x080347ac
 802e0d0:	20006a8c 	.word	0x20006a8c
 802e0d4:	08034b74 	.word	0x08034b74
 802e0d8:	2300      	movs	r3, #0
 802e0da:	442b      	add	r3, r5
 802e0dc:	4423      	add	r3, r4
 802e0de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802e0e0:	687b      	ldr	r3, [r7, #4]
 802e0e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802e0e4:	68bb      	ldr	r3, [r7, #8]
 802e0e6:	1ad3      	subs	r3, r2, r3
 802e0e8:	2b00      	cmp	r3, #0
 802e0ea:	da02      	bge.n	802e0f2 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 802e0ec:	687b      	ldr	r3, [r7, #4]
 802e0ee:	68ba      	ldr	r2, [r7, #8]
 802e0f0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 802e0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0f4:	891b      	ldrh	r3, [r3, #8]
 802e0f6:	461c      	mov	r4, r3
 802e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0fa:	68db      	ldr	r3, [r3, #12]
 802e0fc:	899b      	ldrh	r3, [r3, #12]
 802e0fe:	b29b      	uxth	r3, r3
 802e100:	4618      	mov	r0, r3
 802e102:	f7f9 fde8 	bl	8027cd6 <lwip_htons>
 802e106:	4603      	mov	r3, r0
 802e108:	f003 0303 	and.w	r3, r3, #3
 802e10c:	2b00      	cmp	r3, #0
 802e10e:	d001      	beq.n	802e114 <tcp_output+0x2c8>
 802e110:	2301      	movs	r3, #1
 802e112:	e000      	b.n	802e116 <tcp_output+0x2ca>
 802e114:	2300      	movs	r3, #0
 802e116:	4423      	add	r3, r4
 802e118:	2b00      	cmp	r3, #0
 802e11a:	d049      	beq.n	802e1b0 <tcp_output+0x364>
      seg->next = NULL;
 802e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e11e:	2200      	movs	r2, #0
 802e120:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 802e122:	687b      	ldr	r3, [r7, #4]
 802e124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e126:	2b00      	cmp	r3, #0
 802e128:	d105      	bne.n	802e136 <tcp_output+0x2ea>
        pcb->unacked = seg;
 802e12a:	687b      	ldr	r3, [r7, #4]
 802e12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802e12e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 802e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e132:	623b      	str	r3, [r7, #32]
 802e134:	e03f      	b.n	802e1b6 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 802e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e138:	68db      	ldr	r3, [r3, #12]
 802e13a:	685b      	ldr	r3, [r3, #4]
 802e13c:	4618      	mov	r0, r3
 802e13e:	f7f9 fdd8 	bl	8027cf2 <lwip_htonl>
 802e142:	4604      	mov	r4, r0
 802e144:	6a3b      	ldr	r3, [r7, #32]
 802e146:	68db      	ldr	r3, [r3, #12]
 802e148:	685b      	ldr	r3, [r3, #4]
 802e14a:	4618      	mov	r0, r3
 802e14c:	f7f9 fdd1 	bl	8027cf2 <lwip_htonl>
 802e150:	4603      	mov	r3, r0
 802e152:	1ae3      	subs	r3, r4, r3
 802e154:	2b00      	cmp	r3, #0
 802e156:	da24      	bge.n	802e1a2 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 802e158:	687b      	ldr	r3, [r7, #4]
 802e15a:	336c      	adds	r3, #108	; 0x6c
 802e15c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802e15e:	e002      	b.n	802e166 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 802e160:	69fb      	ldr	r3, [r7, #28]
 802e162:	681b      	ldr	r3, [r3, #0]
 802e164:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802e166:	69fb      	ldr	r3, [r7, #28]
 802e168:	681b      	ldr	r3, [r3, #0]
 802e16a:	2b00      	cmp	r3, #0
 802e16c:	d011      	beq.n	802e192 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802e16e:	69fb      	ldr	r3, [r7, #28]
 802e170:	681b      	ldr	r3, [r3, #0]
 802e172:	68db      	ldr	r3, [r3, #12]
 802e174:	685b      	ldr	r3, [r3, #4]
 802e176:	4618      	mov	r0, r3
 802e178:	f7f9 fdbb 	bl	8027cf2 <lwip_htonl>
 802e17c:	4604      	mov	r4, r0
 802e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e180:	68db      	ldr	r3, [r3, #12]
 802e182:	685b      	ldr	r3, [r3, #4]
 802e184:	4618      	mov	r0, r3
 802e186:	f7f9 fdb4 	bl	8027cf2 <lwip_htonl>
 802e18a:	4603      	mov	r3, r0
 802e18c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 802e18e:	2b00      	cmp	r3, #0
 802e190:	dbe6      	blt.n	802e160 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 802e192:	69fb      	ldr	r3, [r7, #28]
 802e194:	681a      	ldr	r2, [r3, #0]
 802e196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e198:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 802e19a:	69fb      	ldr	r3, [r7, #28]
 802e19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802e19e:	601a      	str	r2, [r3, #0]
 802e1a0:	e009      	b.n	802e1b6 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 802e1a2:	6a3b      	ldr	r3, [r7, #32]
 802e1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802e1a6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 802e1a8:	6a3b      	ldr	r3, [r7, #32]
 802e1aa:	681b      	ldr	r3, [r3, #0]
 802e1ac:	623b      	str	r3, [r7, #32]
 802e1ae:	e002      	b.n	802e1b6 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802e1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802e1b2:	f7fc f9ad 	bl	802a510 <tcp_seg_free>
    }
    seg = pcb->unsent;
 802e1b6:	687b      	ldr	r3, [r7, #4]
 802e1b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802e1ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 802e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e1be:	2b00      	cmp	r3, #0
 802e1c0:	d015      	beq.n	802e1ee <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 802e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e1c4:	68db      	ldr	r3, [r3, #12]
 802e1c6:	685b      	ldr	r3, [r3, #4]
 802e1c8:	4618      	mov	r0, r3
 802e1ca:	f7f9 fd92 	bl	8027cf2 <lwip_htonl>
 802e1ce:	4602      	mov	r2, r0
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e1d4:	1ad3      	subs	r3, r2, r3
 802e1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802e1d8:	8912      	ldrh	r2, [r2, #8]
 802e1da:	4413      	add	r3, r2
  while (seg != NULL &&
 802e1dc:	69ba      	ldr	r2, [r7, #24]
 802e1de:	429a      	cmp	r2, r3
 802e1e0:	f4bf aede 	bcs.w	802dfa0 <tcp_output+0x154>
  }
output_done:
 802e1e4:	e003      	b.n	802e1ee <tcp_output+0x3a2>
    goto output_done;
 802e1e6:	bf00      	nop
 802e1e8:	e002      	b.n	802e1f0 <tcp_output+0x3a4>
      break;
 802e1ea:	bf00      	nop
 802e1ec:	e000      	b.n	802e1f0 <tcp_output+0x3a4>
output_done:
 802e1ee:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 802e1f0:	687b      	ldr	r3, [r7, #4]
 802e1f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802e1f4:	2b00      	cmp	r3, #0
 802e1f6:	d103      	bne.n	802e200 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802e1f8:	687b      	ldr	r3, [r7, #4]
 802e1fa:	2200      	movs	r2, #0
 802e1fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 802e200:	687b      	ldr	r3, [r7, #4]
 802e202:	7e9b      	ldrb	r3, [r3, #26]
 802e204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802e208:	b2da      	uxtb	r2, r3
 802e20a:	687b      	ldr	r3, [r7, #4]
 802e20c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 802e20e:	2300      	movs	r3, #0
}
 802e210:	4618      	mov	r0, r3
 802e212:	3728      	adds	r7, #40	; 0x28
 802e214:	46bd      	mov	sp, r7
 802e216:	bdb0      	pop	{r4, r5, r7, pc}

0802e218 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 802e218:	b5b0      	push	{r4, r5, r7, lr}
 802e21a:	b08c      	sub	sp, #48	; 0x30
 802e21c:	af04      	add	r7, sp, #16
 802e21e:	60f8      	str	r0, [r7, #12]
 802e220:	60b9      	str	r1, [r7, #8]
 802e222:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 802e224:	68fb      	ldr	r3, [r7, #12]
 802e226:	685b      	ldr	r3, [r3, #4]
 802e228:	89db      	ldrh	r3, [r3, #14]
 802e22a:	2b01      	cmp	r3, #1
 802e22c:	d001      	beq.n	802e232 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 802e22e:	2300      	movs	r3, #0
 802e230:	e08a      	b.n	802e348 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802e232:	68bb      	ldr	r3, [r7, #8]
 802e234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802e236:	68fb      	ldr	r3, [r7, #12]
 802e238:	68dc      	ldr	r4, [r3, #12]
 802e23a:	4610      	mov	r0, r2
 802e23c:	f7f9 fd59 	bl	8027cf2 <lwip_htonl>
 802e240:	4603      	mov	r3, r0
 802e242:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802e244:	68bb      	ldr	r3, [r7, #8]
 802e246:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802e248:	68fb      	ldr	r3, [r7, #12]
 802e24a:	68dc      	ldr	r4, [r3, #12]
 802e24c:	4610      	mov	r0, r2
 802e24e:	f7f9 fd42 	bl	8027cd6 <lwip_htons>
 802e252:	4603      	mov	r3, r0
 802e254:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802e256:	68bb      	ldr	r3, [r7, #8]
 802e258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e25a:	68ba      	ldr	r2, [r7, #8]
 802e25c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 802e25e:	441a      	add	r2, r3
 802e260:	68bb      	ldr	r3, [r7, #8]
 802e262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 802e264:	68fb      	ldr	r3, [r7, #12]
 802e266:	68db      	ldr	r3, [r3, #12]
 802e268:	3314      	adds	r3, #20
 802e26a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802e26c:	68fb      	ldr	r3, [r7, #12]
 802e26e:	7a9b      	ldrb	r3, [r3, #10]
 802e270:	f003 0301 	and.w	r3, r3, #1
 802e274:	2b00      	cmp	r3, #0
 802e276:	d014      	beq.n	802e2a2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 802e278:	68bb      	ldr	r3, [r7, #8]
 802e27a:	3304      	adds	r3, #4
 802e27c:	4619      	mov	r1, r3
 802e27e:	f44f 7006 	mov.w	r0, #536	; 0x218
 802e282:	f7fc fc79 	bl	802ab78 <tcp_eff_send_mss_impl>
 802e286:	4603      	mov	r3, r0
 802e288:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 802e28a:	8b7b      	ldrh	r3, [r7, #26]
 802e28c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 802e290:	4618      	mov	r0, r3
 802e292:	f7f9 fd2e 	bl	8027cf2 <lwip_htonl>
 802e296:	4602      	mov	r2, r0
 802e298:	69fb      	ldr	r3, [r7, #28]
 802e29a:	601a      	str	r2, [r3, #0]
    opts += 1;
 802e29c:	69fb      	ldr	r3, [r7, #28]
 802e29e:	3304      	adds	r3, #4
 802e2a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 802e2a2:	68bb      	ldr	r3, [r7, #8]
 802e2a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802e2a8:	2b00      	cmp	r3, #0
 802e2aa:	da02      	bge.n	802e2b2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 802e2ac:	68bb      	ldr	r3, [r7, #8]
 802e2ae:	2200      	movs	r2, #0
 802e2b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 802e2b2:	68bb      	ldr	r3, [r7, #8]
 802e2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e2b6:	2b00      	cmp	r3, #0
 802e2b8:	d10c      	bne.n	802e2d4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 802e2ba:	4b25      	ldr	r3, [pc, #148]	; (802e350 <tcp_output_segment+0x138>)
 802e2bc:	681a      	ldr	r2, [r3, #0]
 802e2be:	68bb      	ldr	r3, [r7, #8]
 802e2c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 802e2c2:	68fb      	ldr	r3, [r7, #12]
 802e2c4:	68db      	ldr	r3, [r3, #12]
 802e2c6:	685b      	ldr	r3, [r3, #4]
 802e2c8:	4618      	mov	r0, r3
 802e2ca:	f7f9 fd12 	bl	8027cf2 <lwip_htonl>
 802e2ce:	4602      	mov	r2, r0
 802e2d0:	68bb      	ldr	r3, [r7, #8]
 802e2d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 802e2d4:	68fb      	ldr	r3, [r7, #12]
 802e2d6:	68da      	ldr	r2, [r3, #12]
 802e2d8:	68fb      	ldr	r3, [r7, #12]
 802e2da:	685b      	ldr	r3, [r3, #4]
 802e2dc:	685b      	ldr	r3, [r3, #4]
 802e2de:	1ad3      	subs	r3, r2, r3
 802e2e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 802e2e2:	68fb      	ldr	r3, [r7, #12]
 802e2e4:	685b      	ldr	r3, [r3, #4]
 802e2e6:	8959      	ldrh	r1, [r3, #10]
 802e2e8:	68fb      	ldr	r3, [r7, #12]
 802e2ea:	685b      	ldr	r3, [r3, #4]
 802e2ec:	8b3a      	ldrh	r2, [r7, #24]
 802e2ee:	1a8a      	subs	r2, r1, r2
 802e2f0:	b292      	uxth	r2, r2
 802e2f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 802e2f4:	68fb      	ldr	r3, [r7, #12]
 802e2f6:	685b      	ldr	r3, [r3, #4]
 802e2f8:	8919      	ldrh	r1, [r3, #8]
 802e2fa:	68fb      	ldr	r3, [r7, #12]
 802e2fc:	685b      	ldr	r3, [r3, #4]
 802e2fe:	8b3a      	ldrh	r2, [r7, #24]
 802e300:	1a8a      	subs	r2, r1, r2
 802e302:	b292      	uxth	r2, r2
 802e304:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 802e306:	68fb      	ldr	r3, [r7, #12]
 802e308:	685b      	ldr	r3, [r3, #4]
 802e30a:	68fa      	ldr	r2, [r7, #12]
 802e30c:	68d2      	ldr	r2, [r2, #12]
 802e30e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 802e310:	68fb      	ldr	r3, [r7, #12]
 802e312:	68db      	ldr	r3, [r3, #12]
 802e314:	2200      	movs	r2, #0
 802e316:	741a      	strb	r2, [r3, #16]
 802e318:	2200      	movs	r2, #0
 802e31a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802e31c:	68fb      	ldr	r3, [r7, #12]
 802e31e:	6858      	ldr	r0, [r3, #4]
 802e320:	68b9      	ldr	r1, [r7, #8]
 802e322:	68bb      	ldr	r3, [r7, #8]
 802e324:	1d1c      	adds	r4, r3, #4
 802e326:	68bb      	ldr	r3, [r7, #8]
 802e328:	7a9d      	ldrb	r5, [r3, #10]
 802e32a:	68bb      	ldr	r3, [r7, #8]
 802e32c:	7a5b      	ldrb	r3, [r3, #9]
 802e32e:	687a      	ldr	r2, [r7, #4]
 802e330:	9202      	str	r2, [sp, #8]
 802e332:	2206      	movs	r2, #6
 802e334:	9201      	str	r2, [sp, #4]
 802e336:	9300      	str	r3, [sp, #0]
 802e338:	462b      	mov	r3, r5
 802e33a:	4622      	mov	r2, r4
 802e33c:	f001 ff4e 	bl	80301dc <ip4_output_if>
 802e340:	4603      	mov	r3, r0
 802e342:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 802e344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802e348:	4618      	mov	r0, r3
 802e34a:	3720      	adds	r7, #32
 802e34c:	46bd      	mov	sp, r7
 802e34e:	bdb0      	pop	{r4, r5, r7, pc}
 802e350:	20006a40 	.word	0x20006a40

0802e354 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 802e354:	b580      	push	{r7, lr}
 802e356:	b08c      	sub	sp, #48	; 0x30
 802e358:	af04      	add	r7, sp, #16
 802e35a:	60f8      	str	r0, [r7, #12]
 802e35c:	60b9      	str	r1, [r7, #8]
 802e35e:	607a      	str	r2, [r7, #4]
 802e360:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 802e362:	2200      	movs	r2, #0
 802e364:	2114      	movs	r1, #20
 802e366:	2001      	movs	r0, #1
 802e368:	f7fa fa66 	bl	8028838 <pbuf_alloc>
 802e36c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 802e36e:	69fb      	ldr	r3, [r7, #28]
 802e370:	2b00      	cmp	r3, #0
 802e372:	d05b      	beq.n	802e42c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 802e374:	69fb      	ldr	r3, [r7, #28]
 802e376:	895b      	ldrh	r3, [r3, #10]
 802e378:	2b13      	cmp	r3, #19
 802e37a:	d806      	bhi.n	802e38a <tcp_rst+0x36>
 802e37c:	4b2d      	ldr	r3, [pc, #180]	; (802e434 <tcp_rst+0xe0>)
 802e37e:	f240 524c 	movw	r2, #1356	; 0x54c
 802e382:	492d      	ldr	r1, [pc, #180]	; (802e438 <tcp_rst+0xe4>)
 802e384:	482d      	ldr	r0, [pc, #180]	; (802e43c <tcp_rst+0xe8>)
 802e386:	f003 f81d 	bl	80313c4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 802e38a:	69fb      	ldr	r3, [r7, #28]
 802e38c:	685b      	ldr	r3, [r3, #4]
 802e38e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 802e390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802e392:	4618      	mov	r0, r3
 802e394:	f7f9 fc9f 	bl	8027cd6 <lwip_htons>
 802e398:	4603      	mov	r3, r0
 802e39a:	461a      	mov	r2, r3
 802e39c:	69bb      	ldr	r3, [r7, #24]
 802e39e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 802e3a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802e3a2:	4618      	mov	r0, r3
 802e3a4:	f7f9 fc97 	bl	8027cd6 <lwip_htons>
 802e3a8:	4603      	mov	r3, r0
 802e3aa:	461a      	mov	r2, r3
 802e3ac:	69bb      	ldr	r3, [r7, #24]
 802e3ae:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 802e3b0:	68f8      	ldr	r0, [r7, #12]
 802e3b2:	f7f9 fc9e 	bl	8027cf2 <lwip_htonl>
 802e3b6:	4602      	mov	r2, r0
 802e3b8:	69bb      	ldr	r3, [r7, #24]
 802e3ba:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 802e3bc:	68b8      	ldr	r0, [r7, #8]
 802e3be:	f7f9 fc98 	bl	8027cf2 <lwip_htonl>
 802e3c2:	4602      	mov	r2, r0
 802e3c4:	69bb      	ldr	r3, [r7, #24]
 802e3c6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 802e3c8:	f245 0014 	movw	r0, #20500	; 0x5014
 802e3cc:	f7f9 fc83 	bl	8027cd6 <lwip_htons>
 802e3d0:	4603      	mov	r3, r0
 802e3d2:	461a      	mov	r2, r3
 802e3d4:	69bb      	ldr	r3, [r7, #24]
 802e3d6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 802e3d8:	69bb      	ldr	r3, [r7, #24]
 802e3da:	2200      	movs	r2, #0
 802e3dc:	f042 0208 	orr.w	r2, r2, #8
 802e3e0:	739a      	strb	r2, [r3, #14]
 802e3e2:	2200      	movs	r2, #0
 802e3e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 802e3e8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 802e3ea:	69bb      	ldr	r3, [r7, #24]
 802e3ec:	2200      	movs	r2, #0
 802e3ee:	741a      	strb	r2, [r3, #16]
 802e3f0:	2200      	movs	r2, #0
 802e3f2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 802e3f4:	69bb      	ldr	r3, [r7, #24]
 802e3f6:	2200      	movs	r2, #0
 802e3f8:	749a      	strb	r2, [r3, #18]
 802e3fa:	2200      	movs	r2, #0
 802e3fc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 802e3fe:	6838      	ldr	r0, [r7, #0]
 802e400:	f001 fd42 	bl	802fe88 <ip4_route>
 802e404:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 802e406:	697b      	ldr	r3, [r7, #20]
 802e408:	2b00      	cmp	r3, #0
 802e40a:	d00b      	beq.n	802e424 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 802e40c:	697b      	ldr	r3, [r7, #20]
 802e40e:	9302      	str	r3, [sp, #8]
 802e410:	2306      	movs	r3, #6
 802e412:	9301      	str	r3, [sp, #4]
 802e414:	2300      	movs	r3, #0
 802e416:	9300      	str	r3, [sp, #0]
 802e418:	23ff      	movs	r3, #255	; 0xff
 802e41a:	683a      	ldr	r2, [r7, #0]
 802e41c:	6879      	ldr	r1, [r7, #4]
 802e41e:	69f8      	ldr	r0, [r7, #28]
 802e420:	f001 fedc 	bl	80301dc <ip4_output_if>
  }
  pbuf_free(p);
 802e424:	69f8      	ldr	r0, [r7, #28]
 802e426:	f7fa fd7f 	bl	8028f28 <pbuf_free>
 802e42a:	e000      	b.n	802e42e <tcp_rst+0xda>
    return;
 802e42c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 802e42e:	3720      	adds	r7, #32
 802e430:	46bd      	mov	sp, r7
 802e432:	bd80      	pop	{r7, pc}
 802e434:	08034748 	.word	0x08034748
 802e438:	0803477c 	.word	0x0803477c
 802e43c:	080347ac 	.word	0x080347ac

0802e440 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 802e440:	b580      	push	{r7, lr}
 802e442:	b084      	sub	sp, #16
 802e444:	af00      	add	r7, sp, #0
 802e446:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 802e448:	687b      	ldr	r3, [r7, #4]
 802e44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e44c:	2b00      	cmp	r3, #0
 802e44e:	d029      	beq.n	802e4a4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 802e450:	687b      	ldr	r3, [r7, #4]
 802e452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e454:	60fb      	str	r3, [r7, #12]
 802e456:	e002      	b.n	802e45e <tcp_rexmit_rto+0x1e>
 802e458:	68fb      	ldr	r3, [r7, #12]
 802e45a:	681b      	ldr	r3, [r3, #0]
 802e45c:	60fb      	str	r3, [r7, #12]
 802e45e:	68fb      	ldr	r3, [r7, #12]
 802e460:	681b      	ldr	r3, [r3, #0]
 802e462:	2b00      	cmp	r3, #0
 802e464:	d1f8      	bne.n	802e458 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 802e466:	687b      	ldr	r3, [r7, #4]
 802e468:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 802e46a:	68fb      	ldr	r3, [r7, #12]
 802e46c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 802e46e:	687b      	ldr	r3, [r7, #4]
 802e470:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802e472:	687b      	ldr	r3, [r7, #4]
 802e474:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802e476:	687b      	ldr	r3, [r7, #4]
 802e478:	2200      	movs	r2, #0
 802e47a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 802e47c:	687b      	ldr	r3, [r7, #4]
 802e47e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802e482:	2bff      	cmp	r3, #255	; 0xff
 802e484:	d007      	beq.n	802e496 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 802e486:	687b      	ldr	r3, [r7, #4]
 802e488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802e48c:	3301      	adds	r3, #1
 802e48e:	b2da      	uxtb	r2, r3
 802e490:	687b      	ldr	r3, [r7, #4]
 802e492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802e496:	687b      	ldr	r3, [r7, #4]
 802e498:	2200      	movs	r2, #0
 802e49a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 802e49c:	6878      	ldr	r0, [r7, #4]
 802e49e:	f7ff fcd5 	bl	802de4c <tcp_output>
 802e4a2:	e000      	b.n	802e4a6 <tcp_rexmit_rto+0x66>
    return;
 802e4a4:	bf00      	nop
}
 802e4a6:	3710      	adds	r7, #16
 802e4a8:	46bd      	mov	sp, r7
 802e4aa:	bd80      	pop	{r7, pc}

0802e4ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 802e4ac:	b590      	push	{r4, r7, lr}
 802e4ae:	b085      	sub	sp, #20
 802e4b0:	af00      	add	r7, sp, #0
 802e4b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 802e4b4:	687b      	ldr	r3, [r7, #4]
 802e4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	d043      	beq.n	802e544 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 802e4bc:	687b      	ldr	r3, [r7, #4]
 802e4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e4c0:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 802e4c2:	68bb      	ldr	r3, [r7, #8]
 802e4c4:	681a      	ldr	r2, [r3, #0]
 802e4c6:	687b      	ldr	r3, [r7, #4]
 802e4c8:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 802e4ca:	687b      	ldr	r3, [r7, #4]
 802e4cc:	3368      	adds	r3, #104	; 0x68
 802e4ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802e4d0:	e002      	b.n	802e4d8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 802e4d2:	68fb      	ldr	r3, [r7, #12]
 802e4d4:	681b      	ldr	r3, [r3, #0]
 802e4d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802e4d8:	68fb      	ldr	r3, [r7, #12]
 802e4da:	681b      	ldr	r3, [r3, #0]
 802e4dc:	2b00      	cmp	r3, #0
 802e4de:	d011      	beq.n	802e504 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802e4e0:	68fb      	ldr	r3, [r7, #12]
 802e4e2:	681b      	ldr	r3, [r3, #0]
 802e4e4:	68db      	ldr	r3, [r3, #12]
 802e4e6:	685b      	ldr	r3, [r3, #4]
 802e4e8:	4618      	mov	r0, r3
 802e4ea:	f7f9 fc02 	bl	8027cf2 <lwip_htonl>
 802e4ee:	4604      	mov	r4, r0
 802e4f0:	68bb      	ldr	r3, [r7, #8]
 802e4f2:	68db      	ldr	r3, [r3, #12]
 802e4f4:	685b      	ldr	r3, [r3, #4]
 802e4f6:	4618      	mov	r0, r3
 802e4f8:	f7f9 fbfb 	bl	8027cf2 <lwip_htonl>
 802e4fc:	4603      	mov	r3, r0
 802e4fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802e500:	2b00      	cmp	r3, #0
 802e502:	dbe6      	blt.n	802e4d2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 802e504:	68fb      	ldr	r3, [r7, #12]
 802e506:	681a      	ldr	r2, [r3, #0]
 802e508:	68bb      	ldr	r3, [r7, #8]
 802e50a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 802e50c:	68fb      	ldr	r3, [r7, #12]
 802e50e:	68ba      	ldr	r2, [r7, #8]
 802e510:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 802e512:	68bb      	ldr	r3, [r7, #8]
 802e514:	681b      	ldr	r3, [r3, #0]
 802e516:	2b00      	cmp	r3, #0
 802e518:	d103      	bne.n	802e522 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	2200      	movs	r2, #0
 802e51e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 802e522:	687b      	ldr	r3, [r7, #4]
 802e524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802e528:	2bff      	cmp	r3, #255	; 0xff
 802e52a:	d007      	beq.n	802e53c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802e532:	3301      	adds	r3, #1
 802e534:	b2da      	uxtb	r2, r3
 802e536:	687b      	ldr	r3, [r7, #4]
 802e538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 802e53c:	687b      	ldr	r3, [r7, #4]
 802e53e:	2200      	movs	r2, #0
 802e540:	635a      	str	r2, [r3, #52]	; 0x34
 802e542:	e000      	b.n	802e546 <tcp_rexmit+0x9a>
    return;
 802e544:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 802e546:	3714      	adds	r7, #20
 802e548:	46bd      	mov	sp, r7
 802e54a:	bd90      	pop	{r4, r7, pc}

0802e54c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 802e54c:	b580      	push	{r7, lr}
 802e54e:	b082      	sub	sp, #8
 802e550:	af00      	add	r7, sp, #0
 802e552:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 802e554:	687b      	ldr	r3, [r7, #4]
 802e556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e558:	2b00      	cmp	r3, #0
 802e55a:	d041      	beq.n	802e5e0 <tcp_rexmit_fast+0x94>
 802e55c:	687b      	ldr	r3, [r7, #4]
 802e55e:	7e9b      	ldrb	r3, [r3, #26]
 802e560:	f003 0304 	and.w	r3, r3, #4
 802e564:	2b00      	cmp	r3, #0
 802e566:	d13b      	bne.n	802e5e0 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 802e568:	6878      	ldr	r0, [r7, #4]
 802e56a:	f7ff ff9f 	bl	802e4ac <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 802e56e:	687b      	ldr	r3, [r7, #4]
 802e570:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802e574:	687b      	ldr	r3, [r7, #4]
 802e576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802e57a:	4293      	cmp	r3, r2
 802e57c:	bf28      	it	cs
 802e57e:	4613      	movcs	r3, r2
 802e580:	b29b      	uxth	r3, r3
 802e582:	0fda      	lsrs	r2, r3, #31
 802e584:	4413      	add	r3, r2
 802e586:	105b      	asrs	r3, r3, #1
 802e588:	b29a      	uxth	r2, r3
 802e58a:	687b      	ldr	r3, [r7, #4]
 802e58c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 802e590:	687b      	ldr	r3, [r7, #4]
 802e592:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 802e596:	461a      	mov	r2, r3
 802e598:	687b      	ldr	r3, [r7, #4]
 802e59a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802e59c:	005b      	lsls	r3, r3, #1
 802e59e:	429a      	cmp	r2, r3
 802e5a0:	d206      	bcs.n	802e5b0 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 802e5a2:	687b      	ldr	r3, [r7, #4]
 802e5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802e5a6:	005b      	lsls	r3, r3, #1
 802e5a8:	b29a      	uxth	r2, r3
 802e5aa:	687b      	ldr	r3, [r7, #4]
 802e5ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802e5b0:	687b      	ldr	r3, [r7, #4]
 802e5b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802e5b6:	687b      	ldr	r3, [r7, #4]
 802e5b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802e5ba:	4619      	mov	r1, r3
 802e5bc:	0049      	lsls	r1, r1, #1
 802e5be:	440b      	add	r3, r1
 802e5c0:	b29b      	uxth	r3, r3
 802e5c2:	4413      	add	r3, r2
 802e5c4:	b29a      	uxth	r2, r3
 802e5c6:	687b      	ldr	r3, [r7, #4]
 802e5c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 802e5cc:	687b      	ldr	r3, [r7, #4]
 802e5ce:	7e9b      	ldrb	r3, [r3, #26]
 802e5d0:	f043 0304 	orr.w	r3, r3, #4
 802e5d4:	b2da      	uxtb	r2, r3
 802e5d6:	687b      	ldr	r3, [r7, #4]
 802e5d8:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 802e5da:	687b      	ldr	r3, [r7, #4]
 802e5dc:	2200      	movs	r2, #0
 802e5de:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 802e5e0:	bf00      	nop
 802e5e2:	3708      	adds	r7, #8
 802e5e4:	46bd      	mov	sp, r7
 802e5e6:	bd80      	pop	{r7, pc}

0802e5e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 802e5e8:	b580      	push	{r7, lr}
 802e5ea:	b08a      	sub	sp, #40	; 0x28
 802e5ec:	af04      	add	r7, sp, #16
 802e5ee:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 802e5f0:	687b      	ldr	r3, [r7, #4]
 802e5f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802e5f4:	3b01      	subs	r3, #1
 802e5f6:	4618      	mov	r0, r3
 802e5f8:	f7f9 fb7b 	bl	8027cf2 <lwip_htonl>
 802e5fc:	4603      	mov	r3, r0
 802e5fe:	2200      	movs	r2, #0
 802e600:	2100      	movs	r1, #0
 802e602:	6878      	ldr	r0, [r7, #4]
 802e604:	f7fe fd56 	bl	802d0b4 <tcp_output_alloc_header>
 802e608:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802e60a:	693b      	ldr	r3, [r7, #16]
 802e60c:	2b00      	cmp	r3, #0
 802e60e:	d102      	bne.n	802e616 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 802e610:	f04f 33ff 	mov.w	r3, #4294967295
 802e614:	e021      	b.n	802e65a <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 802e616:	687b      	ldr	r3, [r7, #4]
 802e618:	3304      	adds	r3, #4
 802e61a:	4618      	mov	r0, r3
 802e61c:	f001 fc34 	bl	802fe88 <ip4_route>
 802e620:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 802e622:	68fb      	ldr	r3, [r7, #12]
 802e624:	2b00      	cmp	r3, #0
 802e626:	d102      	bne.n	802e62e <tcp_keepalive+0x46>
    err = ERR_RTE;
 802e628:	23fc      	movs	r3, #252	; 0xfc
 802e62a:	75fb      	strb	r3, [r7, #23]
 802e62c:	e010      	b.n	802e650 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 802e62e:	6879      	ldr	r1, [r7, #4]
 802e630:	687b      	ldr	r3, [r7, #4]
 802e632:	1d1a      	adds	r2, r3, #4
 802e634:	687b      	ldr	r3, [r7, #4]
 802e636:	7a98      	ldrb	r0, [r3, #10]
 802e638:	68fb      	ldr	r3, [r7, #12]
 802e63a:	9302      	str	r3, [sp, #8]
 802e63c:	2306      	movs	r3, #6
 802e63e:	9301      	str	r3, [sp, #4]
 802e640:	2300      	movs	r3, #0
 802e642:	9300      	str	r3, [sp, #0]
 802e644:	4603      	mov	r3, r0
 802e646:	6938      	ldr	r0, [r7, #16]
 802e648:	f001 fdc8 	bl	80301dc <ip4_output_if>
 802e64c:	4603      	mov	r3, r0
 802e64e:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 802e650:	6938      	ldr	r0, [r7, #16]
 802e652:	f7fa fc69 	bl	8028f28 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802e656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802e65a:	4618      	mov	r0, r3
 802e65c:	3718      	adds	r7, #24
 802e65e:	46bd      	mov	sp, r7
 802e660:	bd80      	pop	{r7, pc}

0802e662 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 802e662:	b590      	push	{r4, r7, lr}
 802e664:	b08f      	sub	sp, #60	; 0x3c
 802e666:	af04      	add	r7, sp, #16
 802e668:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e66e:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 802e670:	6a3b      	ldr	r3, [r7, #32]
 802e672:	2b00      	cmp	r3, #0
 802e674:	d102      	bne.n	802e67c <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 802e676:	687b      	ldr	r3, [r7, #4]
 802e678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802e67a:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 802e67c:	6a3b      	ldr	r3, [r7, #32]
 802e67e:	2b00      	cmp	r3, #0
 802e680:	d101      	bne.n	802e686 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 802e682:	2300      	movs	r3, #0
 802e684:	e085      	b.n	802e792 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 802e686:	6a3b      	ldr	r3, [r7, #32]
 802e688:	68db      	ldr	r3, [r3, #12]
 802e68a:	899b      	ldrh	r3, [r3, #12]
 802e68c:	b29b      	uxth	r3, r3
 802e68e:	4618      	mov	r0, r3
 802e690:	f7f9 fb21 	bl	8027cd6 <lwip_htons>
 802e694:	4603      	mov	r3, r0
 802e696:	f003 0301 	and.w	r3, r3, #1
 802e69a:	2b00      	cmp	r3, #0
 802e69c:	d005      	beq.n	802e6aa <tcp_zero_window_probe+0x48>
 802e69e:	6a3b      	ldr	r3, [r7, #32]
 802e6a0:	891b      	ldrh	r3, [r3, #8]
 802e6a2:	2b00      	cmp	r3, #0
 802e6a4:	d101      	bne.n	802e6aa <tcp_zero_window_probe+0x48>
 802e6a6:	2301      	movs	r3, #1
 802e6a8:	e000      	b.n	802e6ac <tcp_zero_window_probe+0x4a>
 802e6aa:	2300      	movs	r3, #0
 802e6ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802e6ae:	7ffb      	ldrb	r3, [r7, #31]
 802e6b0:	2b00      	cmp	r3, #0
 802e6b2:	bf0c      	ite	eq
 802e6b4:	2301      	moveq	r3, #1
 802e6b6:	2300      	movne	r3, #0
 802e6b8:	b2db      	uxtb	r3, r3
 802e6ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 802e6bc:	6a3b      	ldr	r3, [r7, #32]
 802e6be:	68db      	ldr	r3, [r3, #12]
 802e6c0:	685b      	ldr	r3, [r3, #4]
 802e6c2:	8bba      	ldrh	r2, [r7, #28]
 802e6c4:	2100      	movs	r1, #0
 802e6c6:	6878      	ldr	r0, [r7, #4]
 802e6c8:	f7fe fcf4 	bl	802d0b4 <tcp_output_alloc_header>
 802e6cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802e6ce:	69bb      	ldr	r3, [r7, #24]
 802e6d0:	2b00      	cmp	r3, #0
 802e6d2:	d102      	bne.n	802e6da <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 802e6d4:	f04f 33ff 	mov.w	r3, #4294967295
 802e6d8:	e05b      	b.n	802e792 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 802e6da:	69bb      	ldr	r3, [r7, #24]
 802e6dc:	685b      	ldr	r3, [r3, #4]
 802e6de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802e6e0:	7ffb      	ldrb	r3, [r7, #31]
 802e6e2:	2b00      	cmp	r3, #0
 802e6e4:	d00e      	beq.n	802e704 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 802e6e6:	697b      	ldr	r3, [r7, #20]
 802e6e8:	899b      	ldrh	r3, [r3, #12]
 802e6ea:	b29b      	uxth	r3, r3
 802e6ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802e6f0:	b29c      	uxth	r4, r3
 802e6f2:	2011      	movs	r0, #17
 802e6f4:	f7f9 faef 	bl	8027cd6 <lwip_htons>
 802e6f8:	4603      	mov	r3, r0
 802e6fa:	4323      	orrs	r3, r4
 802e6fc:	b29a      	uxth	r2, r3
 802e6fe:	697b      	ldr	r3, [r7, #20]
 802e700:	819a      	strh	r2, [r3, #12]
 802e702:	e010      	b.n	802e726 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 802e704:	69bb      	ldr	r3, [r7, #24]
 802e706:	685b      	ldr	r3, [r3, #4]
 802e708:	3314      	adds	r3, #20
 802e70a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 802e70c:	6a3b      	ldr	r3, [r7, #32]
 802e70e:	6858      	ldr	r0, [r3, #4]
 802e710:	6a3b      	ldr	r3, [r7, #32]
 802e712:	685b      	ldr	r3, [r3, #4]
 802e714:	891a      	ldrh	r2, [r3, #8]
 802e716:	6a3b      	ldr	r3, [r7, #32]
 802e718:	891b      	ldrh	r3, [r3, #8]
 802e71a:	1ad3      	subs	r3, r2, r3
 802e71c:	b29b      	uxth	r3, r3
 802e71e:	2201      	movs	r2, #1
 802e720:	6939      	ldr	r1, [r7, #16]
 802e722:	f7fa fe01 	bl	8029328 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 802e726:	6a3b      	ldr	r3, [r7, #32]
 802e728:	68db      	ldr	r3, [r3, #12]
 802e72a:	685b      	ldr	r3, [r3, #4]
 802e72c:	4618      	mov	r0, r3
 802e72e:	f7f9 fae0 	bl	8027cf2 <lwip_htonl>
 802e732:	4603      	mov	r3, r0
 802e734:	3301      	adds	r3, #1
 802e736:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802e738:	687b      	ldr	r3, [r7, #4]
 802e73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802e73c:	68fb      	ldr	r3, [r7, #12]
 802e73e:	1ad3      	subs	r3, r2, r3
 802e740:	2b00      	cmp	r3, #0
 802e742:	da02      	bge.n	802e74a <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 802e744:	687b      	ldr	r3, [r7, #4]
 802e746:	68fa      	ldr	r2, [r7, #12]
 802e748:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	3304      	adds	r3, #4
 802e74e:	4618      	mov	r0, r3
 802e750:	f001 fb9a 	bl	802fe88 <ip4_route>
 802e754:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 802e756:	68bb      	ldr	r3, [r7, #8]
 802e758:	2b00      	cmp	r3, #0
 802e75a:	d103      	bne.n	802e764 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 802e75c:	23fc      	movs	r3, #252	; 0xfc
 802e75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802e762:	e011      	b.n	802e788 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802e764:	6879      	ldr	r1, [r7, #4]
 802e766:	687b      	ldr	r3, [r7, #4]
 802e768:	1d1a      	adds	r2, r3, #4
 802e76a:	687b      	ldr	r3, [r7, #4]
 802e76c:	7a98      	ldrb	r0, [r3, #10]
 802e76e:	68bb      	ldr	r3, [r7, #8]
 802e770:	9302      	str	r3, [sp, #8]
 802e772:	2306      	movs	r3, #6
 802e774:	9301      	str	r3, [sp, #4]
 802e776:	2300      	movs	r3, #0
 802e778:	9300      	str	r3, [sp, #0]
 802e77a:	4603      	mov	r3, r0
 802e77c:	69b8      	ldr	r0, [r7, #24]
 802e77e:	f001 fd2d 	bl	80301dc <ip4_output_if>
 802e782:	4603      	mov	r3, r0
 802e784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 802e788:	69b8      	ldr	r0, [r7, #24]
 802e78a:	f7fa fbcd 	bl	8028f28 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802e78e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802e792:	4618      	mov	r0, r3
 802e794:	372c      	adds	r7, #44	; 0x2c
 802e796:	46bd      	mov	sp, r7
 802e798:	bd90      	pop	{r4, r7, pc}
	...

0802e79c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 802e79c:	b580      	push	{r7, lr}
 802e79e:	b082      	sub	sp, #8
 802e7a0:	af00      	add	r7, sp, #0
 802e7a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 802e7a4:	f7fa fe42 	bl	802942c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 802e7a8:	4b0a      	ldr	r3, [pc, #40]	; (802e7d4 <tcpip_tcp_timer+0x38>)
 802e7aa:	681b      	ldr	r3, [r3, #0]
 802e7ac:	2b00      	cmp	r3, #0
 802e7ae:	d103      	bne.n	802e7b8 <tcpip_tcp_timer+0x1c>
 802e7b0:	4b09      	ldr	r3, [pc, #36]	; (802e7d8 <tcpip_tcp_timer+0x3c>)
 802e7b2:	681b      	ldr	r3, [r3, #0]
 802e7b4:	2b00      	cmp	r3, #0
 802e7b6:	d005      	beq.n	802e7c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802e7b8:	2200      	movs	r2, #0
 802e7ba:	4908      	ldr	r1, [pc, #32]	; (802e7dc <tcpip_tcp_timer+0x40>)
 802e7bc:	20fa      	movs	r0, #250	; 0xfa
 802e7be:	f000 f86f 	bl	802e8a0 <sys_timeout>
 802e7c2:	e003      	b.n	802e7cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 802e7c4:	4b06      	ldr	r3, [pc, #24]	; (802e7e0 <tcpip_tcp_timer+0x44>)
 802e7c6:	2200      	movs	r2, #0
 802e7c8:	601a      	str	r2, [r3, #0]
  }
}
 802e7ca:	bf00      	nop
 802e7cc:	bf00      	nop
 802e7ce:	3708      	adds	r7, #8
 802e7d0:	46bd      	mov	sp, r7
 802e7d2:	bd80      	pop	{r7, pc}
 802e7d4:	20006a4c 	.word	0x20006a4c
 802e7d8:	20006a50 	.word	0x20006a50
 802e7dc:	0802e79d 	.word	0x0802e79d
 802e7e0:	20006a98 	.word	0x20006a98

0802e7e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 802e7e4:	b580      	push	{r7, lr}
 802e7e6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 802e7e8:	4b0a      	ldr	r3, [pc, #40]	; (802e814 <tcp_timer_needed+0x30>)
 802e7ea:	681b      	ldr	r3, [r3, #0]
 802e7ec:	2b00      	cmp	r3, #0
 802e7ee:	d10f      	bne.n	802e810 <tcp_timer_needed+0x2c>
 802e7f0:	4b09      	ldr	r3, [pc, #36]	; (802e818 <tcp_timer_needed+0x34>)
 802e7f2:	681b      	ldr	r3, [r3, #0]
 802e7f4:	2b00      	cmp	r3, #0
 802e7f6:	d103      	bne.n	802e800 <tcp_timer_needed+0x1c>
 802e7f8:	4b08      	ldr	r3, [pc, #32]	; (802e81c <tcp_timer_needed+0x38>)
 802e7fa:	681b      	ldr	r3, [r3, #0]
 802e7fc:	2b00      	cmp	r3, #0
 802e7fe:	d007      	beq.n	802e810 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 802e800:	4b04      	ldr	r3, [pc, #16]	; (802e814 <tcp_timer_needed+0x30>)
 802e802:	2201      	movs	r2, #1
 802e804:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802e806:	2200      	movs	r2, #0
 802e808:	4905      	ldr	r1, [pc, #20]	; (802e820 <tcp_timer_needed+0x3c>)
 802e80a:	20fa      	movs	r0, #250	; 0xfa
 802e80c:	f000 f848 	bl	802e8a0 <sys_timeout>
  }
}
 802e810:	bf00      	nop
 802e812:	bd80      	pop	{r7, pc}
 802e814:	20006a98 	.word	0x20006a98
 802e818:	20006a4c 	.word	0x20006a4c
 802e81c:	20006a50 	.word	0x20006a50
 802e820:	0802e79d 	.word	0x0802e79d

0802e824 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 802e824:	b580      	push	{r7, lr}
 802e826:	b084      	sub	sp, #16
 802e828:	af00      	add	r7, sp, #0
 802e82a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 802e82c:	687b      	ldr	r3, [r7, #4]
 802e82e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 802e830:	68fb      	ldr	r3, [r7, #12]
 802e832:	685b      	ldr	r3, [r3, #4]
 802e834:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 802e836:	68fb      	ldr	r3, [r7, #12]
 802e838:	681b      	ldr	r3, [r3, #0]
 802e83a:	687a      	ldr	r2, [r7, #4]
 802e83c:	4903      	ldr	r1, [pc, #12]	; (802e84c <cyclic_timer+0x28>)
 802e83e:	4618      	mov	r0, r3
 802e840:	f000 f82e 	bl	802e8a0 <sys_timeout>
}
 802e844:	bf00      	nop
 802e846:	3710      	adds	r7, #16
 802e848:	46bd      	mov	sp, r7
 802e84a:	bd80      	pop	{r7, pc}
 802e84c:	0802e825 	.word	0x0802e825

0802e850 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 802e850:	b580      	push	{r7, lr}
 802e852:	b082      	sub	sp, #8
 802e854:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802e856:	2301      	movs	r3, #1
 802e858:	607b      	str	r3, [r7, #4]
 802e85a:	e00e      	b.n	802e87a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 802e85c:	4a0d      	ldr	r2, [pc, #52]	; (802e894 <sys_timeouts_init+0x44>)
 802e85e:	687b      	ldr	r3, [r7, #4]
 802e860:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 802e864:	687b      	ldr	r3, [r7, #4]
 802e866:	00db      	lsls	r3, r3, #3
 802e868:	4a0a      	ldr	r2, [pc, #40]	; (802e894 <sys_timeouts_init+0x44>)
 802e86a:	4413      	add	r3, r2
 802e86c:	461a      	mov	r2, r3
 802e86e:	490a      	ldr	r1, [pc, #40]	; (802e898 <sys_timeouts_init+0x48>)
 802e870:	f000 f816 	bl	802e8a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802e874:	687b      	ldr	r3, [r7, #4]
 802e876:	3301      	adds	r3, #1
 802e878:	607b      	str	r3, [r7, #4]
 802e87a:	687b      	ldr	r3, [r7, #4]
 802e87c:	2b02      	cmp	r3, #2
 802e87e:	d9ed      	bls.n	802e85c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 802e880:	f7f9 fa22 	bl	8027cc8 <sys_now>
 802e884:	4603      	mov	r3, r0
 802e886:	4a05      	ldr	r2, [pc, #20]	; (802e89c <sys_timeouts_init+0x4c>)
 802e888:	6013      	str	r3, [r2, #0]
}
 802e88a:	bf00      	nop
 802e88c:	3708      	adds	r7, #8
 802e88e:	46bd      	mov	sp, r7
 802e890:	bd80      	pop	{r7, pc}
 802e892:	bf00      	nop
 802e894:	08035410 	.word	0x08035410
 802e898:	0802e825 	.word	0x0802e825
 802e89c:	20006a94 	.word	0x20006a94

0802e8a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 802e8a0:	b580      	push	{r7, lr}
 802e8a2:	b088      	sub	sp, #32
 802e8a4:	af00      	add	r7, sp, #0
 802e8a6:	60f8      	str	r0, [r7, #12]
 802e8a8:	60b9      	str	r1, [r7, #8]
 802e8aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 802e8ac:	2006      	movs	r0, #6
 802e8ae:	f7f9 fdbf 	bl	8028430 <memp_malloc>
 802e8b2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 802e8b4:	697b      	ldr	r3, [r7, #20]
 802e8b6:	2b00      	cmp	r3, #0
 802e8b8:	d10a      	bne.n	802e8d0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802e8ba:	697b      	ldr	r3, [r7, #20]
 802e8bc:	2b00      	cmp	r3, #0
 802e8be:	f040 8084 	bne.w	802e9ca <sys_timeout+0x12a>
 802e8c2:	4b44      	ldr	r3, [pc, #272]	; (802e9d4 <sys_timeout+0x134>)
 802e8c4:	22d4      	movs	r2, #212	; 0xd4
 802e8c6:	4944      	ldr	r1, [pc, #272]	; (802e9d8 <sys_timeout+0x138>)
 802e8c8:	4844      	ldr	r0, [pc, #272]	; (802e9dc <sys_timeout+0x13c>)
 802e8ca:	f002 fd7b 	bl	80313c4 <iprintf>
    return;
 802e8ce:	e07c      	b.n	802e9ca <sys_timeout+0x12a>
  }

  now = sys_now();
 802e8d0:	f7f9 f9fa 	bl	8027cc8 <sys_now>
 802e8d4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 802e8d6:	4b42      	ldr	r3, [pc, #264]	; (802e9e0 <sys_timeout+0x140>)
 802e8d8:	681b      	ldr	r3, [r3, #0]
 802e8da:	2b00      	cmp	r3, #0
 802e8dc:	d105      	bne.n	802e8ea <sys_timeout+0x4a>
    diff = 0;
 802e8de:	2300      	movs	r3, #0
 802e8e0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 802e8e2:	4a40      	ldr	r2, [pc, #256]	; (802e9e4 <sys_timeout+0x144>)
 802e8e4:	693b      	ldr	r3, [r7, #16]
 802e8e6:	6013      	str	r3, [r2, #0]
 802e8e8:	e004      	b.n	802e8f4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 802e8ea:	4b3e      	ldr	r3, [pc, #248]	; (802e9e4 <sys_timeout+0x144>)
 802e8ec:	681b      	ldr	r3, [r3, #0]
 802e8ee:	693a      	ldr	r2, [r7, #16]
 802e8f0:	1ad3      	subs	r3, r2, r3
 802e8f2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 802e8f4:	697b      	ldr	r3, [r7, #20]
 802e8f6:	2200      	movs	r2, #0
 802e8f8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802e8fa:	697b      	ldr	r3, [r7, #20]
 802e8fc:	68ba      	ldr	r2, [r7, #8]
 802e8fe:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 802e900:	697b      	ldr	r3, [r7, #20]
 802e902:	687a      	ldr	r2, [r7, #4]
 802e904:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 802e906:	68fa      	ldr	r2, [r7, #12]
 802e908:	69bb      	ldr	r3, [r7, #24]
 802e90a:	441a      	add	r2, r3
 802e90c:	697b      	ldr	r3, [r7, #20]
 802e90e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802e910:	4b33      	ldr	r3, [pc, #204]	; (802e9e0 <sys_timeout+0x140>)
 802e912:	681b      	ldr	r3, [r3, #0]
 802e914:	2b00      	cmp	r3, #0
 802e916:	d103      	bne.n	802e920 <sys_timeout+0x80>
    next_timeout = timeout;
 802e918:	4a31      	ldr	r2, [pc, #196]	; (802e9e0 <sys_timeout+0x140>)
 802e91a:	697b      	ldr	r3, [r7, #20]
 802e91c:	6013      	str	r3, [r2, #0]
    return;
 802e91e:	e055      	b.n	802e9cc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 802e920:	4b2f      	ldr	r3, [pc, #188]	; (802e9e0 <sys_timeout+0x140>)
 802e922:	681b      	ldr	r3, [r3, #0]
 802e924:	685b      	ldr	r3, [r3, #4]
 802e926:	68fa      	ldr	r2, [r7, #12]
 802e928:	429a      	cmp	r2, r3
 802e92a:	d20f      	bcs.n	802e94c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 802e92c:	4b2c      	ldr	r3, [pc, #176]	; (802e9e0 <sys_timeout+0x140>)
 802e92e:	681b      	ldr	r3, [r3, #0]
 802e930:	6859      	ldr	r1, [r3, #4]
 802e932:	4b2b      	ldr	r3, [pc, #172]	; (802e9e0 <sys_timeout+0x140>)
 802e934:	681b      	ldr	r3, [r3, #0]
 802e936:	68fa      	ldr	r2, [r7, #12]
 802e938:	1a8a      	subs	r2, r1, r2
 802e93a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 802e93c:	4b28      	ldr	r3, [pc, #160]	; (802e9e0 <sys_timeout+0x140>)
 802e93e:	681a      	ldr	r2, [r3, #0]
 802e940:	697b      	ldr	r3, [r7, #20]
 802e942:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802e944:	4a26      	ldr	r2, [pc, #152]	; (802e9e0 <sys_timeout+0x140>)
 802e946:	697b      	ldr	r3, [r7, #20]
 802e948:	6013      	str	r3, [r2, #0]
 802e94a:	e03f      	b.n	802e9cc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 802e94c:	4b24      	ldr	r3, [pc, #144]	; (802e9e0 <sys_timeout+0x140>)
 802e94e:	681b      	ldr	r3, [r3, #0]
 802e950:	61fb      	str	r3, [r7, #28]
 802e952:	e036      	b.n	802e9c2 <sys_timeout+0x122>
      timeout->time -= t->time;
 802e954:	697b      	ldr	r3, [r7, #20]
 802e956:	685a      	ldr	r2, [r3, #4]
 802e958:	69fb      	ldr	r3, [r7, #28]
 802e95a:	685b      	ldr	r3, [r3, #4]
 802e95c:	1ad2      	subs	r2, r2, r3
 802e95e:	697b      	ldr	r3, [r7, #20]
 802e960:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 802e962:	69fb      	ldr	r3, [r7, #28]
 802e964:	681b      	ldr	r3, [r3, #0]
 802e966:	2b00      	cmp	r3, #0
 802e968:	d006      	beq.n	802e978 <sys_timeout+0xd8>
 802e96a:	69fb      	ldr	r3, [r7, #28]
 802e96c:	681b      	ldr	r3, [r3, #0]
 802e96e:	685a      	ldr	r2, [r3, #4]
 802e970:	697b      	ldr	r3, [r7, #20]
 802e972:	685b      	ldr	r3, [r3, #4]
 802e974:	429a      	cmp	r2, r3
 802e976:	d921      	bls.n	802e9bc <sys_timeout+0x11c>
        if (t->next != NULL) {
 802e978:	69fb      	ldr	r3, [r7, #28]
 802e97a:	681b      	ldr	r3, [r3, #0]
 802e97c:	2b00      	cmp	r3, #0
 802e97e:	d009      	beq.n	802e994 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 802e980:	69fb      	ldr	r3, [r7, #28]
 802e982:	681b      	ldr	r3, [r3, #0]
 802e984:	6859      	ldr	r1, [r3, #4]
 802e986:	697b      	ldr	r3, [r7, #20]
 802e988:	685a      	ldr	r2, [r3, #4]
 802e98a:	69fb      	ldr	r3, [r7, #28]
 802e98c:	681b      	ldr	r3, [r3, #0]
 802e98e:	1a8a      	subs	r2, r1, r2
 802e990:	605a      	str	r2, [r3, #4]
 802e992:	e00b      	b.n	802e9ac <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 802e994:	697b      	ldr	r3, [r7, #20]
 802e996:	685b      	ldr	r3, [r3, #4]
 802e998:	68fa      	ldr	r2, [r7, #12]
 802e99a:	429a      	cmp	r2, r3
 802e99c:	d206      	bcs.n	802e9ac <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 802e99e:	4b10      	ldr	r3, [pc, #64]	; (802e9e0 <sys_timeout+0x140>)
 802e9a0:	681b      	ldr	r3, [r3, #0]
 802e9a2:	685a      	ldr	r2, [r3, #4]
 802e9a4:	68fb      	ldr	r3, [r7, #12]
 802e9a6:	441a      	add	r2, r3
 802e9a8:	697b      	ldr	r3, [r7, #20]
 802e9aa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 802e9ac:	69fb      	ldr	r3, [r7, #28]
 802e9ae:	681a      	ldr	r2, [r3, #0]
 802e9b0:	697b      	ldr	r3, [r7, #20]
 802e9b2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802e9b4:	69fb      	ldr	r3, [r7, #28]
 802e9b6:	697a      	ldr	r2, [r7, #20]
 802e9b8:	601a      	str	r2, [r3, #0]
        break;
 802e9ba:	e007      	b.n	802e9cc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 802e9bc:	69fb      	ldr	r3, [r7, #28]
 802e9be:	681b      	ldr	r3, [r3, #0]
 802e9c0:	61fb      	str	r3, [r7, #28]
 802e9c2:	69fb      	ldr	r3, [r7, #28]
 802e9c4:	2b00      	cmp	r3, #0
 802e9c6:	d1c5      	bne.n	802e954 <sys_timeout+0xb4>
 802e9c8:	e000      	b.n	802e9cc <sys_timeout+0x12c>
    return;
 802e9ca:	bf00      	nop
      }
    }
  }
}
 802e9cc:	3720      	adds	r7, #32
 802e9ce:	46bd      	mov	sp, r7
 802e9d0:	bd80      	pop	{r7, pc}
 802e9d2:	bf00      	nop
 802e9d4:	08034b8c 	.word	0x08034b8c
 802e9d8:	08034bc0 	.word	0x08034bc0
 802e9dc:	08034c00 	.word	0x08034c00
 802e9e0:	20006a90 	.word	0x20006a90
 802e9e4:	20006a94 	.word	0x20006a94

0802e9e8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 802e9e8:	b580      	push	{r7, lr}
 802e9ea:	b086      	sub	sp, #24
 802e9ec:	af00      	add	r7, sp, #0
  if (next_timeout) {
 802e9ee:	4b24      	ldr	r3, [pc, #144]	; (802ea80 <sys_check_timeouts+0x98>)
 802e9f0:	681b      	ldr	r3, [r3, #0]
 802e9f2:	2b00      	cmp	r3, #0
 802e9f4:	d040      	beq.n	802ea78 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 802e9f6:	f7f9 f967 	bl	8027cc8 <sys_now>
 802e9fa:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 802e9fc:	4b21      	ldr	r3, [pc, #132]	; (802ea84 <sys_check_timeouts+0x9c>)
 802e9fe:	681b      	ldr	r3, [r3, #0]
 802ea00:	68fa      	ldr	r2, [r7, #12]
 802ea02:	1ad3      	subs	r3, r2, r3
 802ea04:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 802ea06:	4b20      	ldr	r3, [pc, #128]	; (802ea88 <sys_check_timeouts+0xa0>)
 802ea08:	781b      	ldrb	r3, [r3, #0]
 802ea0a:	b2db      	uxtb	r3, r3
 802ea0c:	2b00      	cmp	r3, #0
 802ea0e:	d001      	beq.n	802ea14 <sys_check_timeouts+0x2c>
 802ea10:	f7f9 fee2 	bl	80287d8 <pbuf_free_ooseq>
      had_one = 0;
 802ea14:	2300      	movs	r3, #0
 802ea16:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 802ea18:	4b19      	ldr	r3, [pc, #100]	; (802ea80 <sys_check_timeouts+0x98>)
 802ea1a:	681b      	ldr	r3, [r3, #0]
 802ea1c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 802ea1e:	68bb      	ldr	r3, [r7, #8]
 802ea20:	2b00      	cmp	r3, #0
 802ea22:	d026      	beq.n	802ea72 <sys_check_timeouts+0x8a>
 802ea24:	68bb      	ldr	r3, [r7, #8]
 802ea26:	685b      	ldr	r3, [r3, #4]
 802ea28:	697a      	ldr	r2, [r7, #20]
 802ea2a:	429a      	cmp	r2, r3
 802ea2c:	d321      	bcc.n	802ea72 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 802ea2e:	2301      	movs	r3, #1
 802ea30:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 802ea32:	68bb      	ldr	r3, [r7, #8]
 802ea34:	685a      	ldr	r2, [r3, #4]
 802ea36:	4b13      	ldr	r3, [pc, #76]	; (802ea84 <sys_check_timeouts+0x9c>)
 802ea38:	681b      	ldr	r3, [r3, #0]
 802ea3a:	4413      	add	r3, r2
 802ea3c:	4a11      	ldr	r2, [pc, #68]	; (802ea84 <sys_check_timeouts+0x9c>)
 802ea3e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 802ea40:	68bb      	ldr	r3, [r7, #8]
 802ea42:	685b      	ldr	r3, [r3, #4]
 802ea44:	697a      	ldr	r2, [r7, #20]
 802ea46:	1ad3      	subs	r3, r2, r3
 802ea48:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 802ea4a:	68bb      	ldr	r3, [r7, #8]
 802ea4c:	681b      	ldr	r3, [r3, #0]
 802ea4e:	4a0c      	ldr	r2, [pc, #48]	; (802ea80 <sys_check_timeouts+0x98>)
 802ea50:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 802ea52:	68bb      	ldr	r3, [r7, #8]
 802ea54:	689b      	ldr	r3, [r3, #8]
 802ea56:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 802ea58:	68bb      	ldr	r3, [r7, #8]
 802ea5a:	68db      	ldr	r3, [r3, #12]
 802ea5c:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802ea5e:	68b9      	ldr	r1, [r7, #8]
 802ea60:	2006      	movs	r0, #6
 802ea62:	f7f9 fd31 	bl	80284c8 <memp_free>
        if (handler != NULL) {
 802ea66:	687b      	ldr	r3, [r7, #4]
 802ea68:	2b00      	cmp	r3, #0
 802ea6a:	d002      	beq.n	802ea72 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 802ea6c:	687b      	ldr	r3, [r7, #4]
 802ea6e:	6838      	ldr	r0, [r7, #0]
 802ea70:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 802ea72:	7cfb      	ldrb	r3, [r7, #19]
 802ea74:	2b00      	cmp	r3, #0
 802ea76:	d1c6      	bne.n	802ea06 <sys_check_timeouts+0x1e>
  }
}
 802ea78:	bf00      	nop
 802ea7a:	3718      	adds	r7, #24
 802ea7c:	46bd      	mov	sp, r7
 802ea7e:	bd80      	pop	{r7, pc}
 802ea80:	20006a90 	.word	0x20006a90
 802ea84:	20006a94 	.word	0x20006a94
 802ea88:	20006a3d 	.word	0x20006a3d

0802ea8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802ea8c:	b480      	push	{r7}
 802ea8e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 802ea90:	bf00      	nop
 802ea92:	46bd      	mov	sp, r7
 802ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea98:	4770      	bx	lr
	...

0802ea9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802ea9c:	b480      	push	{r7}
 802ea9e:	b085      	sub	sp, #20
 802eaa0:	af00      	add	r7, sp, #0
 802eaa2:	60f8      	str	r0, [r7, #12]
 802eaa4:	60b9      	str	r1, [r7, #8]
 802eaa6:	4613      	mov	r3, r2
 802eaa8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802eaaa:	79fb      	ldrb	r3, [r7, #7]
 802eaac:	2b00      	cmp	r3, #0
 802eaae:	d018      	beq.n	802eae2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802eab0:	68fb      	ldr	r3, [r7, #12]
 802eab2:	2b00      	cmp	r3, #0
 802eab4:	d013      	beq.n	802eade <udp_input_local_match+0x42>
 802eab6:	68fb      	ldr	r3, [r7, #12]
 802eab8:	681b      	ldr	r3, [r3, #0]
 802eaba:	2b00      	cmp	r3, #0
 802eabc:	d00f      	beq.n	802eade <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802eabe:	4b14      	ldr	r3, [pc, #80]	; (802eb10 <udp_input_local_match+0x74>)
 802eac0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802eac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802eac6:	d00a      	beq.n	802eade <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 802eac8:	68fb      	ldr	r3, [r7, #12]
 802eaca:	681a      	ldr	r2, [r3, #0]
 802eacc:	4b10      	ldr	r3, [pc, #64]	; (802eb10 <udp_input_local_match+0x74>)
 802eace:	695b      	ldr	r3, [r3, #20]
 802ead0:	405a      	eors	r2, r3
 802ead2:	68bb      	ldr	r3, [r7, #8]
 802ead4:	3308      	adds	r3, #8
 802ead6:	681b      	ldr	r3, [r3, #0]
 802ead8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802eada:	2b00      	cmp	r3, #0
 802eadc:	d110      	bne.n	802eb00 <udp_input_local_match+0x64>
          return 1;
 802eade:	2301      	movs	r3, #1
 802eae0:	e00f      	b.n	802eb02 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802eae2:	68fb      	ldr	r3, [r7, #12]
 802eae4:	2b00      	cmp	r3, #0
 802eae6:	d009      	beq.n	802eafc <udp_input_local_match+0x60>
 802eae8:	68fb      	ldr	r3, [r7, #12]
 802eaea:	681b      	ldr	r3, [r3, #0]
 802eaec:	2b00      	cmp	r3, #0
 802eaee:	d005      	beq.n	802eafc <udp_input_local_match+0x60>
 802eaf0:	68fb      	ldr	r3, [r7, #12]
 802eaf2:	681a      	ldr	r2, [r3, #0]
 802eaf4:	4b06      	ldr	r3, [pc, #24]	; (802eb10 <udp_input_local_match+0x74>)
 802eaf6:	695b      	ldr	r3, [r3, #20]
 802eaf8:	429a      	cmp	r2, r3
 802eafa:	d101      	bne.n	802eb00 <udp_input_local_match+0x64>
      return 1;
 802eafc:	2301      	movs	r3, #1
 802eafe:	e000      	b.n	802eb02 <udp_input_local_match+0x66>
    }
  }

  return 0;
 802eb00:	2300      	movs	r3, #0
}
 802eb02:	4618      	mov	r0, r3
 802eb04:	3714      	adds	r7, #20
 802eb06:	46bd      	mov	sp, r7
 802eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eb0c:	4770      	bx	lr
 802eb0e:	bf00      	nop
 802eb10:	200034e4 	.word	0x200034e4

0802eb14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 802eb14:	b590      	push	{r4, r7, lr}
 802eb16:	b08d      	sub	sp, #52	; 0x34
 802eb18:	af02      	add	r7, sp, #8
 802eb1a:	6078      	str	r0, [r7, #4]
 802eb1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802eb1e:	2300      	movs	r3, #0
 802eb20:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802eb22:	687b      	ldr	r3, [r7, #4]
 802eb24:	895b      	ldrh	r3, [r3, #10]
 802eb26:	2b07      	cmp	r3, #7
 802eb28:	d803      	bhi.n	802eb32 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802eb2a:	6878      	ldr	r0, [r7, #4]
 802eb2c:	f7fa f9fc 	bl	8028f28 <pbuf_free>
    goto end;
 802eb30:	e0c6      	b.n	802ecc0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	685b      	ldr	r3, [r3, #4]
 802eb36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802eb38:	4b63      	ldr	r3, [pc, #396]	; (802ecc8 <udp_input+0x1b4>)
 802eb3a:	695b      	ldr	r3, [r3, #20]
 802eb3c:	4a62      	ldr	r2, [pc, #392]	; (802ecc8 <udp_input+0x1b4>)
 802eb3e:	6812      	ldr	r2, [r2, #0]
 802eb40:	4611      	mov	r1, r2
 802eb42:	4618      	mov	r0, r3
 802eb44:	f001 fc1c 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802eb48:	4603      	mov	r3, r0
 802eb4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802eb4c:	697b      	ldr	r3, [r7, #20]
 802eb4e:	881b      	ldrh	r3, [r3, #0]
 802eb50:	b29b      	uxth	r3, r3
 802eb52:	4618      	mov	r0, r3
 802eb54:	f7f9 f8bf 	bl	8027cd6 <lwip_htons>
 802eb58:	4603      	mov	r3, r0
 802eb5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 802eb5c:	697b      	ldr	r3, [r7, #20]
 802eb5e:	885b      	ldrh	r3, [r3, #2]
 802eb60:	b29b      	uxth	r3, r3
 802eb62:	4618      	mov	r0, r3
 802eb64:	f7f9 f8b7 	bl	8027cd6 <lwip_htons>
 802eb68:	4603      	mov	r3, r0
 802eb6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 802eb6c:	2300      	movs	r3, #0
 802eb6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 802eb70:	2300      	movs	r3, #0
 802eb72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 802eb74:	2300      	movs	r3, #0
 802eb76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802eb78:	4b54      	ldr	r3, [pc, #336]	; (802eccc <udp_input+0x1b8>)
 802eb7a:	681b      	ldr	r3, [r3, #0]
 802eb7c:	627b      	str	r3, [r7, #36]	; 0x24
 802eb7e:	e03b      	b.n	802ebf8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802eb82:	8a5b      	ldrh	r3, [r3, #18]
 802eb84:	89fa      	ldrh	r2, [r7, #14]
 802eb86:	429a      	cmp	r2, r3
 802eb88:	d131      	bne.n	802ebee <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802eb8a:	7cfb      	ldrb	r3, [r7, #19]
 802eb8c:	461a      	mov	r2, r3
 802eb8e:	6839      	ldr	r1, [r7, #0]
 802eb90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802eb92:	f7ff ff83 	bl	802ea9c <udp_input_local_match>
 802eb96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 802eb98:	2b00      	cmp	r3, #0
 802eb9a:	d028      	beq.n	802ebee <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 802eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802eb9e:	7c1b      	ldrb	r3, [r3, #16]
 802eba0:	f003 0304 	and.w	r3, r3, #4
 802eba4:	2b00      	cmp	r3, #0
 802eba6:	d104      	bne.n	802ebb2 <udp_input+0x9e>
 802eba8:	69fb      	ldr	r3, [r7, #28]
 802ebaa:	2b00      	cmp	r3, #0
 802ebac:	d101      	bne.n	802ebb2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 802ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebb0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 802ebb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebb4:	8a9b      	ldrh	r3, [r3, #20]
 802ebb6:	8a3a      	ldrh	r2, [r7, #16]
 802ebb8:	429a      	cmp	r2, r3
 802ebba:	d118      	bne.n	802ebee <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802ebbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebbe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802ebc0:	2b00      	cmp	r3, #0
 802ebc2:	d005      	beq.n	802ebd0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 802ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebc6:	685a      	ldr	r2, [r3, #4]
 802ebc8:	4b3f      	ldr	r3, [pc, #252]	; (802ecc8 <udp_input+0x1b4>)
 802ebca:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802ebcc:	429a      	cmp	r2, r3
 802ebce:	d10e      	bne.n	802ebee <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802ebd0:	6a3b      	ldr	r3, [r7, #32]
 802ebd2:	2b00      	cmp	r3, #0
 802ebd4:	d014      	beq.n	802ec00 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 802ebd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebd8:	68da      	ldr	r2, [r3, #12]
 802ebda:	6a3b      	ldr	r3, [r7, #32]
 802ebdc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802ebde:	4b3b      	ldr	r3, [pc, #236]	; (802eccc <udp_input+0x1b8>)
 802ebe0:	681a      	ldr	r2, [r3, #0]
 802ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebe4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 802ebe6:	4a39      	ldr	r2, [pc, #228]	; (802eccc <udp_input+0x1b8>)
 802ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebea:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802ebec:	e008      	b.n	802ec00 <udp_input+0xec>
      }
    }

    prev = pcb;
 802ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebf0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebf4:	68db      	ldr	r3, [r3, #12]
 802ebf6:	627b      	str	r3, [r7, #36]	; 0x24
 802ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ebfa:	2b00      	cmp	r3, #0
 802ebfc:	d1c0      	bne.n	802eb80 <udp_input+0x6c>
 802ebfe:	e000      	b.n	802ec02 <udp_input+0xee>
        break;
 802ec00:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 802ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec04:	2b00      	cmp	r3, #0
 802ec06:	d101      	bne.n	802ec0c <udp_input+0xf8>
    pcb = uncon_pcb;
 802ec08:	69fb      	ldr	r3, [r7, #28]
 802ec0a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec0e:	2b00      	cmp	r3, #0
 802ec10:	d002      	beq.n	802ec18 <udp_input+0x104>
    for_us = 1;
 802ec12:	2301      	movs	r3, #1
 802ec14:	76fb      	strb	r3, [r7, #27]
 802ec16:	e00a      	b.n	802ec2e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802ec18:	683b      	ldr	r3, [r7, #0]
 802ec1a:	3304      	adds	r3, #4
 802ec1c:	681a      	ldr	r2, [r3, #0]
 802ec1e:	4b2a      	ldr	r3, [pc, #168]	; (802ecc8 <udp_input+0x1b4>)
 802ec20:	695b      	ldr	r3, [r3, #20]
 802ec22:	429a      	cmp	r2, r3
 802ec24:	bf0c      	ite	eq
 802ec26:	2301      	moveq	r3, #1
 802ec28:	2300      	movne	r3, #0
 802ec2a:	b2db      	uxtb	r3, r3
 802ec2c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 802ec2e:	7efb      	ldrb	r3, [r7, #27]
 802ec30:	2b00      	cmp	r3, #0
 802ec32:	d042      	beq.n	802ecba <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 802ec34:	f06f 0107 	mvn.w	r1, #7
 802ec38:	6878      	ldr	r0, [r7, #4]
 802ec3a:	f7fa f951 	bl	8028ee0 <pbuf_header>
 802ec3e:	4603      	mov	r3, r0
 802ec40:	2b00      	cmp	r3, #0
 802ec42:	d00a      	beq.n	802ec5a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 802ec44:	4b22      	ldr	r3, [pc, #136]	; (802ecd0 <udp_input+0x1bc>)
 802ec46:	f240 1255 	movw	r2, #341	; 0x155
 802ec4a:	4922      	ldr	r1, [pc, #136]	; (802ecd4 <udp_input+0x1c0>)
 802ec4c:	4822      	ldr	r0, [pc, #136]	; (802ecd8 <udp_input+0x1c4>)
 802ec4e:	f002 fbb9 	bl	80313c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802ec52:	6878      	ldr	r0, [r7, #4]
 802ec54:	f7fa f968 	bl	8028f28 <pbuf_free>
      goto end;
 802ec58:	e032      	b.n	802ecc0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 802ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec5c:	2b00      	cmp	r3, #0
 802ec5e:	d012      	beq.n	802ec86 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec62:	699b      	ldr	r3, [r3, #24]
 802ec64:	2b00      	cmp	r3, #0
 802ec66:	d00a      	beq.n	802ec7e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 802ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec6a:	699c      	ldr	r4, [r3, #24]
 802ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ec6e:	69d8      	ldr	r0, [r3, #28]
 802ec70:	8a3b      	ldrh	r3, [r7, #16]
 802ec72:	9300      	str	r3, [sp, #0]
 802ec74:	4b19      	ldr	r3, [pc, #100]	; (802ecdc <udp_input+0x1c8>)
 802ec76:	687a      	ldr	r2, [r7, #4]
 802ec78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802ec7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 802ec7c:	e021      	b.n	802ecc2 <udp_input+0x1ae>
        pbuf_free(p);
 802ec7e:	6878      	ldr	r0, [r7, #4]
 802ec80:	f7fa f952 	bl	8028f28 <pbuf_free>
        goto end;
 802ec84:	e01c      	b.n	802ecc0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 802ec86:	7cfb      	ldrb	r3, [r7, #19]
 802ec88:	2b00      	cmp	r3, #0
 802ec8a:	d112      	bne.n	802ecb2 <udp_input+0x19e>
 802ec8c:	4b0e      	ldr	r3, [pc, #56]	; (802ecc8 <udp_input+0x1b4>)
 802ec8e:	695b      	ldr	r3, [r3, #20]
 802ec90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802ec94:	2be0      	cmp	r3, #224	; 0xe0
 802ec96:	d00c      	beq.n	802ecb2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 802ec98:	4b0b      	ldr	r3, [pc, #44]	; (802ecc8 <udp_input+0x1b4>)
 802ec9a:	899b      	ldrh	r3, [r3, #12]
 802ec9c:	3308      	adds	r3, #8
 802ec9e:	b29b      	uxth	r3, r3
 802eca0:	b21b      	sxth	r3, r3
 802eca2:	4619      	mov	r1, r3
 802eca4:	6878      	ldr	r0, [r7, #4]
 802eca6:	f7fa f92d 	bl	8028f04 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 802ecaa:	2103      	movs	r1, #3
 802ecac:	6878      	ldr	r0, [r7, #4]
 802ecae:	f001 f863 	bl	802fd78 <icmp_dest_unreach>
      pbuf_free(p);
 802ecb2:	6878      	ldr	r0, [r7, #4]
 802ecb4:	f7fa f938 	bl	8028f28 <pbuf_free>
  return;
 802ecb8:	e003      	b.n	802ecc2 <udp_input+0x1ae>
    pbuf_free(p);
 802ecba:	6878      	ldr	r0, [r7, #4]
 802ecbc:	f7fa f934 	bl	8028f28 <pbuf_free>
  return;
 802ecc0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802ecc2:	372c      	adds	r7, #44	; 0x2c
 802ecc4:	46bd      	mov	sp, r7
 802ecc6:	bd90      	pop	{r4, r7, pc}
 802ecc8:	200034e4 	.word	0x200034e4
 802eccc:	20006a9c 	.word	0x20006a9c
 802ecd0:	08034c28 	.word	0x08034c28
 802ecd4:	08034c58 	.word	0x08034c58
 802ecd8:	08034c6c 	.word	0x08034c6c
 802ecdc:	200034f4 	.word	0x200034f4

0802ece0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 802ece0:	b480      	push	{r7}
 802ece2:	b085      	sub	sp, #20
 802ece4:	af00      	add	r7, sp, #0
 802ece6:	6078      	str	r0, [r7, #4]
 802ece8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802ecea:	687b      	ldr	r3, [r7, #4]
 802ecec:	2b00      	cmp	r3, #0
 802ecee:	d01e      	beq.n	802ed2e <udp_netif_ip_addr_changed+0x4e>
 802ecf0:	687b      	ldr	r3, [r7, #4]
 802ecf2:	681b      	ldr	r3, [r3, #0]
 802ecf4:	2b00      	cmp	r3, #0
 802ecf6:	d01a      	beq.n	802ed2e <udp_netif_ip_addr_changed+0x4e>
 802ecf8:	683b      	ldr	r3, [r7, #0]
 802ecfa:	2b00      	cmp	r3, #0
 802ecfc:	d017      	beq.n	802ed2e <udp_netif_ip_addr_changed+0x4e>
 802ecfe:	683b      	ldr	r3, [r7, #0]
 802ed00:	681b      	ldr	r3, [r3, #0]
 802ed02:	2b00      	cmp	r3, #0
 802ed04:	d013      	beq.n	802ed2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802ed06:	4b0d      	ldr	r3, [pc, #52]	; (802ed3c <udp_netif_ip_addr_changed+0x5c>)
 802ed08:	681b      	ldr	r3, [r3, #0]
 802ed0a:	60fb      	str	r3, [r7, #12]
 802ed0c:	e00c      	b.n	802ed28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802ed0e:	68fb      	ldr	r3, [r7, #12]
 802ed10:	681a      	ldr	r2, [r3, #0]
 802ed12:	687b      	ldr	r3, [r7, #4]
 802ed14:	681b      	ldr	r3, [r3, #0]
 802ed16:	429a      	cmp	r2, r3
 802ed18:	d103      	bne.n	802ed22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802ed1a:	683b      	ldr	r3, [r7, #0]
 802ed1c:	681a      	ldr	r2, [r3, #0]
 802ed1e:	68fb      	ldr	r3, [r7, #12]
 802ed20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802ed22:	68fb      	ldr	r3, [r7, #12]
 802ed24:	68db      	ldr	r3, [r3, #12]
 802ed26:	60fb      	str	r3, [r7, #12]
 802ed28:	68fb      	ldr	r3, [r7, #12]
 802ed2a:	2b00      	cmp	r3, #0
 802ed2c:	d1ef      	bne.n	802ed0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802ed2e:	bf00      	nop
 802ed30:	3714      	adds	r7, #20
 802ed32:	46bd      	mov	sp, r7
 802ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed38:	4770      	bx	lr
 802ed3a:	bf00      	nop
 802ed3c:	20006a9c 	.word	0x20006a9c

0802ed40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802ed40:	b580      	push	{r7, lr}
 802ed42:	b082      	sub	sp, #8
 802ed44:	af00      	add	r7, sp, #0
 802ed46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802ed48:	4915      	ldr	r1, [pc, #84]	; (802eda0 <etharp_free_entry+0x60>)
 802ed4a:	687a      	ldr	r2, [r7, #4]
 802ed4c:	4613      	mov	r3, r2
 802ed4e:	005b      	lsls	r3, r3, #1
 802ed50:	4413      	add	r3, r2
 802ed52:	00db      	lsls	r3, r3, #3
 802ed54:	440b      	add	r3, r1
 802ed56:	681b      	ldr	r3, [r3, #0]
 802ed58:	2b00      	cmp	r3, #0
 802ed5a:	d013      	beq.n	802ed84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 802ed5c:	4910      	ldr	r1, [pc, #64]	; (802eda0 <etharp_free_entry+0x60>)
 802ed5e:	687a      	ldr	r2, [r7, #4]
 802ed60:	4613      	mov	r3, r2
 802ed62:	005b      	lsls	r3, r3, #1
 802ed64:	4413      	add	r3, r2
 802ed66:	00db      	lsls	r3, r3, #3
 802ed68:	440b      	add	r3, r1
 802ed6a:	681b      	ldr	r3, [r3, #0]
 802ed6c:	4618      	mov	r0, r3
 802ed6e:	f7fa f8db 	bl	8028f28 <pbuf_free>
    arp_table[i].q = NULL;
 802ed72:	490b      	ldr	r1, [pc, #44]	; (802eda0 <etharp_free_entry+0x60>)
 802ed74:	687a      	ldr	r2, [r7, #4]
 802ed76:	4613      	mov	r3, r2
 802ed78:	005b      	lsls	r3, r3, #1
 802ed7a:	4413      	add	r3, r2
 802ed7c:	00db      	lsls	r3, r3, #3
 802ed7e:	440b      	add	r3, r1
 802ed80:	2200      	movs	r2, #0
 802ed82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802ed84:	4906      	ldr	r1, [pc, #24]	; (802eda0 <etharp_free_entry+0x60>)
 802ed86:	687a      	ldr	r2, [r7, #4]
 802ed88:	4613      	mov	r3, r2
 802ed8a:	005b      	lsls	r3, r3, #1
 802ed8c:	4413      	add	r3, r2
 802ed8e:	00db      	lsls	r3, r3, #3
 802ed90:	440b      	add	r3, r1
 802ed92:	3314      	adds	r3, #20
 802ed94:	2200      	movs	r2, #0
 802ed96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 802ed98:	bf00      	nop
 802ed9a:	3708      	adds	r7, #8
 802ed9c:	46bd      	mov	sp, r7
 802ed9e:	bd80      	pop	{r7, pc}
 802eda0:	20006aa0 	.word	0x20006aa0

0802eda4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 802eda4:	b580      	push	{r7, lr}
 802eda6:	b082      	sub	sp, #8
 802eda8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802edaa:	2300      	movs	r3, #0
 802edac:	71fb      	strb	r3, [r7, #7]
 802edae:	e096      	b.n	802eede <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802edb0:	79fa      	ldrb	r2, [r7, #7]
 802edb2:	494f      	ldr	r1, [pc, #316]	; (802eef0 <etharp_tmr+0x14c>)
 802edb4:	4613      	mov	r3, r2
 802edb6:	005b      	lsls	r3, r3, #1
 802edb8:	4413      	add	r3, r2
 802edba:	00db      	lsls	r3, r3, #3
 802edbc:	440b      	add	r3, r1
 802edbe:	3314      	adds	r3, #20
 802edc0:	781b      	ldrb	r3, [r3, #0]
 802edc2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 802edc4:	79bb      	ldrb	r3, [r7, #6]
 802edc6:	2b00      	cmp	r3, #0
 802edc8:	f000 8086 	beq.w	802eed8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 802edcc:	79fa      	ldrb	r2, [r7, #7]
 802edce:	4948      	ldr	r1, [pc, #288]	; (802eef0 <etharp_tmr+0x14c>)
 802edd0:	4613      	mov	r3, r2
 802edd2:	005b      	lsls	r3, r3, #1
 802edd4:	4413      	add	r3, r2
 802edd6:	00db      	lsls	r3, r3, #3
 802edd8:	440b      	add	r3, r1
 802edda:	3312      	adds	r3, #18
 802eddc:	881b      	ldrh	r3, [r3, #0]
 802edde:	3301      	adds	r3, #1
 802ede0:	b298      	uxth	r0, r3
 802ede2:	4943      	ldr	r1, [pc, #268]	; (802eef0 <etharp_tmr+0x14c>)
 802ede4:	4613      	mov	r3, r2
 802ede6:	005b      	lsls	r3, r3, #1
 802ede8:	4413      	add	r3, r2
 802edea:	00db      	lsls	r3, r3, #3
 802edec:	440b      	add	r3, r1
 802edee:	3312      	adds	r3, #18
 802edf0:	4602      	mov	r2, r0
 802edf2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802edf4:	79fa      	ldrb	r2, [r7, #7]
 802edf6:	493e      	ldr	r1, [pc, #248]	; (802eef0 <etharp_tmr+0x14c>)
 802edf8:	4613      	mov	r3, r2
 802edfa:	005b      	lsls	r3, r3, #1
 802edfc:	4413      	add	r3, r2
 802edfe:	00db      	lsls	r3, r3, #3
 802ee00:	440b      	add	r3, r1
 802ee02:	3312      	adds	r3, #18
 802ee04:	881b      	ldrh	r3, [r3, #0]
 802ee06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 802ee0a:	d215      	bcs.n	802ee38 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802ee0c:	79fa      	ldrb	r2, [r7, #7]
 802ee0e:	4938      	ldr	r1, [pc, #224]	; (802eef0 <etharp_tmr+0x14c>)
 802ee10:	4613      	mov	r3, r2
 802ee12:	005b      	lsls	r3, r3, #1
 802ee14:	4413      	add	r3, r2
 802ee16:	00db      	lsls	r3, r3, #3
 802ee18:	440b      	add	r3, r1
 802ee1a:	3314      	adds	r3, #20
 802ee1c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802ee1e:	2b01      	cmp	r3, #1
 802ee20:	d10f      	bne.n	802ee42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 802ee22:	79fa      	ldrb	r2, [r7, #7]
 802ee24:	4932      	ldr	r1, [pc, #200]	; (802eef0 <etharp_tmr+0x14c>)
 802ee26:	4613      	mov	r3, r2
 802ee28:	005b      	lsls	r3, r3, #1
 802ee2a:	4413      	add	r3, r2
 802ee2c:	00db      	lsls	r3, r3, #3
 802ee2e:	440b      	add	r3, r1
 802ee30:	3312      	adds	r3, #18
 802ee32:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802ee34:	2b04      	cmp	r3, #4
 802ee36:	d904      	bls.n	802ee42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802ee38:	79fb      	ldrb	r3, [r7, #7]
 802ee3a:	4618      	mov	r0, r3
 802ee3c:	f7ff ff80 	bl	802ed40 <etharp_free_entry>
 802ee40:	e04a      	b.n	802eed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 802ee42:	79fa      	ldrb	r2, [r7, #7]
 802ee44:	492a      	ldr	r1, [pc, #168]	; (802eef0 <etharp_tmr+0x14c>)
 802ee46:	4613      	mov	r3, r2
 802ee48:	005b      	lsls	r3, r3, #1
 802ee4a:	4413      	add	r3, r2
 802ee4c:	00db      	lsls	r3, r3, #3
 802ee4e:	440b      	add	r3, r1
 802ee50:	3314      	adds	r3, #20
 802ee52:	781b      	ldrb	r3, [r3, #0]
 802ee54:	2b03      	cmp	r3, #3
 802ee56:	d10a      	bne.n	802ee6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802ee58:	79fa      	ldrb	r2, [r7, #7]
 802ee5a:	4925      	ldr	r1, [pc, #148]	; (802eef0 <etharp_tmr+0x14c>)
 802ee5c:	4613      	mov	r3, r2
 802ee5e:	005b      	lsls	r3, r3, #1
 802ee60:	4413      	add	r3, r2
 802ee62:	00db      	lsls	r3, r3, #3
 802ee64:	440b      	add	r3, r1
 802ee66:	3314      	adds	r3, #20
 802ee68:	2204      	movs	r2, #4
 802ee6a:	701a      	strb	r2, [r3, #0]
 802ee6c:	e034      	b.n	802eed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802ee6e:	79fa      	ldrb	r2, [r7, #7]
 802ee70:	491f      	ldr	r1, [pc, #124]	; (802eef0 <etharp_tmr+0x14c>)
 802ee72:	4613      	mov	r3, r2
 802ee74:	005b      	lsls	r3, r3, #1
 802ee76:	4413      	add	r3, r2
 802ee78:	00db      	lsls	r3, r3, #3
 802ee7a:	440b      	add	r3, r1
 802ee7c:	3314      	adds	r3, #20
 802ee7e:	781b      	ldrb	r3, [r3, #0]
 802ee80:	2b04      	cmp	r3, #4
 802ee82:	d10a      	bne.n	802ee9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 802ee84:	79fa      	ldrb	r2, [r7, #7]
 802ee86:	491a      	ldr	r1, [pc, #104]	; (802eef0 <etharp_tmr+0x14c>)
 802ee88:	4613      	mov	r3, r2
 802ee8a:	005b      	lsls	r3, r3, #1
 802ee8c:	4413      	add	r3, r2
 802ee8e:	00db      	lsls	r3, r3, #3
 802ee90:	440b      	add	r3, r1
 802ee92:	3314      	adds	r3, #20
 802ee94:	2202      	movs	r2, #2
 802ee96:	701a      	strb	r2, [r3, #0]
 802ee98:	e01e      	b.n	802eed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802ee9a:	79fa      	ldrb	r2, [r7, #7]
 802ee9c:	4914      	ldr	r1, [pc, #80]	; (802eef0 <etharp_tmr+0x14c>)
 802ee9e:	4613      	mov	r3, r2
 802eea0:	005b      	lsls	r3, r3, #1
 802eea2:	4413      	add	r3, r2
 802eea4:	00db      	lsls	r3, r3, #3
 802eea6:	440b      	add	r3, r1
 802eea8:	3314      	adds	r3, #20
 802eeaa:	781b      	ldrb	r3, [r3, #0]
 802eeac:	2b01      	cmp	r3, #1
 802eeae:	d113      	bne.n	802eed8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802eeb0:	79fa      	ldrb	r2, [r7, #7]
 802eeb2:	490f      	ldr	r1, [pc, #60]	; (802eef0 <etharp_tmr+0x14c>)
 802eeb4:	4613      	mov	r3, r2
 802eeb6:	005b      	lsls	r3, r3, #1
 802eeb8:	4413      	add	r3, r2
 802eeba:	00db      	lsls	r3, r3, #3
 802eebc:	440b      	add	r3, r1
 802eebe:	3308      	adds	r3, #8
 802eec0:	6818      	ldr	r0, [r3, #0]
 802eec2:	79fa      	ldrb	r2, [r7, #7]
 802eec4:	4613      	mov	r3, r2
 802eec6:	005b      	lsls	r3, r3, #1
 802eec8:	4413      	add	r3, r2
 802eeca:	00db      	lsls	r3, r3, #3
 802eecc:	4a08      	ldr	r2, [pc, #32]	; (802eef0 <etharp_tmr+0x14c>)
 802eece:	4413      	add	r3, r2
 802eed0:	3304      	adds	r3, #4
 802eed2:	4619      	mov	r1, r3
 802eed4:	f000 fe38 	bl	802fb48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802eed8:	79fb      	ldrb	r3, [r7, #7]
 802eeda:	3301      	adds	r3, #1
 802eedc:	71fb      	strb	r3, [r7, #7]
 802eede:	79fb      	ldrb	r3, [r7, #7]
 802eee0:	2b09      	cmp	r3, #9
 802eee2:	f67f af65 	bls.w	802edb0 <etharp_tmr+0xc>
      }
    }
  }
}
 802eee6:	bf00      	nop
 802eee8:	bf00      	nop
 802eeea:	3708      	adds	r7, #8
 802eeec:	46bd      	mov	sp, r7
 802eeee:	bd80      	pop	{r7, pc}
 802eef0:	20006aa0 	.word	0x20006aa0

0802eef4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 802eef4:	b580      	push	{r7, lr}
 802eef6:	b088      	sub	sp, #32
 802eef8:	af00      	add	r7, sp, #0
 802eefa:	60f8      	str	r0, [r7, #12]
 802eefc:	460b      	mov	r3, r1
 802eefe:	607a      	str	r2, [r7, #4]
 802ef00:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802ef02:	230a      	movs	r3, #10
 802ef04:	77fb      	strb	r3, [r7, #31]
 802ef06:	230a      	movs	r3, #10
 802ef08:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 802ef0a:	230a      	movs	r3, #10
 802ef0c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 802ef0e:	2300      	movs	r3, #0
 802ef10:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 802ef12:	230a      	movs	r3, #10
 802ef14:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802ef16:	2300      	movs	r3, #0
 802ef18:	833b      	strh	r3, [r7, #24]
 802ef1a:	2300      	movs	r3, #0
 802ef1c:	82fb      	strh	r3, [r7, #22]
 802ef1e:	2300      	movs	r3, #0
 802ef20:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802ef22:	2300      	movs	r3, #0
 802ef24:	773b      	strb	r3, [r7, #28]
 802ef26:	e093      	b.n	802f050 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 802ef28:	7f3a      	ldrb	r2, [r7, #28]
 802ef2a:	4990      	ldr	r1, [pc, #576]	; (802f16c <etharp_find_entry+0x278>)
 802ef2c:	4613      	mov	r3, r2
 802ef2e:	005b      	lsls	r3, r3, #1
 802ef30:	4413      	add	r3, r2
 802ef32:	00db      	lsls	r3, r3, #3
 802ef34:	440b      	add	r3, r1
 802ef36:	3314      	adds	r3, #20
 802ef38:	781b      	ldrb	r3, [r3, #0]
 802ef3a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802ef3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802ef40:	2b0a      	cmp	r3, #10
 802ef42:	d105      	bne.n	802ef50 <etharp_find_entry+0x5c>
 802ef44:	7cfb      	ldrb	r3, [r7, #19]
 802ef46:	2b00      	cmp	r3, #0
 802ef48:	d102      	bne.n	802ef50 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 802ef4a:	7f3b      	ldrb	r3, [r7, #28]
 802ef4c:	777b      	strb	r3, [r7, #29]
 802ef4e:	e07c      	b.n	802f04a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 802ef50:	7cfb      	ldrb	r3, [r7, #19]
 802ef52:	2b00      	cmp	r3, #0
 802ef54:	d079      	beq.n	802f04a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802ef56:	7cfb      	ldrb	r3, [r7, #19]
 802ef58:	2b01      	cmp	r3, #1
 802ef5a:	d009      	beq.n	802ef70 <etharp_find_entry+0x7c>
 802ef5c:	7cfb      	ldrb	r3, [r7, #19]
 802ef5e:	2b01      	cmp	r3, #1
 802ef60:	d806      	bhi.n	802ef70 <etharp_find_entry+0x7c>
 802ef62:	4b83      	ldr	r3, [pc, #524]	; (802f170 <etharp_find_entry+0x27c>)
 802ef64:	f240 1225 	movw	r2, #293	; 0x125
 802ef68:	4982      	ldr	r1, [pc, #520]	; (802f174 <etharp_find_entry+0x280>)
 802ef6a:	4883      	ldr	r0, [pc, #524]	; (802f178 <etharp_find_entry+0x284>)
 802ef6c:	f002 fa2a 	bl	80313c4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 802ef70:	68fb      	ldr	r3, [r7, #12]
 802ef72:	2b00      	cmp	r3, #0
 802ef74:	d00f      	beq.n	802ef96 <etharp_find_entry+0xa2>
 802ef76:	68fb      	ldr	r3, [r7, #12]
 802ef78:	6819      	ldr	r1, [r3, #0]
 802ef7a:	7f3a      	ldrb	r2, [r7, #28]
 802ef7c:	487b      	ldr	r0, [pc, #492]	; (802f16c <etharp_find_entry+0x278>)
 802ef7e:	4613      	mov	r3, r2
 802ef80:	005b      	lsls	r3, r3, #1
 802ef82:	4413      	add	r3, r2
 802ef84:	00db      	lsls	r3, r3, #3
 802ef86:	4403      	add	r3, r0
 802ef88:	3304      	adds	r3, #4
 802ef8a:	681b      	ldr	r3, [r3, #0]
 802ef8c:	4299      	cmp	r1, r3
 802ef8e:	d102      	bne.n	802ef96 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 802ef90:	f997 301c 	ldrsb.w	r3, [r7, #28]
 802ef94:	e0e5      	b.n	802f162 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802ef96:	7cfb      	ldrb	r3, [r7, #19]
 802ef98:	2b01      	cmp	r3, #1
 802ef9a:	d13b      	bne.n	802f014 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802ef9c:	7f3a      	ldrb	r2, [r7, #28]
 802ef9e:	4973      	ldr	r1, [pc, #460]	; (802f16c <etharp_find_entry+0x278>)
 802efa0:	4613      	mov	r3, r2
 802efa2:	005b      	lsls	r3, r3, #1
 802efa4:	4413      	add	r3, r2
 802efa6:	00db      	lsls	r3, r3, #3
 802efa8:	440b      	add	r3, r1
 802efaa:	681b      	ldr	r3, [r3, #0]
 802efac:	2b00      	cmp	r3, #0
 802efae:	d018      	beq.n	802efe2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 802efb0:	7f3a      	ldrb	r2, [r7, #28]
 802efb2:	496e      	ldr	r1, [pc, #440]	; (802f16c <etharp_find_entry+0x278>)
 802efb4:	4613      	mov	r3, r2
 802efb6:	005b      	lsls	r3, r3, #1
 802efb8:	4413      	add	r3, r2
 802efba:	00db      	lsls	r3, r3, #3
 802efbc:	440b      	add	r3, r1
 802efbe:	3312      	adds	r3, #18
 802efc0:	881b      	ldrh	r3, [r3, #0]
 802efc2:	8b3a      	ldrh	r2, [r7, #24]
 802efc4:	429a      	cmp	r2, r3
 802efc6:	d840      	bhi.n	802f04a <etharp_find_entry+0x156>
            old_queue = i;
 802efc8:	7f3b      	ldrb	r3, [r7, #28]
 802efca:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 802efcc:	7f3a      	ldrb	r2, [r7, #28]
 802efce:	4967      	ldr	r1, [pc, #412]	; (802f16c <etharp_find_entry+0x278>)
 802efd0:	4613      	mov	r3, r2
 802efd2:	005b      	lsls	r3, r3, #1
 802efd4:	4413      	add	r3, r2
 802efd6:	00db      	lsls	r3, r3, #3
 802efd8:	440b      	add	r3, r1
 802efda:	3312      	adds	r3, #18
 802efdc:	881b      	ldrh	r3, [r3, #0]
 802efde:	833b      	strh	r3, [r7, #24]
 802efe0:	e033      	b.n	802f04a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802efe2:	7f3a      	ldrb	r2, [r7, #28]
 802efe4:	4961      	ldr	r1, [pc, #388]	; (802f16c <etharp_find_entry+0x278>)
 802efe6:	4613      	mov	r3, r2
 802efe8:	005b      	lsls	r3, r3, #1
 802efea:	4413      	add	r3, r2
 802efec:	00db      	lsls	r3, r3, #3
 802efee:	440b      	add	r3, r1
 802eff0:	3312      	adds	r3, #18
 802eff2:	881b      	ldrh	r3, [r3, #0]
 802eff4:	8afa      	ldrh	r2, [r7, #22]
 802eff6:	429a      	cmp	r2, r3
 802eff8:	d827      	bhi.n	802f04a <etharp_find_entry+0x156>
            old_pending = i;
 802effa:	7f3b      	ldrb	r3, [r7, #28]
 802effc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 802effe:	7f3a      	ldrb	r2, [r7, #28]
 802f000:	495a      	ldr	r1, [pc, #360]	; (802f16c <etharp_find_entry+0x278>)
 802f002:	4613      	mov	r3, r2
 802f004:	005b      	lsls	r3, r3, #1
 802f006:	4413      	add	r3, r2
 802f008:	00db      	lsls	r3, r3, #3
 802f00a:	440b      	add	r3, r1
 802f00c:	3312      	adds	r3, #18
 802f00e:	881b      	ldrh	r3, [r3, #0]
 802f010:	82fb      	strh	r3, [r7, #22]
 802f012:	e01a      	b.n	802f04a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 802f014:	7cfb      	ldrb	r3, [r7, #19]
 802f016:	2b01      	cmp	r3, #1
 802f018:	d917      	bls.n	802f04a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802f01a:	7f3a      	ldrb	r2, [r7, #28]
 802f01c:	4953      	ldr	r1, [pc, #332]	; (802f16c <etharp_find_entry+0x278>)
 802f01e:	4613      	mov	r3, r2
 802f020:	005b      	lsls	r3, r3, #1
 802f022:	4413      	add	r3, r2
 802f024:	00db      	lsls	r3, r3, #3
 802f026:	440b      	add	r3, r1
 802f028:	3312      	adds	r3, #18
 802f02a:	881b      	ldrh	r3, [r3, #0]
 802f02c:	8aba      	ldrh	r2, [r7, #20]
 802f02e:	429a      	cmp	r2, r3
 802f030:	d80b      	bhi.n	802f04a <etharp_find_entry+0x156>
            old_stable = i;
 802f032:	7f3b      	ldrb	r3, [r7, #28]
 802f034:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 802f036:	7f3a      	ldrb	r2, [r7, #28]
 802f038:	494c      	ldr	r1, [pc, #304]	; (802f16c <etharp_find_entry+0x278>)
 802f03a:	4613      	mov	r3, r2
 802f03c:	005b      	lsls	r3, r3, #1
 802f03e:	4413      	add	r3, r2
 802f040:	00db      	lsls	r3, r3, #3
 802f042:	440b      	add	r3, r1
 802f044:	3312      	adds	r3, #18
 802f046:	881b      	ldrh	r3, [r3, #0]
 802f048:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802f04a:	7f3b      	ldrb	r3, [r7, #28]
 802f04c:	3301      	adds	r3, #1
 802f04e:	773b      	strb	r3, [r7, #28]
 802f050:	7f3b      	ldrb	r3, [r7, #28]
 802f052:	2b09      	cmp	r3, #9
 802f054:	f67f af68 	bls.w	802ef28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802f058:	7afb      	ldrb	r3, [r7, #11]
 802f05a:	f003 0302 	and.w	r3, r3, #2
 802f05e:	2b00      	cmp	r3, #0
 802f060:	d108      	bne.n	802f074 <etharp_find_entry+0x180>
 802f062:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802f066:	2b0a      	cmp	r3, #10
 802f068:	d107      	bne.n	802f07a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802f06a:	7afb      	ldrb	r3, [r7, #11]
 802f06c:	f003 0301 	and.w	r3, r3, #1
 802f070:	2b00      	cmp	r3, #0
 802f072:	d102      	bne.n	802f07a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 802f074:	f04f 33ff 	mov.w	r3, #4294967295
 802f078:	e073      	b.n	802f162 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802f07a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802f07e:	2b09      	cmp	r3, #9
 802f080:	dc02      	bgt.n	802f088 <etharp_find_entry+0x194>
    i = empty;
 802f082:	7f7b      	ldrb	r3, [r7, #29]
 802f084:	773b      	strb	r3, [r7, #28]
 802f086:	e036      	b.n	802f0f6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802f088:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802f08c:	2b09      	cmp	r3, #9
 802f08e:	dc13      	bgt.n	802f0b8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 802f090:	7fbb      	ldrb	r3, [r7, #30]
 802f092:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802f094:	7f3a      	ldrb	r2, [r7, #28]
 802f096:	4935      	ldr	r1, [pc, #212]	; (802f16c <etharp_find_entry+0x278>)
 802f098:	4613      	mov	r3, r2
 802f09a:	005b      	lsls	r3, r3, #1
 802f09c:	4413      	add	r3, r2
 802f09e:	00db      	lsls	r3, r3, #3
 802f0a0:	440b      	add	r3, r1
 802f0a2:	681b      	ldr	r3, [r3, #0]
 802f0a4:	2b00      	cmp	r3, #0
 802f0a6:	d018      	beq.n	802f0da <etharp_find_entry+0x1e6>
 802f0a8:	4b31      	ldr	r3, [pc, #196]	; (802f170 <etharp_find_entry+0x27c>)
 802f0aa:	f240 126f 	movw	r2, #367	; 0x16f
 802f0ae:	4933      	ldr	r1, [pc, #204]	; (802f17c <etharp_find_entry+0x288>)
 802f0b0:	4831      	ldr	r0, [pc, #196]	; (802f178 <etharp_find_entry+0x284>)
 802f0b2:	f002 f987 	bl	80313c4 <iprintf>
 802f0b6:	e010      	b.n	802f0da <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802f0b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802f0bc:	2b09      	cmp	r3, #9
 802f0be:	dc02      	bgt.n	802f0c6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 802f0c0:	7ffb      	ldrb	r3, [r7, #31]
 802f0c2:	773b      	strb	r3, [r7, #28]
 802f0c4:	e009      	b.n	802f0da <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802f0c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802f0ca:	2b09      	cmp	r3, #9
 802f0cc:	dc02      	bgt.n	802f0d4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802f0ce:	7efb      	ldrb	r3, [r7, #27]
 802f0d0:	773b      	strb	r3, [r7, #28]
 802f0d2:	e002      	b.n	802f0da <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 802f0d4:	f04f 33ff 	mov.w	r3, #4294967295
 802f0d8:	e043      	b.n	802f162 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802f0da:	7f3b      	ldrb	r3, [r7, #28]
 802f0dc:	2b09      	cmp	r3, #9
 802f0de:	d906      	bls.n	802f0ee <etharp_find_entry+0x1fa>
 802f0e0:	4b23      	ldr	r3, [pc, #140]	; (802f170 <etharp_find_entry+0x27c>)
 802f0e2:	f240 1281 	movw	r2, #385	; 0x181
 802f0e6:	4926      	ldr	r1, [pc, #152]	; (802f180 <etharp_find_entry+0x28c>)
 802f0e8:	4823      	ldr	r0, [pc, #140]	; (802f178 <etharp_find_entry+0x284>)
 802f0ea:	f002 f96b 	bl	80313c4 <iprintf>
    etharp_free_entry(i);
 802f0ee:	7f3b      	ldrb	r3, [r7, #28]
 802f0f0:	4618      	mov	r0, r3
 802f0f2:	f7ff fe25 	bl	802ed40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802f0f6:	7f3b      	ldrb	r3, [r7, #28]
 802f0f8:	2b09      	cmp	r3, #9
 802f0fa:	d906      	bls.n	802f10a <etharp_find_entry+0x216>
 802f0fc:	4b1c      	ldr	r3, [pc, #112]	; (802f170 <etharp_find_entry+0x27c>)
 802f0fe:	f240 1285 	movw	r2, #389	; 0x185
 802f102:	491f      	ldr	r1, [pc, #124]	; (802f180 <etharp_find_entry+0x28c>)
 802f104:	481c      	ldr	r0, [pc, #112]	; (802f178 <etharp_find_entry+0x284>)
 802f106:	f002 f95d 	bl	80313c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802f10a:	7f3a      	ldrb	r2, [r7, #28]
 802f10c:	4917      	ldr	r1, [pc, #92]	; (802f16c <etharp_find_entry+0x278>)
 802f10e:	4613      	mov	r3, r2
 802f110:	005b      	lsls	r3, r3, #1
 802f112:	4413      	add	r3, r2
 802f114:	00db      	lsls	r3, r3, #3
 802f116:	440b      	add	r3, r1
 802f118:	3314      	adds	r3, #20
 802f11a:	781b      	ldrb	r3, [r3, #0]
 802f11c:	2b00      	cmp	r3, #0
 802f11e:	d006      	beq.n	802f12e <etharp_find_entry+0x23a>
 802f120:	4b13      	ldr	r3, [pc, #76]	; (802f170 <etharp_find_entry+0x27c>)
 802f122:	f44f 72c3 	mov.w	r2, #390	; 0x186
 802f126:	4917      	ldr	r1, [pc, #92]	; (802f184 <etharp_find_entry+0x290>)
 802f128:	4813      	ldr	r0, [pc, #76]	; (802f178 <etharp_find_entry+0x284>)
 802f12a:	f002 f94b 	bl	80313c4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802f12e:	68fb      	ldr	r3, [r7, #12]
 802f130:	2b00      	cmp	r3, #0
 802f132:	d00a      	beq.n	802f14a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802f134:	7f3a      	ldrb	r2, [r7, #28]
 802f136:	68fb      	ldr	r3, [r7, #12]
 802f138:	6819      	ldr	r1, [r3, #0]
 802f13a:	480c      	ldr	r0, [pc, #48]	; (802f16c <etharp_find_entry+0x278>)
 802f13c:	4613      	mov	r3, r2
 802f13e:	005b      	lsls	r3, r3, #1
 802f140:	4413      	add	r3, r2
 802f142:	00db      	lsls	r3, r3, #3
 802f144:	4403      	add	r3, r0
 802f146:	3304      	adds	r3, #4
 802f148:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802f14a:	7f3a      	ldrb	r2, [r7, #28]
 802f14c:	4907      	ldr	r1, [pc, #28]	; (802f16c <etharp_find_entry+0x278>)
 802f14e:	4613      	mov	r3, r2
 802f150:	005b      	lsls	r3, r3, #1
 802f152:	4413      	add	r3, r2
 802f154:	00db      	lsls	r3, r3, #3
 802f156:	440b      	add	r3, r1
 802f158:	3312      	adds	r3, #18
 802f15a:	2200      	movs	r2, #0
 802f15c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 802f15e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 802f162:	4618      	mov	r0, r3
 802f164:	3720      	adds	r7, #32
 802f166:	46bd      	mov	sp, r7
 802f168:	bd80      	pop	{r7, pc}
 802f16a:	bf00      	nop
 802f16c:	20006aa0 	.word	0x20006aa0
 802f170:	08034cc4 	.word	0x08034cc4
 802f174:	08034cfc 	.word	0x08034cfc
 802f178:	08034d3c 	.word	0x08034d3c
 802f17c:	08034d64 	.word	0x08034d64
 802f180:	08034d7c 	.word	0x08034d7c
 802f184:	08034d90 	.word	0x08034d90

0802f188 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 802f188:	b580      	push	{r7, lr}
 802f18a:	b088      	sub	sp, #32
 802f18c:	af02      	add	r7, sp, #8
 802f18e:	60f8      	str	r0, [r7, #12]
 802f190:	60b9      	str	r1, [r7, #8]
 802f192:	607a      	str	r2, [r7, #4]
 802f194:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802f196:	68fb      	ldr	r3, [r7, #12]
 802f198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802f19c:	2b06      	cmp	r3, #6
 802f19e:	d006      	beq.n	802f1ae <etharp_update_arp_entry+0x26>
 802f1a0:	4b48      	ldr	r3, [pc, #288]	; (802f2c4 <etharp_update_arp_entry+0x13c>)
 802f1a2:	f240 12ab 	movw	r2, #427	; 0x1ab
 802f1a6:	4948      	ldr	r1, [pc, #288]	; (802f2c8 <etharp_update_arp_entry+0x140>)
 802f1a8:	4848      	ldr	r0, [pc, #288]	; (802f2cc <etharp_update_arp_entry+0x144>)
 802f1aa:	f002 f90b 	bl	80313c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802f1ae:	68bb      	ldr	r3, [r7, #8]
 802f1b0:	2b00      	cmp	r3, #0
 802f1b2:	d012      	beq.n	802f1da <etharp_update_arp_entry+0x52>
 802f1b4:	68bb      	ldr	r3, [r7, #8]
 802f1b6:	681b      	ldr	r3, [r3, #0]
 802f1b8:	2b00      	cmp	r3, #0
 802f1ba:	d00e      	beq.n	802f1da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802f1bc:	68bb      	ldr	r3, [r7, #8]
 802f1be:	681b      	ldr	r3, [r3, #0]
 802f1c0:	68f9      	ldr	r1, [r7, #12]
 802f1c2:	4618      	mov	r0, r3
 802f1c4:	f001 f8dc 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802f1c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 802f1ca:	2b00      	cmp	r3, #0
 802f1cc:	d105      	bne.n	802f1da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802f1ce:	68bb      	ldr	r3, [r7, #8]
 802f1d0:	681b      	ldr	r3, [r3, #0]
 802f1d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802f1d6:	2be0      	cmp	r3, #224	; 0xe0
 802f1d8:	d102      	bne.n	802f1e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802f1da:	f06f 030f 	mvn.w	r3, #15
 802f1de:	e06c      	b.n	802f2ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 802f1e0:	78fb      	ldrb	r3, [r7, #3]
 802f1e2:	68fa      	ldr	r2, [r7, #12]
 802f1e4:	4619      	mov	r1, r3
 802f1e6:	68b8      	ldr	r0, [r7, #8]
 802f1e8:	f7ff fe84 	bl	802eef4 <etharp_find_entry>
 802f1ec:	4603      	mov	r3, r0
 802f1ee:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 802f1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802f1f4:	2b00      	cmp	r3, #0
 802f1f6:	da02      	bge.n	802f1fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 802f1f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802f1fc:	e05d      	b.n	802f2ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802f1fe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f202:	4933      	ldr	r1, [pc, #204]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f204:	4613      	mov	r3, r2
 802f206:	005b      	lsls	r3, r3, #1
 802f208:	4413      	add	r3, r2
 802f20a:	00db      	lsls	r3, r3, #3
 802f20c:	440b      	add	r3, r1
 802f20e:	3314      	adds	r3, #20
 802f210:	2202      	movs	r2, #2
 802f212:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802f214:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f218:	492d      	ldr	r1, [pc, #180]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f21a:	4613      	mov	r3, r2
 802f21c:	005b      	lsls	r3, r3, #1
 802f21e:	4413      	add	r3, r2
 802f220:	00db      	lsls	r3, r3, #3
 802f222:	440b      	add	r3, r1
 802f224:	3308      	adds	r3, #8
 802f226:	68fa      	ldr	r2, [r7, #12]
 802f228:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 802f22a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f22e:	4613      	mov	r3, r2
 802f230:	005b      	lsls	r3, r3, #1
 802f232:	4413      	add	r3, r2
 802f234:	00db      	lsls	r3, r3, #3
 802f236:	3308      	adds	r3, #8
 802f238:	4a25      	ldr	r2, [pc, #148]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f23a:	4413      	add	r3, r2
 802f23c:	3304      	adds	r3, #4
 802f23e:	2206      	movs	r2, #6
 802f240:	6879      	ldr	r1, [r7, #4]
 802f242:	4618      	mov	r0, r3
 802f244:	f001 ffc8 	bl	80311d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 802f248:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f24c:	4920      	ldr	r1, [pc, #128]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f24e:	4613      	mov	r3, r2
 802f250:	005b      	lsls	r3, r3, #1
 802f252:	4413      	add	r3, r2
 802f254:	00db      	lsls	r3, r3, #3
 802f256:	440b      	add	r3, r1
 802f258:	3312      	adds	r3, #18
 802f25a:	2200      	movs	r2, #0
 802f25c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802f25e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f262:	491b      	ldr	r1, [pc, #108]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f264:	4613      	mov	r3, r2
 802f266:	005b      	lsls	r3, r3, #1
 802f268:	4413      	add	r3, r2
 802f26a:	00db      	lsls	r3, r3, #3
 802f26c:	440b      	add	r3, r1
 802f26e:	681b      	ldr	r3, [r3, #0]
 802f270:	2b00      	cmp	r3, #0
 802f272:	d021      	beq.n	802f2b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802f274:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f278:	4915      	ldr	r1, [pc, #84]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f27a:	4613      	mov	r3, r2
 802f27c:	005b      	lsls	r3, r3, #1
 802f27e:	4413      	add	r3, r2
 802f280:	00db      	lsls	r3, r3, #3
 802f282:	440b      	add	r3, r1
 802f284:	681b      	ldr	r3, [r3, #0]
 802f286:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 802f288:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f28c:	4910      	ldr	r1, [pc, #64]	; (802f2d0 <etharp_update_arp_entry+0x148>)
 802f28e:	4613      	mov	r3, r2
 802f290:	005b      	lsls	r3, r3, #1
 802f292:	4413      	add	r3, r2
 802f294:	00db      	lsls	r3, r3, #3
 802f296:	440b      	add	r3, r1
 802f298:	2200      	movs	r2, #0
 802f29a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 802f29c:	68fb      	ldr	r3, [r7, #12]
 802f29e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 802f2a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802f2a6:	9300      	str	r3, [sp, #0]
 802f2a8:	687b      	ldr	r3, [r7, #4]
 802f2aa:	6939      	ldr	r1, [r7, #16]
 802f2ac:	68f8      	ldr	r0, [r7, #12]
 802f2ae:	f001 ff0f 	bl	80310d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802f2b2:	6938      	ldr	r0, [r7, #16]
 802f2b4:	f7f9 fe38 	bl	8028f28 <pbuf_free>
  }
  return ERR_OK;
 802f2b8:	2300      	movs	r3, #0
}
 802f2ba:	4618      	mov	r0, r3
 802f2bc:	3718      	adds	r7, #24
 802f2be:	46bd      	mov	sp, r7
 802f2c0:	bd80      	pop	{r7, pc}
 802f2c2:	bf00      	nop
 802f2c4:	08034cc4 	.word	0x08034cc4
 802f2c8:	08034dbc 	.word	0x08034dbc
 802f2cc:	08034d3c 	.word	0x08034d3c
 802f2d0:	20006aa0 	.word	0x20006aa0

0802f2d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 802f2d4:	b580      	push	{r7, lr}
 802f2d6:	b084      	sub	sp, #16
 802f2d8:	af00      	add	r7, sp, #0
 802f2da:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802f2dc:	2300      	movs	r3, #0
 802f2de:	73fb      	strb	r3, [r7, #15]
 802f2e0:	e01f      	b.n	802f322 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 802f2e2:	7bfa      	ldrb	r2, [r7, #15]
 802f2e4:	4913      	ldr	r1, [pc, #76]	; (802f334 <etharp_cleanup_netif+0x60>)
 802f2e6:	4613      	mov	r3, r2
 802f2e8:	005b      	lsls	r3, r3, #1
 802f2ea:	4413      	add	r3, r2
 802f2ec:	00db      	lsls	r3, r3, #3
 802f2ee:	440b      	add	r3, r1
 802f2f0:	3314      	adds	r3, #20
 802f2f2:	781b      	ldrb	r3, [r3, #0]
 802f2f4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802f2f6:	7bbb      	ldrb	r3, [r7, #14]
 802f2f8:	2b00      	cmp	r3, #0
 802f2fa:	d00f      	beq.n	802f31c <etharp_cleanup_netif+0x48>
 802f2fc:	7bfa      	ldrb	r2, [r7, #15]
 802f2fe:	490d      	ldr	r1, [pc, #52]	; (802f334 <etharp_cleanup_netif+0x60>)
 802f300:	4613      	mov	r3, r2
 802f302:	005b      	lsls	r3, r3, #1
 802f304:	4413      	add	r3, r2
 802f306:	00db      	lsls	r3, r3, #3
 802f308:	440b      	add	r3, r1
 802f30a:	3308      	adds	r3, #8
 802f30c:	681b      	ldr	r3, [r3, #0]
 802f30e:	687a      	ldr	r2, [r7, #4]
 802f310:	429a      	cmp	r2, r3
 802f312:	d103      	bne.n	802f31c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 802f314:	7bfb      	ldrb	r3, [r7, #15]
 802f316:	4618      	mov	r0, r3
 802f318:	f7ff fd12 	bl	802ed40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802f31c:	7bfb      	ldrb	r3, [r7, #15]
 802f31e:	3301      	adds	r3, #1
 802f320:	73fb      	strb	r3, [r7, #15]
 802f322:	7bfb      	ldrb	r3, [r7, #15]
 802f324:	2b09      	cmp	r3, #9
 802f326:	d9dc      	bls.n	802f2e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 802f328:	bf00      	nop
 802f32a:	bf00      	nop
 802f32c:	3710      	adds	r7, #16
 802f32e:	46bd      	mov	sp, r7
 802f330:	bd80      	pop	{r7, pc}
 802f332:	bf00      	nop
 802f334:	20006aa0 	.word	0x20006aa0

0802f338 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802f338:	b5b0      	push	{r4, r5, r7, lr}
 802f33a:	b08a      	sub	sp, #40	; 0x28
 802f33c:	af04      	add	r7, sp, #16
 802f33e:	6078      	str	r0, [r7, #4]
 802f340:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802f342:	683b      	ldr	r3, [r7, #0]
 802f344:	2b00      	cmp	r3, #0
 802f346:	d107      	bne.n	802f358 <etharp_input+0x20>
 802f348:	4b3d      	ldr	r3, [pc, #244]	; (802f440 <etharp_input+0x108>)
 802f34a:	f44f 7222 	mov.w	r2, #648	; 0x288
 802f34e:	493d      	ldr	r1, [pc, #244]	; (802f444 <etharp_input+0x10c>)
 802f350:	483d      	ldr	r0, [pc, #244]	; (802f448 <etharp_input+0x110>)
 802f352:	f002 f837 	bl	80313c4 <iprintf>
 802f356:	e06f      	b.n	802f438 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 802f358:	687b      	ldr	r3, [r7, #4]
 802f35a:	685b      	ldr	r3, [r3, #4]
 802f35c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 802f35e:	693b      	ldr	r3, [r7, #16]
 802f360:	881b      	ldrh	r3, [r3, #0]
 802f362:	b29b      	uxth	r3, r3
 802f364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802f368:	d10c      	bne.n	802f384 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802f36a:	693b      	ldr	r3, [r7, #16]
 802f36c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 802f36e:	2b06      	cmp	r3, #6
 802f370:	d108      	bne.n	802f384 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802f372:	693b      	ldr	r3, [r7, #16]
 802f374:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802f376:	2b04      	cmp	r3, #4
 802f378:	d104      	bne.n	802f384 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802f37a:	693b      	ldr	r3, [r7, #16]
 802f37c:	885b      	ldrh	r3, [r3, #2]
 802f37e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802f380:	2b08      	cmp	r3, #8
 802f382:	d003      	beq.n	802f38c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802f384:	6878      	ldr	r0, [r7, #4]
 802f386:	f7f9 fdcf 	bl	8028f28 <pbuf_free>
    return;
 802f38a:	e055      	b.n	802f438 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 802f38c:	693b      	ldr	r3, [r7, #16]
 802f38e:	330e      	adds	r3, #14
 802f390:	681b      	ldr	r3, [r3, #0]
 802f392:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 802f394:	693b      	ldr	r3, [r7, #16]
 802f396:	3318      	adds	r3, #24
 802f398:	681b      	ldr	r3, [r3, #0]
 802f39a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802f39c:	683b      	ldr	r3, [r7, #0]
 802f39e:	3304      	adds	r3, #4
 802f3a0:	681b      	ldr	r3, [r3, #0]
 802f3a2:	2b00      	cmp	r3, #0
 802f3a4:	d102      	bne.n	802f3ac <etharp_input+0x74>
    for_us = 0;
 802f3a6:	2300      	movs	r3, #0
 802f3a8:	75fb      	strb	r3, [r7, #23]
 802f3aa:	e009      	b.n	802f3c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802f3ac:	68ba      	ldr	r2, [r7, #8]
 802f3ae:	683b      	ldr	r3, [r7, #0]
 802f3b0:	3304      	adds	r3, #4
 802f3b2:	681b      	ldr	r3, [r3, #0]
 802f3b4:	429a      	cmp	r2, r3
 802f3b6:	bf0c      	ite	eq
 802f3b8:	2301      	moveq	r3, #1
 802f3ba:	2300      	movne	r3, #0
 802f3bc:	b2db      	uxtb	r3, r3
 802f3be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802f3c0:	693b      	ldr	r3, [r7, #16]
 802f3c2:	f103 0208 	add.w	r2, r3, #8
 802f3c6:	7dfb      	ldrb	r3, [r7, #23]
 802f3c8:	2b00      	cmp	r3, #0
 802f3ca:	d001      	beq.n	802f3d0 <etharp_input+0x98>
 802f3cc:	2301      	movs	r3, #1
 802f3ce:	e000      	b.n	802f3d2 <etharp_input+0x9a>
 802f3d0:	2302      	movs	r3, #2
 802f3d2:	f107 010c 	add.w	r1, r7, #12
 802f3d6:	6838      	ldr	r0, [r7, #0]
 802f3d8:	f7ff fed6 	bl	802f188 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 802f3dc:	693b      	ldr	r3, [r7, #16]
 802f3de:	88db      	ldrh	r3, [r3, #6]
 802f3e0:	b29b      	uxth	r3, r3
 802f3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802f3e6:	d003      	beq.n	802f3f0 <etharp_input+0xb8>
 802f3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802f3ec:	d01e      	beq.n	802f42c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 802f3ee:	e020      	b.n	802f432 <etharp_input+0xfa>
    if (for_us) {
 802f3f0:	7dfb      	ldrb	r3, [r7, #23]
 802f3f2:	2b00      	cmp	r3, #0
 802f3f4:	d01c      	beq.n	802f430 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802f3f6:	683b      	ldr	r3, [r7, #0]
 802f3f8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 802f3fc:	693b      	ldr	r3, [r7, #16]
 802f3fe:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802f402:	683b      	ldr	r3, [r7, #0]
 802f404:	f103 0525 	add.w	r5, r3, #37	; 0x25
 802f408:	683b      	ldr	r3, [r7, #0]
 802f40a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 802f40c:	693a      	ldr	r2, [r7, #16]
 802f40e:	3208      	adds	r2, #8
      etharp_raw(netif,
 802f410:	2102      	movs	r1, #2
 802f412:	9103      	str	r1, [sp, #12]
 802f414:	f107 010c 	add.w	r1, r7, #12
 802f418:	9102      	str	r1, [sp, #8]
 802f41a:	9201      	str	r2, [sp, #4]
 802f41c:	9300      	str	r3, [sp, #0]
 802f41e:	462b      	mov	r3, r5
 802f420:	4622      	mov	r2, r4
 802f422:	4601      	mov	r1, r0
 802f424:	6838      	ldr	r0, [r7, #0]
 802f426:	f000 fae1 	bl	802f9ec <etharp_raw>
    break;
 802f42a:	e001      	b.n	802f430 <etharp_input+0xf8>
    break;
 802f42c:	bf00      	nop
 802f42e:	e000      	b.n	802f432 <etharp_input+0xfa>
    break;
 802f430:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802f432:	6878      	ldr	r0, [r7, #4]
 802f434:	f7f9 fd78 	bl	8028f28 <pbuf_free>
}
 802f438:	3718      	adds	r7, #24
 802f43a:	46bd      	mov	sp, r7
 802f43c:	bdb0      	pop	{r4, r5, r7, pc}
 802f43e:	bf00      	nop
 802f440:	08034cc4 	.word	0x08034cc4
 802f444:	08034e14 	.word	0x08034e14
 802f448:	08034d3c 	.word	0x08034d3c

0802f44c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 802f44c:	b580      	push	{r7, lr}
 802f44e:	b086      	sub	sp, #24
 802f450:	af02      	add	r7, sp, #8
 802f452:	60f8      	str	r0, [r7, #12]
 802f454:	60b9      	str	r1, [r7, #8]
 802f456:	4613      	mov	r3, r2
 802f458:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802f45a:	79fa      	ldrb	r2, [r7, #7]
 802f45c:	4944      	ldr	r1, [pc, #272]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f45e:	4613      	mov	r3, r2
 802f460:	005b      	lsls	r3, r3, #1
 802f462:	4413      	add	r3, r2
 802f464:	00db      	lsls	r3, r3, #3
 802f466:	440b      	add	r3, r1
 802f468:	3314      	adds	r3, #20
 802f46a:	781b      	ldrb	r3, [r3, #0]
 802f46c:	2b01      	cmp	r3, #1
 802f46e:	d806      	bhi.n	802f47e <etharp_output_to_arp_index+0x32>
 802f470:	4b40      	ldr	r3, [pc, #256]	; (802f574 <etharp_output_to_arp_index+0x128>)
 802f472:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 802f476:	4940      	ldr	r1, [pc, #256]	; (802f578 <etharp_output_to_arp_index+0x12c>)
 802f478:	4840      	ldr	r0, [pc, #256]	; (802f57c <etharp_output_to_arp_index+0x130>)
 802f47a:	f001 ffa3 	bl	80313c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802f47e:	79fa      	ldrb	r2, [r7, #7]
 802f480:	493b      	ldr	r1, [pc, #236]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f482:	4613      	mov	r3, r2
 802f484:	005b      	lsls	r3, r3, #1
 802f486:	4413      	add	r3, r2
 802f488:	00db      	lsls	r3, r3, #3
 802f48a:	440b      	add	r3, r1
 802f48c:	3314      	adds	r3, #20
 802f48e:	781b      	ldrb	r3, [r3, #0]
 802f490:	2b02      	cmp	r3, #2
 802f492:	d153      	bne.n	802f53c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802f494:	79fa      	ldrb	r2, [r7, #7]
 802f496:	4936      	ldr	r1, [pc, #216]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f498:	4613      	mov	r3, r2
 802f49a:	005b      	lsls	r3, r3, #1
 802f49c:	4413      	add	r3, r2
 802f49e:	00db      	lsls	r3, r3, #3
 802f4a0:	440b      	add	r3, r1
 802f4a2:	3312      	adds	r3, #18
 802f4a4:	881b      	ldrh	r3, [r3, #0]
 802f4a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 802f4aa:	d919      	bls.n	802f4e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802f4ac:	79fa      	ldrb	r2, [r7, #7]
 802f4ae:	4613      	mov	r3, r2
 802f4b0:	005b      	lsls	r3, r3, #1
 802f4b2:	4413      	add	r3, r2
 802f4b4:	00db      	lsls	r3, r3, #3
 802f4b6:	4a2e      	ldr	r2, [pc, #184]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f4b8:	4413      	add	r3, r2
 802f4ba:	3304      	adds	r3, #4
 802f4bc:	4619      	mov	r1, r3
 802f4be:	68f8      	ldr	r0, [r7, #12]
 802f4c0:	f000 fb42 	bl	802fb48 <etharp_request>
 802f4c4:	4603      	mov	r3, r0
 802f4c6:	2b00      	cmp	r3, #0
 802f4c8:	d138      	bne.n	802f53c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802f4ca:	79fa      	ldrb	r2, [r7, #7]
 802f4cc:	4928      	ldr	r1, [pc, #160]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f4ce:	4613      	mov	r3, r2
 802f4d0:	005b      	lsls	r3, r3, #1
 802f4d2:	4413      	add	r3, r2
 802f4d4:	00db      	lsls	r3, r3, #3
 802f4d6:	440b      	add	r3, r1
 802f4d8:	3314      	adds	r3, #20
 802f4da:	2203      	movs	r2, #3
 802f4dc:	701a      	strb	r2, [r3, #0]
 802f4de:	e02d      	b.n	802f53c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802f4e0:	79fa      	ldrb	r2, [r7, #7]
 802f4e2:	4923      	ldr	r1, [pc, #140]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f4e4:	4613      	mov	r3, r2
 802f4e6:	005b      	lsls	r3, r3, #1
 802f4e8:	4413      	add	r3, r2
 802f4ea:	00db      	lsls	r3, r3, #3
 802f4ec:	440b      	add	r3, r1
 802f4ee:	3312      	adds	r3, #18
 802f4f0:	881b      	ldrh	r3, [r3, #0]
 802f4f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802f4f6:	d321      	bcc.n	802f53c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802f4f8:	79fa      	ldrb	r2, [r7, #7]
 802f4fa:	4613      	mov	r3, r2
 802f4fc:	005b      	lsls	r3, r3, #1
 802f4fe:	4413      	add	r3, r2
 802f500:	00db      	lsls	r3, r3, #3
 802f502:	4a1b      	ldr	r2, [pc, #108]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f504:	4413      	add	r3, r2
 802f506:	1d19      	adds	r1, r3, #4
 802f508:	79fa      	ldrb	r2, [r7, #7]
 802f50a:	4613      	mov	r3, r2
 802f50c:	005b      	lsls	r3, r3, #1
 802f50e:	4413      	add	r3, r2
 802f510:	00db      	lsls	r3, r3, #3
 802f512:	3308      	adds	r3, #8
 802f514:	4a16      	ldr	r2, [pc, #88]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f516:	4413      	add	r3, r2
 802f518:	3304      	adds	r3, #4
 802f51a:	461a      	mov	r2, r3
 802f51c:	68f8      	ldr	r0, [r7, #12]
 802f51e:	f000 faf1 	bl	802fb04 <etharp_request_dst>
 802f522:	4603      	mov	r3, r0
 802f524:	2b00      	cmp	r3, #0
 802f526:	d109      	bne.n	802f53c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802f528:	79fa      	ldrb	r2, [r7, #7]
 802f52a:	4911      	ldr	r1, [pc, #68]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f52c:	4613      	mov	r3, r2
 802f52e:	005b      	lsls	r3, r3, #1
 802f530:	4413      	add	r3, r2
 802f532:	00db      	lsls	r3, r3, #3
 802f534:	440b      	add	r3, r1
 802f536:	3314      	adds	r3, #20
 802f538:	2203      	movs	r2, #3
 802f53a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802f53c:	68fb      	ldr	r3, [r7, #12]
 802f53e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 802f542:	79fa      	ldrb	r2, [r7, #7]
 802f544:	4613      	mov	r3, r2
 802f546:	005b      	lsls	r3, r3, #1
 802f548:	4413      	add	r3, r2
 802f54a:	00db      	lsls	r3, r3, #3
 802f54c:	3308      	adds	r3, #8
 802f54e:	4a08      	ldr	r2, [pc, #32]	; (802f570 <etharp_output_to_arp_index+0x124>)
 802f550:	4413      	add	r3, r2
 802f552:	3304      	adds	r3, #4
 802f554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802f558:	9200      	str	r2, [sp, #0]
 802f55a:	460a      	mov	r2, r1
 802f55c:	68b9      	ldr	r1, [r7, #8]
 802f55e:	68f8      	ldr	r0, [r7, #12]
 802f560:	f001 fdb6 	bl	80310d0 <ethernet_output>
 802f564:	4603      	mov	r3, r0
}
 802f566:	4618      	mov	r0, r3
 802f568:	3710      	adds	r7, #16
 802f56a:	46bd      	mov	sp, r7
 802f56c:	bd80      	pop	{r7, pc}
 802f56e:	bf00      	nop
 802f570:	20006aa0 	.word	0x20006aa0
 802f574:	08034cc4 	.word	0x08034cc4
 802f578:	08034e34 	.word	0x08034e34
 802f57c:	08034d3c 	.word	0x08034d3c

0802f580 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 802f580:	b580      	push	{r7, lr}
 802f582:	b08a      	sub	sp, #40	; 0x28
 802f584:	af02      	add	r7, sp, #8
 802f586:	60f8      	str	r0, [r7, #12]
 802f588:	60b9      	str	r1, [r7, #8]
 802f58a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 802f58c:	687b      	ldr	r3, [r7, #4]
 802f58e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802f590:	68fb      	ldr	r3, [r7, #12]
 802f592:	2b00      	cmp	r3, #0
 802f594:	d106      	bne.n	802f5a4 <etharp_output+0x24>
 802f596:	4b69      	ldr	r3, [pc, #420]	; (802f73c <etharp_output+0x1bc>)
 802f598:	f240 321b 	movw	r2, #795	; 0x31b
 802f59c:	4968      	ldr	r1, [pc, #416]	; (802f740 <etharp_output+0x1c0>)
 802f59e:	4869      	ldr	r0, [pc, #420]	; (802f744 <etharp_output+0x1c4>)
 802f5a0:	f001 ff10 	bl	80313c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802f5a4:	68bb      	ldr	r3, [r7, #8]
 802f5a6:	2b00      	cmp	r3, #0
 802f5a8:	d106      	bne.n	802f5b8 <etharp_output+0x38>
 802f5aa:	4b64      	ldr	r3, [pc, #400]	; (802f73c <etharp_output+0x1bc>)
 802f5ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 802f5b0:	4965      	ldr	r1, [pc, #404]	; (802f748 <etharp_output+0x1c8>)
 802f5b2:	4864      	ldr	r0, [pc, #400]	; (802f744 <etharp_output+0x1c4>)
 802f5b4:	f001 ff06 	bl	80313c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802f5b8:	687b      	ldr	r3, [r7, #4]
 802f5ba:	2b00      	cmp	r3, #0
 802f5bc:	d106      	bne.n	802f5cc <etharp_output+0x4c>
 802f5be:	4b5f      	ldr	r3, [pc, #380]	; (802f73c <etharp_output+0x1bc>)
 802f5c0:	f240 321d 	movw	r2, #797	; 0x31d
 802f5c4:	4961      	ldr	r1, [pc, #388]	; (802f74c <etharp_output+0x1cc>)
 802f5c6:	485f      	ldr	r0, [pc, #380]	; (802f744 <etharp_output+0x1c4>)
 802f5c8:	f001 fefc 	bl	80313c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802f5cc:	687b      	ldr	r3, [r7, #4]
 802f5ce:	681b      	ldr	r3, [r3, #0]
 802f5d0:	68f9      	ldr	r1, [r7, #12]
 802f5d2:	4618      	mov	r0, r3
 802f5d4:	f000 fed4 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802f5d8:	4603      	mov	r3, r0
 802f5da:	2b00      	cmp	r3, #0
 802f5dc:	d002      	beq.n	802f5e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802f5de:	4b5c      	ldr	r3, [pc, #368]	; (802f750 <etharp_output+0x1d0>)
 802f5e0:	61fb      	str	r3, [r7, #28]
 802f5e2:	e09b      	b.n	802f71c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 802f5e4:	687b      	ldr	r3, [r7, #4]
 802f5e6:	681b      	ldr	r3, [r3, #0]
 802f5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802f5ec:	2be0      	cmp	r3, #224	; 0xe0
 802f5ee:	d118      	bne.n	802f622 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802f5f0:	2301      	movs	r3, #1
 802f5f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802f5f4:	2300      	movs	r3, #0
 802f5f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802f5f8:	235e      	movs	r3, #94	; 0x5e
 802f5fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802f5fc:	687b      	ldr	r3, [r7, #4]
 802f5fe:	3301      	adds	r3, #1
 802f600:	781b      	ldrb	r3, [r3, #0]
 802f602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f606:	b2db      	uxtb	r3, r3
 802f608:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802f60a:	687b      	ldr	r3, [r7, #4]
 802f60c:	3302      	adds	r3, #2
 802f60e:	781b      	ldrb	r3, [r3, #0]
 802f610:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802f612:	687b      	ldr	r3, [r7, #4]
 802f614:	3303      	adds	r3, #3
 802f616:	781b      	ldrb	r3, [r3, #0]
 802f618:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802f61a:	f107 0310 	add.w	r3, r7, #16
 802f61e:	61fb      	str	r3, [r7, #28]
 802f620:	e07c      	b.n	802f71c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	681a      	ldr	r2, [r3, #0]
 802f626:	68fb      	ldr	r3, [r7, #12]
 802f628:	3304      	adds	r3, #4
 802f62a:	681b      	ldr	r3, [r3, #0]
 802f62c:	405a      	eors	r2, r3
 802f62e:	68fb      	ldr	r3, [r7, #12]
 802f630:	3308      	adds	r3, #8
 802f632:	681b      	ldr	r3, [r3, #0]
 802f634:	4013      	ands	r3, r2
 802f636:	2b00      	cmp	r3, #0
 802f638:	d012      	beq.n	802f660 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802f63a:	687b      	ldr	r3, [r7, #4]
 802f63c:	681b      	ldr	r3, [r3, #0]
 802f63e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802f640:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 802f644:	4293      	cmp	r3, r2
 802f646:	d00b      	beq.n	802f660 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 802f648:	68fb      	ldr	r3, [r7, #12]
 802f64a:	330c      	adds	r3, #12
 802f64c:	681b      	ldr	r3, [r3, #0]
 802f64e:	2b00      	cmp	r3, #0
 802f650:	d003      	beq.n	802f65a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802f652:	68fb      	ldr	r3, [r7, #12]
 802f654:	330c      	adds	r3, #12
 802f656:	61bb      	str	r3, [r7, #24]
 802f658:	e002      	b.n	802f660 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802f65a:	f06f 0303 	mvn.w	r3, #3
 802f65e:	e069      	b.n	802f734 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802f660:	4b3c      	ldr	r3, [pc, #240]	; (802f754 <etharp_output+0x1d4>)
 802f662:	781b      	ldrb	r3, [r3, #0]
 802f664:	4619      	mov	r1, r3
 802f666:	4a3c      	ldr	r2, [pc, #240]	; (802f758 <etharp_output+0x1d8>)
 802f668:	460b      	mov	r3, r1
 802f66a:	005b      	lsls	r3, r3, #1
 802f66c:	440b      	add	r3, r1
 802f66e:	00db      	lsls	r3, r3, #3
 802f670:	4413      	add	r3, r2
 802f672:	3314      	adds	r3, #20
 802f674:	781b      	ldrb	r3, [r3, #0]
 802f676:	2b01      	cmp	r3, #1
 802f678:	d917      	bls.n	802f6aa <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 802f67a:	69bb      	ldr	r3, [r7, #24]
 802f67c:	681a      	ldr	r2, [r3, #0]
 802f67e:	4b35      	ldr	r3, [pc, #212]	; (802f754 <etharp_output+0x1d4>)
 802f680:	781b      	ldrb	r3, [r3, #0]
 802f682:	4618      	mov	r0, r3
 802f684:	4934      	ldr	r1, [pc, #208]	; (802f758 <etharp_output+0x1d8>)
 802f686:	4603      	mov	r3, r0
 802f688:	005b      	lsls	r3, r3, #1
 802f68a:	4403      	add	r3, r0
 802f68c:	00db      	lsls	r3, r3, #3
 802f68e:	440b      	add	r3, r1
 802f690:	3304      	adds	r3, #4
 802f692:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802f694:	429a      	cmp	r2, r3
 802f696:	d108      	bne.n	802f6aa <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802f698:	4b2e      	ldr	r3, [pc, #184]	; (802f754 <etharp_output+0x1d4>)
 802f69a:	781b      	ldrb	r3, [r3, #0]
 802f69c:	461a      	mov	r2, r3
 802f69e:	68b9      	ldr	r1, [r7, #8]
 802f6a0:	68f8      	ldr	r0, [r7, #12]
 802f6a2:	f7ff fed3 	bl	802f44c <etharp_output_to_arp_index>
 802f6a6:	4603      	mov	r3, r0
 802f6a8:	e044      	b.n	802f734 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802f6aa:	2300      	movs	r3, #0
 802f6ac:	75fb      	strb	r3, [r7, #23]
 802f6ae:	e02a      	b.n	802f706 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802f6b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f6b4:	4928      	ldr	r1, [pc, #160]	; (802f758 <etharp_output+0x1d8>)
 802f6b6:	4613      	mov	r3, r2
 802f6b8:	005b      	lsls	r3, r3, #1
 802f6ba:	4413      	add	r3, r2
 802f6bc:	00db      	lsls	r3, r3, #3
 802f6be:	440b      	add	r3, r1
 802f6c0:	3314      	adds	r3, #20
 802f6c2:	781b      	ldrb	r3, [r3, #0]
 802f6c4:	2b01      	cmp	r3, #1
 802f6c6:	d918      	bls.n	802f6fa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802f6c8:	69bb      	ldr	r3, [r7, #24]
 802f6ca:	6819      	ldr	r1, [r3, #0]
 802f6cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802f6d0:	4821      	ldr	r0, [pc, #132]	; (802f758 <etharp_output+0x1d8>)
 802f6d2:	4613      	mov	r3, r2
 802f6d4:	005b      	lsls	r3, r3, #1
 802f6d6:	4413      	add	r3, r2
 802f6d8:	00db      	lsls	r3, r3, #3
 802f6da:	4403      	add	r3, r0
 802f6dc:	3304      	adds	r3, #4
 802f6de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802f6e0:	4299      	cmp	r1, r3
 802f6e2:	d10a      	bne.n	802f6fa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 802f6e4:	7dfa      	ldrb	r2, [r7, #23]
 802f6e6:	4b1b      	ldr	r3, [pc, #108]	; (802f754 <etharp_output+0x1d4>)
 802f6e8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802f6ea:	7dfb      	ldrb	r3, [r7, #23]
 802f6ec:	461a      	mov	r2, r3
 802f6ee:	68b9      	ldr	r1, [r7, #8]
 802f6f0:	68f8      	ldr	r0, [r7, #12]
 802f6f2:	f7ff feab 	bl	802f44c <etharp_output_to_arp_index>
 802f6f6:	4603      	mov	r3, r0
 802f6f8:	e01c      	b.n	802f734 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802f6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802f6fe:	b2db      	uxtb	r3, r3
 802f700:	3301      	adds	r3, #1
 802f702:	b2db      	uxtb	r3, r3
 802f704:	75fb      	strb	r3, [r7, #23]
 802f706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802f70a:	2b09      	cmp	r3, #9
 802f70c:	ddd0      	ble.n	802f6b0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802f70e:	68ba      	ldr	r2, [r7, #8]
 802f710:	69b9      	ldr	r1, [r7, #24]
 802f712:	68f8      	ldr	r0, [r7, #12]
 802f714:	f000 f822 	bl	802f75c <etharp_query>
 802f718:	4603      	mov	r3, r0
 802f71a:	e00b      	b.n	802f734 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 802f71c:	68fb      	ldr	r3, [r7, #12]
 802f71e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 802f722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802f726:	9300      	str	r3, [sp, #0]
 802f728:	69fb      	ldr	r3, [r7, #28]
 802f72a:	68b9      	ldr	r1, [r7, #8]
 802f72c:	68f8      	ldr	r0, [r7, #12]
 802f72e:	f001 fccf 	bl	80310d0 <ethernet_output>
 802f732:	4603      	mov	r3, r0
}
 802f734:	4618      	mov	r0, r3
 802f736:	3720      	adds	r7, #32
 802f738:	46bd      	mov	sp, r7
 802f73a:	bd80      	pop	{r7, pc}
 802f73c:	08034cc4 	.word	0x08034cc4
 802f740:	08034e14 	.word	0x08034e14
 802f744:	08034d3c 	.word	0x08034d3c
 802f748:	08034e64 	.word	0x08034e64
 802f74c:	08034e04 	.word	0x08034e04
 802f750:	0803542c 	.word	0x0803542c
 802f754:	20006b90 	.word	0x20006b90
 802f758:	20006aa0 	.word	0x20006aa0

0802f75c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 802f75c:	b580      	push	{r7, lr}
 802f75e:	b08c      	sub	sp, #48	; 0x30
 802f760:	af02      	add	r7, sp, #8
 802f762:	60f8      	str	r0, [r7, #12]
 802f764:	60b9      	str	r1, [r7, #8]
 802f766:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 802f768:	68fb      	ldr	r3, [r7, #12]
 802f76a:	3325      	adds	r3, #37	; 0x25
 802f76c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 802f76e:	23ff      	movs	r3, #255	; 0xff
 802f770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 802f774:	2300      	movs	r3, #0
 802f776:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802f778:	68bb      	ldr	r3, [r7, #8]
 802f77a:	681b      	ldr	r3, [r3, #0]
 802f77c:	68f9      	ldr	r1, [r7, #12]
 802f77e:	4618      	mov	r0, r3
 802f780:	f000 fdfe 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802f784:	4603      	mov	r3, r0
 802f786:	2b00      	cmp	r3, #0
 802f788:	d10c      	bne.n	802f7a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802f78a:	68bb      	ldr	r3, [r7, #8]
 802f78c:	681b      	ldr	r3, [r3, #0]
 802f78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802f792:	2be0      	cmp	r3, #224	; 0xe0
 802f794:	d006      	beq.n	802f7a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802f796:	68bb      	ldr	r3, [r7, #8]
 802f798:	2b00      	cmp	r3, #0
 802f79a:	d003      	beq.n	802f7a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 802f79c:	68bb      	ldr	r3, [r7, #8]
 802f79e:	681b      	ldr	r3, [r3, #0]
 802f7a0:	2b00      	cmp	r3, #0
 802f7a2:	d102      	bne.n	802f7aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802f7a4:	f06f 030f 	mvn.w	r3, #15
 802f7a8:	e10e      	b.n	802f9c8 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802f7aa:	68fa      	ldr	r2, [r7, #12]
 802f7ac:	2101      	movs	r1, #1
 802f7ae:	68b8      	ldr	r0, [r7, #8]
 802f7b0:	f7ff fba0 	bl	802eef4 <etharp_find_entry>
 802f7b4:	4603      	mov	r3, r0
 802f7b6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 802f7b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802f7bc:	2b00      	cmp	r3, #0
 802f7be:	da02      	bge.n	802f7c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 802f7c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802f7c4:	e100      	b.n	802f9c8 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802f7c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f7ca:	4981      	ldr	r1, [pc, #516]	; (802f9d0 <etharp_query+0x274>)
 802f7cc:	4613      	mov	r3, r2
 802f7ce:	005b      	lsls	r3, r3, #1
 802f7d0:	4413      	add	r3, r2
 802f7d2:	00db      	lsls	r3, r3, #3
 802f7d4:	440b      	add	r3, r1
 802f7d6:	3314      	adds	r3, #20
 802f7d8:	781b      	ldrb	r3, [r3, #0]
 802f7da:	2b00      	cmp	r3, #0
 802f7dc:	d117      	bne.n	802f80e <etharp_query+0xb2>
    is_new_entry = 1;
 802f7de:	2301      	movs	r3, #1
 802f7e0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802f7e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f7e6:	497a      	ldr	r1, [pc, #488]	; (802f9d0 <etharp_query+0x274>)
 802f7e8:	4613      	mov	r3, r2
 802f7ea:	005b      	lsls	r3, r3, #1
 802f7ec:	4413      	add	r3, r2
 802f7ee:	00db      	lsls	r3, r3, #3
 802f7f0:	440b      	add	r3, r1
 802f7f2:	3314      	adds	r3, #20
 802f7f4:	2201      	movs	r2, #1
 802f7f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 802f7f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f7fc:	4974      	ldr	r1, [pc, #464]	; (802f9d0 <etharp_query+0x274>)
 802f7fe:	4613      	mov	r3, r2
 802f800:	005b      	lsls	r3, r3, #1
 802f802:	4413      	add	r3, r2
 802f804:	00db      	lsls	r3, r3, #3
 802f806:	440b      	add	r3, r1
 802f808:	3308      	adds	r3, #8
 802f80a:	68fa      	ldr	r2, [r7, #12]
 802f80c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 802f80e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f812:	496f      	ldr	r1, [pc, #444]	; (802f9d0 <etharp_query+0x274>)
 802f814:	4613      	mov	r3, r2
 802f816:	005b      	lsls	r3, r3, #1
 802f818:	4413      	add	r3, r2
 802f81a:	00db      	lsls	r3, r3, #3
 802f81c:	440b      	add	r3, r1
 802f81e:	3314      	adds	r3, #20
 802f820:	781b      	ldrb	r3, [r3, #0]
 802f822:	2b01      	cmp	r3, #1
 802f824:	d012      	beq.n	802f84c <etharp_query+0xf0>
 802f826:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f82a:	4969      	ldr	r1, [pc, #420]	; (802f9d0 <etharp_query+0x274>)
 802f82c:	4613      	mov	r3, r2
 802f82e:	005b      	lsls	r3, r3, #1
 802f830:	4413      	add	r3, r2
 802f832:	00db      	lsls	r3, r3, #3
 802f834:	440b      	add	r3, r1
 802f836:	3314      	adds	r3, #20
 802f838:	781b      	ldrb	r3, [r3, #0]
 802f83a:	2b01      	cmp	r3, #1
 802f83c:	d806      	bhi.n	802f84c <etharp_query+0xf0>
 802f83e:	4b65      	ldr	r3, [pc, #404]	; (802f9d4 <etharp_query+0x278>)
 802f840:	f240 32c7 	movw	r2, #967	; 0x3c7
 802f844:	4964      	ldr	r1, [pc, #400]	; (802f9d8 <etharp_query+0x27c>)
 802f846:	4865      	ldr	r0, [pc, #404]	; (802f9dc <etharp_query+0x280>)
 802f848:	f001 fdbc 	bl	80313c4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802f84c:	6a3b      	ldr	r3, [r7, #32]
 802f84e:	2b00      	cmp	r3, #0
 802f850:	d102      	bne.n	802f858 <etharp_query+0xfc>
 802f852:	687b      	ldr	r3, [r7, #4]
 802f854:	2b00      	cmp	r3, #0
 802f856:	d10c      	bne.n	802f872 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802f858:	68b9      	ldr	r1, [r7, #8]
 802f85a:	68f8      	ldr	r0, [r7, #12]
 802f85c:	f000 f974 	bl	802fb48 <etharp_request>
 802f860:	4603      	mov	r3, r0
 802f862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 802f866:	687b      	ldr	r3, [r7, #4]
 802f868:	2b00      	cmp	r3, #0
 802f86a:	d102      	bne.n	802f872 <etharp_query+0x116>
      return result;
 802f86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802f870:	e0aa      	b.n	802f9c8 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 802f872:	687b      	ldr	r3, [r7, #4]
 802f874:	2b00      	cmp	r3, #0
 802f876:	d106      	bne.n	802f886 <etharp_query+0x12a>
 802f878:	4b56      	ldr	r3, [pc, #344]	; (802f9d4 <etharp_query+0x278>)
 802f87a:	f240 32db 	movw	r2, #987	; 0x3db
 802f87e:	4958      	ldr	r1, [pc, #352]	; (802f9e0 <etharp_query+0x284>)
 802f880:	4856      	ldr	r0, [pc, #344]	; (802f9dc <etharp_query+0x280>)
 802f882:	f001 fd9f 	bl	80313c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802f886:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f88a:	4951      	ldr	r1, [pc, #324]	; (802f9d0 <etharp_query+0x274>)
 802f88c:	4613      	mov	r3, r2
 802f88e:	005b      	lsls	r3, r3, #1
 802f890:	4413      	add	r3, r2
 802f892:	00db      	lsls	r3, r3, #3
 802f894:	440b      	add	r3, r1
 802f896:	3314      	adds	r3, #20
 802f898:	781b      	ldrb	r3, [r3, #0]
 802f89a:	2b01      	cmp	r3, #1
 802f89c:	d918      	bls.n	802f8d0 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 802f89e:	7cfa      	ldrb	r2, [r7, #19]
 802f8a0:	4b50      	ldr	r3, [pc, #320]	; (802f9e4 <etharp_query+0x288>)
 802f8a2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802f8a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f8a8:	4613      	mov	r3, r2
 802f8aa:	005b      	lsls	r3, r3, #1
 802f8ac:	4413      	add	r3, r2
 802f8ae:	00db      	lsls	r3, r3, #3
 802f8b0:	3308      	adds	r3, #8
 802f8b2:	4a47      	ldr	r2, [pc, #284]	; (802f9d0 <etharp_query+0x274>)
 802f8b4:	4413      	add	r3, r2
 802f8b6:	3304      	adds	r3, #4
 802f8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802f8bc:	9200      	str	r2, [sp, #0]
 802f8be:	697a      	ldr	r2, [r7, #20]
 802f8c0:	6879      	ldr	r1, [r7, #4]
 802f8c2:	68f8      	ldr	r0, [r7, #12]
 802f8c4:	f001 fc04 	bl	80310d0 <ethernet_output>
 802f8c8:	4603      	mov	r3, r0
 802f8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802f8ce:	e079      	b.n	802f9c4 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802f8d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f8d4:	493e      	ldr	r1, [pc, #248]	; (802f9d0 <etharp_query+0x274>)
 802f8d6:	4613      	mov	r3, r2
 802f8d8:	005b      	lsls	r3, r3, #1
 802f8da:	4413      	add	r3, r2
 802f8dc:	00db      	lsls	r3, r3, #3
 802f8de:	440b      	add	r3, r1
 802f8e0:	3314      	adds	r3, #20
 802f8e2:	781b      	ldrb	r3, [r3, #0]
 802f8e4:	2b01      	cmp	r3, #1
 802f8e6:	d16d      	bne.n	802f9c4 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 802f8e8:	2300      	movs	r3, #0
 802f8ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 802f8ec:	687b      	ldr	r3, [r7, #4]
 802f8ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 802f8f0:	e01a      	b.n	802f928 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802f8f2:	69fb      	ldr	r3, [r7, #28]
 802f8f4:	895a      	ldrh	r2, [r3, #10]
 802f8f6:	69fb      	ldr	r3, [r7, #28]
 802f8f8:	891b      	ldrh	r3, [r3, #8]
 802f8fa:	429a      	cmp	r2, r3
 802f8fc:	d10a      	bne.n	802f914 <etharp_query+0x1b8>
 802f8fe:	69fb      	ldr	r3, [r7, #28]
 802f900:	681b      	ldr	r3, [r3, #0]
 802f902:	2b00      	cmp	r3, #0
 802f904:	d006      	beq.n	802f914 <etharp_query+0x1b8>
 802f906:	4b33      	ldr	r3, [pc, #204]	; (802f9d4 <etharp_query+0x278>)
 802f908:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 802f90c:	4936      	ldr	r1, [pc, #216]	; (802f9e8 <etharp_query+0x28c>)
 802f90e:	4833      	ldr	r0, [pc, #204]	; (802f9dc <etharp_query+0x280>)
 802f910:	f001 fd58 	bl	80313c4 <iprintf>
      if (p->type != PBUF_ROM) {
 802f914:	69fb      	ldr	r3, [r7, #28]
 802f916:	7b1b      	ldrb	r3, [r3, #12]
 802f918:	2b01      	cmp	r3, #1
 802f91a:	d002      	beq.n	802f922 <etharp_query+0x1c6>
        copy_needed = 1;
 802f91c:	2301      	movs	r3, #1
 802f91e:	61bb      	str	r3, [r7, #24]
        break;
 802f920:	e005      	b.n	802f92e <etharp_query+0x1d2>
      }
      p = p->next;
 802f922:	69fb      	ldr	r3, [r7, #28]
 802f924:	681b      	ldr	r3, [r3, #0]
 802f926:	61fb      	str	r3, [r7, #28]
    while (p) {
 802f928:	69fb      	ldr	r3, [r7, #28]
 802f92a:	2b00      	cmp	r3, #0
 802f92c:	d1e1      	bne.n	802f8f2 <etharp_query+0x196>
    }
    if (copy_needed) {
 802f92e:	69bb      	ldr	r3, [r7, #24]
 802f930:	2b00      	cmp	r3, #0
 802f932:	d017      	beq.n	802f964 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 802f934:	69fb      	ldr	r3, [r7, #28]
 802f936:	891b      	ldrh	r3, [r3, #8]
 802f938:	2200      	movs	r2, #0
 802f93a:	4619      	mov	r1, r3
 802f93c:	2002      	movs	r0, #2
 802f93e:	f7f8 ff7b 	bl	8028838 <pbuf_alloc>
 802f942:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 802f944:	69fb      	ldr	r3, [r7, #28]
 802f946:	2b00      	cmp	r3, #0
 802f948:	d011      	beq.n	802f96e <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 802f94a:	6879      	ldr	r1, [r7, #4]
 802f94c:	69f8      	ldr	r0, [r7, #28]
 802f94e:	f7f9 fc1f 	bl	8029190 <pbuf_copy>
 802f952:	4603      	mov	r3, r0
 802f954:	2b00      	cmp	r3, #0
 802f956:	d00a      	beq.n	802f96e <etharp_query+0x212>
          pbuf_free(p);
 802f958:	69f8      	ldr	r0, [r7, #28]
 802f95a:	f7f9 fae5 	bl	8028f28 <pbuf_free>
          p = NULL;
 802f95e:	2300      	movs	r3, #0
 802f960:	61fb      	str	r3, [r7, #28]
 802f962:	e004      	b.n	802f96e <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 802f964:	687b      	ldr	r3, [r7, #4]
 802f966:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 802f968:	69f8      	ldr	r0, [r7, #28]
 802f96a:	f7f9 fb89 	bl	8029080 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 802f96e:	69fb      	ldr	r3, [r7, #28]
 802f970:	2b00      	cmp	r3, #0
 802f972:	d024      	beq.n	802f9be <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 802f974:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f978:	4915      	ldr	r1, [pc, #84]	; (802f9d0 <etharp_query+0x274>)
 802f97a:	4613      	mov	r3, r2
 802f97c:	005b      	lsls	r3, r3, #1
 802f97e:	4413      	add	r3, r2
 802f980:	00db      	lsls	r3, r3, #3
 802f982:	440b      	add	r3, r1
 802f984:	681b      	ldr	r3, [r3, #0]
 802f986:	2b00      	cmp	r3, #0
 802f988:	d00b      	beq.n	802f9a2 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 802f98a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f98e:	4910      	ldr	r1, [pc, #64]	; (802f9d0 <etharp_query+0x274>)
 802f990:	4613      	mov	r3, r2
 802f992:	005b      	lsls	r3, r3, #1
 802f994:	4413      	add	r3, r2
 802f996:	00db      	lsls	r3, r3, #3
 802f998:	440b      	add	r3, r1
 802f99a:	681b      	ldr	r3, [r3, #0]
 802f99c:	4618      	mov	r0, r3
 802f99e:	f7f9 fac3 	bl	8028f28 <pbuf_free>
      }
      arp_table[i].q = p;
 802f9a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 802f9a6:	490a      	ldr	r1, [pc, #40]	; (802f9d0 <etharp_query+0x274>)
 802f9a8:	4613      	mov	r3, r2
 802f9aa:	005b      	lsls	r3, r3, #1
 802f9ac:	4413      	add	r3, r2
 802f9ae:	00db      	lsls	r3, r3, #3
 802f9b0:	440b      	add	r3, r1
 802f9b2:	69fa      	ldr	r2, [r7, #28]
 802f9b4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802f9b6:	2300      	movs	r3, #0
 802f9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802f9bc:	e002      	b.n	802f9c4 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 802f9be:	23ff      	movs	r3, #255	; 0xff
 802f9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802f9c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802f9c8:	4618      	mov	r0, r3
 802f9ca:	3728      	adds	r7, #40	; 0x28
 802f9cc:	46bd      	mov	sp, r7
 802f9ce:	bd80      	pop	{r7, pc}
 802f9d0:	20006aa0 	.word	0x20006aa0
 802f9d4:	08034cc4 	.word	0x08034cc4
 802f9d8:	08034e70 	.word	0x08034e70
 802f9dc:	08034d3c 	.word	0x08034d3c
 802f9e0:	08034e64 	.word	0x08034e64
 802f9e4:	20006b90 	.word	0x20006b90
 802f9e8:	08034e98 	.word	0x08034e98

0802f9ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802f9ec:	b580      	push	{r7, lr}
 802f9ee:	b08a      	sub	sp, #40	; 0x28
 802f9f0:	af02      	add	r7, sp, #8
 802f9f2:	60f8      	str	r0, [r7, #12]
 802f9f4:	60b9      	str	r1, [r7, #8]
 802f9f6:	607a      	str	r2, [r7, #4]
 802f9f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802f9fa:	2300      	movs	r3, #0
 802f9fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802f9fe:	68fb      	ldr	r3, [r7, #12]
 802fa00:	2b00      	cmp	r3, #0
 802fa02:	d106      	bne.n	802fa12 <etharp_raw+0x26>
 802fa04:	4b3a      	ldr	r3, [pc, #232]	; (802faf0 <etharp_raw+0x104>)
 802fa06:	f44f 628b 	mov.w	r2, #1112	; 0x458
 802fa0a:	493a      	ldr	r1, [pc, #232]	; (802faf4 <etharp_raw+0x108>)
 802fa0c:	483a      	ldr	r0, [pc, #232]	; (802faf8 <etharp_raw+0x10c>)
 802fa0e:	f001 fcd9 	bl	80313c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802fa12:	2200      	movs	r2, #0
 802fa14:	211c      	movs	r1, #28
 802fa16:	2002      	movs	r0, #2
 802fa18:	f7f8 ff0e 	bl	8028838 <pbuf_alloc>
 802fa1c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802fa1e:	69bb      	ldr	r3, [r7, #24]
 802fa20:	2b00      	cmp	r3, #0
 802fa22:	d102      	bne.n	802fa2a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802fa24:	f04f 33ff 	mov.w	r3, #4294967295
 802fa28:	e05d      	b.n	802fae6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 802fa2a:	69bb      	ldr	r3, [r7, #24]
 802fa2c:	895b      	ldrh	r3, [r3, #10]
 802fa2e:	2b1b      	cmp	r3, #27
 802fa30:	d806      	bhi.n	802fa40 <etharp_raw+0x54>
 802fa32:	4b2f      	ldr	r3, [pc, #188]	; (802faf0 <etharp_raw+0x104>)
 802fa34:	f240 4263 	movw	r2, #1123	; 0x463
 802fa38:	4930      	ldr	r1, [pc, #192]	; (802fafc <etharp_raw+0x110>)
 802fa3a:	482f      	ldr	r0, [pc, #188]	; (802faf8 <etharp_raw+0x10c>)
 802fa3c:	f001 fcc2 	bl	80313c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 802fa40:	69bb      	ldr	r3, [r7, #24]
 802fa42:	685b      	ldr	r3, [r3, #4]
 802fa44:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802fa46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802fa48:	4618      	mov	r0, r3
 802fa4a:	f7f8 f944 	bl	8027cd6 <lwip_htons>
 802fa4e:	4603      	mov	r3, r0
 802fa50:	461a      	mov	r2, r3
 802fa52:	697b      	ldr	r3, [r7, #20]
 802fa54:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 802fa56:	68fb      	ldr	r3, [r7, #12]
 802fa58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802fa5c:	2b06      	cmp	r3, #6
 802fa5e:	d006      	beq.n	802fa6e <etharp_raw+0x82>
 802fa60:	4b23      	ldr	r3, [pc, #140]	; (802faf0 <etharp_raw+0x104>)
 802fa62:	f240 426a 	movw	r2, #1130	; 0x46a
 802fa66:	4926      	ldr	r1, [pc, #152]	; (802fb00 <etharp_raw+0x114>)
 802fa68:	4823      	ldr	r0, [pc, #140]	; (802faf8 <etharp_raw+0x10c>)
 802fa6a:	f001 fcab 	bl	80313c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 802fa6e:	697b      	ldr	r3, [r7, #20]
 802fa70:	3308      	adds	r3, #8
 802fa72:	2206      	movs	r2, #6
 802fa74:	6839      	ldr	r1, [r7, #0]
 802fa76:	4618      	mov	r0, r3
 802fa78:	f001 fbae 	bl	80311d8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 802fa7c:	697b      	ldr	r3, [r7, #20]
 802fa7e:	3312      	adds	r3, #18
 802fa80:	2206      	movs	r2, #6
 802fa82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802fa84:	4618      	mov	r0, r3
 802fa86:	f001 fba7 	bl	80311d8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 802fa8a:	697b      	ldr	r3, [r7, #20]
 802fa8c:	330e      	adds	r3, #14
 802fa8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802fa90:	6812      	ldr	r2, [r2, #0]
 802fa92:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 802fa94:	697b      	ldr	r3, [r7, #20]
 802fa96:	3318      	adds	r3, #24
 802fa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802fa9a:	6812      	ldr	r2, [r2, #0]
 802fa9c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 802fa9e:	697b      	ldr	r3, [r7, #20]
 802faa0:	2200      	movs	r2, #0
 802faa2:	701a      	strb	r2, [r3, #0]
 802faa4:	2200      	movs	r2, #0
 802faa6:	f042 0201 	orr.w	r2, r2, #1
 802faaa:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802faac:	697b      	ldr	r3, [r7, #20]
 802faae:	2200      	movs	r2, #0
 802fab0:	f042 0208 	orr.w	r2, r2, #8
 802fab4:	709a      	strb	r2, [r3, #2]
 802fab6:	2200      	movs	r2, #0
 802fab8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802faba:	697b      	ldr	r3, [r7, #20]
 802fabc:	2206      	movs	r2, #6
 802fabe:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802fac0:	697b      	ldr	r3, [r7, #20]
 802fac2:	2204      	movs	r2, #4
 802fac4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802fac6:	f640 0306 	movw	r3, #2054	; 0x806
 802faca:	9300      	str	r3, [sp, #0]
 802facc:	687b      	ldr	r3, [r7, #4]
 802face:	68ba      	ldr	r2, [r7, #8]
 802fad0:	69b9      	ldr	r1, [r7, #24]
 802fad2:	68f8      	ldr	r0, [r7, #12]
 802fad4:	f001 fafc 	bl	80310d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802fad8:	69b8      	ldr	r0, [r7, #24]
 802fada:	f7f9 fa25 	bl	8028f28 <pbuf_free>
  p = NULL;
 802fade:	2300      	movs	r3, #0
 802fae0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 802fae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802fae6:	4618      	mov	r0, r3
 802fae8:	3720      	adds	r7, #32
 802faea:	46bd      	mov	sp, r7
 802faec:	bd80      	pop	{r7, pc}
 802faee:	bf00      	nop
 802faf0:	08034cc4 	.word	0x08034cc4
 802faf4:	08034e14 	.word	0x08034e14
 802faf8:	08034d3c 	.word	0x08034d3c
 802fafc:	08034eb4 	.word	0x08034eb4
 802fb00:	08034ee8 	.word	0x08034ee8

0802fb04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 802fb04:	b580      	push	{r7, lr}
 802fb06:	b088      	sub	sp, #32
 802fb08:	af04      	add	r7, sp, #16
 802fb0a:	60f8      	str	r0, [r7, #12]
 802fb0c:	60b9      	str	r1, [r7, #8]
 802fb0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802fb10:	68fb      	ldr	r3, [r7, #12]
 802fb12:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802fb16:	68fb      	ldr	r3, [r7, #12]
 802fb18:	f103 0025 	add.w	r0, r3, #37	; 0x25
 802fb1c:	68fb      	ldr	r3, [r7, #12]
 802fb1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802fb20:	2201      	movs	r2, #1
 802fb22:	9203      	str	r2, [sp, #12]
 802fb24:	68ba      	ldr	r2, [r7, #8]
 802fb26:	9202      	str	r2, [sp, #8]
 802fb28:	4a06      	ldr	r2, [pc, #24]	; (802fb44 <etharp_request_dst+0x40>)
 802fb2a:	9201      	str	r2, [sp, #4]
 802fb2c:	9300      	str	r3, [sp, #0]
 802fb2e:	4603      	mov	r3, r0
 802fb30:	687a      	ldr	r2, [r7, #4]
 802fb32:	68f8      	ldr	r0, [r7, #12]
 802fb34:	f7ff ff5a 	bl	802f9ec <etharp_raw>
 802fb38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802fb3a:	4618      	mov	r0, r3
 802fb3c:	3710      	adds	r7, #16
 802fb3e:	46bd      	mov	sp, r7
 802fb40:	bd80      	pop	{r7, pc}
 802fb42:	bf00      	nop
 802fb44:	08035434 	.word	0x08035434

0802fb48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 802fb48:	b580      	push	{r7, lr}
 802fb4a:	b082      	sub	sp, #8
 802fb4c:	af00      	add	r7, sp, #0
 802fb4e:	6078      	str	r0, [r7, #4]
 802fb50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 802fb52:	4a05      	ldr	r2, [pc, #20]	; (802fb68 <etharp_request+0x20>)
 802fb54:	6839      	ldr	r1, [r7, #0]
 802fb56:	6878      	ldr	r0, [r7, #4]
 802fb58:	f7ff ffd4 	bl	802fb04 <etharp_request_dst>
 802fb5c:	4603      	mov	r3, r0
}
 802fb5e:	4618      	mov	r0, r3
 802fb60:	3708      	adds	r7, #8
 802fb62:	46bd      	mov	sp, r7
 802fb64:	bd80      	pop	{r7, pc}
 802fb66:	bf00      	nop
 802fb68:	0803542c 	.word	0x0803542c

0802fb6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802fb6c:	b580      	push	{r7, lr}
 802fb6e:	b08e      	sub	sp, #56	; 0x38
 802fb70:	af04      	add	r7, sp, #16
 802fb72:	6078      	str	r0, [r7, #4]
 802fb74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 802fb76:	4b7a      	ldr	r3, [pc, #488]	; (802fd60 <icmp_input+0x1f4>)
 802fb78:	689b      	ldr	r3, [r3, #8]
 802fb7a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 802fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb7e:	781b      	ldrb	r3, [r3, #0]
 802fb80:	b29b      	uxth	r3, r3
 802fb82:	f003 030f 	and.w	r3, r3, #15
 802fb86:	b29b      	uxth	r3, r3
 802fb88:	009b      	lsls	r3, r3, #2
 802fb8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802fb8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fb8e:	2b13      	cmp	r3, #19
 802fb90:	f240 80d1 	bls.w	802fd36 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 802fb94:	687b      	ldr	r3, [r7, #4]
 802fb96:	895b      	ldrh	r3, [r3, #10]
 802fb98:	2b03      	cmp	r3, #3
 802fb9a:	f240 80ce 	bls.w	802fd3a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802fb9e:	687b      	ldr	r3, [r7, #4]
 802fba0:	685b      	ldr	r3, [r3, #4]
 802fba2:	781b      	ldrb	r3, [r3, #0]
 802fba4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 802fba8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802fbac:	2b00      	cmp	r3, #0
 802fbae:	f000 80bb 	beq.w	802fd28 <icmp_input+0x1bc>
 802fbb2:	2b08      	cmp	r3, #8
 802fbb4:	f040 80bb 	bne.w	802fd2e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 802fbb8:	4b6a      	ldr	r3, [pc, #424]	; (802fd64 <icmp_input+0x1f8>)
 802fbba:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802fbbc:	4b68      	ldr	r3, [pc, #416]	; (802fd60 <icmp_input+0x1f4>)
 802fbbe:	695b      	ldr	r3, [r3, #20]
 802fbc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802fbc4:	2be0      	cmp	r3, #224	; 0xe0
 802fbc6:	f000 80bf 	beq.w	802fd48 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802fbca:	4b65      	ldr	r3, [pc, #404]	; (802fd60 <icmp_input+0x1f4>)
 802fbcc:	695b      	ldr	r3, [r3, #20]
 802fbce:	4a64      	ldr	r2, [pc, #400]	; (802fd60 <icmp_input+0x1f4>)
 802fbd0:	6812      	ldr	r2, [r2, #0]
 802fbd2:	4611      	mov	r1, r2
 802fbd4:	4618      	mov	r0, r3
 802fbd6:	f000 fbd3 	bl	8030380 <ip4_addr_isbroadcast_u32>
 802fbda:	4603      	mov	r3, r0
 802fbdc:	2b00      	cmp	r3, #0
 802fbde:	f040 80b5 	bne.w	802fd4c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802fbe2:	687b      	ldr	r3, [r7, #4]
 802fbe4:	891b      	ldrh	r3, [r3, #8]
 802fbe6:	2b07      	cmp	r3, #7
 802fbe8:	f240 80a9 	bls.w	802fd3e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 802fbec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fbee:	330e      	adds	r3, #14
 802fbf0:	b29b      	uxth	r3, r3
 802fbf2:	b21b      	sxth	r3, r3
 802fbf4:	4619      	mov	r1, r3
 802fbf6:	6878      	ldr	r0, [r7, #4]
 802fbf8:	f7f9 f972 	bl	8028ee0 <pbuf_header>
 802fbfc:	4603      	mov	r3, r0
 802fbfe:	2b00      	cmp	r3, #0
 802fc00:	d046      	beq.n	802fc90 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 802fc02:	687b      	ldr	r3, [r7, #4]
 802fc04:	891a      	ldrh	r2, [r3, #8]
 802fc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fc08:	4413      	add	r3, r2
 802fc0a:	b29b      	uxth	r3, r3
 802fc0c:	2200      	movs	r2, #0
 802fc0e:	4619      	mov	r1, r3
 802fc10:	2002      	movs	r0, #2
 802fc12:	f7f8 fe11 	bl	8028838 <pbuf_alloc>
 802fc16:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 802fc18:	69bb      	ldr	r3, [r7, #24]
 802fc1a:	2b00      	cmp	r3, #0
 802fc1c:	f000 8098 	beq.w	802fd50 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 802fc20:	69bb      	ldr	r3, [r7, #24]
 802fc22:	895b      	ldrh	r3, [r3, #10]
 802fc24:	461a      	mov	r2, r3
 802fc26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fc28:	3308      	adds	r3, #8
 802fc2a:	429a      	cmp	r2, r3
 802fc2c:	d203      	bcs.n	802fc36 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 802fc2e:	69b8      	ldr	r0, [r7, #24]
 802fc30:	f7f9 f97a 	bl	8028f28 <pbuf_free>
        goto icmperr;
 802fc34:	e08d      	b.n	802fd52 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 802fc36:	69bb      	ldr	r3, [r7, #24]
 802fc38:	685b      	ldr	r3, [r3, #4]
 802fc3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802fc3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fc3e:	4618      	mov	r0, r3
 802fc40:	f001 faca 	bl	80311d8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 802fc44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fc46:	425b      	negs	r3, r3
 802fc48:	b29b      	uxth	r3, r3
 802fc4a:	b21b      	sxth	r3, r3
 802fc4c:	4619      	mov	r1, r3
 802fc4e:	69b8      	ldr	r0, [r7, #24]
 802fc50:	f7f9 f946 	bl	8028ee0 <pbuf_header>
 802fc54:	4603      	mov	r3, r0
 802fc56:	2b00      	cmp	r3, #0
 802fc58:	d009      	beq.n	802fc6e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802fc5a:	4b43      	ldr	r3, [pc, #268]	; (802fd68 <icmp_input+0x1fc>)
 802fc5c:	22af      	movs	r2, #175	; 0xaf
 802fc5e:	4943      	ldr	r1, [pc, #268]	; (802fd6c <icmp_input+0x200>)
 802fc60:	4843      	ldr	r0, [pc, #268]	; (802fd70 <icmp_input+0x204>)
 802fc62:	f001 fbaf 	bl	80313c4 <iprintf>
        pbuf_free(r);
 802fc66:	69b8      	ldr	r0, [r7, #24]
 802fc68:	f7f9 f95e 	bl	8028f28 <pbuf_free>
        goto icmperr;
 802fc6c:	e071      	b.n	802fd52 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 802fc6e:	6879      	ldr	r1, [r7, #4]
 802fc70:	69b8      	ldr	r0, [r7, #24]
 802fc72:	f7f9 fa8d 	bl	8029190 <pbuf_copy>
 802fc76:	4603      	mov	r3, r0
 802fc78:	2b00      	cmp	r3, #0
 802fc7a:	d003      	beq.n	802fc84 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 802fc7c:	69b8      	ldr	r0, [r7, #24]
 802fc7e:	f7f9 f953 	bl	8028f28 <pbuf_free>
        goto icmperr;
 802fc82:	e066      	b.n	802fd52 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 802fc84:	6878      	ldr	r0, [r7, #4]
 802fc86:	f7f9 f94f 	bl	8028f28 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 802fc8a:	69bb      	ldr	r3, [r7, #24]
 802fc8c:	607b      	str	r3, [r7, #4]
 802fc8e:	e015      	b.n	802fcbc <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 802fc90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802fc92:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 802fc96:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 802fc9a:	33f2      	adds	r3, #242	; 0xf2
 802fc9c:	b29b      	uxth	r3, r3
 802fc9e:	b21b      	sxth	r3, r3
 802fca0:	4619      	mov	r1, r3
 802fca2:	6878      	ldr	r0, [r7, #4]
 802fca4:	f7f9 f91c 	bl	8028ee0 <pbuf_header>
 802fca8:	4603      	mov	r3, r0
 802fcaa:	2b00      	cmp	r3, #0
 802fcac:	d006      	beq.n	802fcbc <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 802fcae:	4b2e      	ldr	r3, [pc, #184]	; (802fd68 <icmp_input+0x1fc>)
 802fcb0:	22c0      	movs	r2, #192	; 0xc0
 802fcb2:	4930      	ldr	r1, [pc, #192]	; (802fd74 <icmp_input+0x208>)
 802fcb4:	482e      	ldr	r0, [pc, #184]	; (802fd70 <icmp_input+0x204>)
 802fcb6:	f001 fb85 	bl	80313c4 <iprintf>
        goto icmperr;
 802fcba:	e04a      	b.n	802fd52 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 802fcbc:	687b      	ldr	r3, [r7, #4]
 802fcbe:	685b      	ldr	r3, [r3, #4]
 802fcc0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 802fcc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802fcc6:	4619      	mov	r1, r3
 802fcc8:	6878      	ldr	r0, [r7, #4]
 802fcca:	f7f9 f909 	bl	8028ee0 <pbuf_header>
 802fcce:	4603      	mov	r3, r0
 802fcd0:	2b00      	cmp	r3, #0
 802fcd2:	d12b      	bne.n	802fd2c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 802fcd4:	687b      	ldr	r3, [r7, #4]
 802fcd6:	685b      	ldr	r3, [r3, #4]
 802fcd8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 802fcda:	69fb      	ldr	r3, [r7, #28]
 802fcdc:	681a      	ldr	r2, [r3, #0]
 802fcde:	693b      	ldr	r3, [r7, #16]
 802fce0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802fce2:	4b1f      	ldr	r3, [pc, #124]	; (802fd60 <icmp_input+0x1f4>)
 802fce4:	691a      	ldr	r2, [r3, #16]
 802fce6:	693b      	ldr	r3, [r7, #16]
 802fce8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 802fcea:	697b      	ldr	r3, [r7, #20]
 802fcec:	2200      	movs	r2, #0
 802fcee:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 802fcf0:	697b      	ldr	r3, [r7, #20]
 802fcf2:	2200      	movs	r2, #0
 802fcf4:	709a      	strb	r2, [r3, #2]
 802fcf6:	2200      	movs	r2, #0
 802fcf8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 802fcfa:	693b      	ldr	r3, [r7, #16]
 802fcfc:	22ff      	movs	r2, #255	; 0xff
 802fcfe:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 802fd00:	693b      	ldr	r3, [r7, #16]
 802fd02:	2200      	movs	r2, #0
 802fd04:	729a      	strb	r2, [r3, #10]
 802fd06:	2200      	movs	r2, #0
 802fd08:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802fd0a:	683b      	ldr	r3, [r7, #0]
 802fd0c:	9302      	str	r3, [sp, #8]
 802fd0e:	2301      	movs	r3, #1
 802fd10:	9301      	str	r3, [sp, #4]
 802fd12:	2300      	movs	r3, #0
 802fd14:	9300      	str	r3, [sp, #0]
 802fd16:	23ff      	movs	r3, #255	; 0xff
 802fd18:	2200      	movs	r2, #0
 802fd1a:	69f9      	ldr	r1, [r7, #28]
 802fd1c:	6878      	ldr	r0, [r7, #4]
 802fd1e:	f000 fa5d 	bl	80301dc <ip4_output_if>
 802fd22:	4603      	mov	r3, r0
 802fd24:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 802fd26:	e001      	b.n	802fd2c <icmp_input+0x1c0>
    break;
 802fd28:	bf00      	nop
 802fd2a:	e000      	b.n	802fd2e <icmp_input+0x1c2>
    break;
 802fd2c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 802fd2e:	6878      	ldr	r0, [r7, #4]
 802fd30:	f7f9 f8fa 	bl	8028f28 <pbuf_free>
  return;
 802fd34:	e011      	b.n	802fd5a <icmp_input+0x1ee>
    goto lenerr;
 802fd36:	bf00      	nop
 802fd38:	e002      	b.n	802fd40 <icmp_input+0x1d4>
    goto lenerr;
 802fd3a:	bf00      	nop
 802fd3c:	e000      	b.n	802fd40 <icmp_input+0x1d4>
      goto lenerr;
 802fd3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 802fd40:	6878      	ldr	r0, [r7, #4]
 802fd42:	f7f9 f8f1 	bl	8028f28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802fd46:	e008      	b.n	802fd5a <icmp_input+0x1ee>
      goto icmperr;
 802fd48:	bf00      	nop
 802fd4a:	e002      	b.n	802fd52 <icmp_input+0x1e6>
      goto icmperr;
 802fd4c:	bf00      	nop
 802fd4e:	e000      	b.n	802fd52 <icmp_input+0x1e6>
        goto icmperr;
 802fd50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802fd52:	6878      	ldr	r0, [r7, #4]
 802fd54:	f7f9 f8e8 	bl	8028f28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802fd58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802fd5a:	3728      	adds	r7, #40	; 0x28
 802fd5c:	46bd      	mov	sp, r7
 802fd5e:	bd80      	pop	{r7, pc}
 802fd60:	200034e4 	.word	0x200034e4
 802fd64:	200034f8 	.word	0x200034f8
 802fd68:	08034f2c 	.word	0x08034f2c
 802fd6c:	08034f64 	.word	0x08034f64
 802fd70:	08034f9c 	.word	0x08034f9c
 802fd74:	08034fc4 	.word	0x08034fc4

0802fd78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802fd78:	b580      	push	{r7, lr}
 802fd7a:	b082      	sub	sp, #8
 802fd7c:	af00      	add	r7, sp, #0
 802fd7e:	6078      	str	r0, [r7, #4]
 802fd80:	460b      	mov	r3, r1
 802fd82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 802fd84:	78fb      	ldrb	r3, [r7, #3]
 802fd86:	461a      	mov	r2, r3
 802fd88:	2103      	movs	r1, #3
 802fd8a:	6878      	ldr	r0, [r7, #4]
 802fd8c:	f000 f814 	bl	802fdb8 <icmp_send_response>
}
 802fd90:	bf00      	nop
 802fd92:	3708      	adds	r7, #8
 802fd94:	46bd      	mov	sp, r7
 802fd96:	bd80      	pop	{r7, pc}

0802fd98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 802fd98:	b580      	push	{r7, lr}
 802fd9a:	b082      	sub	sp, #8
 802fd9c:	af00      	add	r7, sp, #0
 802fd9e:	6078      	str	r0, [r7, #4]
 802fda0:	460b      	mov	r3, r1
 802fda2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 802fda4:	78fb      	ldrb	r3, [r7, #3]
 802fda6:	461a      	mov	r2, r3
 802fda8:	210b      	movs	r1, #11
 802fdaa:	6878      	ldr	r0, [r7, #4]
 802fdac:	f000 f804 	bl	802fdb8 <icmp_send_response>
}
 802fdb0:	bf00      	nop
 802fdb2:	3708      	adds	r7, #8
 802fdb4:	46bd      	mov	sp, r7
 802fdb6:	bd80      	pop	{r7, pc}

0802fdb8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 802fdb8:	b580      	push	{r7, lr}
 802fdba:	b08c      	sub	sp, #48	; 0x30
 802fdbc:	af04      	add	r7, sp, #16
 802fdbe:	6078      	str	r0, [r7, #4]
 802fdc0:	460b      	mov	r3, r1
 802fdc2:	70fb      	strb	r3, [r7, #3]
 802fdc4:	4613      	mov	r3, r2
 802fdc6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802fdc8:	2200      	movs	r2, #0
 802fdca:	2124      	movs	r1, #36	; 0x24
 802fdcc:	2001      	movs	r0, #1
 802fdce:	f7f8 fd33 	bl	8028838 <pbuf_alloc>
 802fdd2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802fdd4:	69fb      	ldr	r3, [r7, #28]
 802fdd6:	2b00      	cmp	r3, #0
 802fdd8:	d04c      	beq.n	802fe74 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802fdda:	69fb      	ldr	r3, [r7, #28]
 802fddc:	895b      	ldrh	r3, [r3, #10]
 802fdde:	2b23      	cmp	r3, #35	; 0x23
 802fde0:	d806      	bhi.n	802fdf0 <icmp_send_response+0x38>
 802fde2:	4b26      	ldr	r3, [pc, #152]	; (802fe7c <icmp_send_response+0xc4>)
 802fde4:	f240 1261 	movw	r2, #353	; 0x161
 802fde8:	4925      	ldr	r1, [pc, #148]	; (802fe80 <icmp_send_response+0xc8>)
 802fdea:	4826      	ldr	r0, [pc, #152]	; (802fe84 <icmp_send_response+0xcc>)
 802fdec:	f001 faea 	bl	80313c4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802fdf0:	687b      	ldr	r3, [r7, #4]
 802fdf2:	685b      	ldr	r3, [r3, #4]
 802fdf4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 802fdf6:	69fb      	ldr	r3, [r7, #28]
 802fdf8:	685b      	ldr	r3, [r3, #4]
 802fdfa:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802fdfc:	697b      	ldr	r3, [r7, #20]
 802fdfe:	78fa      	ldrb	r2, [r7, #3]
 802fe00:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 802fe02:	697b      	ldr	r3, [r7, #20]
 802fe04:	78ba      	ldrb	r2, [r7, #2]
 802fe06:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802fe08:	697b      	ldr	r3, [r7, #20]
 802fe0a:	2200      	movs	r2, #0
 802fe0c:	711a      	strb	r2, [r3, #4]
 802fe0e:	2200      	movs	r2, #0
 802fe10:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 802fe12:	697b      	ldr	r3, [r7, #20]
 802fe14:	2200      	movs	r2, #0
 802fe16:	719a      	strb	r2, [r3, #6]
 802fe18:	2200      	movs	r2, #0
 802fe1a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802fe1c:	69fb      	ldr	r3, [r7, #28]
 802fe1e:	685b      	ldr	r3, [r3, #4]
 802fe20:	f103 0008 	add.w	r0, r3, #8
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	685b      	ldr	r3, [r3, #4]
 802fe28:	221c      	movs	r2, #28
 802fe2a:	4619      	mov	r1, r3
 802fe2c:	f001 f9d4 	bl	80311d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802fe30:	69bb      	ldr	r3, [r7, #24]
 802fe32:	68db      	ldr	r3, [r3, #12]
 802fe34:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 802fe36:	f107 030c 	add.w	r3, r7, #12
 802fe3a:	4618      	mov	r0, r3
 802fe3c:	f000 f824 	bl	802fe88 <ip4_route>
 802fe40:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 802fe42:	693b      	ldr	r3, [r7, #16]
 802fe44:	2b00      	cmp	r3, #0
 802fe46:	d011      	beq.n	802fe6c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802fe48:	697b      	ldr	r3, [r7, #20]
 802fe4a:	2200      	movs	r2, #0
 802fe4c:	709a      	strb	r2, [r3, #2]
 802fe4e:	2200      	movs	r2, #0
 802fe50:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802fe52:	f107 020c 	add.w	r2, r7, #12
 802fe56:	693b      	ldr	r3, [r7, #16]
 802fe58:	9302      	str	r3, [sp, #8]
 802fe5a:	2301      	movs	r3, #1
 802fe5c:	9301      	str	r3, [sp, #4]
 802fe5e:	2300      	movs	r3, #0
 802fe60:	9300      	str	r3, [sp, #0]
 802fe62:	23ff      	movs	r3, #255	; 0xff
 802fe64:	2100      	movs	r1, #0
 802fe66:	69f8      	ldr	r0, [r7, #28]
 802fe68:	f000 f9b8 	bl	80301dc <ip4_output_if>
  }
  pbuf_free(q);
 802fe6c:	69f8      	ldr	r0, [r7, #28]
 802fe6e:	f7f9 f85b 	bl	8028f28 <pbuf_free>
 802fe72:	e000      	b.n	802fe76 <icmp_send_response+0xbe>
    return;
 802fe74:	bf00      	nop
}
 802fe76:	3720      	adds	r7, #32
 802fe78:	46bd      	mov	sp, r7
 802fe7a:	bd80      	pop	{r7, pc}
 802fe7c:	08034f2c 	.word	0x08034f2c
 802fe80:	08034ff8 	.word	0x08034ff8
 802fe84:	08034f9c 	.word	0x08034f9c

0802fe88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 802fe88:	b480      	push	{r7}
 802fe8a:	b085      	sub	sp, #20
 802fe8c:	af00      	add	r7, sp, #0
 802fe8e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 802fe90:	4b30      	ldr	r3, [pc, #192]	; (802ff54 <ip4_route+0xcc>)
 802fe92:	681b      	ldr	r3, [r3, #0]
 802fe94:	60fb      	str	r3, [r7, #12]
 802fe96:	e036      	b.n	802ff06 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802fe98:	68fb      	ldr	r3, [r7, #12]
 802fe9a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802fe9e:	f003 0301 	and.w	r3, r3, #1
 802fea2:	b2db      	uxtb	r3, r3
 802fea4:	2b00      	cmp	r3, #0
 802fea6:	d02b      	beq.n	802ff00 <ip4_route+0x78>
 802fea8:	68fb      	ldr	r3, [r7, #12]
 802feaa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802feae:	089b      	lsrs	r3, r3, #2
 802feb0:	f003 0301 	and.w	r3, r3, #1
 802feb4:	b2db      	uxtb	r3, r3
 802feb6:	2b00      	cmp	r3, #0
 802feb8:	d022      	beq.n	802ff00 <ip4_route+0x78>
 802feba:	68fb      	ldr	r3, [r7, #12]
 802febc:	3304      	adds	r3, #4
 802febe:	681b      	ldr	r3, [r3, #0]
 802fec0:	2b00      	cmp	r3, #0
 802fec2:	d01d      	beq.n	802ff00 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802fec4:	687b      	ldr	r3, [r7, #4]
 802fec6:	681a      	ldr	r2, [r3, #0]
 802fec8:	68fb      	ldr	r3, [r7, #12]
 802feca:	3304      	adds	r3, #4
 802fecc:	681b      	ldr	r3, [r3, #0]
 802fece:	405a      	eors	r2, r3
 802fed0:	68fb      	ldr	r3, [r7, #12]
 802fed2:	3308      	adds	r3, #8
 802fed4:	681b      	ldr	r3, [r3, #0]
 802fed6:	4013      	ands	r3, r2
 802fed8:	2b00      	cmp	r3, #0
 802feda:	d101      	bne.n	802fee0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802fedc:	68fb      	ldr	r3, [r7, #12]
 802fede:	e033      	b.n	802ff48 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802fee0:	68fb      	ldr	r3, [r7, #12]
 802fee2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802fee6:	f003 0302 	and.w	r3, r3, #2
 802feea:	2b00      	cmp	r3, #0
 802feec:	d108      	bne.n	802ff00 <ip4_route+0x78>
 802feee:	687b      	ldr	r3, [r7, #4]
 802fef0:	681a      	ldr	r2, [r3, #0]
 802fef2:	68fb      	ldr	r3, [r7, #12]
 802fef4:	330c      	adds	r3, #12
 802fef6:	681b      	ldr	r3, [r3, #0]
 802fef8:	429a      	cmp	r2, r3
 802fefa:	d101      	bne.n	802ff00 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802fefc:	68fb      	ldr	r3, [r7, #12]
 802fefe:	e023      	b.n	802ff48 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 802ff00:	68fb      	ldr	r3, [r7, #12]
 802ff02:	681b      	ldr	r3, [r3, #0]
 802ff04:	60fb      	str	r3, [r7, #12]
 802ff06:	68fb      	ldr	r3, [r7, #12]
 802ff08:	2b00      	cmp	r3, #0
 802ff0a:	d1c5      	bne.n	802fe98 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802ff0c:	4b12      	ldr	r3, [pc, #72]	; (802ff58 <ip4_route+0xd0>)
 802ff0e:	681b      	ldr	r3, [r3, #0]
 802ff10:	2b00      	cmp	r3, #0
 802ff12:	d015      	beq.n	802ff40 <ip4_route+0xb8>
 802ff14:	4b10      	ldr	r3, [pc, #64]	; (802ff58 <ip4_route+0xd0>)
 802ff16:	681b      	ldr	r3, [r3, #0]
 802ff18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802ff1c:	f003 0301 	and.w	r3, r3, #1
 802ff20:	2b00      	cmp	r3, #0
 802ff22:	d00d      	beq.n	802ff40 <ip4_route+0xb8>
 802ff24:	4b0c      	ldr	r3, [pc, #48]	; (802ff58 <ip4_route+0xd0>)
 802ff26:	681b      	ldr	r3, [r3, #0]
 802ff28:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802ff2c:	f003 0304 	and.w	r3, r3, #4
 802ff30:	2b00      	cmp	r3, #0
 802ff32:	d005      	beq.n	802ff40 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 802ff34:	4b08      	ldr	r3, [pc, #32]	; (802ff58 <ip4_route+0xd0>)
 802ff36:	681b      	ldr	r3, [r3, #0]
 802ff38:	3304      	adds	r3, #4
 802ff3a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802ff3c:	2b00      	cmp	r3, #0
 802ff3e:	d101      	bne.n	802ff44 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802ff40:	2300      	movs	r3, #0
 802ff42:	e001      	b.n	802ff48 <ip4_route+0xc0>
  }

  return netif_default;
 802ff44:	4b04      	ldr	r3, [pc, #16]	; (802ff58 <ip4_route+0xd0>)
 802ff46:	681b      	ldr	r3, [r3, #0]
}
 802ff48:	4618      	mov	r0, r3
 802ff4a:	3714      	adds	r7, #20
 802ff4c:	46bd      	mov	sp, r7
 802ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ff52:	4770      	bx	lr
 802ff54:	20006a34 	.word	0x20006a34
 802ff58:	20006a38 	.word	0x20006a38

0802ff5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802ff5c:	b580      	push	{r7, lr}
 802ff5e:	b086      	sub	sp, #24
 802ff60:	af00      	add	r7, sp, #0
 802ff62:	6078      	str	r0, [r7, #4]
 802ff64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802ff66:	687b      	ldr	r3, [r7, #4]
 802ff68:	685b      	ldr	r3, [r3, #4]
 802ff6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802ff6c:	697b      	ldr	r3, [r7, #20]
 802ff6e:	781b      	ldrb	r3, [r3, #0]
 802ff70:	091b      	lsrs	r3, r3, #4
 802ff72:	b2db      	uxtb	r3, r3
 802ff74:	2b04      	cmp	r3, #4
 802ff76:	d004      	beq.n	802ff82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 802ff78:	6878      	ldr	r0, [r7, #4]
 802ff7a:	f7f8 ffd5 	bl	8028f28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802ff7e:	2300      	movs	r3, #0
 802ff80:	e124      	b.n	80301cc <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 802ff82:	697b      	ldr	r3, [r7, #20]
 802ff84:	781b      	ldrb	r3, [r3, #0]
 802ff86:	b29b      	uxth	r3, r3
 802ff88:	f003 030f 	and.w	r3, r3, #15
 802ff8c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 802ff8e:	897b      	ldrh	r3, [r7, #10]
 802ff90:	009b      	lsls	r3, r3, #2
 802ff92:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802ff94:	697b      	ldr	r3, [r7, #20]
 802ff96:	885b      	ldrh	r3, [r3, #2]
 802ff98:	b29b      	uxth	r3, r3
 802ff9a:	4618      	mov	r0, r3
 802ff9c:	f7f7 fe9b 	bl	8027cd6 <lwip_htons>
 802ffa0:	4603      	mov	r3, r0
 802ffa2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802ffa4:	687b      	ldr	r3, [r7, #4]
 802ffa6:	891b      	ldrh	r3, [r3, #8]
 802ffa8:	893a      	ldrh	r2, [r7, #8]
 802ffaa:	429a      	cmp	r2, r3
 802ffac:	d204      	bcs.n	802ffb8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 802ffae:	893b      	ldrh	r3, [r7, #8]
 802ffb0:	4619      	mov	r1, r3
 802ffb2:	6878      	ldr	r0, [r7, #4]
 802ffb4:	f7f8 fe44 	bl	8028c40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802ffb8:	687b      	ldr	r3, [r7, #4]
 802ffba:	895b      	ldrh	r3, [r3, #10]
 802ffbc:	897a      	ldrh	r2, [r7, #10]
 802ffbe:	429a      	cmp	r2, r3
 802ffc0:	d807      	bhi.n	802ffd2 <ip4_input+0x76>
 802ffc2:	687b      	ldr	r3, [r7, #4]
 802ffc4:	891b      	ldrh	r3, [r3, #8]
 802ffc6:	893a      	ldrh	r2, [r7, #8]
 802ffc8:	429a      	cmp	r2, r3
 802ffca:	d802      	bhi.n	802ffd2 <ip4_input+0x76>
 802ffcc:	897b      	ldrh	r3, [r7, #10]
 802ffce:	2b13      	cmp	r3, #19
 802ffd0:	d804      	bhi.n	802ffdc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 802ffd2:	6878      	ldr	r0, [r7, #4]
 802ffd4:	f7f8 ffa8 	bl	8028f28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802ffd8:	2300      	movs	r3, #0
 802ffda:	e0f7      	b.n	80301cc <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802ffdc:	697b      	ldr	r3, [r7, #20]
 802ffde:	691b      	ldr	r3, [r3, #16]
 802ffe0:	4a7c      	ldr	r2, [pc, #496]	; (80301d4 <ip4_input+0x278>)
 802ffe2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802ffe4:	697b      	ldr	r3, [r7, #20]
 802ffe6:	68db      	ldr	r3, [r3, #12]
 802ffe8:	4a7a      	ldr	r2, [pc, #488]	; (80301d4 <ip4_input+0x278>)
 802ffea:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802ffec:	4b79      	ldr	r3, [pc, #484]	; (80301d4 <ip4_input+0x278>)
 802ffee:	695b      	ldr	r3, [r3, #20]
 802fff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802fff4:	2be0      	cmp	r3, #224	; 0xe0
 802fff6:	d112      	bne.n	803001e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802fff8:	683b      	ldr	r3, [r7, #0]
 802fffa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802fffe:	f003 0301 	and.w	r3, r3, #1
 8030002:	b2db      	uxtb	r3, r3
 8030004:	2b00      	cmp	r3, #0
 8030006:	d007      	beq.n	8030018 <ip4_input+0xbc>
 8030008:	683b      	ldr	r3, [r7, #0]
 803000a:	3304      	adds	r3, #4
 803000c:	681b      	ldr	r3, [r3, #0]
 803000e:	2b00      	cmp	r3, #0
 8030010:	d002      	beq.n	8030018 <ip4_input+0xbc>
      netif = inp;
 8030012:	683b      	ldr	r3, [r7, #0]
 8030014:	613b      	str	r3, [r7, #16]
 8030016:	e041      	b.n	803009c <ip4_input+0x140>
    } else {
      netif = NULL;
 8030018:	2300      	movs	r3, #0
 803001a:	613b      	str	r3, [r7, #16]
 803001c:	e03e      	b.n	803009c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 803001e:	2301      	movs	r3, #1
 8030020:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8030022:	683b      	ldr	r3, [r7, #0]
 8030024:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8030026:	693b      	ldr	r3, [r7, #16]
 8030028:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 803002c:	f003 0301 	and.w	r3, r3, #1
 8030030:	b2db      	uxtb	r3, r3
 8030032:	2b00      	cmp	r3, #0
 8030034:	d014      	beq.n	8030060 <ip4_input+0x104>
 8030036:	693b      	ldr	r3, [r7, #16]
 8030038:	3304      	adds	r3, #4
 803003a:	681b      	ldr	r3, [r3, #0]
 803003c:	2b00      	cmp	r3, #0
 803003e:	d00f      	beq.n	8030060 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8030040:	4b64      	ldr	r3, [pc, #400]	; (80301d4 <ip4_input+0x278>)
 8030042:	695a      	ldr	r2, [r3, #20]
 8030044:	693b      	ldr	r3, [r7, #16]
 8030046:	3304      	adds	r3, #4
 8030048:	681b      	ldr	r3, [r3, #0]
 803004a:	429a      	cmp	r2, r3
 803004c:	d026      	beq.n	803009c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 803004e:	4b61      	ldr	r3, [pc, #388]	; (80301d4 <ip4_input+0x278>)
 8030050:	695b      	ldr	r3, [r3, #20]
 8030052:	6939      	ldr	r1, [r7, #16]
 8030054:	4618      	mov	r0, r3
 8030056:	f000 f993 	bl	8030380 <ip4_addr_isbroadcast_u32>
 803005a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 803005c:	2b00      	cmp	r3, #0
 803005e:	d11d      	bne.n	803009c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8030060:	68fb      	ldr	r3, [r7, #12]
 8030062:	2b00      	cmp	r3, #0
 8030064:	d00d      	beq.n	8030082 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8030066:	4b5b      	ldr	r3, [pc, #364]	; (80301d4 <ip4_input+0x278>)
 8030068:	695b      	ldr	r3, [r3, #20]
 803006a:	b2db      	uxtb	r3, r3
 803006c:	2b7f      	cmp	r3, #127	; 0x7f
 803006e:	d102      	bne.n	8030076 <ip4_input+0x11a>
          netif = NULL;
 8030070:	2300      	movs	r3, #0
 8030072:	613b      	str	r3, [r7, #16]
          break;
 8030074:	e012      	b.n	803009c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8030076:	2300      	movs	r3, #0
 8030078:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 803007a:	4b57      	ldr	r3, [pc, #348]	; (80301d8 <ip4_input+0x27c>)
 803007c:	681b      	ldr	r3, [r3, #0]
 803007e:	613b      	str	r3, [r7, #16]
 8030080:	e002      	b.n	8030088 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8030082:	693b      	ldr	r3, [r7, #16]
 8030084:	681b      	ldr	r3, [r3, #0]
 8030086:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8030088:	693a      	ldr	r2, [r7, #16]
 803008a:	683b      	ldr	r3, [r7, #0]
 803008c:	429a      	cmp	r2, r3
 803008e:	d102      	bne.n	8030096 <ip4_input+0x13a>
        netif = netif->next;
 8030090:	693b      	ldr	r3, [r7, #16]
 8030092:	681b      	ldr	r3, [r3, #0]
 8030094:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8030096:	693b      	ldr	r3, [r7, #16]
 8030098:	2b00      	cmp	r3, #0
 803009a:	d1c4      	bne.n	8030026 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 803009c:	4b4d      	ldr	r3, [pc, #308]	; (80301d4 <ip4_input+0x278>)
 803009e:	691b      	ldr	r3, [r3, #16]
 80300a0:	6839      	ldr	r1, [r7, #0]
 80300a2:	4618      	mov	r0, r3
 80300a4:	f000 f96c 	bl	8030380 <ip4_addr_isbroadcast_u32>
 80300a8:	4603      	mov	r3, r0
 80300aa:	2b00      	cmp	r3, #0
 80300ac:	d105      	bne.n	80300ba <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80300ae:	4b49      	ldr	r3, [pc, #292]	; (80301d4 <ip4_input+0x278>)
 80300b0:	691b      	ldr	r3, [r3, #16]
 80300b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80300b6:	2be0      	cmp	r3, #224	; 0xe0
 80300b8:	d104      	bne.n	80300c4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80300ba:	6878      	ldr	r0, [r7, #4]
 80300bc:	f7f8 ff34 	bl	8028f28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80300c0:	2300      	movs	r3, #0
 80300c2:	e083      	b.n	80301cc <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80300c4:	693b      	ldr	r3, [r7, #16]
 80300c6:	2b00      	cmp	r3, #0
 80300c8:	d104      	bne.n	80300d4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80300ca:	6878      	ldr	r0, [r7, #4]
 80300cc:	f7f8 ff2c 	bl	8028f28 <pbuf_free>
    return ERR_OK;
 80300d0:	2300      	movs	r3, #0
 80300d2:	e07b      	b.n	80301cc <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80300d4:	697b      	ldr	r3, [r7, #20]
 80300d6:	88db      	ldrh	r3, [r3, #6]
 80300d8:	b29b      	uxth	r3, r3
 80300da:	461a      	mov	r2, r3
 80300dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80300e0:	4013      	ands	r3, r2
 80300e2:	2b00      	cmp	r3, #0
 80300e4:	d00b      	beq.n	80300fe <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80300e6:	6878      	ldr	r0, [r7, #4]
 80300e8:	f000 fc90 	bl	8030a0c <ip4_reass>
 80300ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80300ee:	687b      	ldr	r3, [r7, #4]
 80300f0:	2b00      	cmp	r3, #0
 80300f2:	d101      	bne.n	80300f8 <ip4_input+0x19c>
      return ERR_OK;
 80300f4:	2300      	movs	r3, #0
 80300f6:	e069      	b.n	80301cc <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80300f8:	687b      	ldr	r3, [r7, #4]
 80300fa:	685b      	ldr	r3, [r3, #4]
 80300fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80300fe:	4a35      	ldr	r2, [pc, #212]	; (80301d4 <ip4_input+0x278>)
 8030100:	693b      	ldr	r3, [r7, #16]
 8030102:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8030104:	4a33      	ldr	r2, [pc, #204]	; (80301d4 <ip4_input+0x278>)
 8030106:	683b      	ldr	r3, [r7, #0]
 8030108:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 803010a:	4a32      	ldr	r2, [pc, #200]	; (80301d4 <ip4_input+0x278>)
 803010c:	697b      	ldr	r3, [r7, #20]
 803010e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8030110:	697b      	ldr	r3, [r7, #20]
 8030112:	781b      	ldrb	r3, [r3, #0]
 8030114:	b29b      	uxth	r3, r3
 8030116:	f003 030f 	and.w	r3, r3, #15
 803011a:	b29b      	uxth	r3, r3
 803011c:	009b      	lsls	r3, r3, #2
 803011e:	b29a      	uxth	r2, r3
 8030120:	4b2c      	ldr	r3, [pc, #176]	; (80301d4 <ip4_input+0x278>)
 8030122:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8030124:	897b      	ldrh	r3, [r7, #10]
 8030126:	425b      	negs	r3, r3
 8030128:	b29b      	uxth	r3, r3
 803012a:	b21b      	sxth	r3, r3
 803012c:	4619      	mov	r1, r3
 803012e:	6878      	ldr	r0, [r7, #4]
 8030130:	f7f8 fed6 	bl	8028ee0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8030134:	697b      	ldr	r3, [r7, #20]
 8030136:	7a5b      	ldrb	r3, [r3, #9]
 8030138:	2b11      	cmp	r3, #17
 803013a:	d006      	beq.n	803014a <ip4_input+0x1ee>
 803013c:	2b11      	cmp	r3, #17
 803013e:	dc13      	bgt.n	8030168 <ip4_input+0x20c>
 8030140:	2b01      	cmp	r3, #1
 8030142:	d00c      	beq.n	803015e <ip4_input+0x202>
 8030144:	2b06      	cmp	r3, #6
 8030146:	d005      	beq.n	8030154 <ip4_input+0x1f8>
 8030148:	e00e      	b.n	8030168 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 803014a:	6839      	ldr	r1, [r7, #0]
 803014c:	6878      	ldr	r0, [r7, #4]
 803014e:	f7fe fce1 	bl	802eb14 <udp_input>
      break;
 8030152:	e028      	b.n	80301a6 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8030154:	6839      	ldr	r1, [r7, #0]
 8030156:	6878      	ldr	r0, [r7, #4]
 8030158:	f7fa fd94 	bl	802ac84 <tcp_input>
      break;
 803015c:	e023      	b.n	80301a6 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 803015e:	6839      	ldr	r1, [r7, #0]
 8030160:	6878      	ldr	r0, [r7, #4]
 8030162:	f7ff fd03 	bl	802fb6c <icmp_input>
      break;
 8030166:	e01e      	b.n	80301a6 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8030168:	4b1a      	ldr	r3, [pc, #104]	; (80301d4 <ip4_input+0x278>)
 803016a:	695b      	ldr	r3, [r3, #20]
 803016c:	6939      	ldr	r1, [r7, #16]
 803016e:	4618      	mov	r0, r3
 8030170:	f000 f906 	bl	8030380 <ip4_addr_isbroadcast_u32>
 8030174:	4603      	mov	r3, r0
 8030176:	2b00      	cmp	r3, #0
 8030178:	d112      	bne.n	80301a0 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 803017a:	4b16      	ldr	r3, [pc, #88]	; (80301d4 <ip4_input+0x278>)
 803017c:	695b      	ldr	r3, [r3, #20]
 803017e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8030182:	2be0      	cmp	r3, #224	; 0xe0
 8030184:	d00c      	beq.n	80301a0 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8030186:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 803018a:	4619      	mov	r1, r3
 803018c:	6878      	ldr	r0, [r7, #4]
 803018e:	f7f8 feb9 	bl	8028f04 <pbuf_header_force>
        p->payload = iphdr;
 8030192:	687b      	ldr	r3, [r7, #4]
 8030194:	697a      	ldr	r2, [r7, #20]
 8030196:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8030198:	2102      	movs	r1, #2
 803019a:	6878      	ldr	r0, [r7, #4]
 803019c:	f7ff fdec 	bl	802fd78 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80301a0:	6878      	ldr	r0, [r7, #4]
 80301a2:	f7f8 fec1 	bl	8028f28 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80301a6:	4b0b      	ldr	r3, [pc, #44]	; (80301d4 <ip4_input+0x278>)
 80301a8:	2200      	movs	r2, #0
 80301aa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80301ac:	4b09      	ldr	r3, [pc, #36]	; (80301d4 <ip4_input+0x278>)
 80301ae:	2200      	movs	r2, #0
 80301b0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80301b2:	4b08      	ldr	r3, [pc, #32]	; (80301d4 <ip4_input+0x278>)
 80301b4:	2200      	movs	r2, #0
 80301b6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80301b8:	4b06      	ldr	r3, [pc, #24]	; (80301d4 <ip4_input+0x278>)
 80301ba:	2200      	movs	r2, #0
 80301bc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80301be:	4b05      	ldr	r3, [pc, #20]	; (80301d4 <ip4_input+0x278>)
 80301c0:	2200      	movs	r2, #0
 80301c2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80301c4:	4b03      	ldr	r3, [pc, #12]	; (80301d4 <ip4_input+0x278>)
 80301c6:	2200      	movs	r2, #0
 80301c8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80301ca:	2300      	movs	r3, #0
}
 80301cc:	4618      	mov	r0, r3
 80301ce:	3718      	adds	r7, #24
 80301d0:	46bd      	mov	sp, r7
 80301d2:	bd80      	pop	{r7, pc}
 80301d4:	200034e4 	.word	0x200034e4
 80301d8:	20006a34 	.word	0x20006a34

080301dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80301dc:	b580      	push	{r7, lr}
 80301de:	b08a      	sub	sp, #40	; 0x28
 80301e0:	af04      	add	r7, sp, #16
 80301e2:	60f8      	str	r0, [r7, #12]
 80301e4:	60b9      	str	r1, [r7, #8]
 80301e6:	607a      	str	r2, [r7, #4]
 80301e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80301ea:	68bb      	ldr	r3, [r7, #8]
 80301ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80301ee:	687b      	ldr	r3, [r7, #4]
 80301f0:	2b00      	cmp	r3, #0
 80301f2:	d009      	beq.n	8030208 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80301f4:	68bb      	ldr	r3, [r7, #8]
 80301f6:	2b00      	cmp	r3, #0
 80301f8:	d003      	beq.n	8030202 <ip4_output_if+0x26>
 80301fa:	68bb      	ldr	r3, [r7, #8]
 80301fc:	681b      	ldr	r3, [r3, #0]
 80301fe:	2b00      	cmp	r3, #0
 8030200:	d102      	bne.n	8030208 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8030202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030204:	3304      	adds	r3, #4
 8030206:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8030208:	78fa      	ldrb	r2, [r7, #3]
 803020a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803020c:	9302      	str	r3, [sp, #8]
 803020e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8030212:	9301      	str	r3, [sp, #4]
 8030214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8030218:	9300      	str	r3, [sp, #0]
 803021a:	4613      	mov	r3, r2
 803021c:	687a      	ldr	r2, [r7, #4]
 803021e:	6979      	ldr	r1, [r7, #20]
 8030220:	68f8      	ldr	r0, [r7, #12]
 8030222:	f000 f805 	bl	8030230 <ip4_output_if_src>
 8030226:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8030228:	4618      	mov	r0, r3
 803022a:	3718      	adds	r7, #24
 803022c:	46bd      	mov	sp, r7
 803022e:	bd80      	pop	{r7, pc}

08030230 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8030230:	b580      	push	{r7, lr}
 8030232:	b088      	sub	sp, #32
 8030234:	af00      	add	r7, sp, #0
 8030236:	60f8      	str	r0, [r7, #12]
 8030238:	60b9      	str	r1, [r7, #8]
 803023a:	607a      	str	r2, [r7, #4]
 803023c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 803023e:	68fb      	ldr	r3, [r7, #12]
 8030240:	89db      	ldrh	r3, [r3, #14]
 8030242:	2b01      	cmp	r3, #1
 8030244:	d006      	beq.n	8030254 <ip4_output_if_src+0x24>
 8030246:	4b48      	ldr	r3, [pc, #288]	; (8030368 <ip4_output_if_src+0x138>)
 8030248:	f240 3233 	movw	r2, #819	; 0x333
 803024c:	4947      	ldr	r1, [pc, #284]	; (803036c <ip4_output_if_src+0x13c>)
 803024e:	4848      	ldr	r0, [pc, #288]	; (8030370 <ip4_output_if_src+0x140>)
 8030250:	f001 f8b8 	bl	80313c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8030254:	687b      	ldr	r3, [r7, #4]
 8030256:	2b00      	cmp	r3, #0
 8030258:	d060      	beq.n	803031c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 803025a:	2314      	movs	r3, #20
 803025c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 803025e:	2114      	movs	r1, #20
 8030260:	68f8      	ldr	r0, [r7, #12]
 8030262:	f7f8 fe3d 	bl	8028ee0 <pbuf_header>
 8030266:	4603      	mov	r3, r0
 8030268:	2b00      	cmp	r3, #0
 803026a:	d002      	beq.n	8030272 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 803026c:	f06f 0301 	mvn.w	r3, #1
 8030270:	e075      	b.n	803035e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8030272:	68fb      	ldr	r3, [r7, #12]
 8030274:	685b      	ldr	r3, [r3, #4]
 8030276:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8030278:	68fb      	ldr	r3, [r7, #12]
 803027a:	895b      	ldrh	r3, [r3, #10]
 803027c:	2b13      	cmp	r3, #19
 803027e:	d806      	bhi.n	803028e <ip4_output_if_src+0x5e>
 8030280:	4b39      	ldr	r3, [pc, #228]	; (8030368 <ip4_output_if_src+0x138>)
 8030282:	f44f 7258 	mov.w	r2, #864	; 0x360
 8030286:	493b      	ldr	r1, [pc, #236]	; (8030374 <ip4_output_if_src+0x144>)
 8030288:	4839      	ldr	r0, [pc, #228]	; (8030370 <ip4_output_if_src+0x140>)
 803028a:	f001 f89b 	bl	80313c4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 803028e:	69fb      	ldr	r3, [r7, #28]
 8030290:	78fa      	ldrb	r2, [r7, #3]
 8030292:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8030294:	69fb      	ldr	r3, [r7, #28]
 8030296:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 803029a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 803029c:	687b      	ldr	r3, [r7, #4]
 803029e:	681a      	ldr	r2, [r3, #0]
 80302a0:	69fb      	ldr	r3, [r7, #28]
 80302a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80302a4:	8b7b      	ldrh	r3, [r7, #26]
 80302a6:	089b      	lsrs	r3, r3, #2
 80302a8:	b29b      	uxth	r3, r3
 80302aa:	b2db      	uxtb	r3, r3
 80302ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80302b0:	b2da      	uxtb	r2, r3
 80302b2:	69fb      	ldr	r3, [r7, #28]
 80302b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80302b6:	69fb      	ldr	r3, [r7, #28]
 80302b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80302bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80302be:	68fb      	ldr	r3, [r7, #12]
 80302c0:	891b      	ldrh	r3, [r3, #8]
 80302c2:	4618      	mov	r0, r3
 80302c4:	f7f7 fd07 	bl	8027cd6 <lwip_htons>
 80302c8:	4603      	mov	r3, r0
 80302ca:	461a      	mov	r2, r3
 80302cc:	69fb      	ldr	r3, [r7, #28]
 80302ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80302d0:	69fb      	ldr	r3, [r7, #28]
 80302d2:	2200      	movs	r2, #0
 80302d4:	719a      	strb	r2, [r3, #6]
 80302d6:	2200      	movs	r2, #0
 80302d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80302da:	4b27      	ldr	r3, [pc, #156]	; (8030378 <ip4_output_if_src+0x148>)
 80302dc:	881b      	ldrh	r3, [r3, #0]
 80302de:	4618      	mov	r0, r3
 80302e0:	f7f7 fcf9 	bl	8027cd6 <lwip_htons>
 80302e4:	4603      	mov	r3, r0
 80302e6:	461a      	mov	r2, r3
 80302e8:	69fb      	ldr	r3, [r7, #28]
 80302ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80302ec:	4b22      	ldr	r3, [pc, #136]	; (8030378 <ip4_output_if_src+0x148>)
 80302ee:	881b      	ldrh	r3, [r3, #0]
 80302f0:	3301      	adds	r3, #1
 80302f2:	b29a      	uxth	r2, r3
 80302f4:	4b20      	ldr	r3, [pc, #128]	; (8030378 <ip4_output_if_src+0x148>)
 80302f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80302f8:	68bb      	ldr	r3, [r7, #8]
 80302fa:	2b00      	cmp	r3, #0
 80302fc:	d104      	bne.n	8030308 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80302fe:	4b1f      	ldr	r3, [pc, #124]	; (803037c <ip4_output_if_src+0x14c>)
 8030300:	681a      	ldr	r2, [r3, #0]
 8030302:	69fb      	ldr	r3, [r7, #28]
 8030304:	60da      	str	r2, [r3, #12]
 8030306:	e003      	b.n	8030310 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8030308:	68bb      	ldr	r3, [r7, #8]
 803030a:	681a      	ldr	r2, [r3, #0]
 803030c:	69fb      	ldr	r3, [r7, #28]
 803030e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8030310:	69fb      	ldr	r3, [r7, #28]
 8030312:	2200      	movs	r2, #0
 8030314:	729a      	strb	r2, [r3, #10]
 8030316:	2200      	movs	r2, #0
 8030318:	72da      	strb	r2, [r3, #11]
 803031a:	e008      	b.n	803032e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 803031c:	68fb      	ldr	r3, [r7, #12]
 803031e:	685b      	ldr	r3, [r3, #4]
 8030320:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8030322:	69fb      	ldr	r3, [r7, #28]
 8030324:	691b      	ldr	r3, [r3, #16]
 8030326:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8030328:	f107 0314 	add.w	r3, r7, #20
 803032c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 803032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030330:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8030332:	2b00      	cmp	r3, #0
 8030334:	d00c      	beq.n	8030350 <ip4_output_if_src+0x120>
 8030336:	68fb      	ldr	r3, [r7, #12]
 8030338:	891a      	ldrh	r2, [r3, #8]
 803033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803033c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 803033e:	429a      	cmp	r2, r3
 8030340:	d906      	bls.n	8030350 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8030342:	687a      	ldr	r2, [r7, #4]
 8030344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8030346:	68f8      	ldr	r0, [r7, #12]
 8030348:	f000 fd0c 	bl	8030d64 <ip4_frag>
 803034c:	4603      	mov	r3, r0
 803034e:	e006      	b.n	803035e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8030350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030352:	695b      	ldr	r3, [r3, #20]
 8030354:	687a      	ldr	r2, [r7, #4]
 8030356:	68f9      	ldr	r1, [r7, #12]
 8030358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803035a:	4798      	blx	r3
 803035c:	4603      	mov	r3, r0
}
 803035e:	4618      	mov	r0, r3
 8030360:	3720      	adds	r7, #32
 8030362:	46bd      	mov	sp, r7
 8030364:	bd80      	pop	{r7, pc}
 8030366:	bf00      	nop
 8030368:	08035024 	.word	0x08035024
 803036c:	08035058 	.word	0x08035058
 8030370:	08035064 	.word	0x08035064
 8030374:	0803508c 	.word	0x0803508c
 8030378:	20006b92 	.word	0x20006b92
 803037c:	08035428 	.word	0x08035428

08030380 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8030380:	b480      	push	{r7}
 8030382:	b085      	sub	sp, #20
 8030384:	af00      	add	r7, sp, #0
 8030386:	6078      	str	r0, [r7, #4]
 8030388:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 803038a:	687b      	ldr	r3, [r7, #4]
 803038c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 803038e:	687b      	ldr	r3, [r7, #4]
 8030390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030394:	d002      	beq.n	803039c <ip4_addr_isbroadcast_u32+0x1c>
 8030396:	687b      	ldr	r3, [r7, #4]
 8030398:	2b00      	cmp	r3, #0
 803039a:	d101      	bne.n	80303a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 803039c:	2301      	movs	r3, #1
 803039e:	e02a      	b.n	80303f6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80303a0:	683b      	ldr	r3, [r7, #0]
 80303a2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80303a6:	f003 0302 	and.w	r3, r3, #2
 80303aa:	2b00      	cmp	r3, #0
 80303ac:	d101      	bne.n	80303b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80303ae:	2300      	movs	r3, #0
 80303b0:	e021      	b.n	80303f6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80303b2:	683b      	ldr	r3, [r7, #0]
 80303b4:	3304      	adds	r3, #4
 80303b6:	681b      	ldr	r3, [r3, #0]
 80303b8:	687a      	ldr	r2, [r7, #4]
 80303ba:	429a      	cmp	r2, r3
 80303bc:	d101      	bne.n	80303c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80303be:	2300      	movs	r3, #0
 80303c0:	e019      	b.n	80303f6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80303c2:	68fa      	ldr	r2, [r7, #12]
 80303c4:	683b      	ldr	r3, [r7, #0]
 80303c6:	3304      	adds	r3, #4
 80303c8:	681b      	ldr	r3, [r3, #0]
 80303ca:	405a      	eors	r2, r3
 80303cc:	683b      	ldr	r3, [r7, #0]
 80303ce:	3308      	adds	r3, #8
 80303d0:	681b      	ldr	r3, [r3, #0]
 80303d2:	4013      	ands	r3, r2
 80303d4:	2b00      	cmp	r3, #0
 80303d6:	d10d      	bne.n	80303f4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80303d8:	683b      	ldr	r3, [r7, #0]
 80303da:	3308      	adds	r3, #8
 80303dc:	681b      	ldr	r3, [r3, #0]
 80303de:	43da      	mvns	r2, r3
 80303e0:	687b      	ldr	r3, [r7, #4]
 80303e2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80303e4:	683b      	ldr	r3, [r7, #0]
 80303e6:	3308      	adds	r3, #8
 80303e8:	681b      	ldr	r3, [r3, #0]
 80303ea:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80303ec:	429a      	cmp	r2, r3
 80303ee:	d101      	bne.n	80303f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80303f0:	2301      	movs	r3, #1
 80303f2:	e000      	b.n	80303f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80303f4:	2300      	movs	r3, #0
  }
}
 80303f6:	4618      	mov	r0, r3
 80303f8:	3714      	adds	r7, #20
 80303fa:	46bd      	mov	sp, r7
 80303fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030400:	4770      	bx	lr
	...

08030404 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8030404:	b580      	push	{r7, lr}
 8030406:	b084      	sub	sp, #16
 8030408:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 803040a:	2300      	movs	r3, #0
 803040c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 803040e:	4b12      	ldr	r3, [pc, #72]	; (8030458 <ip_reass_tmr+0x54>)
 8030410:	681b      	ldr	r3, [r3, #0]
 8030412:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8030414:	e018      	b.n	8030448 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8030416:	68fb      	ldr	r3, [r7, #12]
 8030418:	7fdb      	ldrb	r3, [r3, #31]
 803041a:	2b00      	cmp	r3, #0
 803041c:	d00b      	beq.n	8030436 <ip_reass_tmr+0x32>
      r->timer--;
 803041e:	68fb      	ldr	r3, [r7, #12]
 8030420:	7fdb      	ldrb	r3, [r3, #31]
 8030422:	3b01      	subs	r3, #1
 8030424:	b2da      	uxtb	r2, r3
 8030426:	68fb      	ldr	r3, [r7, #12]
 8030428:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 803042a:	68fb      	ldr	r3, [r7, #12]
 803042c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 803042e:	68fb      	ldr	r3, [r7, #12]
 8030430:	681b      	ldr	r3, [r3, #0]
 8030432:	60fb      	str	r3, [r7, #12]
 8030434:	e008      	b.n	8030448 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8030436:	68fb      	ldr	r3, [r7, #12]
 8030438:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 803043a:	68fb      	ldr	r3, [r7, #12]
 803043c:	681b      	ldr	r3, [r3, #0]
 803043e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8030440:	68b9      	ldr	r1, [r7, #8]
 8030442:	6878      	ldr	r0, [r7, #4]
 8030444:	f000 f80a 	bl	803045c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8030448:	68fb      	ldr	r3, [r7, #12]
 803044a:	2b00      	cmp	r3, #0
 803044c:	d1e3      	bne.n	8030416 <ip_reass_tmr+0x12>
     }
   }
}
 803044e:	bf00      	nop
 8030450:	bf00      	nop
 8030452:	3710      	adds	r7, #16
 8030454:	46bd      	mov	sp, r7
 8030456:	bd80      	pop	{r7, pc}
 8030458:	20006b94 	.word	0x20006b94

0803045c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 803045c:	b580      	push	{r7, lr}
 803045e:	b088      	sub	sp, #32
 8030460:	af00      	add	r7, sp, #0
 8030462:	6078      	str	r0, [r7, #4]
 8030464:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8030466:	2300      	movs	r3, #0
 8030468:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 803046a:	683a      	ldr	r2, [r7, #0]
 803046c:	687b      	ldr	r3, [r7, #4]
 803046e:	429a      	cmp	r2, r3
 8030470:	d105      	bne.n	803047e <ip_reass_free_complete_datagram+0x22>
 8030472:	4b45      	ldr	r3, [pc, #276]	; (8030588 <ip_reass_free_complete_datagram+0x12c>)
 8030474:	22ab      	movs	r2, #171	; 0xab
 8030476:	4945      	ldr	r1, [pc, #276]	; (803058c <ip_reass_free_complete_datagram+0x130>)
 8030478:	4845      	ldr	r0, [pc, #276]	; (8030590 <ip_reass_free_complete_datagram+0x134>)
 803047a:	f000 ffa3 	bl	80313c4 <iprintf>
  if (prev != NULL) {
 803047e:	683b      	ldr	r3, [r7, #0]
 8030480:	2b00      	cmp	r3, #0
 8030482:	d00a      	beq.n	803049a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8030484:	683b      	ldr	r3, [r7, #0]
 8030486:	681b      	ldr	r3, [r3, #0]
 8030488:	687a      	ldr	r2, [r7, #4]
 803048a:	429a      	cmp	r2, r3
 803048c:	d005      	beq.n	803049a <ip_reass_free_complete_datagram+0x3e>
 803048e:	4b3e      	ldr	r3, [pc, #248]	; (8030588 <ip_reass_free_complete_datagram+0x12c>)
 8030490:	22ad      	movs	r2, #173	; 0xad
 8030492:	4940      	ldr	r1, [pc, #256]	; (8030594 <ip_reass_free_complete_datagram+0x138>)
 8030494:	483e      	ldr	r0, [pc, #248]	; (8030590 <ip_reass_free_complete_datagram+0x134>)
 8030496:	f000 ff95 	bl	80313c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 803049a:	687b      	ldr	r3, [r7, #4]
 803049c:	685b      	ldr	r3, [r3, #4]
 803049e:	685b      	ldr	r3, [r3, #4]
 80304a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80304a2:	697b      	ldr	r3, [r7, #20]
 80304a4:	889b      	ldrh	r3, [r3, #4]
 80304a6:	b29b      	uxth	r3, r3
 80304a8:	2b00      	cmp	r3, #0
 80304aa:	d12a      	bne.n	8030502 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80304ac:	687b      	ldr	r3, [r7, #4]
 80304ae:	685b      	ldr	r3, [r3, #4]
 80304b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80304b2:	697b      	ldr	r3, [r7, #20]
 80304b4:	681a      	ldr	r2, [r3, #0]
 80304b6:	687b      	ldr	r3, [r7, #4]
 80304b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80304ba:	69bb      	ldr	r3, [r7, #24]
 80304bc:	6858      	ldr	r0, [r3, #4]
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	3308      	adds	r3, #8
 80304c2:	2214      	movs	r2, #20
 80304c4:	4619      	mov	r1, r3
 80304c6:	f000 fe87 	bl	80311d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80304ca:	2101      	movs	r1, #1
 80304cc:	69b8      	ldr	r0, [r7, #24]
 80304ce:	f7ff fc63 	bl	802fd98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80304d2:	69b8      	ldr	r0, [r7, #24]
 80304d4:	f7f8 fdbc 	bl	8029050 <pbuf_clen>
 80304d8:	4603      	mov	r3, r0
 80304da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80304dc:	8bfa      	ldrh	r2, [r7, #30]
 80304de:	8a7b      	ldrh	r3, [r7, #18]
 80304e0:	4413      	add	r3, r2
 80304e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80304e6:	db05      	blt.n	80304f4 <ip_reass_free_complete_datagram+0x98>
 80304e8:	4b27      	ldr	r3, [pc, #156]	; (8030588 <ip_reass_free_complete_datagram+0x12c>)
 80304ea:	22bc      	movs	r2, #188	; 0xbc
 80304ec:	492a      	ldr	r1, [pc, #168]	; (8030598 <ip_reass_free_complete_datagram+0x13c>)
 80304ee:	4828      	ldr	r0, [pc, #160]	; (8030590 <ip_reass_free_complete_datagram+0x134>)
 80304f0:	f000 ff68 	bl	80313c4 <iprintf>
    pbufs_freed += clen;
 80304f4:	8bfa      	ldrh	r2, [r7, #30]
 80304f6:	8a7b      	ldrh	r3, [r7, #18]
 80304f8:	4413      	add	r3, r2
 80304fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80304fc:	69b8      	ldr	r0, [r7, #24]
 80304fe:	f7f8 fd13 	bl	8028f28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8030502:	687b      	ldr	r3, [r7, #4]
 8030504:	685b      	ldr	r3, [r3, #4]
 8030506:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8030508:	e01f      	b.n	803054a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 803050a:	69bb      	ldr	r3, [r7, #24]
 803050c:	685b      	ldr	r3, [r3, #4]
 803050e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8030510:	69bb      	ldr	r3, [r7, #24]
 8030512:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8030514:	697b      	ldr	r3, [r7, #20]
 8030516:	681b      	ldr	r3, [r3, #0]
 8030518:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 803051a:	68f8      	ldr	r0, [r7, #12]
 803051c:	f7f8 fd98 	bl	8029050 <pbuf_clen>
 8030520:	4603      	mov	r3, r0
 8030522:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8030524:	8bfa      	ldrh	r2, [r7, #30]
 8030526:	8a7b      	ldrh	r3, [r7, #18]
 8030528:	4413      	add	r3, r2
 803052a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803052e:	db05      	blt.n	803053c <ip_reass_free_complete_datagram+0xe0>
 8030530:	4b15      	ldr	r3, [pc, #84]	; (8030588 <ip_reass_free_complete_datagram+0x12c>)
 8030532:	22cc      	movs	r2, #204	; 0xcc
 8030534:	4918      	ldr	r1, [pc, #96]	; (8030598 <ip_reass_free_complete_datagram+0x13c>)
 8030536:	4816      	ldr	r0, [pc, #88]	; (8030590 <ip_reass_free_complete_datagram+0x134>)
 8030538:	f000 ff44 	bl	80313c4 <iprintf>
    pbufs_freed += clen;
 803053c:	8bfa      	ldrh	r2, [r7, #30]
 803053e:	8a7b      	ldrh	r3, [r7, #18]
 8030540:	4413      	add	r3, r2
 8030542:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8030544:	68f8      	ldr	r0, [r7, #12]
 8030546:	f7f8 fcef 	bl	8028f28 <pbuf_free>
  while (p != NULL) {
 803054a:	69bb      	ldr	r3, [r7, #24]
 803054c:	2b00      	cmp	r3, #0
 803054e:	d1dc      	bne.n	803050a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8030550:	6839      	ldr	r1, [r7, #0]
 8030552:	6878      	ldr	r0, [r7, #4]
 8030554:	f000 f8c2 	bl	80306dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8030558:	4b10      	ldr	r3, [pc, #64]	; (803059c <ip_reass_free_complete_datagram+0x140>)
 803055a:	881b      	ldrh	r3, [r3, #0]
 803055c:	8bfa      	ldrh	r2, [r7, #30]
 803055e:	429a      	cmp	r2, r3
 8030560:	d905      	bls.n	803056e <ip_reass_free_complete_datagram+0x112>
 8030562:	4b09      	ldr	r3, [pc, #36]	; (8030588 <ip_reass_free_complete_datagram+0x12c>)
 8030564:	22d2      	movs	r2, #210	; 0xd2
 8030566:	490e      	ldr	r1, [pc, #56]	; (80305a0 <ip_reass_free_complete_datagram+0x144>)
 8030568:	4809      	ldr	r0, [pc, #36]	; (8030590 <ip_reass_free_complete_datagram+0x134>)
 803056a:	f000 ff2b 	bl	80313c4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 803056e:	4b0b      	ldr	r3, [pc, #44]	; (803059c <ip_reass_free_complete_datagram+0x140>)
 8030570:	881a      	ldrh	r2, [r3, #0]
 8030572:	8bfb      	ldrh	r3, [r7, #30]
 8030574:	1ad3      	subs	r3, r2, r3
 8030576:	b29a      	uxth	r2, r3
 8030578:	4b08      	ldr	r3, [pc, #32]	; (803059c <ip_reass_free_complete_datagram+0x140>)
 803057a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 803057c:	8bfb      	ldrh	r3, [r7, #30]
}
 803057e:	4618      	mov	r0, r3
 8030580:	3720      	adds	r7, #32
 8030582:	46bd      	mov	sp, r7
 8030584:	bd80      	pop	{r7, pc}
 8030586:	bf00      	nop
 8030588:	080350bc 	.word	0x080350bc
 803058c:	080350f8 	.word	0x080350f8
 8030590:	08035104 	.word	0x08035104
 8030594:	0803512c 	.word	0x0803512c
 8030598:	08035140 	.word	0x08035140
 803059c:	20006b98 	.word	0x20006b98
 80305a0:	08035160 	.word	0x08035160

080305a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80305a4:	b580      	push	{r7, lr}
 80305a6:	b08a      	sub	sp, #40	; 0x28
 80305a8:	af00      	add	r7, sp, #0
 80305aa:	6078      	str	r0, [r7, #4]
 80305ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80305ae:	2300      	movs	r3, #0
 80305b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80305b2:	2300      	movs	r3, #0
 80305b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80305b6:	2300      	movs	r3, #0
 80305b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80305ba:	2300      	movs	r3, #0
 80305bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80305be:	2300      	movs	r3, #0
 80305c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80305c2:	4b28      	ldr	r3, [pc, #160]	; (8030664 <ip_reass_remove_oldest_datagram+0xc0>)
 80305c4:	681b      	ldr	r3, [r3, #0]
 80305c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80305c8:	e030      	b.n	803062c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80305ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80305cc:	695a      	ldr	r2, [r3, #20]
 80305ce:	687b      	ldr	r3, [r7, #4]
 80305d0:	68db      	ldr	r3, [r3, #12]
 80305d2:	429a      	cmp	r2, r3
 80305d4:	d10c      	bne.n	80305f0 <ip_reass_remove_oldest_datagram+0x4c>
 80305d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80305d8:	699a      	ldr	r2, [r3, #24]
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	691b      	ldr	r3, [r3, #16]
 80305de:	429a      	cmp	r2, r3
 80305e0:	d106      	bne.n	80305f0 <ip_reass_remove_oldest_datagram+0x4c>
 80305e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80305e4:	899a      	ldrh	r2, [r3, #12]
 80305e6:	687b      	ldr	r3, [r7, #4]
 80305e8:	889b      	ldrh	r3, [r3, #4]
 80305ea:	b29b      	uxth	r3, r3
 80305ec:	429a      	cmp	r2, r3
 80305ee:	d014      	beq.n	803061a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80305f0:	693b      	ldr	r3, [r7, #16]
 80305f2:	3301      	adds	r3, #1
 80305f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80305f6:	6a3b      	ldr	r3, [r7, #32]
 80305f8:	2b00      	cmp	r3, #0
 80305fa:	d104      	bne.n	8030606 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80305fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80305fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8030600:	69fb      	ldr	r3, [r7, #28]
 8030602:	61bb      	str	r3, [r7, #24]
 8030604:	e009      	b.n	803061a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8030606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030608:	7fda      	ldrb	r2, [r3, #31]
 803060a:	6a3b      	ldr	r3, [r7, #32]
 803060c:	7fdb      	ldrb	r3, [r3, #31]
 803060e:	429a      	cmp	r2, r3
 8030610:	d803      	bhi.n	803061a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8030612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030614:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8030616:	69fb      	ldr	r3, [r7, #28]
 8030618:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 803061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803061c:	681b      	ldr	r3, [r3, #0]
 803061e:	2b00      	cmp	r3, #0
 8030620:	d001      	beq.n	8030626 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8030622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030624:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8030626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030628:	681b      	ldr	r3, [r3, #0]
 803062a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 803062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803062e:	2b00      	cmp	r3, #0
 8030630:	d1cb      	bne.n	80305ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8030632:	6a3b      	ldr	r3, [r7, #32]
 8030634:	2b00      	cmp	r3, #0
 8030636:	d008      	beq.n	803064a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8030638:	69b9      	ldr	r1, [r7, #24]
 803063a:	6a38      	ldr	r0, [r7, #32]
 803063c:	f7ff ff0e 	bl	803045c <ip_reass_free_complete_datagram>
 8030640:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8030642:	697a      	ldr	r2, [r7, #20]
 8030644:	68fb      	ldr	r3, [r7, #12]
 8030646:	4413      	add	r3, r2
 8030648:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 803064a:	697a      	ldr	r2, [r7, #20]
 803064c:	683b      	ldr	r3, [r7, #0]
 803064e:	429a      	cmp	r2, r3
 8030650:	da02      	bge.n	8030658 <ip_reass_remove_oldest_datagram+0xb4>
 8030652:	693b      	ldr	r3, [r7, #16]
 8030654:	2b01      	cmp	r3, #1
 8030656:	dcac      	bgt.n	80305b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8030658:	697b      	ldr	r3, [r7, #20]
}
 803065a:	4618      	mov	r0, r3
 803065c:	3728      	adds	r7, #40	; 0x28
 803065e:	46bd      	mov	sp, r7
 8030660:	bd80      	pop	{r7, pc}
 8030662:	bf00      	nop
 8030664:	20006b94 	.word	0x20006b94

08030668 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8030668:	b580      	push	{r7, lr}
 803066a:	b084      	sub	sp, #16
 803066c:	af00      	add	r7, sp, #0
 803066e:	6078      	str	r0, [r7, #4]
 8030670:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8030672:	2004      	movs	r0, #4
 8030674:	f7f7 fedc 	bl	8028430 <memp_malloc>
 8030678:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 803067a:	68fb      	ldr	r3, [r7, #12]
 803067c:	2b00      	cmp	r3, #0
 803067e:	d110      	bne.n	80306a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8030680:	6839      	ldr	r1, [r7, #0]
 8030682:	6878      	ldr	r0, [r7, #4]
 8030684:	f7ff ff8e 	bl	80305a4 <ip_reass_remove_oldest_datagram>
 8030688:	4602      	mov	r2, r0
 803068a:	683b      	ldr	r3, [r7, #0]
 803068c:	4293      	cmp	r3, r2
 803068e:	dc03      	bgt.n	8030698 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8030690:	2004      	movs	r0, #4
 8030692:	f7f7 fecd 	bl	8028430 <memp_malloc>
 8030696:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8030698:	68fb      	ldr	r3, [r7, #12]
 803069a:	2b00      	cmp	r3, #0
 803069c:	d101      	bne.n	80306a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 803069e:	2300      	movs	r3, #0
 80306a0:	e016      	b.n	80306d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80306a2:	2220      	movs	r2, #32
 80306a4:	2100      	movs	r1, #0
 80306a6:	68f8      	ldr	r0, [r7, #12]
 80306a8:	f000 fda4 	bl	80311f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80306ac:	68fb      	ldr	r3, [r7, #12]
 80306ae:	2203      	movs	r2, #3
 80306b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80306b2:	4b09      	ldr	r3, [pc, #36]	; (80306d8 <ip_reass_enqueue_new_datagram+0x70>)
 80306b4:	681a      	ldr	r2, [r3, #0]
 80306b6:	68fb      	ldr	r3, [r7, #12]
 80306b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80306ba:	4a07      	ldr	r2, [pc, #28]	; (80306d8 <ip_reass_enqueue_new_datagram+0x70>)
 80306bc:	68fb      	ldr	r3, [r7, #12]
 80306be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80306c0:	68fb      	ldr	r3, [r7, #12]
 80306c2:	3308      	adds	r3, #8
 80306c4:	2214      	movs	r2, #20
 80306c6:	6879      	ldr	r1, [r7, #4]
 80306c8:	4618      	mov	r0, r3
 80306ca:	f000 fd85 	bl	80311d8 <memcpy>
  return ipr;
 80306ce:	68fb      	ldr	r3, [r7, #12]
}
 80306d0:	4618      	mov	r0, r3
 80306d2:	3710      	adds	r7, #16
 80306d4:	46bd      	mov	sp, r7
 80306d6:	bd80      	pop	{r7, pc}
 80306d8:	20006b94 	.word	0x20006b94

080306dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80306dc:	b580      	push	{r7, lr}
 80306de:	b082      	sub	sp, #8
 80306e0:	af00      	add	r7, sp, #0
 80306e2:	6078      	str	r0, [r7, #4]
 80306e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80306e6:	4b10      	ldr	r3, [pc, #64]	; (8030728 <ip_reass_dequeue_datagram+0x4c>)
 80306e8:	681b      	ldr	r3, [r3, #0]
 80306ea:	687a      	ldr	r2, [r7, #4]
 80306ec:	429a      	cmp	r2, r3
 80306ee:	d104      	bne.n	80306fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80306f0:	687b      	ldr	r3, [r7, #4]
 80306f2:	681b      	ldr	r3, [r3, #0]
 80306f4:	4a0c      	ldr	r2, [pc, #48]	; (8030728 <ip_reass_dequeue_datagram+0x4c>)
 80306f6:	6013      	str	r3, [r2, #0]
 80306f8:	e00d      	b.n	8030716 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80306fa:	683b      	ldr	r3, [r7, #0]
 80306fc:	2b00      	cmp	r3, #0
 80306fe:	d106      	bne.n	803070e <ip_reass_dequeue_datagram+0x32>
 8030700:	4b0a      	ldr	r3, [pc, #40]	; (803072c <ip_reass_dequeue_datagram+0x50>)
 8030702:	f240 1245 	movw	r2, #325	; 0x145
 8030706:	490a      	ldr	r1, [pc, #40]	; (8030730 <ip_reass_dequeue_datagram+0x54>)
 8030708:	480a      	ldr	r0, [pc, #40]	; (8030734 <ip_reass_dequeue_datagram+0x58>)
 803070a:	f000 fe5b 	bl	80313c4 <iprintf>
    prev->next = ipr->next;
 803070e:	687b      	ldr	r3, [r7, #4]
 8030710:	681a      	ldr	r2, [r3, #0]
 8030712:	683b      	ldr	r3, [r7, #0]
 8030714:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8030716:	6879      	ldr	r1, [r7, #4]
 8030718:	2004      	movs	r0, #4
 803071a:	f7f7 fed5 	bl	80284c8 <memp_free>
}
 803071e:	bf00      	nop
 8030720:	3708      	adds	r7, #8
 8030722:	46bd      	mov	sp, r7
 8030724:	bd80      	pop	{r7, pc}
 8030726:	bf00      	nop
 8030728:	20006b94 	.word	0x20006b94
 803072c:	080350bc 	.word	0x080350bc
 8030730:	0803517c 	.word	0x0803517c
 8030734:	08035104 	.word	0x08035104

08030738 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8030738:	b580      	push	{r7, lr}
 803073a:	b08c      	sub	sp, #48	; 0x30
 803073c:	af00      	add	r7, sp, #0
 803073e:	60f8      	str	r0, [r7, #12]
 8030740:	60b9      	str	r1, [r7, #8]
 8030742:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8030744:	2300      	movs	r3, #0
 8030746:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8030748:	2301      	movs	r3, #1
 803074a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 803074c:	68bb      	ldr	r3, [r7, #8]
 803074e:	685b      	ldr	r3, [r3, #4]
 8030750:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8030752:	69fb      	ldr	r3, [r7, #28]
 8030754:	885b      	ldrh	r3, [r3, #2]
 8030756:	b29b      	uxth	r3, r3
 8030758:	4618      	mov	r0, r3
 803075a:	f7f7 fabc 	bl	8027cd6 <lwip_htons>
 803075e:	4603      	mov	r3, r0
 8030760:	461a      	mov	r2, r3
 8030762:	69fb      	ldr	r3, [r7, #28]
 8030764:	781b      	ldrb	r3, [r3, #0]
 8030766:	b29b      	uxth	r3, r3
 8030768:	f003 030f 	and.w	r3, r3, #15
 803076c:	b29b      	uxth	r3, r3
 803076e:	009b      	lsls	r3, r3, #2
 8030770:	b29b      	uxth	r3, r3
 8030772:	1ad3      	subs	r3, r2, r3
 8030774:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8030776:	69fb      	ldr	r3, [r7, #28]
 8030778:	88db      	ldrh	r3, [r3, #6]
 803077a:	b29b      	uxth	r3, r3
 803077c:	4618      	mov	r0, r3
 803077e:	f7f7 faaa 	bl	8027cd6 <lwip_htons>
 8030782:	4603      	mov	r3, r0
 8030784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8030788:	b29b      	uxth	r3, r3
 803078a:	00db      	lsls	r3, r3, #3
 803078c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 803078e:	68bb      	ldr	r3, [r7, #8]
 8030790:	685b      	ldr	r3, [r3, #4]
 8030792:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8030794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030796:	2200      	movs	r2, #0
 8030798:	701a      	strb	r2, [r3, #0]
 803079a:	2200      	movs	r2, #0
 803079c:	705a      	strb	r2, [r3, #1]
 803079e:	2200      	movs	r2, #0
 80307a0:	709a      	strb	r2, [r3, #2]
 80307a2:	2200      	movs	r2, #0
 80307a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80307a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307a8:	8b3a      	ldrh	r2, [r7, #24]
 80307aa:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80307ac:	8b3a      	ldrh	r2, [r7, #24]
 80307ae:	8b7b      	ldrh	r3, [r7, #26]
 80307b0:	4413      	add	r3, r2
 80307b2:	b29a      	uxth	r2, r3
 80307b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307b6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80307b8:	68fb      	ldr	r3, [r7, #12]
 80307ba:	685b      	ldr	r3, [r3, #4]
 80307bc:	627b      	str	r3, [r7, #36]	; 0x24
 80307be:	e061      	b.n	8030884 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80307c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80307c2:	685b      	ldr	r3, [r3, #4]
 80307c4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80307c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307c8:	889b      	ldrh	r3, [r3, #4]
 80307ca:	b29a      	uxth	r2, r3
 80307cc:	697b      	ldr	r3, [r7, #20]
 80307ce:	889b      	ldrh	r3, [r3, #4]
 80307d0:	b29b      	uxth	r3, r3
 80307d2:	429a      	cmp	r2, r3
 80307d4:	d232      	bcs.n	803083c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80307d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80307da:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80307dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80307de:	2b00      	cmp	r3, #0
 80307e0:	d01f      	beq.n	8030822 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80307e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307e4:	889b      	ldrh	r3, [r3, #4]
 80307e6:	b29a      	uxth	r2, r3
 80307e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80307ea:	88db      	ldrh	r3, [r3, #6]
 80307ec:	b29b      	uxth	r3, r3
 80307ee:	429a      	cmp	r2, r3
 80307f0:	f0c0 80e3 	bcc.w	80309ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80307f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80307f6:	88db      	ldrh	r3, [r3, #6]
 80307f8:	b29a      	uxth	r2, r3
 80307fa:	697b      	ldr	r3, [r7, #20]
 80307fc:	889b      	ldrh	r3, [r3, #4]
 80307fe:	b29b      	uxth	r3, r3
 8030800:	429a      	cmp	r2, r3
 8030802:	f200 80da 	bhi.w	80309ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8030806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030808:	68ba      	ldr	r2, [r7, #8]
 803080a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 803080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803080e:	88db      	ldrh	r3, [r3, #6]
 8030810:	b29a      	uxth	r2, r3
 8030812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030814:	889b      	ldrh	r3, [r3, #4]
 8030816:	b29b      	uxth	r3, r3
 8030818:	429a      	cmp	r2, r3
 803081a:	d037      	beq.n	803088c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 803081c:	2300      	movs	r3, #0
 803081e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8030820:	e034      	b.n	803088c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8030822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030824:	88db      	ldrh	r3, [r3, #6]
 8030826:	b29a      	uxth	r2, r3
 8030828:	697b      	ldr	r3, [r7, #20]
 803082a:	889b      	ldrh	r3, [r3, #4]
 803082c:	b29b      	uxth	r3, r3
 803082e:	429a      	cmp	r2, r3
 8030830:	f200 80c5 	bhi.w	80309be <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8030834:	68fb      	ldr	r3, [r7, #12]
 8030836:	68ba      	ldr	r2, [r7, #8]
 8030838:	605a      	str	r2, [r3, #4]
      break;
 803083a:	e027      	b.n	803088c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 803083c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803083e:	889b      	ldrh	r3, [r3, #4]
 8030840:	b29a      	uxth	r2, r3
 8030842:	697b      	ldr	r3, [r7, #20]
 8030844:	889b      	ldrh	r3, [r3, #4]
 8030846:	b29b      	uxth	r3, r3
 8030848:	429a      	cmp	r2, r3
 803084a:	f000 80ba 	beq.w	80309c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 803084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030850:	889b      	ldrh	r3, [r3, #4]
 8030852:	b29a      	uxth	r2, r3
 8030854:	697b      	ldr	r3, [r7, #20]
 8030856:	88db      	ldrh	r3, [r3, #6]
 8030858:	b29b      	uxth	r3, r3
 803085a:	429a      	cmp	r2, r3
 803085c:	f0c0 80b3 	bcc.w	80309c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8030860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030862:	2b00      	cmp	r3, #0
 8030864:	d009      	beq.n	803087a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8030866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030868:	88db      	ldrh	r3, [r3, #6]
 803086a:	b29a      	uxth	r2, r3
 803086c:	697b      	ldr	r3, [r7, #20]
 803086e:	889b      	ldrh	r3, [r3, #4]
 8030870:	b29b      	uxth	r3, r3
 8030872:	429a      	cmp	r2, r3
 8030874:	d001      	beq.n	803087a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8030876:	2300      	movs	r3, #0
 8030878:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 803087a:	697b      	ldr	r3, [r7, #20]
 803087c:	681b      	ldr	r3, [r3, #0]
 803087e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8030880:	697b      	ldr	r3, [r7, #20]
 8030882:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8030884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030886:	2b00      	cmp	r3, #0
 8030888:	d19a      	bne.n	80307c0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 803088a:	e000      	b.n	803088e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 803088c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 803088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030890:	2b00      	cmp	r3, #0
 8030892:	d12d      	bne.n	80308f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8030894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030896:	2b00      	cmp	r3, #0
 8030898:	d01c      	beq.n	80308d4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 803089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803089c:	88db      	ldrh	r3, [r3, #6]
 803089e:	b29a      	uxth	r2, r3
 80308a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80308a2:	889b      	ldrh	r3, [r3, #4]
 80308a4:	b29b      	uxth	r3, r3
 80308a6:	429a      	cmp	r2, r3
 80308a8:	d906      	bls.n	80308b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80308aa:	4b51      	ldr	r3, [pc, #324]	; (80309f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80308ac:	f240 12ab 	movw	r2, #427	; 0x1ab
 80308b0:	4950      	ldr	r1, [pc, #320]	; (80309f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80308b2:	4851      	ldr	r0, [pc, #324]	; (80309f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80308b4:	f000 fd86 	bl	80313c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80308b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80308ba:	68ba      	ldr	r2, [r7, #8]
 80308bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80308be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80308c0:	88db      	ldrh	r3, [r3, #6]
 80308c2:	b29a      	uxth	r2, r3
 80308c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80308c6:	889b      	ldrh	r3, [r3, #4]
 80308c8:	b29b      	uxth	r3, r3
 80308ca:	429a      	cmp	r2, r3
 80308cc:	d010      	beq.n	80308f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80308ce:	2300      	movs	r3, #0
 80308d0:	623b      	str	r3, [r7, #32]
 80308d2:	e00d      	b.n	80308f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80308d4:	68fb      	ldr	r3, [r7, #12]
 80308d6:	685b      	ldr	r3, [r3, #4]
 80308d8:	2b00      	cmp	r3, #0
 80308da:	d006      	beq.n	80308ea <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80308dc:	4b44      	ldr	r3, [pc, #272]	; (80309f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80308de:	f240 12b3 	movw	r2, #435	; 0x1b3
 80308e2:	4946      	ldr	r1, [pc, #280]	; (80309fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80308e4:	4844      	ldr	r0, [pc, #272]	; (80309f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80308e6:	f000 fd6d 	bl	80313c4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80308ea:	68fb      	ldr	r3, [r7, #12]
 80308ec:	68ba      	ldr	r2, [r7, #8]
 80308ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80308f0:	687b      	ldr	r3, [r7, #4]
 80308f2:	2b00      	cmp	r3, #0
 80308f4:	d105      	bne.n	8030902 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80308f6:	68fb      	ldr	r3, [r7, #12]
 80308f8:	7f9b      	ldrb	r3, [r3, #30]
 80308fa:	f003 0301 	and.w	r3, r3, #1
 80308fe:	2b00      	cmp	r3, #0
 8030900:	d059      	beq.n	80309b6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8030902:	6a3b      	ldr	r3, [r7, #32]
 8030904:	2b00      	cmp	r3, #0
 8030906:	d04f      	beq.n	80309a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8030908:	68fb      	ldr	r3, [r7, #12]
 803090a:	685b      	ldr	r3, [r3, #4]
 803090c:	2b00      	cmp	r3, #0
 803090e:	d006      	beq.n	803091e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8030910:	68fb      	ldr	r3, [r7, #12]
 8030912:	685b      	ldr	r3, [r3, #4]
 8030914:	685b      	ldr	r3, [r3, #4]
 8030916:	889b      	ldrh	r3, [r3, #4]
 8030918:	b29b      	uxth	r3, r3
 803091a:	2b00      	cmp	r3, #0
 803091c:	d002      	beq.n	8030924 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 803091e:	2300      	movs	r3, #0
 8030920:	623b      	str	r3, [r7, #32]
 8030922:	e041      	b.n	80309a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8030924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030926:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8030928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803092a:	681b      	ldr	r3, [r3, #0]
 803092c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 803092e:	e012      	b.n	8030956 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8030930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030932:	685b      	ldr	r3, [r3, #4]
 8030934:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8030936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030938:	88db      	ldrh	r3, [r3, #6]
 803093a:	b29a      	uxth	r2, r3
 803093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803093e:	889b      	ldrh	r3, [r3, #4]
 8030940:	b29b      	uxth	r3, r3
 8030942:	429a      	cmp	r2, r3
 8030944:	d002      	beq.n	803094c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8030946:	2300      	movs	r3, #0
 8030948:	623b      	str	r3, [r7, #32]
            break;
 803094a:	e007      	b.n	803095c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 803094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803094e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8030950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030952:	681b      	ldr	r3, [r3, #0]
 8030954:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8030956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030958:	2b00      	cmp	r3, #0
 803095a:	d1e9      	bne.n	8030930 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 803095c:	6a3b      	ldr	r3, [r7, #32]
 803095e:	2b00      	cmp	r3, #0
 8030960:	d022      	beq.n	80309a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8030962:	68fb      	ldr	r3, [r7, #12]
 8030964:	685b      	ldr	r3, [r3, #4]
 8030966:	2b00      	cmp	r3, #0
 8030968:	d106      	bne.n	8030978 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 803096a:	4b21      	ldr	r3, [pc, #132]	; (80309f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 803096c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8030970:	4923      	ldr	r1, [pc, #140]	; (8030a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8030972:	4821      	ldr	r0, [pc, #132]	; (80309f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8030974:	f000 fd26 	bl	80313c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8030978:	68fb      	ldr	r3, [r7, #12]
 803097a:	685b      	ldr	r3, [r3, #4]
 803097c:	685b      	ldr	r3, [r3, #4]
 803097e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8030980:	429a      	cmp	r2, r3
 8030982:	d106      	bne.n	8030992 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8030984:	4b1a      	ldr	r3, [pc, #104]	; (80309f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8030986:	f240 12d5 	movw	r2, #469	; 0x1d5
 803098a:	491d      	ldr	r1, [pc, #116]	; (8030a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 803098c:	481a      	ldr	r0, [pc, #104]	; (80309f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 803098e:	f000 fd19 	bl	80313c4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8030992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030994:	681b      	ldr	r3, [r3, #0]
 8030996:	2b00      	cmp	r3, #0
 8030998:	d006      	beq.n	80309a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 803099a:	4b15      	ldr	r3, [pc, #84]	; (80309f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 803099c:	f240 12d7 	movw	r2, #471	; 0x1d7
 80309a0:	4918      	ldr	r1, [pc, #96]	; (8030a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80309a2:	4815      	ldr	r0, [pc, #84]	; (80309f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80309a4:	f000 fd0e 	bl	80313c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80309a8:	6a3b      	ldr	r3, [r7, #32]
 80309aa:	2b00      	cmp	r3, #0
 80309ac:	bf14      	ite	ne
 80309ae:	2301      	movne	r3, #1
 80309b0:	2300      	moveq	r3, #0
 80309b2:	b2db      	uxtb	r3, r3
 80309b4:	e018      	b.n	80309e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80309b6:	2300      	movs	r3, #0
 80309b8:	e016      	b.n	80309e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 80309ba:	bf00      	nop
 80309bc:	e004      	b.n	80309c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80309be:	bf00      	nop
 80309c0:	e002      	b.n	80309c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80309c2:	bf00      	nop
 80309c4:	e000      	b.n	80309c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80309c6:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80309c8:	68b8      	ldr	r0, [r7, #8]
 80309ca:	f7f8 fb41 	bl	8029050 <pbuf_clen>
 80309ce:	4603      	mov	r3, r0
 80309d0:	461a      	mov	r2, r3
 80309d2:	4b0d      	ldr	r3, [pc, #52]	; (8030a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80309d4:	881b      	ldrh	r3, [r3, #0]
 80309d6:	1a9b      	subs	r3, r3, r2
 80309d8:	b29a      	uxth	r2, r3
 80309da:	4b0b      	ldr	r3, [pc, #44]	; (8030a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80309dc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80309de:	68b8      	ldr	r0, [r7, #8]
 80309e0:	f7f8 faa2 	bl	8028f28 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80309e4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80309e8:	4618      	mov	r0, r3
 80309ea:	3730      	adds	r7, #48	; 0x30
 80309ec:	46bd      	mov	sp, r7
 80309ee:	bd80      	pop	{r7, pc}
 80309f0:	080350bc 	.word	0x080350bc
 80309f4:	08035198 	.word	0x08035198
 80309f8:	08035104 	.word	0x08035104
 80309fc:	080351b8 	.word	0x080351b8
 8030a00:	080351f0 	.word	0x080351f0
 8030a04:	08035200 	.word	0x08035200
 8030a08:	20006b98 	.word	0x20006b98

08030a0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8030a0c:	b580      	push	{r7, lr}
 8030a0e:	b08e      	sub	sp, #56	; 0x38
 8030a10:	af00      	add	r7, sp, #0
 8030a12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8030a14:	687b      	ldr	r3, [r7, #4]
 8030a16:	685b      	ldr	r3, [r3, #4]
 8030a18:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8030a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a1c:	781b      	ldrb	r3, [r3, #0]
 8030a1e:	f003 030f 	and.w	r3, r3, #15
 8030a22:	009b      	lsls	r3, r3, #2
 8030a24:	2b14      	cmp	r3, #20
 8030a26:	f040 8131 	bne.w	8030c8c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8030a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a2c:	88db      	ldrh	r3, [r3, #6]
 8030a2e:	b29b      	uxth	r3, r3
 8030a30:	4618      	mov	r0, r3
 8030a32:	f7f7 f950 	bl	8027cd6 <lwip_htons>
 8030a36:	4603      	mov	r3, r0
 8030a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8030a3c:	b29b      	uxth	r3, r3
 8030a3e:	00db      	lsls	r3, r3, #3
 8030a40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8030a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a44:	885b      	ldrh	r3, [r3, #2]
 8030a46:	b29b      	uxth	r3, r3
 8030a48:	4618      	mov	r0, r3
 8030a4a:	f7f7 f944 	bl	8027cd6 <lwip_htons>
 8030a4e:	4603      	mov	r3, r0
 8030a50:	461a      	mov	r2, r3
 8030a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a54:	781b      	ldrb	r3, [r3, #0]
 8030a56:	b29b      	uxth	r3, r3
 8030a58:	f003 030f 	and.w	r3, r3, #15
 8030a5c:	b29b      	uxth	r3, r3
 8030a5e:	009b      	lsls	r3, r3, #2
 8030a60:	b29b      	uxth	r3, r3
 8030a62:	1ad3      	subs	r3, r2, r3
 8030a64:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8030a66:	6878      	ldr	r0, [r7, #4]
 8030a68:	f7f8 faf2 	bl	8029050 <pbuf_clen>
 8030a6c:	4603      	mov	r3, r0
 8030a6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8030a70:	4b8e      	ldr	r3, [pc, #568]	; (8030cac <ip4_reass+0x2a0>)
 8030a72:	881b      	ldrh	r3, [r3, #0]
 8030a74:	461a      	mov	r2, r3
 8030a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8030a78:	4413      	add	r3, r2
 8030a7a:	2b0a      	cmp	r3, #10
 8030a7c:	dd10      	ble.n	8030aa0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8030a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8030a80:	4619      	mov	r1, r3
 8030a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8030a84:	f7ff fd8e 	bl	80305a4 <ip_reass_remove_oldest_datagram>
 8030a88:	4603      	mov	r3, r0
 8030a8a:	2b00      	cmp	r3, #0
 8030a8c:	f000 8100 	beq.w	8030c90 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8030a90:	4b86      	ldr	r3, [pc, #536]	; (8030cac <ip4_reass+0x2a0>)
 8030a92:	881b      	ldrh	r3, [r3, #0]
 8030a94:	461a      	mov	r2, r3
 8030a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8030a98:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8030a9a:	2b0a      	cmp	r3, #10
 8030a9c:	f300 80f8 	bgt.w	8030c90 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8030aa0:	4b83      	ldr	r3, [pc, #524]	; (8030cb0 <ip4_reass+0x2a4>)
 8030aa2:	681b      	ldr	r3, [r3, #0]
 8030aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8030aa6:	e015      	b.n	8030ad4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8030aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030aaa:	695a      	ldr	r2, [r3, #20]
 8030aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030aae:	68db      	ldr	r3, [r3, #12]
 8030ab0:	429a      	cmp	r2, r3
 8030ab2:	d10c      	bne.n	8030ace <ip4_reass+0xc2>
 8030ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ab6:	699a      	ldr	r2, [r3, #24]
 8030ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030aba:	691b      	ldr	r3, [r3, #16]
 8030abc:	429a      	cmp	r2, r3
 8030abe:	d106      	bne.n	8030ace <ip4_reass+0xc2>
 8030ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ac2:	899a      	ldrh	r2, [r3, #12]
 8030ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030ac6:	889b      	ldrh	r3, [r3, #4]
 8030ac8:	b29b      	uxth	r3, r3
 8030aca:	429a      	cmp	r2, r3
 8030acc:	d006      	beq.n	8030adc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8030ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ad0:	681b      	ldr	r3, [r3, #0]
 8030ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8030ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ad6:	2b00      	cmp	r3, #0
 8030ad8:	d1e6      	bne.n	8030aa8 <ip4_reass+0x9c>
 8030ada:	e000      	b.n	8030ade <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8030adc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8030ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ae0:	2b00      	cmp	r3, #0
 8030ae2:	d109      	bne.n	8030af8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8030ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8030ae6:	4619      	mov	r1, r3
 8030ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8030aea:	f7ff fdbd 	bl	8030668 <ip_reass_enqueue_new_datagram>
 8030aee:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8030af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030af2:	2b00      	cmp	r3, #0
 8030af4:	d11c      	bne.n	8030b30 <ip4_reass+0x124>
      goto nullreturn;
 8030af6:	e0d0      	b.n	8030c9a <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8030af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030afa:	88db      	ldrh	r3, [r3, #6]
 8030afc:	b29b      	uxth	r3, r3
 8030afe:	4618      	mov	r0, r3
 8030b00:	f7f7 f8e9 	bl	8027cd6 <lwip_htons>
 8030b04:	4603      	mov	r3, r0
 8030b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8030b0a:	2b00      	cmp	r3, #0
 8030b0c:	d110      	bne.n	8030b30 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8030b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030b10:	89db      	ldrh	r3, [r3, #14]
 8030b12:	4618      	mov	r0, r3
 8030b14:	f7f7 f8df 	bl	8027cd6 <lwip_htons>
 8030b18:	4603      	mov	r3, r0
 8030b1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8030b1e:	2b00      	cmp	r3, #0
 8030b20:	d006      	beq.n	8030b30 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8030b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030b24:	3308      	adds	r3, #8
 8030b26:	2214      	movs	r2, #20
 8030b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030b2a:	4618      	mov	r0, r3
 8030b2c:	f000 fb54 	bl	80311d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8030b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030b32:	88db      	ldrh	r3, [r3, #6]
 8030b34:	b29b      	uxth	r3, r3
 8030b36:	f003 0320 	and.w	r3, r3, #32
 8030b3a:	2b00      	cmp	r3, #0
 8030b3c:	bf0c      	ite	eq
 8030b3e:	2301      	moveq	r3, #1
 8030b40:	2300      	movne	r3, #0
 8030b42:	b2db      	uxtb	r3, r3
 8030b44:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8030b46:	69fb      	ldr	r3, [r7, #28]
 8030b48:	2b00      	cmp	r3, #0
 8030b4a:	d00e      	beq.n	8030b6a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8030b4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8030b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8030b50:	4413      	add	r3, r2
 8030b52:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8030b54:	8b7a      	ldrh	r2, [r7, #26]
 8030b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8030b58:	429a      	cmp	r2, r3
 8030b5a:	f0c0 809b 	bcc.w	8030c94 <ip4_reass+0x288>
 8030b5e:	8b7b      	ldrh	r3, [r7, #26]
 8030b60:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8030b64:	4293      	cmp	r3, r2
 8030b66:	f200 8095 	bhi.w	8030c94 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8030b6a:	69fa      	ldr	r2, [r7, #28]
 8030b6c:	6879      	ldr	r1, [r7, #4]
 8030b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8030b70:	f7ff fde2 	bl	8030738 <ip_reass_chain_frag_into_datagram_and_validate>
 8030b74:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8030b76:	697b      	ldr	r3, [r7, #20]
 8030b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030b7c:	f000 808c 	beq.w	8030c98 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8030b80:	4b4a      	ldr	r3, [pc, #296]	; (8030cac <ip4_reass+0x2a0>)
 8030b82:	881a      	ldrh	r2, [r3, #0]
 8030b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8030b86:	4413      	add	r3, r2
 8030b88:	b29a      	uxth	r2, r3
 8030b8a:	4b48      	ldr	r3, [pc, #288]	; (8030cac <ip4_reass+0x2a0>)
 8030b8c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8030b8e:	69fb      	ldr	r3, [r7, #28]
 8030b90:	2b00      	cmp	r3, #0
 8030b92:	d00d      	beq.n	8030bb0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8030b94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8030b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8030b98:	4413      	add	r3, r2
 8030b9a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8030b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030b9e:	8a7a      	ldrh	r2, [r7, #18]
 8030ba0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8030ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ba4:	7f9b      	ldrb	r3, [r3, #30]
 8030ba6:	f043 0301 	orr.w	r3, r3, #1
 8030baa:	b2da      	uxtb	r2, r3
 8030bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bae:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8030bb0:	697b      	ldr	r3, [r7, #20]
 8030bb2:	2b01      	cmp	r3, #1
 8030bb4:	d168      	bne.n	8030c88 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8030bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bb8:	8b9b      	ldrh	r3, [r3, #28]
 8030bba:	3314      	adds	r3, #20
 8030bbc:	b29a      	uxth	r2, r3
 8030bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bc0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8030bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bc4:	685b      	ldr	r3, [r3, #4]
 8030bc6:	685b      	ldr	r3, [r3, #4]
 8030bc8:	681b      	ldr	r3, [r3, #0]
 8030bca:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8030bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bce:	685b      	ldr	r3, [r3, #4]
 8030bd0:	685b      	ldr	r3, [r3, #4]
 8030bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8030bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030bd6:	3308      	adds	r3, #8
 8030bd8:	2214      	movs	r2, #20
 8030bda:	4619      	mov	r1, r3
 8030bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8030bde:	f000 fafb 	bl	80311d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8030be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030be4:	8b9b      	ldrh	r3, [r3, #28]
 8030be6:	4618      	mov	r0, r3
 8030be8:	f7f7 f875 	bl	8027cd6 <lwip_htons>
 8030bec:	4603      	mov	r3, r0
 8030bee:	461a      	mov	r2, r3
 8030bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030bf2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8030bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030bf6:	2200      	movs	r2, #0
 8030bf8:	719a      	strb	r2, [r3, #6]
 8030bfa:	2200      	movs	r2, #0
 8030bfc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8030bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030c00:	2200      	movs	r2, #0
 8030c02:	729a      	strb	r2, [r3, #10]
 8030c04:	2200      	movs	r2, #0
 8030c06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8030c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030c0a:	685b      	ldr	r3, [r3, #4]
 8030c0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8030c0e:	e00e      	b.n	8030c2e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8030c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030c12:	685b      	ldr	r3, [r3, #4]
 8030c14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8030c16:	f06f 0113 	mvn.w	r1, #19
 8030c1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8030c1c:	f7f8 f960 	bl	8028ee0 <pbuf_header>
      pbuf_cat(p, r);
 8030c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8030c22:	6878      	ldr	r0, [r7, #4]
 8030c24:	f7f8 fa4e 	bl	80290c4 <pbuf_cat>
      r = iprh->next_pbuf;
 8030c28:	68fb      	ldr	r3, [r7, #12]
 8030c2a:	681b      	ldr	r3, [r3, #0]
 8030c2c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8030c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030c30:	2b00      	cmp	r3, #0
 8030c32:	d1ed      	bne.n	8030c10 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8030c34:	4b1e      	ldr	r3, [pc, #120]	; (8030cb0 <ip4_reass+0x2a4>)
 8030c36:	681b      	ldr	r3, [r3, #0]
 8030c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8030c3a:	429a      	cmp	r2, r3
 8030c3c:	d102      	bne.n	8030c44 <ip4_reass+0x238>
      ipr_prev = NULL;
 8030c3e:	2300      	movs	r3, #0
 8030c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8030c42:	e010      	b.n	8030c66 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8030c44:	4b1a      	ldr	r3, [pc, #104]	; (8030cb0 <ip4_reass+0x2a4>)
 8030c46:	681b      	ldr	r3, [r3, #0]
 8030c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8030c4a:	e007      	b.n	8030c5c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8030c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c4e:	681b      	ldr	r3, [r3, #0]
 8030c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8030c52:	429a      	cmp	r2, r3
 8030c54:	d006      	beq.n	8030c64 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8030c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c58:	681b      	ldr	r3, [r3, #0]
 8030c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8030c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c5e:	2b00      	cmp	r3, #0
 8030c60:	d1f4      	bne.n	8030c4c <ip4_reass+0x240>
 8030c62:	e000      	b.n	8030c66 <ip4_reass+0x25a>
          break;
 8030c64:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8030c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8030c6a:	f7ff fd37 	bl	80306dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8030c6e:	6878      	ldr	r0, [r7, #4]
 8030c70:	f7f8 f9ee 	bl	8029050 <pbuf_clen>
 8030c74:	4603      	mov	r3, r0
 8030c76:	461a      	mov	r2, r3
 8030c78:	4b0c      	ldr	r3, [pc, #48]	; (8030cac <ip4_reass+0x2a0>)
 8030c7a:	881b      	ldrh	r3, [r3, #0]
 8030c7c:	1a9b      	subs	r3, r3, r2
 8030c7e:	b29a      	uxth	r2, r3
 8030c80:	4b0a      	ldr	r3, [pc, #40]	; (8030cac <ip4_reass+0x2a0>)
 8030c82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8030c84:	687b      	ldr	r3, [r7, #4]
 8030c86:	e00c      	b.n	8030ca2 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8030c88:	2300      	movs	r3, #0
 8030c8a:	e00a      	b.n	8030ca2 <ip4_reass+0x296>
    goto nullreturn;
 8030c8c:	bf00      	nop
 8030c8e:	e004      	b.n	8030c9a <ip4_reass+0x28e>
      goto nullreturn;
 8030c90:	bf00      	nop
 8030c92:	e002      	b.n	8030c9a <ip4_reass+0x28e>
      goto nullreturn;
 8030c94:	bf00      	nop
 8030c96:	e000      	b.n	8030c9a <ip4_reass+0x28e>
    goto nullreturn;
 8030c98:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8030c9a:	6878      	ldr	r0, [r7, #4]
 8030c9c:	f7f8 f944 	bl	8028f28 <pbuf_free>
  return NULL;
 8030ca0:	2300      	movs	r3, #0
}
 8030ca2:	4618      	mov	r0, r3
 8030ca4:	3738      	adds	r7, #56	; 0x38
 8030ca6:	46bd      	mov	sp, r7
 8030ca8:	bd80      	pop	{r7, pc}
 8030caa:	bf00      	nop
 8030cac:	20006b98 	.word	0x20006b98
 8030cb0:	20006b94 	.word	0x20006b94

08030cb4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8030cb4:	b580      	push	{r7, lr}
 8030cb6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8030cb8:	2005      	movs	r0, #5
 8030cba:	f7f7 fbb9 	bl	8028430 <memp_malloc>
 8030cbe:	4603      	mov	r3, r0
}
 8030cc0:	4618      	mov	r0, r3
 8030cc2:	bd80      	pop	{r7, pc}

08030cc4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8030cc4:	b580      	push	{r7, lr}
 8030cc6:	b082      	sub	sp, #8
 8030cc8:	af00      	add	r7, sp, #0
 8030cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8030ccc:	687b      	ldr	r3, [r7, #4]
 8030cce:	2b00      	cmp	r3, #0
 8030cd0:	d106      	bne.n	8030ce0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8030cd2:	4b07      	ldr	r3, [pc, #28]	; (8030cf0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8030cd4:	f240 22ae 	movw	r2, #686	; 0x2ae
 8030cd8:	4906      	ldr	r1, [pc, #24]	; (8030cf4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8030cda:	4807      	ldr	r0, [pc, #28]	; (8030cf8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8030cdc:	f000 fb72 	bl	80313c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8030ce0:	6879      	ldr	r1, [r7, #4]
 8030ce2:	2005      	movs	r0, #5
 8030ce4:	f7f7 fbf0 	bl	80284c8 <memp_free>
}
 8030ce8:	bf00      	nop
 8030cea:	3708      	adds	r7, #8
 8030cec:	46bd      	mov	sp, r7
 8030cee:	bd80      	pop	{r7, pc}
 8030cf0:	080350bc 	.word	0x080350bc
 8030cf4:	08035224 	.word	0x08035224
 8030cf8:	08035104 	.word	0x08035104

08030cfc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8030cfc:	b580      	push	{r7, lr}
 8030cfe:	b084      	sub	sp, #16
 8030d00:	af00      	add	r7, sp, #0
 8030d02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8030d04:	687b      	ldr	r3, [r7, #4]
 8030d06:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8030d08:	68fb      	ldr	r3, [r7, #12]
 8030d0a:	2b00      	cmp	r3, #0
 8030d0c:	d106      	bne.n	8030d1c <ipfrag_free_pbuf_custom+0x20>
 8030d0e:	4b11      	ldr	r3, [pc, #68]	; (8030d54 <ipfrag_free_pbuf_custom+0x58>)
 8030d10:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8030d14:	4910      	ldr	r1, [pc, #64]	; (8030d58 <ipfrag_free_pbuf_custom+0x5c>)
 8030d16:	4811      	ldr	r0, [pc, #68]	; (8030d5c <ipfrag_free_pbuf_custom+0x60>)
 8030d18:	f000 fb54 	bl	80313c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8030d1c:	68fa      	ldr	r2, [r7, #12]
 8030d1e:	687b      	ldr	r3, [r7, #4]
 8030d20:	429a      	cmp	r2, r3
 8030d22:	d006      	beq.n	8030d32 <ipfrag_free_pbuf_custom+0x36>
 8030d24:	4b0b      	ldr	r3, [pc, #44]	; (8030d54 <ipfrag_free_pbuf_custom+0x58>)
 8030d26:	f240 22b9 	movw	r2, #697	; 0x2b9
 8030d2a:	490d      	ldr	r1, [pc, #52]	; (8030d60 <ipfrag_free_pbuf_custom+0x64>)
 8030d2c:	480b      	ldr	r0, [pc, #44]	; (8030d5c <ipfrag_free_pbuf_custom+0x60>)
 8030d2e:	f000 fb49 	bl	80313c4 <iprintf>
  if (pcr->original != NULL) {
 8030d32:	68fb      	ldr	r3, [r7, #12]
 8030d34:	695b      	ldr	r3, [r3, #20]
 8030d36:	2b00      	cmp	r3, #0
 8030d38:	d004      	beq.n	8030d44 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8030d3a:	68fb      	ldr	r3, [r7, #12]
 8030d3c:	695b      	ldr	r3, [r3, #20]
 8030d3e:	4618      	mov	r0, r3
 8030d40:	f7f8 f8f2 	bl	8028f28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8030d44:	68f8      	ldr	r0, [r7, #12]
 8030d46:	f7ff ffbd 	bl	8030cc4 <ip_frag_free_pbuf_custom_ref>
}
 8030d4a:	bf00      	nop
 8030d4c:	3710      	adds	r7, #16
 8030d4e:	46bd      	mov	sp, r7
 8030d50:	bd80      	pop	{r7, pc}
 8030d52:	bf00      	nop
 8030d54:	080350bc 	.word	0x080350bc
 8030d58:	08035230 	.word	0x08035230
 8030d5c:	08035104 	.word	0x08035104
 8030d60:	0803523c 	.word	0x0803523c

08030d64 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8030d64:	b580      	push	{r7, lr}
 8030d66:	b092      	sub	sp, #72	; 0x48
 8030d68:	af02      	add	r7, sp, #8
 8030d6a:	60f8      	str	r0, [r7, #12]
 8030d6c:	60b9      	str	r1, [r7, #8]
 8030d6e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8030d70:	2300      	movs	r3, #0
 8030d72:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8030d74:	68bb      	ldr	r3, [r7, #8]
 8030d76:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8030d78:	3b14      	subs	r3, #20
 8030d7a:	2b00      	cmp	r3, #0
 8030d7c:	da00      	bge.n	8030d80 <ip4_frag+0x1c>
 8030d7e:	3307      	adds	r3, #7
 8030d80:	10db      	asrs	r3, r3, #3
 8030d82:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8030d84:	2314      	movs	r3, #20
 8030d86:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8030d88:	68fb      	ldr	r3, [r7, #12]
 8030d8a:	685b      	ldr	r3, [r3, #4]
 8030d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8030d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030d90:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8030d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030d94:	781b      	ldrb	r3, [r3, #0]
 8030d96:	f003 030f 	and.w	r3, r3, #15
 8030d9a:	009b      	lsls	r3, r3, #2
 8030d9c:	2b14      	cmp	r3, #20
 8030d9e:	d009      	beq.n	8030db4 <ip4_frag+0x50>
 8030da0:	4b7a      	ldr	r3, [pc, #488]	; (8030f8c <ip4_frag+0x228>)
 8030da2:	f240 22e1 	movw	r2, #737	; 0x2e1
 8030da6:	497a      	ldr	r1, [pc, #488]	; (8030f90 <ip4_frag+0x22c>)
 8030da8:	487a      	ldr	r0, [pc, #488]	; (8030f94 <ip4_frag+0x230>)
 8030daa:	f000 fb0b 	bl	80313c4 <iprintf>
 8030dae:	f06f 0305 	mvn.w	r3, #5
 8030db2:	e0e6      	b.n	8030f82 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8030db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030db6:	88db      	ldrh	r3, [r3, #6]
 8030db8:	b29b      	uxth	r3, r3
 8030dba:	4618      	mov	r0, r3
 8030dbc:	f7f6 ff8b 	bl	8027cd6 <lwip_htons>
 8030dc0:	4603      	mov	r3, r0
 8030dc2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8030dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8030dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8030dca:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8030dcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8030dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030dd2:	2b00      	cmp	r3, #0
 8030dd4:	d009      	beq.n	8030dea <ip4_frag+0x86>
 8030dd6:	4b6d      	ldr	r3, [pc, #436]	; (8030f8c <ip4_frag+0x228>)
 8030dd8:	f240 22e6 	movw	r2, #742	; 0x2e6
 8030ddc:	496e      	ldr	r1, [pc, #440]	; (8030f98 <ip4_frag+0x234>)
 8030dde:	486d      	ldr	r0, [pc, #436]	; (8030f94 <ip4_frag+0x230>)
 8030de0:	f000 faf0 	bl	80313c4 <iprintf>
 8030de4:	f06f 0305 	mvn.w	r3, #5
 8030de8:	e0cb      	b.n	8030f82 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 8030dea:	68fb      	ldr	r3, [r7, #12]
 8030dec:	891b      	ldrh	r3, [r3, #8]
 8030dee:	3b14      	subs	r3, #20
 8030df0:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8030df2:	e0bd      	b.n	8030f70 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8030df4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8030df6:	00da      	lsls	r2, r3, #3
 8030df8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8030dfa:	4293      	cmp	r3, r2
 8030dfc:	bfa8      	it	ge
 8030dfe:	4613      	movge	r3, r2
 8030e00:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8030e02:	2200      	movs	r2, #0
 8030e04:	2114      	movs	r1, #20
 8030e06:	2002      	movs	r0, #2
 8030e08:	f7f7 fd16 	bl	8028838 <pbuf_alloc>
 8030e0c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8030e0e:	6a3b      	ldr	r3, [r7, #32]
 8030e10:	2b00      	cmp	r3, #0
 8030e12:	f000 80b3 	beq.w	8030f7c <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8030e16:	68fb      	ldr	r3, [r7, #12]
 8030e18:	895b      	ldrh	r3, [r3, #10]
 8030e1a:	2b13      	cmp	r3, #19
 8030e1c:	d806      	bhi.n	8030e2c <ip4_frag+0xc8>
 8030e1e:	4b5b      	ldr	r3, [pc, #364]	; (8030f8c <ip4_frag+0x228>)
 8030e20:	f44f 7242 	mov.w	r2, #776	; 0x308
 8030e24:	495d      	ldr	r1, [pc, #372]	; (8030f9c <ip4_frag+0x238>)
 8030e26:	485b      	ldr	r0, [pc, #364]	; (8030f94 <ip4_frag+0x230>)
 8030e28:	f000 facc 	bl	80313c4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8030e2c:	6a3b      	ldr	r3, [r7, #32]
 8030e2e:	685b      	ldr	r3, [r3, #4]
 8030e30:	2214      	movs	r2, #20
 8030e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030e34:	4618      	mov	r0, r3
 8030e36:	f000 f9cf 	bl	80311d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8030e3a:	6a3b      	ldr	r3, [r7, #32]
 8030e3c:	685b      	ldr	r3, [r3, #4]
 8030e3e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8030e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8030e42:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8030e44:	e04f      	b.n	8030ee6 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8030e46:	68fb      	ldr	r3, [r7, #12]
 8030e48:	895a      	ldrh	r2, [r3, #10]
 8030e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8030e4c:	1ad3      	subs	r3, r2, r3
 8030e4e:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8030e50:	8b7a      	ldrh	r2, [r7, #26]
 8030e52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8030e54:	4293      	cmp	r3, r2
 8030e56:	bf28      	it	cs
 8030e58:	4613      	movcs	r3, r2
 8030e5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8030e5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030e5e:	2b00      	cmp	r3, #0
 8030e60:	d105      	bne.n	8030e6e <ip4_frag+0x10a>
        poff = 0;
 8030e62:	2300      	movs	r3, #0
 8030e64:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8030e66:	68fb      	ldr	r3, [r7, #12]
 8030e68:	681b      	ldr	r3, [r3, #0]
 8030e6a:	60fb      	str	r3, [r7, #12]
        continue;
 8030e6c:	e03b      	b.n	8030ee6 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8030e6e:	f7ff ff21 	bl	8030cb4 <ip_frag_alloc_pbuf_custom_ref>
 8030e72:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8030e74:	697b      	ldr	r3, [r7, #20]
 8030e76:	2b00      	cmp	r3, #0
 8030e78:	d103      	bne.n	8030e82 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8030e7a:	6a38      	ldr	r0, [r7, #32]
 8030e7c:	f7f8 f854 	bl	8028f28 <pbuf_free>
        goto memerr;
 8030e80:	e07d      	b.n	8030f7e <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8030e82:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8030e84:	68fb      	ldr	r3, [r7, #12]
 8030e86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8030e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8030e8a:	4413      	add	r3, r2
 8030e8c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8030e8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8030e90:	9201      	str	r2, [sp, #4]
 8030e92:	9300      	str	r3, [sp, #0]
 8030e94:	4603      	mov	r3, r0
 8030e96:	2202      	movs	r2, #2
 8030e98:	2004      	movs	r0, #4
 8030e9a:	f7f7 fe67 	bl	8028b6c <pbuf_alloced_custom>
 8030e9e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8030ea0:	693b      	ldr	r3, [r7, #16]
 8030ea2:	2b00      	cmp	r3, #0
 8030ea4:	d106      	bne.n	8030eb4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8030ea6:	6978      	ldr	r0, [r7, #20]
 8030ea8:	f7ff ff0c 	bl	8030cc4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8030eac:	6a38      	ldr	r0, [r7, #32]
 8030eae:	f7f8 f83b 	bl	8028f28 <pbuf_free>
        goto memerr;
 8030eb2:	e064      	b.n	8030f7e <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8030eb4:	68f8      	ldr	r0, [r7, #12]
 8030eb6:	f7f8 f8e3 	bl	8029080 <pbuf_ref>
      pcr->original = p;
 8030eba:	697b      	ldr	r3, [r7, #20]
 8030ebc:	68fa      	ldr	r2, [r7, #12]
 8030ebe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8030ec0:	697b      	ldr	r3, [r7, #20]
 8030ec2:	4a37      	ldr	r2, [pc, #220]	; (8030fa0 <ip4_frag+0x23c>)
 8030ec4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8030ec6:	6939      	ldr	r1, [r7, #16]
 8030ec8:	6a38      	ldr	r0, [r7, #32]
 8030eca:	f7f8 f8fb 	bl	80290c4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8030ece:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8030ed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030ed2:	1ad3      	subs	r3, r2, r3
 8030ed4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8030ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8030ed8:	2b00      	cmp	r3, #0
 8030eda:	d004      	beq.n	8030ee6 <ip4_frag+0x182>
        poff = 0;
 8030edc:	2300      	movs	r3, #0
 8030ede:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8030ee0:	68fb      	ldr	r3, [r7, #12]
 8030ee2:	681b      	ldr	r3, [r3, #0]
 8030ee4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8030ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8030ee8:	2b00      	cmp	r3, #0
 8030eea:	d1ac      	bne.n	8030e46 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8030eec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8030eee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030ef0:	4413      	add	r3, r2
 8030ef2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8030ef4:	68bb      	ldr	r3, [r7, #8]
 8030ef6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8030ef8:	f1a3 0213 	sub.w	r2, r3, #19
 8030efc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8030efe:	429a      	cmp	r2, r3
 8030f00:	bfcc      	ite	gt
 8030f02:	2301      	movgt	r3, #1
 8030f04:	2300      	movle	r3, #0
 8030f06:	b2db      	uxtb	r3, r3
 8030f08:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8030f0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8030f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8030f10:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8030f12:	69fb      	ldr	r3, [r7, #28]
 8030f14:	2b00      	cmp	r3, #0
 8030f16:	d103      	bne.n	8030f20 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 8030f18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8030f1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8030f1e:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8030f20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8030f22:	4618      	mov	r0, r3
 8030f24:	f7f6 fed7 	bl	8027cd6 <lwip_htons>
 8030f28:	4603      	mov	r3, r0
 8030f2a:	461a      	mov	r2, r3
 8030f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030f2e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8030f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8030f32:	3314      	adds	r3, #20
 8030f34:	b29b      	uxth	r3, r3
 8030f36:	4618      	mov	r0, r3
 8030f38:	f7f6 fecd 	bl	8027cd6 <lwip_htons>
 8030f3c:	4603      	mov	r3, r0
 8030f3e:	461a      	mov	r2, r3
 8030f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030f42:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8030f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030f46:	2200      	movs	r2, #0
 8030f48:	729a      	strb	r2, [r3, #10]
 8030f4a:	2200      	movs	r2, #0
 8030f4c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8030f4e:	68bb      	ldr	r3, [r7, #8]
 8030f50:	695b      	ldr	r3, [r3, #20]
 8030f52:	687a      	ldr	r2, [r7, #4]
 8030f54:	6a39      	ldr	r1, [r7, #32]
 8030f56:	68b8      	ldr	r0, [r7, #8]
 8030f58:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8030f5a:	6a38      	ldr	r0, [r7, #32]
 8030f5c:	f7f7 ffe4 	bl	8028f28 <pbuf_free>
    left -= fragsize;
 8030f60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8030f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8030f64:	1ad3      	subs	r3, r2, r3
 8030f66:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8030f68:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8030f6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8030f6c:	4413      	add	r3, r2
 8030f6e:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8030f70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8030f72:	2b00      	cmp	r3, #0
 8030f74:	f47f af3e 	bne.w	8030df4 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8030f78:	2300      	movs	r3, #0
 8030f7a:	e002      	b.n	8030f82 <ip4_frag+0x21e>
      goto memerr;
 8030f7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8030f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8030f82:	4618      	mov	r0, r3
 8030f84:	3740      	adds	r7, #64	; 0x40
 8030f86:	46bd      	mov	sp, r7
 8030f88:	bd80      	pop	{r7, pc}
 8030f8a:	bf00      	nop
 8030f8c:	080350bc 	.word	0x080350bc
 8030f90:	08035248 	.word	0x08035248
 8030f94:	08035104 	.word	0x08035104
 8030f98:	08035270 	.word	0x08035270
 8030f9c:	0803528c 	.word	0x0803528c
 8030fa0:	08030cfd 	.word	0x08030cfd

08030fa4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8030fa4:	b580      	push	{r7, lr}
 8030fa6:	b086      	sub	sp, #24
 8030fa8:	af00      	add	r7, sp, #0
 8030faa:	6078      	str	r0, [r7, #4]
 8030fac:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8030fae:	230e      	movs	r3, #14
 8030fb0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8030fb2:	687b      	ldr	r3, [r7, #4]
 8030fb4:	895b      	ldrh	r3, [r3, #10]
 8030fb6:	2b0e      	cmp	r3, #14
 8030fb8:	d977      	bls.n	80310aa <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8030fba:	687b      	ldr	r3, [r7, #4]
 8030fbc:	685b      	ldr	r3, [r3, #4]
 8030fbe:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8030fc0:	693b      	ldr	r3, [r7, #16]
 8030fc2:	7b1a      	ldrb	r2, [r3, #12]
 8030fc4:	7b5b      	ldrb	r3, [r3, #13]
 8030fc6:	021b      	lsls	r3, r3, #8
 8030fc8:	4313      	orrs	r3, r2
 8030fca:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8030fcc:	693b      	ldr	r3, [r7, #16]
 8030fce:	781b      	ldrb	r3, [r3, #0]
 8030fd0:	f003 0301 	and.w	r3, r3, #1
 8030fd4:	2b00      	cmp	r3, #0
 8030fd6:	d023      	beq.n	8031020 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8030fd8:	693b      	ldr	r3, [r7, #16]
 8030fda:	781b      	ldrb	r3, [r3, #0]
 8030fdc:	2b01      	cmp	r3, #1
 8030fde:	d10f      	bne.n	8031000 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8030fe0:	693b      	ldr	r3, [r7, #16]
 8030fe2:	785b      	ldrb	r3, [r3, #1]
 8030fe4:	2b00      	cmp	r3, #0
 8030fe6:	d11b      	bne.n	8031020 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8030fe8:	693b      	ldr	r3, [r7, #16]
 8030fea:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8030fec:	2b5e      	cmp	r3, #94	; 0x5e
 8030fee:	d117      	bne.n	8031020 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8030ff0:	687b      	ldr	r3, [r7, #4]
 8030ff2:	7b5b      	ldrb	r3, [r3, #13]
 8030ff4:	f043 0310 	orr.w	r3, r3, #16
 8030ff8:	b2da      	uxtb	r2, r3
 8030ffa:	687b      	ldr	r3, [r7, #4]
 8030ffc:	735a      	strb	r2, [r3, #13]
 8030ffe:	e00f      	b.n	8031020 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8031000:	693b      	ldr	r3, [r7, #16]
 8031002:	2206      	movs	r2, #6
 8031004:	4931      	ldr	r1, [pc, #196]	; (80310cc <ethernet_input+0x128>)
 8031006:	4618      	mov	r0, r3
 8031008:	f000 f8d6 	bl	80311b8 <memcmp>
 803100c:	4603      	mov	r3, r0
 803100e:	2b00      	cmp	r3, #0
 8031010:	d106      	bne.n	8031020 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8031012:	687b      	ldr	r3, [r7, #4]
 8031014:	7b5b      	ldrb	r3, [r3, #13]
 8031016:	f043 0308 	orr.w	r3, r3, #8
 803101a:	b2da      	uxtb	r2, r3
 803101c:	687b      	ldr	r3, [r7, #4]
 803101e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8031020:	89fb      	ldrh	r3, [r7, #14]
 8031022:	2b08      	cmp	r3, #8
 8031024:	d003      	beq.n	803102e <ethernet_input+0x8a>
 8031026:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 803102a:	d01e      	beq.n	803106a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 803102c:	e046      	b.n	80310bc <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 803102e:	683b      	ldr	r3, [r7, #0]
 8031030:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8031034:	f003 0308 	and.w	r3, r3, #8
 8031038:	2b00      	cmp	r3, #0
 803103a:	d038      	beq.n	80310ae <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 803103c:	687b      	ldr	r3, [r7, #4]
 803103e:	895b      	ldrh	r3, [r3, #10]
 8031040:	461a      	mov	r2, r3
 8031042:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8031046:	429a      	cmp	r2, r3
 8031048:	db33      	blt.n	80310b2 <ethernet_input+0x10e>
 803104a:	8afb      	ldrh	r3, [r7, #22]
 803104c:	425b      	negs	r3, r3
 803104e:	b29b      	uxth	r3, r3
 8031050:	b21b      	sxth	r3, r3
 8031052:	4619      	mov	r1, r3
 8031054:	6878      	ldr	r0, [r7, #4]
 8031056:	f7f7 ff43 	bl	8028ee0 <pbuf_header>
 803105a:	4603      	mov	r3, r0
 803105c:	2b00      	cmp	r3, #0
 803105e:	d128      	bne.n	80310b2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8031060:	6839      	ldr	r1, [r7, #0]
 8031062:	6878      	ldr	r0, [r7, #4]
 8031064:	f7fe ff7a 	bl	802ff5c <ip4_input>
      break;
 8031068:	e01d      	b.n	80310a6 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 803106a:	683b      	ldr	r3, [r7, #0]
 803106c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8031070:	f003 0308 	and.w	r3, r3, #8
 8031074:	2b00      	cmp	r3, #0
 8031076:	d01e      	beq.n	80310b6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8031078:	687b      	ldr	r3, [r7, #4]
 803107a:	895b      	ldrh	r3, [r3, #10]
 803107c:	461a      	mov	r2, r3
 803107e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8031082:	429a      	cmp	r2, r3
 8031084:	db19      	blt.n	80310ba <ethernet_input+0x116>
 8031086:	8afb      	ldrh	r3, [r7, #22]
 8031088:	425b      	negs	r3, r3
 803108a:	b29b      	uxth	r3, r3
 803108c:	b21b      	sxth	r3, r3
 803108e:	4619      	mov	r1, r3
 8031090:	6878      	ldr	r0, [r7, #4]
 8031092:	f7f7 ff25 	bl	8028ee0 <pbuf_header>
 8031096:	4603      	mov	r3, r0
 8031098:	2b00      	cmp	r3, #0
 803109a:	d10e      	bne.n	80310ba <ethernet_input+0x116>
        etharp_input(p, netif);
 803109c:	6839      	ldr	r1, [r7, #0]
 803109e:	6878      	ldr	r0, [r7, #4]
 80310a0:	f7fe f94a 	bl	802f338 <etharp_input>
      break;
 80310a4:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80310a6:	2300      	movs	r3, #0
 80310a8:	e00c      	b.n	80310c4 <ethernet_input+0x120>
    goto free_and_return;
 80310aa:	bf00      	nop
 80310ac:	e006      	b.n	80310bc <ethernet_input+0x118>
        goto free_and_return;
 80310ae:	bf00      	nop
 80310b0:	e004      	b.n	80310bc <ethernet_input+0x118>
        goto free_and_return;
 80310b2:	bf00      	nop
 80310b4:	e002      	b.n	80310bc <ethernet_input+0x118>
        goto free_and_return;
 80310b6:	bf00      	nop
 80310b8:	e000      	b.n	80310bc <ethernet_input+0x118>
        goto free_and_return;
 80310ba:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80310bc:	6878      	ldr	r0, [r7, #4]
 80310be:	f7f7 ff33 	bl	8028f28 <pbuf_free>
  return ERR_OK;
 80310c2:	2300      	movs	r3, #0
}
 80310c4:	4618      	mov	r0, r3
 80310c6:	3718      	adds	r7, #24
 80310c8:	46bd      	mov	sp, r7
 80310ca:	bd80      	pop	{r7, pc}
 80310cc:	0803542c 	.word	0x0803542c

080310d0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80310d0:	b580      	push	{r7, lr}
 80310d2:	b086      	sub	sp, #24
 80310d4:	af00      	add	r7, sp, #0
 80310d6:	60f8      	str	r0, [r7, #12]
 80310d8:	60b9      	str	r1, [r7, #8]
 80310da:	607a      	str	r2, [r7, #4]
 80310dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80310de:	8c3b      	ldrh	r3, [r7, #32]
 80310e0:	4618      	mov	r0, r3
 80310e2:	f7f6 fdf8 	bl	8027cd6 <lwip_htons>
 80310e6:	4603      	mov	r3, r0
 80310e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80310ea:	210e      	movs	r1, #14
 80310ec:	68b8      	ldr	r0, [r7, #8]
 80310ee:	f7f7 fef7 	bl	8028ee0 <pbuf_header>
 80310f2:	4603      	mov	r3, r0
 80310f4:	2b00      	cmp	r3, #0
 80310f6:	d125      	bne.n	8031144 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80310f8:	68bb      	ldr	r3, [r7, #8]
 80310fa:	685b      	ldr	r3, [r3, #4]
 80310fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80310fe:	693b      	ldr	r3, [r7, #16]
 8031100:	8afa      	ldrh	r2, [r7, #22]
 8031102:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8031104:	693b      	ldr	r3, [r7, #16]
 8031106:	2206      	movs	r2, #6
 8031108:	6839      	ldr	r1, [r7, #0]
 803110a:	4618      	mov	r0, r3
 803110c:	f000 f864 	bl	80311d8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8031110:	693b      	ldr	r3, [r7, #16]
 8031112:	3306      	adds	r3, #6
 8031114:	2206      	movs	r2, #6
 8031116:	6879      	ldr	r1, [r7, #4]
 8031118:	4618      	mov	r0, r3
 803111a:	f000 f85d 	bl	80311d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 803111e:	68fb      	ldr	r3, [r7, #12]
 8031120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8031124:	2b06      	cmp	r3, #6
 8031126:	d006      	beq.n	8031136 <ethernet_output+0x66>
 8031128:	4b0a      	ldr	r3, [pc, #40]	; (8031154 <ethernet_output+0x84>)
 803112a:	f240 122b 	movw	r2, #299	; 0x12b
 803112e:	490a      	ldr	r1, [pc, #40]	; (8031158 <ethernet_output+0x88>)
 8031130:	480a      	ldr	r0, [pc, #40]	; (803115c <ethernet_output+0x8c>)
 8031132:	f000 f947 	bl	80313c4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8031136:	68fb      	ldr	r3, [r7, #12]
 8031138:	699b      	ldr	r3, [r3, #24]
 803113a:	68b9      	ldr	r1, [r7, #8]
 803113c:	68f8      	ldr	r0, [r7, #12]
 803113e:	4798      	blx	r3
 8031140:	4603      	mov	r3, r0
 8031142:	e002      	b.n	803114a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8031144:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8031146:	f06f 0301 	mvn.w	r3, #1
}
 803114a:	4618      	mov	r0, r3
 803114c:	3718      	adds	r7, #24
 803114e:	46bd      	mov	sp, r7
 8031150:	bd80      	pop	{r7, pc}
 8031152:	bf00      	nop
 8031154:	080352ac 	.word	0x080352ac
 8031158:	080352e4 	.word	0x080352e4
 803115c:	08035318 	.word	0x08035318

08031160 <__libc_init_array>:
 8031160:	b570      	push	{r4, r5, r6, lr}
 8031162:	4d0d      	ldr	r5, [pc, #52]	; (8031198 <__libc_init_array+0x38>)
 8031164:	4c0d      	ldr	r4, [pc, #52]	; (803119c <__libc_init_array+0x3c>)
 8031166:	1b64      	subs	r4, r4, r5
 8031168:	10a4      	asrs	r4, r4, #2
 803116a:	2600      	movs	r6, #0
 803116c:	42a6      	cmp	r6, r4
 803116e:	d109      	bne.n	8031184 <__libc_init_array+0x24>
 8031170:	4d0b      	ldr	r5, [pc, #44]	; (80311a0 <__libc_init_array+0x40>)
 8031172:	4c0c      	ldr	r4, [pc, #48]	; (80311a4 <__libc_init_array+0x44>)
 8031174:	f002 f958 	bl	8033428 <_init>
 8031178:	1b64      	subs	r4, r4, r5
 803117a:	10a4      	asrs	r4, r4, #2
 803117c:	2600      	movs	r6, #0
 803117e:	42a6      	cmp	r6, r4
 8031180:	d105      	bne.n	803118e <__libc_init_array+0x2e>
 8031182:	bd70      	pop	{r4, r5, r6, pc}
 8031184:	f855 3b04 	ldr.w	r3, [r5], #4
 8031188:	4798      	blx	r3
 803118a:	3601      	adds	r6, #1
 803118c:	e7ee      	b.n	803116c <__libc_init_array+0xc>
 803118e:	f855 3b04 	ldr.w	r3, [r5], #4
 8031192:	4798      	blx	r3
 8031194:	3601      	adds	r6, #1
 8031196:	e7f2      	b.n	803117e <__libc_init_array+0x1e>
 8031198:	08035520 	.word	0x08035520
 803119c:	08035520 	.word	0x08035520
 80311a0:	08035520 	.word	0x08035520
 80311a4:	08035524 	.word	0x08035524

080311a8 <malloc>:
 80311a8:	4b02      	ldr	r3, [pc, #8]	; (80311b4 <malloc+0xc>)
 80311aa:	4601      	mov	r1, r0
 80311ac:	6818      	ldr	r0, [r3, #0]
 80311ae:	f000 b895 	b.w	80312dc <_malloc_r>
 80311b2:	bf00      	nop
 80311b4:	20000094 	.word	0x20000094

080311b8 <memcmp>:
 80311b8:	b510      	push	{r4, lr}
 80311ba:	3901      	subs	r1, #1
 80311bc:	4402      	add	r2, r0
 80311be:	4290      	cmp	r0, r2
 80311c0:	d101      	bne.n	80311c6 <memcmp+0xe>
 80311c2:	2000      	movs	r0, #0
 80311c4:	e005      	b.n	80311d2 <memcmp+0x1a>
 80311c6:	7803      	ldrb	r3, [r0, #0]
 80311c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80311cc:	42a3      	cmp	r3, r4
 80311ce:	d001      	beq.n	80311d4 <memcmp+0x1c>
 80311d0:	1b18      	subs	r0, r3, r4
 80311d2:	bd10      	pop	{r4, pc}
 80311d4:	3001      	adds	r0, #1
 80311d6:	e7f2      	b.n	80311be <memcmp+0x6>

080311d8 <memcpy>:
 80311d8:	440a      	add	r2, r1
 80311da:	4291      	cmp	r1, r2
 80311dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80311e0:	d100      	bne.n	80311e4 <memcpy+0xc>
 80311e2:	4770      	bx	lr
 80311e4:	b510      	push	{r4, lr}
 80311e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80311ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80311ee:	4291      	cmp	r1, r2
 80311f0:	d1f9      	bne.n	80311e6 <memcpy+0xe>
 80311f2:	bd10      	pop	{r4, pc}

080311f4 <memset>:
 80311f4:	4402      	add	r2, r0
 80311f6:	4603      	mov	r3, r0
 80311f8:	4293      	cmp	r3, r2
 80311fa:	d100      	bne.n	80311fe <memset+0xa>
 80311fc:	4770      	bx	lr
 80311fe:	f803 1b01 	strb.w	r1, [r3], #1
 8031202:	e7f9      	b.n	80311f8 <memset+0x4>

08031204 <_free_r>:
 8031204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8031206:	2900      	cmp	r1, #0
 8031208:	d044      	beq.n	8031294 <_free_r+0x90>
 803120a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803120e:	9001      	str	r0, [sp, #4]
 8031210:	2b00      	cmp	r3, #0
 8031212:	f1a1 0404 	sub.w	r4, r1, #4
 8031216:	bfb8      	it	lt
 8031218:	18e4      	addlt	r4, r4, r3
 803121a:	f000 fa1b 	bl	8031654 <__malloc_lock>
 803121e:	4a1e      	ldr	r2, [pc, #120]	; (8031298 <_free_r+0x94>)
 8031220:	9801      	ldr	r0, [sp, #4]
 8031222:	6813      	ldr	r3, [r2, #0]
 8031224:	b933      	cbnz	r3, 8031234 <_free_r+0x30>
 8031226:	6063      	str	r3, [r4, #4]
 8031228:	6014      	str	r4, [r2, #0]
 803122a:	b003      	add	sp, #12
 803122c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031230:	f000 ba16 	b.w	8031660 <__malloc_unlock>
 8031234:	42a3      	cmp	r3, r4
 8031236:	d908      	bls.n	803124a <_free_r+0x46>
 8031238:	6825      	ldr	r5, [r4, #0]
 803123a:	1961      	adds	r1, r4, r5
 803123c:	428b      	cmp	r3, r1
 803123e:	bf01      	itttt	eq
 8031240:	6819      	ldreq	r1, [r3, #0]
 8031242:	685b      	ldreq	r3, [r3, #4]
 8031244:	1949      	addeq	r1, r1, r5
 8031246:	6021      	streq	r1, [r4, #0]
 8031248:	e7ed      	b.n	8031226 <_free_r+0x22>
 803124a:	461a      	mov	r2, r3
 803124c:	685b      	ldr	r3, [r3, #4]
 803124e:	b10b      	cbz	r3, 8031254 <_free_r+0x50>
 8031250:	42a3      	cmp	r3, r4
 8031252:	d9fa      	bls.n	803124a <_free_r+0x46>
 8031254:	6811      	ldr	r1, [r2, #0]
 8031256:	1855      	adds	r5, r2, r1
 8031258:	42a5      	cmp	r5, r4
 803125a:	d10b      	bne.n	8031274 <_free_r+0x70>
 803125c:	6824      	ldr	r4, [r4, #0]
 803125e:	4421      	add	r1, r4
 8031260:	1854      	adds	r4, r2, r1
 8031262:	42a3      	cmp	r3, r4
 8031264:	6011      	str	r1, [r2, #0]
 8031266:	d1e0      	bne.n	803122a <_free_r+0x26>
 8031268:	681c      	ldr	r4, [r3, #0]
 803126a:	685b      	ldr	r3, [r3, #4]
 803126c:	6053      	str	r3, [r2, #4]
 803126e:	4421      	add	r1, r4
 8031270:	6011      	str	r1, [r2, #0]
 8031272:	e7da      	b.n	803122a <_free_r+0x26>
 8031274:	d902      	bls.n	803127c <_free_r+0x78>
 8031276:	230c      	movs	r3, #12
 8031278:	6003      	str	r3, [r0, #0]
 803127a:	e7d6      	b.n	803122a <_free_r+0x26>
 803127c:	6825      	ldr	r5, [r4, #0]
 803127e:	1961      	adds	r1, r4, r5
 8031280:	428b      	cmp	r3, r1
 8031282:	bf04      	itt	eq
 8031284:	6819      	ldreq	r1, [r3, #0]
 8031286:	685b      	ldreq	r3, [r3, #4]
 8031288:	6063      	str	r3, [r4, #4]
 803128a:	bf04      	itt	eq
 803128c:	1949      	addeq	r1, r1, r5
 803128e:	6021      	streq	r1, [r4, #0]
 8031290:	6054      	str	r4, [r2, #4]
 8031292:	e7ca      	b.n	803122a <_free_r+0x26>
 8031294:	b003      	add	sp, #12
 8031296:	bd30      	pop	{r4, r5, pc}
 8031298:	20006b9c 	.word	0x20006b9c

0803129c <sbrk_aligned>:
 803129c:	b570      	push	{r4, r5, r6, lr}
 803129e:	4e0e      	ldr	r6, [pc, #56]	; (80312d8 <sbrk_aligned+0x3c>)
 80312a0:	460c      	mov	r4, r1
 80312a2:	6831      	ldr	r1, [r6, #0]
 80312a4:	4605      	mov	r5, r0
 80312a6:	b911      	cbnz	r1, 80312ae <sbrk_aligned+0x12>
 80312a8:	f000 f8a4 	bl	80313f4 <_sbrk_r>
 80312ac:	6030      	str	r0, [r6, #0]
 80312ae:	4621      	mov	r1, r4
 80312b0:	4628      	mov	r0, r5
 80312b2:	f000 f89f 	bl	80313f4 <_sbrk_r>
 80312b6:	1c43      	adds	r3, r0, #1
 80312b8:	d00a      	beq.n	80312d0 <sbrk_aligned+0x34>
 80312ba:	1cc4      	adds	r4, r0, #3
 80312bc:	f024 0403 	bic.w	r4, r4, #3
 80312c0:	42a0      	cmp	r0, r4
 80312c2:	d007      	beq.n	80312d4 <sbrk_aligned+0x38>
 80312c4:	1a21      	subs	r1, r4, r0
 80312c6:	4628      	mov	r0, r5
 80312c8:	f000 f894 	bl	80313f4 <_sbrk_r>
 80312cc:	3001      	adds	r0, #1
 80312ce:	d101      	bne.n	80312d4 <sbrk_aligned+0x38>
 80312d0:	f04f 34ff 	mov.w	r4, #4294967295
 80312d4:	4620      	mov	r0, r4
 80312d6:	bd70      	pop	{r4, r5, r6, pc}
 80312d8:	20006ba0 	.word	0x20006ba0

080312dc <_malloc_r>:
 80312dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80312e0:	1ccd      	adds	r5, r1, #3
 80312e2:	f025 0503 	bic.w	r5, r5, #3
 80312e6:	3508      	adds	r5, #8
 80312e8:	2d0c      	cmp	r5, #12
 80312ea:	bf38      	it	cc
 80312ec:	250c      	movcc	r5, #12
 80312ee:	2d00      	cmp	r5, #0
 80312f0:	4607      	mov	r7, r0
 80312f2:	db01      	blt.n	80312f8 <_malloc_r+0x1c>
 80312f4:	42a9      	cmp	r1, r5
 80312f6:	d905      	bls.n	8031304 <_malloc_r+0x28>
 80312f8:	230c      	movs	r3, #12
 80312fa:	603b      	str	r3, [r7, #0]
 80312fc:	2600      	movs	r6, #0
 80312fe:	4630      	mov	r0, r6
 8031300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031304:	4e2e      	ldr	r6, [pc, #184]	; (80313c0 <_malloc_r+0xe4>)
 8031306:	f000 f9a5 	bl	8031654 <__malloc_lock>
 803130a:	6833      	ldr	r3, [r6, #0]
 803130c:	461c      	mov	r4, r3
 803130e:	bb34      	cbnz	r4, 803135e <_malloc_r+0x82>
 8031310:	4629      	mov	r1, r5
 8031312:	4638      	mov	r0, r7
 8031314:	f7ff ffc2 	bl	803129c <sbrk_aligned>
 8031318:	1c43      	adds	r3, r0, #1
 803131a:	4604      	mov	r4, r0
 803131c:	d14d      	bne.n	80313ba <_malloc_r+0xde>
 803131e:	6834      	ldr	r4, [r6, #0]
 8031320:	4626      	mov	r6, r4
 8031322:	2e00      	cmp	r6, #0
 8031324:	d140      	bne.n	80313a8 <_malloc_r+0xcc>
 8031326:	6823      	ldr	r3, [r4, #0]
 8031328:	4631      	mov	r1, r6
 803132a:	4638      	mov	r0, r7
 803132c:	eb04 0803 	add.w	r8, r4, r3
 8031330:	f000 f860 	bl	80313f4 <_sbrk_r>
 8031334:	4580      	cmp	r8, r0
 8031336:	d13a      	bne.n	80313ae <_malloc_r+0xd2>
 8031338:	6821      	ldr	r1, [r4, #0]
 803133a:	3503      	adds	r5, #3
 803133c:	1a6d      	subs	r5, r5, r1
 803133e:	f025 0503 	bic.w	r5, r5, #3
 8031342:	3508      	adds	r5, #8
 8031344:	2d0c      	cmp	r5, #12
 8031346:	bf38      	it	cc
 8031348:	250c      	movcc	r5, #12
 803134a:	4629      	mov	r1, r5
 803134c:	4638      	mov	r0, r7
 803134e:	f7ff ffa5 	bl	803129c <sbrk_aligned>
 8031352:	3001      	adds	r0, #1
 8031354:	d02b      	beq.n	80313ae <_malloc_r+0xd2>
 8031356:	6823      	ldr	r3, [r4, #0]
 8031358:	442b      	add	r3, r5
 803135a:	6023      	str	r3, [r4, #0]
 803135c:	e00e      	b.n	803137c <_malloc_r+0xa0>
 803135e:	6822      	ldr	r2, [r4, #0]
 8031360:	1b52      	subs	r2, r2, r5
 8031362:	d41e      	bmi.n	80313a2 <_malloc_r+0xc6>
 8031364:	2a0b      	cmp	r2, #11
 8031366:	d916      	bls.n	8031396 <_malloc_r+0xba>
 8031368:	1961      	adds	r1, r4, r5
 803136a:	42a3      	cmp	r3, r4
 803136c:	6025      	str	r5, [r4, #0]
 803136e:	bf18      	it	ne
 8031370:	6059      	strne	r1, [r3, #4]
 8031372:	6863      	ldr	r3, [r4, #4]
 8031374:	bf08      	it	eq
 8031376:	6031      	streq	r1, [r6, #0]
 8031378:	5162      	str	r2, [r4, r5]
 803137a:	604b      	str	r3, [r1, #4]
 803137c:	4638      	mov	r0, r7
 803137e:	f104 060b 	add.w	r6, r4, #11
 8031382:	f000 f96d 	bl	8031660 <__malloc_unlock>
 8031386:	f026 0607 	bic.w	r6, r6, #7
 803138a:	1d23      	adds	r3, r4, #4
 803138c:	1af2      	subs	r2, r6, r3
 803138e:	d0b6      	beq.n	80312fe <_malloc_r+0x22>
 8031390:	1b9b      	subs	r3, r3, r6
 8031392:	50a3      	str	r3, [r4, r2]
 8031394:	e7b3      	b.n	80312fe <_malloc_r+0x22>
 8031396:	6862      	ldr	r2, [r4, #4]
 8031398:	42a3      	cmp	r3, r4
 803139a:	bf0c      	ite	eq
 803139c:	6032      	streq	r2, [r6, #0]
 803139e:	605a      	strne	r2, [r3, #4]
 80313a0:	e7ec      	b.n	803137c <_malloc_r+0xa0>
 80313a2:	4623      	mov	r3, r4
 80313a4:	6864      	ldr	r4, [r4, #4]
 80313a6:	e7b2      	b.n	803130e <_malloc_r+0x32>
 80313a8:	4634      	mov	r4, r6
 80313aa:	6876      	ldr	r6, [r6, #4]
 80313ac:	e7b9      	b.n	8031322 <_malloc_r+0x46>
 80313ae:	230c      	movs	r3, #12
 80313b0:	603b      	str	r3, [r7, #0]
 80313b2:	4638      	mov	r0, r7
 80313b4:	f000 f954 	bl	8031660 <__malloc_unlock>
 80313b8:	e7a1      	b.n	80312fe <_malloc_r+0x22>
 80313ba:	6025      	str	r5, [r4, #0]
 80313bc:	e7de      	b.n	803137c <_malloc_r+0xa0>
 80313be:	bf00      	nop
 80313c0:	20006b9c 	.word	0x20006b9c

080313c4 <iprintf>:
 80313c4:	b40f      	push	{r0, r1, r2, r3}
 80313c6:	4b0a      	ldr	r3, [pc, #40]	; (80313f0 <iprintf+0x2c>)
 80313c8:	b513      	push	{r0, r1, r4, lr}
 80313ca:	681c      	ldr	r4, [r3, #0]
 80313cc:	b124      	cbz	r4, 80313d8 <iprintf+0x14>
 80313ce:	69a3      	ldr	r3, [r4, #24]
 80313d0:	b913      	cbnz	r3, 80313d8 <iprintf+0x14>
 80313d2:	4620      	mov	r0, r4
 80313d4:	f000 f89e 	bl	8031514 <__sinit>
 80313d8:	ab05      	add	r3, sp, #20
 80313da:	9a04      	ldr	r2, [sp, #16]
 80313dc:	68a1      	ldr	r1, [r4, #8]
 80313de:	9301      	str	r3, [sp, #4]
 80313e0:	4620      	mov	r0, r4
 80313e2:	f000 fac9 	bl	8031978 <_vfiprintf_r>
 80313e6:	b002      	add	sp, #8
 80313e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80313ec:	b004      	add	sp, #16
 80313ee:	4770      	bx	lr
 80313f0:	20000094 	.word	0x20000094

080313f4 <_sbrk_r>:
 80313f4:	b538      	push	{r3, r4, r5, lr}
 80313f6:	4d06      	ldr	r5, [pc, #24]	; (8031410 <_sbrk_r+0x1c>)
 80313f8:	2300      	movs	r3, #0
 80313fa:	4604      	mov	r4, r0
 80313fc:	4608      	mov	r0, r1
 80313fe:	602b      	str	r3, [r5, #0]
 8031400:	f7f0 fa96 	bl	8021930 <_sbrk>
 8031404:	1c43      	adds	r3, r0, #1
 8031406:	d102      	bne.n	803140e <_sbrk_r+0x1a>
 8031408:	682b      	ldr	r3, [r5, #0]
 803140a:	b103      	cbz	r3, 803140e <_sbrk_r+0x1a>
 803140c:	6023      	str	r3, [r4, #0]
 803140e:	bd38      	pop	{r3, r4, r5, pc}
 8031410:	20006ba4 	.word	0x20006ba4

08031414 <siprintf>:
 8031414:	b40e      	push	{r1, r2, r3}
 8031416:	b500      	push	{lr}
 8031418:	b09c      	sub	sp, #112	; 0x70
 803141a:	ab1d      	add	r3, sp, #116	; 0x74
 803141c:	9002      	str	r0, [sp, #8]
 803141e:	9006      	str	r0, [sp, #24]
 8031420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8031424:	4809      	ldr	r0, [pc, #36]	; (803144c <siprintf+0x38>)
 8031426:	9107      	str	r1, [sp, #28]
 8031428:	9104      	str	r1, [sp, #16]
 803142a:	4909      	ldr	r1, [pc, #36]	; (8031450 <siprintf+0x3c>)
 803142c:	f853 2b04 	ldr.w	r2, [r3], #4
 8031430:	9105      	str	r1, [sp, #20]
 8031432:	6800      	ldr	r0, [r0, #0]
 8031434:	9301      	str	r3, [sp, #4]
 8031436:	a902      	add	r1, sp, #8
 8031438:	f000 f974 	bl	8031724 <_svfiprintf_r>
 803143c:	9b02      	ldr	r3, [sp, #8]
 803143e:	2200      	movs	r2, #0
 8031440:	701a      	strb	r2, [r3, #0]
 8031442:	b01c      	add	sp, #112	; 0x70
 8031444:	f85d eb04 	ldr.w	lr, [sp], #4
 8031448:	b003      	add	sp, #12
 803144a:	4770      	bx	lr
 803144c:	20000094 	.word	0x20000094
 8031450:	ffff0208 	.word	0xffff0208

08031454 <strcpy>:
 8031454:	4603      	mov	r3, r0
 8031456:	f811 2b01 	ldrb.w	r2, [r1], #1
 803145a:	f803 2b01 	strb.w	r2, [r3], #1
 803145e:	2a00      	cmp	r2, #0
 8031460:	d1f9      	bne.n	8031456 <strcpy+0x2>
 8031462:	4770      	bx	lr

08031464 <std>:
 8031464:	2300      	movs	r3, #0
 8031466:	b510      	push	{r4, lr}
 8031468:	4604      	mov	r4, r0
 803146a:	e9c0 3300 	strd	r3, r3, [r0]
 803146e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8031472:	6083      	str	r3, [r0, #8]
 8031474:	8181      	strh	r1, [r0, #12]
 8031476:	6643      	str	r3, [r0, #100]	; 0x64
 8031478:	81c2      	strh	r2, [r0, #14]
 803147a:	6183      	str	r3, [r0, #24]
 803147c:	4619      	mov	r1, r3
 803147e:	2208      	movs	r2, #8
 8031480:	305c      	adds	r0, #92	; 0x5c
 8031482:	f7ff feb7 	bl	80311f4 <memset>
 8031486:	4b05      	ldr	r3, [pc, #20]	; (803149c <std+0x38>)
 8031488:	6263      	str	r3, [r4, #36]	; 0x24
 803148a:	4b05      	ldr	r3, [pc, #20]	; (80314a0 <std+0x3c>)
 803148c:	62a3      	str	r3, [r4, #40]	; 0x28
 803148e:	4b05      	ldr	r3, [pc, #20]	; (80314a4 <std+0x40>)
 8031490:	62e3      	str	r3, [r4, #44]	; 0x2c
 8031492:	4b05      	ldr	r3, [pc, #20]	; (80314a8 <std+0x44>)
 8031494:	6224      	str	r4, [r4, #32]
 8031496:	6323      	str	r3, [r4, #48]	; 0x30
 8031498:	bd10      	pop	{r4, pc}
 803149a:	bf00      	nop
 803149c:	08031f01 	.word	0x08031f01
 80314a0:	08031f23 	.word	0x08031f23
 80314a4:	08031f5b 	.word	0x08031f5b
 80314a8:	08031f7f 	.word	0x08031f7f

080314ac <_cleanup_r>:
 80314ac:	4901      	ldr	r1, [pc, #4]	; (80314b4 <_cleanup_r+0x8>)
 80314ae:	f000 b8af 	b.w	8031610 <_fwalk_reent>
 80314b2:	bf00      	nop
 80314b4:	08032259 	.word	0x08032259

080314b8 <__sfmoreglue>:
 80314b8:	b570      	push	{r4, r5, r6, lr}
 80314ba:	2268      	movs	r2, #104	; 0x68
 80314bc:	1e4d      	subs	r5, r1, #1
 80314be:	4355      	muls	r5, r2
 80314c0:	460e      	mov	r6, r1
 80314c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80314c6:	f7ff ff09 	bl	80312dc <_malloc_r>
 80314ca:	4604      	mov	r4, r0
 80314cc:	b140      	cbz	r0, 80314e0 <__sfmoreglue+0x28>
 80314ce:	2100      	movs	r1, #0
 80314d0:	e9c0 1600 	strd	r1, r6, [r0]
 80314d4:	300c      	adds	r0, #12
 80314d6:	60a0      	str	r0, [r4, #8]
 80314d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80314dc:	f7ff fe8a 	bl	80311f4 <memset>
 80314e0:	4620      	mov	r0, r4
 80314e2:	bd70      	pop	{r4, r5, r6, pc}

080314e4 <__sfp_lock_acquire>:
 80314e4:	4801      	ldr	r0, [pc, #4]	; (80314ec <__sfp_lock_acquire+0x8>)
 80314e6:	f000 b8b3 	b.w	8031650 <__retarget_lock_acquire_recursive>
 80314ea:	bf00      	nop
 80314ec:	20006ba9 	.word	0x20006ba9

080314f0 <__sfp_lock_release>:
 80314f0:	4801      	ldr	r0, [pc, #4]	; (80314f8 <__sfp_lock_release+0x8>)
 80314f2:	f000 b8ae 	b.w	8031652 <__retarget_lock_release_recursive>
 80314f6:	bf00      	nop
 80314f8:	20006ba9 	.word	0x20006ba9

080314fc <__sinit_lock_acquire>:
 80314fc:	4801      	ldr	r0, [pc, #4]	; (8031504 <__sinit_lock_acquire+0x8>)
 80314fe:	f000 b8a7 	b.w	8031650 <__retarget_lock_acquire_recursive>
 8031502:	bf00      	nop
 8031504:	20006baa 	.word	0x20006baa

08031508 <__sinit_lock_release>:
 8031508:	4801      	ldr	r0, [pc, #4]	; (8031510 <__sinit_lock_release+0x8>)
 803150a:	f000 b8a2 	b.w	8031652 <__retarget_lock_release_recursive>
 803150e:	bf00      	nop
 8031510:	20006baa 	.word	0x20006baa

08031514 <__sinit>:
 8031514:	b510      	push	{r4, lr}
 8031516:	4604      	mov	r4, r0
 8031518:	f7ff fff0 	bl	80314fc <__sinit_lock_acquire>
 803151c:	69a3      	ldr	r3, [r4, #24]
 803151e:	b11b      	cbz	r3, 8031528 <__sinit+0x14>
 8031520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031524:	f7ff bff0 	b.w	8031508 <__sinit_lock_release>
 8031528:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803152c:	6523      	str	r3, [r4, #80]	; 0x50
 803152e:	4b13      	ldr	r3, [pc, #76]	; (803157c <__sinit+0x68>)
 8031530:	4a13      	ldr	r2, [pc, #76]	; (8031580 <__sinit+0x6c>)
 8031532:	681b      	ldr	r3, [r3, #0]
 8031534:	62a2      	str	r2, [r4, #40]	; 0x28
 8031536:	42a3      	cmp	r3, r4
 8031538:	bf04      	itt	eq
 803153a:	2301      	moveq	r3, #1
 803153c:	61a3      	streq	r3, [r4, #24]
 803153e:	4620      	mov	r0, r4
 8031540:	f000 f820 	bl	8031584 <__sfp>
 8031544:	6060      	str	r0, [r4, #4]
 8031546:	4620      	mov	r0, r4
 8031548:	f000 f81c 	bl	8031584 <__sfp>
 803154c:	60a0      	str	r0, [r4, #8]
 803154e:	4620      	mov	r0, r4
 8031550:	f000 f818 	bl	8031584 <__sfp>
 8031554:	2200      	movs	r2, #0
 8031556:	60e0      	str	r0, [r4, #12]
 8031558:	2104      	movs	r1, #4
 803155a:	6860      	ldr	r0, [r4, #4]
 803155c:	f7ff ff82 	bl	8031464 <std>
 8031560:	68a0      	ldr	r0, [r4, #8]
 8031562:	2201      	movs	r2, #1
 8031564:	2109      	movs	r1, #9
 8031566:	f7ff ff7d 	bl	8031464 <std>
 803156a:	68e0      	ldr	r0, [r4, #12]
 803156c:	2202      	movs	r2, #2
 803156e:	2112      	movs	r1, #18
 8031570:	f7ff ff78 	bl	8031464 <std>
 8031574:	2301      	movs	r3, #1
 8031576:	61a3      	str	r3, [r4, #24]
 8031578:	e7d2      	b.n	8031520 <__sinit+0xc>
 803157a:	bf00      	nop
 803157c:	0803543c 	.word	0x0803543c
 8031580:	080314ad 	.word	0x080314ad

08031584 <__sfp>:
 8031584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031586:	4607      	mov	r7, r0
 8031588:	f7ff ffac 	bl	80314e4 <__sfp_lock_acquire>
 803158c:	4b1e      	ldr	r3, [pc, #120]	; (8031608 <__sfp+0x84>)
 803158e:	681e      	ldr	r6, [r3, #0]
 8031590:	69b3      	ldr	r3, [r6, #24]
 8031592:	b913      	cbnz	r3, 803159a <__sfp+0x16>
 8031594:	4630      	mov	r0, r6
 8031596:	f7ff ffbd 	bl	8031514 <__sinit>
 803159a:	3648      	adds	r6, #72	; 0x48
 803159c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80315a0:	3b01      	subs	r3, #1
 80315a2:	d503      	bpl.n	80315ac <__sfp+0x28>
 80315a4:	6833      	ldr	r3, [r6, #0]
 80315a6:	b30b      	cbz	r3, 80315ec <__sfp+0x68>
 80315a8:	6836      	ldr	r6, [r6, #0]
 80315aa:	e7f7      	b.n	803159c <__sfp+0x18>
 80315ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80315b0:	b9d5      	cbnz	r5, 80315e8 <__sfp+0x64>
 80315b2:	4b16      	ldr	r3, [pc, #88]	; (803160c <__sfp+0x88>)
 80315b4:	60e3      	str	r3, [r4, #12]
 80315b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80315ba:	6665      	str	r5, [r4, #100]	; 0x64
 80315bc:	f000 f847 	bl	803164e <__retarget_lock_init_recursive>
 80315c0:	f7ff ff96 	bl	80314f0 <__sfp_lock_release>
 80315c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80315c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80315cc:	6025      	str	r5, [r4, #0]
 80315ce:	61a5      	str	r5, [r4, #24]
 80315d0:	2208      	movs	r2, #8
 80315d2:	4629      	mov	r1, r5
 80315d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80315d8:	f7ff fe0c 	bl	80311f4 <memset>
 80315dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80315e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80315e4:	4620      	mov	r0, r4
 80315e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80315e8:	3468      	adds	r4, #104	; 0x68
 80315ea:	e7d9      	b.n	80315a0 <__sfp+0x1c>
 80315ec:	2104      	movs	r1, #4
 80315ee:	4638      	mov	r0, r7
 80315f0:	f7ff ff62 	bl	80314b8 <__sfmoreglue>
 80315f4:	4604      	mov	r4, r0
 80315f6:	6030      	str	r0, [r6, #0]
 80315f8:	2800      	cmp	r0, #0
 80315fa:	d1d5      	bne.n	80315a8 <__sfp+0x24>
 80315fc:	f7ff ff78 	bl	80314f0 <__sfp_lock_release>
 8031600:	230c      	movs	r3, #12
 8031602:	603b      	str	r3, [r7, #0]
 8031604:	e7ee      	b.n	80315e4 <__sfp+0x60>
 8031606:	bf00      	nop
 8031608:	0803543c 	.word	0x0803543c
 803160c:	ffff0001 	.word	0xffff0001

08031610 <_fwalk_reent>:
 8031610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031614:	4606      	mov	r6, r0
 8031616:	4688      	mov	r8, r1
 8031618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803161c:	2700      	movs	r7, #0
 803161e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031622:	f1b9 0901 	subs.w	r9, r9, #1
 8031626:	d505      	bpl.n	8031634 <_fwalk_reent+0x24>
 8031628:	6824      	ldr	r4, [r4, #0]
 803162a:	2c00      	cmp	r4, #0
 803162c:	d1f7      	bne.n	803161e <_fwalk_reent+0xe>
 803162e:	4638      	mov	r0, r7
 8031630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031634:	89ab      	ldrh	r3, [r5, #12]
 8031636:	2b01      	cmp	r3, #1
 8031638:	d907      	bls.n	803164a <_fwalk_reent+0x3a>
 803163a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803163e:	3301      	adds	r3, #1
 8031640:	d003      	beq.n	803164a <_fwalk_reent+0x3a>
 8031642:	4629      	mov	r1, r5
 8031644:	4630      	mov	r0, r6
 8031646:	47c0      	blx	r8
 8031648:	4307      	orrs	r7, r0
 803164a:	3568      	adds	r5, #104	; 0x68
 803164c:	e7e9      	b.n	8031622 <_fwalk_reent+0x12>

0803164e <__retarget_lock_init_recursive>:
 803164e:	4770      	bx	lr

08031650 <__retarget_lock_acquire_recursive>:
 8031650:	4770      	bx	lr

08031652 <__retarget_lock_release_recursive>:
 8031652:	4770      	bx	lr

08031654 <__malloc_lock>:
 8031654:	4801      	ldr	r0, [pc, #4]	; (803165c <__malloc_lock+0x8>)
 8031656:	f7ff bffb 	b.w	8031650 <__retarget_lock_acquire_recursive>
 803165a:	bf00      	nop
 803165c:	20006ba8 	.word	0x20006ba8

08031660 <__malloc_unlock>:
 8031660:	4801      	ldr	r0, [pc, #4]	; (8031668 <__malloc_unlock+0x8>)
 8031662:	f7ff bff6 	b.w	8031652 <__retarget_lock_release_recursive>
 8031666:	bf00      	nop
 8031668:	20006ba8 	.word	0x20006ba8

0803166c <__ssputs_r>:
 803166c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031670:	688e      	ldr	r6, [r1, #8]
 8031672:	429e      	cmp	r6, r3
 8031674:	4682      	mov	sl, r0
 8031676:	460c      	mov	r4, r1
 8031678:	4690      	mov	r8, r2
 803167a:	461f      	mov	r7, r3
 803167c:	d838      	bhi.n	80316f0 <__ssputs_r+0x84>
 803167e:	898a      	ldrh	r2, [r1, #12]
 8031680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8031684:	d032      	beq.n	80316ec <__ssputs_r+0x80>
 8031686:	6825      	ldr	r5, [r4, #0]
 8031688:	6909      	ldr	r1, [r1, #16]
 803168a:	eba5 0901 	sub.w	r9, r5, r1
 803168e:	6965      	ldr	r5, [r4, #20]
 8031690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8031694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8031698:	3301      	adds	r3, #1
 803169a:	444b      	add	r3, r9
 803169c:	106d      	asrs	r5, r5, #1
 803169e:	429d      	cmp	r5, r3
 80316a0:	bf38      	it	cc
 80316a2:	461d      	movcc	r5, r3
 80316a4:	0553      	lsls	r3, r2, #21
 80316a6:	d531      	bpl.n	803170c <__ssputs_r+0xa0>
 80316a8:	4629      	mov	r1, r5
 80316aa:	f7ff fe17 	bl	80312dc <_malloc_r>
 80316ae:	4606      	mov	r6, r0
 80316b0:	b950      	cbnz	r0, 80316c8 <__ssputs_r+0x5c>
 80316b2:	230c      	movs	r3, #12
 80316b4:	f8ca 3000 	str.w	r3, [sl]
 80316b8:	89a3      	ldrh	r3, [r4, #12]
 80316ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80316be:	81a3      	strh	r3, [r4, #12]
 80316c0:	f04f 30ff 	mov.w	r0, #4294967295
 80316c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80316c8:	6921      	ldr	r1, [r4, #16]
 80316ca:	464a      	mov	r2, r9
 80316cc:	f7ff fd84 	bl	80311d8 <memcpy>
 80316d0:	89a3      	ldrh	r3, [r4, #12]
 80316d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80316d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80316da:	81a3      	strh	r3, [r4, #12]
 80316dc:	6126      	str	r6, [r4, #16]
 80316de:	6165      	str	r5, [r4, #20]
 80316e0:	444e      	add	r6, r9
 80316e2:	eba5 0509 	sub.w	r5, r5, r9
 80316e6:	6026      	str	r6, [r4, #0]
 80316e8:	60a5      	str	r5, [r4, #8]
 80316ea:	463e      	mov	r6, r7
 80316ec:	42be      	cmp	r6, r7
 80316ee:	d900      	bls.n	80316f2 <__ssputs_r+0x86>
 80316f0:	463e      	mov	r6, r7
 80316f2:	6820      	ldr	r0, [r4, #0]
 80316f4:	4632      	mov	r2, r6
 80316f6:	4641      	mov	r1, r8
 80316f8:	f000 fe62 	bl	80323c0 <memmove>
 80316fc:	68a3      	ldr	r3, [r4, #8]
 80316fe:	1b9b      	subs	r3, r3, r6
 8031700:	60a3      	str	r3, [r4, #8]
 8031702:	6823      	ldr	r3, [r4, #0]
 8031704:	4433      	add	r3, r6
 8031706:	6023      	str	r3, [r4, #0]
 8031708:	2000      	movs	r0, #0
 803170a:	e7db      	b.n	80316c4 <__ssputs_r+0x58>
 803170c:	462a      	mov	r2, r5
 803170e:	f000 fe71 	bl	80323f4 <_realloc_r>
 8031712:	4606      	mov	r6, r0
 8031714:	2800      	cmp	r0, #0
 8031716:	d1e1      	bne.n	80316dc <__ssputs_r+0x70>
 8031718:	6921      	ldr	r1, [r4, #16]
 803171a:	4650      	mov	r0, sl
 803171c:	f7ff fd72 	bl	8031204 <_free_r>
 8031720:	e7c7      	b.n	80316b2 <__ssputs_r+0x46>
	...

08031724 <_svfiprintf_r>:
 8031724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031728:	4698      	mov	r8, r3
 803172a:	898b      	ldrh	r3, [r1, #12]
 803172c:	061b      	lsls	r3, r3, #24
 803172e:	b09d      	sub	sp, #116	; 0x74
 8031730:	4607      	mov	r7, r0
 8031732:	460d      	mov	r5, r1
 8031734:	4614      	mov	r4, r2
 8031736:	d50e      	bpl.n	8031756 <_svfiprintf_r+0x32>
 8031738:	690b      	ldr	r3, [r1, #16]
 803173a:	b963      	cbnz	r3, 8031756 <_svfiprintf_r+0x32>
 803173c:	2140      	movs	r1, #64	; 0x40
 803173e:	f7ff fdcd 	bl	80312dc <_malloc_r>
 8031742:	6028      	str	r0, [r5, #0]
 8031744:	6128      	str	r0, [r5, #16]
 8031746:	b920      	cbnz	r0, 8031752 <_svfiprintf_r+0x2e>
 8031748:	230c      	movs	r3, #12
 803174a:	603b      	str	r3, [r7, #0]
 803174c:	f04f 30ff 	mov.w	r0, #4294967295
 8031750:	e0d1      	b.n	80318f6 <_svfiprintf_r+0x1d2>
 8031752:	2340      	movs	r3, #64	; 0x40
 8031754:	616b      	str	r3, [r5, #20]
 8031756:	2300      	movs	r3, #0
 8031758:	9309      	str	r3, [sp, #36]	; 0x24
 803175a:	2320      	movs	r3, #32
 803175c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031760:	f8cd 800c 	str.w	r8, [sp, #12]
 8031764:	2330      	movs	r3, #48	; 0x30
 8031766:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8031910 <_svfiprintf_r+0x1ec>
 803176a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803176e:	f04f 0901 	mov.w	r9, #1
 8031772:	4623      	mov	r3, r4
 8031774:	469a      	mov	sl, r3
 8031776:	f813 2b01 	ldrb.w	r2, [r3], #1
 803177a:	b10a      	cbz	r2, 8031780 <_svfiprintf_r+0x5c>
 803177c:	2a25      	cmp	r2, #37	; 0x25
 803177e:	d1f9      	bne.n	8031774 <_svfiprintf_r+0x50>
 8031780:	ebba 0b04 	subs.w	fp, sl, r4
 8031784:	d00b      	beq.n	803179e <_svfiprintf_r+0x7a>
 8031786:	465b      	mov	r3, fp
 8031788:	4622      	mov	r2, r4
 803178a:	4629      	mov	r1, r5
 803178c:	4638      	mov	r0, r7
 803178e:	f7ff ff6d 	bl	803166c <__ssputs_r>
 8031792:	3001      	adds	r0, #1
 8031794:	f000 80aa 	beq.w	80318ec <_svfiprintf_r+0x1c8>
 8031798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803179a:	445a      	add	r2, fp
 803179c:	9209      	str	r2, [sp, #36]	; 0x24
 803179e:	f89a 3000 	ldrb.w	r3, [sl]
 80317a2:	2b00      	cmp	r3, #0
 80317a4:	f000 80a2 	beq.w	80318ec <_svfiprintf_r+0x1c8>
 80317a8:	2300      	movs	r3, #0
 80317aa:	f04f 32ff 	mov.w	r2, #4294967295
 80317ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80317b2:	f10a 0a01 	add.w	sl, sl, #1
 80317b6:	9304      	str	r3, [sp, #16]
 80317b8:	9307      	str	r3, [sp, #28]
 80317ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80317be:	931a      	str	r3, [sp, #104]	; 0x68
 80317c0:	4654      	mov	r4, sl
 80317c2:	2205      	movs	r2, #5
 80317c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80317c8:	4851      	ldr	r0, [pc, #324]	; (8031910 <_svfiprintf_r+0x1ec>)
 80317ca:	f7ee fd29 	bl	8020220 <memchr>
 80317ce:	9a04      	ldr	r2, [sp, #16]
 80317d0:	b9d8      	cbnz	r0, 803180a <_svfiprintf_r+0xe6>
 80317d2:	06d0      	lsls	r0, r2, #27
 80317d4:	bf44      	itt	mi
 80317d6:	2320      	movmi	r3, #32
 80317d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80317dc:	0711      	lsls	r1, r2, #28
 80317de:	bf44      	itt	mi
 80317e0:	232b      	movmi	r3, #43	; 0x2b
 80317e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80317e6:	f89a 3000 	ldrb.w	r3, [sl]
 80317ea:	2b2a      	cmp	r3, #42	; 0x2a
 80317ec:	d015      	beq.n	803181a <_svfiprintf_r+0xf6>
 80317ee:	9a07      	ldr	r2, [sp, #28]
 80317f0:	4654      	mov	r4, sl
 80317f2:	2000      	movs	r0, #0
 80317f4:	f04f 0c0a 	mov.w	ip, #10
 80317f8:	4621      	mov	r1, r4
 80317fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80317fe:	3b30      	subs	r3, #48	; 0x30
 8031800:	2b09      	cmp	r3, #9
 8031802:	d94e      	bls.n	80318a2 <_svfiprintf_r+0x17e>
 8031804:	b1b0      	cbz	r0, 8031834 <_svfiprintf_r+0x110>
 8031806:	9207      	str	r2, [sp, #28]
 8031808:	e014      	b.n	8031834 <_svfiprintf_r+0x110>
 803180a:	eba0 0308 	sub.w	r3, r0, r8
 803180e:	fa09 f303 	lsl.w	r3, r9, r3
 8031812:	4313      	orrs	r3, r2
 8031814:	9304      	str	r3, [sp, #16]
 8031816:	46a2      	mov	sl, r4
 8031818:	e7d2      	b.n	80317c0 <_svfiprintf_r+0x9c>
 803181a:	9b03      	ldr	r3, [sp, #12]
 803181c:	1d19      	adds	r1, r3, #4
 803181e:	681b      	ldr	r3, [r3, #0]
 8031820:	9103      	str	r1, [sp, #12]
 8031822:	2b00      	cmp	r3, #0
 8031824:	bfbb      	ittet	lt
 8031826:	425b      	neglt	r3, r3
 8031828:	f042 0202 	orrlt.w	r2, r2, #2
 803182c:	9307      	strge	r3, [sp, #28]
 803182e:	9307      	strlt	r3, [sp, #28]
 8031830:	bfb8      	it	lt
 8031832:	9204      	strlt	r2, [sp, #16]
 8031834:	7823      	ldrb	r3, [r4, #0]
 8031836:	2b2e      	cmp	r3, #46	; 0x2e
 8031838:	d10c      	bne.n	8031854 <_svfiprintf_r+0x130>
 803183a:	7863      	ldrb	r3, [r4, #1]
 803183c:	2b2a      	cmp	r3, #42	; 0x2a
 803183e:	d135      	bne.n	80318ac <_svfiprintf_r+0x188>
 8031840:	9b03      	ldr	r3, [sp, #12]
 8031842:	1d1a      	adds	r2, r3, #4
 8031844:	681b      	ldr	r3, [r3, #0]
 8031846:	9203      	str	r2, [sp, #12]
 8031848:	2b00      	cmp	r3, #0
 803184a:	bfb8      	it	lt
 803184c:	f04f 33ff 	movlt.w	r3, #4294967295
 8031850:	3402      	adds	r4, #2
 8031852:	9305      	str	r3, [sp, #20]
 8031854:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8031920 <_svfiprintf_r+0x1fc>
 8031858:	7821      	ldrb	r1, [r4, #0]
 803185a:	2203      	movs	r2, #3
 803185c:	4650      	mov	r0, sl
 803185e:	f7ee fcdf 	bl	8020220 <memchr>
 8031862:	b140      	cbz	r0, 8031876 <_svfiprintf_r+0x152>
 8031864:	2340      	movs	r3, #64	; 0x40
 8031866:	eba0 000a 	sub.w	r0, r0, sl
 803186a:	fa03 f000 	lsl.w	r0, r3, r0
 803186e:	9b04      	ldr	r3, [sp, #16]
 8031870:	4303      	orrs	r3, r0
 8031872:	3401      	adds	r4, #1
 8031874:	9304      	str	r3, [sp, #16]
 8031876:	f814 1b01 	ldrb.w	r1, [r4], #1
 803187a:	4826      	ldr	r0, [pc, #152]	; (8031914 <_svfiprintf_r+0x1f0>)
 803187c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031880:	2206      	movs	r2, #6
 8031882:	f7ee fccd 	bl	8020220 <memchr>
 8031886:	2800      	cmp	r0, #0
 8031888:	d038      	beq.n	80318fc <_svfiprintf_r+0x1d8>
 803188a:	4b23      	ldr	r3, [pc, #140]	; (8031918 <_svfiprintf_r+0x1f4>)
 803188c:	bb1b      	cbnz	r3, 80318d6 <_svfiprintf_r+0x1b2>
 803188e:	9b03      	ldr	r3, [sp, #12]
 8031890:	3307      	adds	r3, #7
 8031892:	f023 0307 	bic.w	r3, r3, #7
 8031896:	3308      	adds	r3, #8
 8031898:	9303      	str	r3, [sp, #12]
 803189a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803189c:	4433      	add	r3, r6
 803189e:	9309      	str	r3, [sp, #36]	; 0x24
 80318a0:	e767      	b.n	8031772 <_svfiprintf_r+0x4e>
 80318a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80318a6:	460c      	mov	r4, r1
 80318a8:	2001      	movs	r0, #1
 80318aa:	e7a5      	b.n	80317f8 <_svfiprintf_r+0xd4>
 80318ac:	2300      	movs	r3, #0
 80318ae:	3401      	adds	r4, #1
 80318b0:	9305      	str	r3, [sp, #20]
 80318b2:	4619      	mov	r1, r3
 80318b4:	f04f 0c0a 	mov.w	ip, #10
 80318b8:	4620      	mov	r0, r4
 80318ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80318be:	3a30      	subs	r2, #48	; 0x30
 80318c0:	2a09      	cmp	r2, #9
 80318c2:	d903      	bls.n	80318cc <_svfiprintf_r+0x1a8>
 80318c4:	2b00      	cmp	r3, #0
 80318c6:	d0c5      	beq.n	8031854 <_svfiprintf_r+0x130>
 80318c8:	9105      	str	r1, [sp, #20]
 80318ca:	e7c3      	b.n	8031854 <_svfiprintf_r+0x130>
 80318cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80318d0:	4604      	mov	r4, r0
 80318d2:	2301      	movs	r3, #1
 80318d4:	e7f0      	b.n	80318b8 <_svfiprintf_r+0x194>
 80318d6:	ab03      	add	r3, sp, #12
 80318d8:	9300      	str	r3, [sp, #0]
 80318da:	462a      	mov	r2, r5
 80318dc:	4b0f      	ldr	r3, [pc, #60]	; (803191c <_svfiprintf_r+0x1f8>)
 80318de:	a904      	add	r1, sp, #16
 80318e0:	4638      	mov	r0, r7
 80318e2:	f3af 8000 	nop.w
 80318e6:	1c42      	adds	r2, r0, #1
 80318e8:	4606      	mov	r6, r0
 80318ea:	d1d6      	bne.n	803189a <_svfiprintf_r+0x176>
 80318ec:	89ab      	ldrh	r3, [r5, #12]
 80318ee:	065b      	lsls	r3, r3, #25
 80318f0:	f53f af2c 	bmi.w	803174c <_svfiprintf_r+0x28>
 80318f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80318f6:	b01d      	add	sp, #116	; 0x74
 80318f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80318fc:	ab03      	add	r3, sp, #12
 80318fe:	9300      	str	r3, [sp, #0]
 8031900:	462a      	mov	r2, r5
 8031902:	4b06      	ldr	r3, [pc, #24]	; (803191c <_svfiprintf_r+0x1f8>)
 8031904:	a904      	add	r1, sp, #16
 8031906:	4638      	mov	r0, r7
 8031908:	f000 f9d4 	bl	8031cb4 <_printf_i>
 803190c:	e7eb      	b.n	80318e6 <_svfiprintf_r+0x1c2>
 803190e:	bf00      	nop
 8031910:	080354a0 	.word	0x080354a0
 8031914:	080354aa 	.word	0x080354aa
 8031918:	00000000 	.word	0x00000000
 803191c:	0803166d 	.word	0x0803166d
 8031920:	080354a6 	.word	0x080354a6

08031924 <__sfputc_r>:
 8031924:	6893      	ldr	r3, [r2, #8]
 8031926:	3b01      	subs	r3, #1
 8031928:	2b00      	cmp	r3, #0
 803192a:	b410      	push	{r4}
 803192c:	6093      	str	r3, [r2, #8]
 803192e:	da08      	bge.n	8031942 <__sfputc_r+0x1e>
 8031930:	6994      	ldr	r4, [r2, #24]
 8031932:	42a3      	cmp	r3, r4
 8031934:	db01      	blt.n	803193a <__sfputc_r+0x16>
 8031936:	290a      	cmp	r1, #10
 8031938:	d103      	bne.n	8031942 <__sfputc_r+0x1e>
 803193a:	f85d 4b04 	ldr.w	r4, [sp], #4
 803193e:	f000 bb23 	b.w	8031f88 <__swbuf_r>
 8031942:	6813      	ldr	r3, [r2, #0]
 8031944:	1c58      	adds	r0, r3, #1
 8031946:	6010      	str	r0, [r2, #0]
 8031948:	7019      	strb	r1, [r3, #0]
 803194a:	4608      	mov	r0, r1
 803194c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031950:	4770      	bx	lr

08031952 <__sfputs_r>:
 8031952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031954:	4606      	mov	r6, r0
 8031956:	460f      	mov	r7, r1
 8031958:	4614      	mov	r4, r2
 803195a:	18d5      	adds	r5, r2, r3
 803195c:	42ac      	cmp	r4, r5
 803195e:	d101      	bne.n	8031964 <__sfputs_r+0x12>
 8031960:	2000      	movs	r0, #0
 8031962:	e007      	b.n	8031974 <__sfputs_r+0x22>
 8031964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031968:	463a      	mov	r2, r7
 803196a:	4630      	mov	r0, r6
 803196c:	f7ff ffda 	bl	8031924 <__sfputc_r>
 8031970:	1c43      	adds	r3, r0, #1
 8031972:	d1f3      	bne.n	803195c <__sfputs_r+0xa>
 8031974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08031978 <_vfiprintf_r>:
 8031978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803197c:	460d      	mov	r5, r1
 803197e:	b09d      	sub	sp, #116	; 0x74
 8031980:	4614      	mov	r4, r2
 8031982:	4698      	mov	r8, r3
 8031984:	4606      	mov	r6, r0
 8031986:	b118      	cbz	r0, 8031990 <_vfiprintf_r+0x18>
 8031988:	6983      	ldr	r3, [r0, #24]
 803198a:	b90b      	cbnz	r3, 8031990 <_vfiprintf_r+0x18>
 803198c:	f7ff fdc2 	bl	8031514 <__sinit>
 8031990:	4b89      	ldr	r3, [pc, #548]	; (8031bb8 <_vfiprintf_r+0x240>)
 8031992:	429d      	cmp	r5, r3
 8031994:	d11b      	bne.n	80319ce <_vfiprintf_r+0x56>
 8031996:	6875      	ldr	r5, [r6, #4]
 8031998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803199a:	07d9      	lsls	r1, r3, #31
 803199c:	d405      	bmi.n	80319aa <_vfiprintf_r+0x32>
 803199e:	89ab      	ldrh	r3, [r5, #12]
 80319a0:	059a      	lsls	r2, r3, #22
 80319a2:	d402      	bmi.n	80319aa <_vfiprintf_r+0x32>
 80319a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80319a6:	f7ff fe53 	bl	8031650 <__retarget_lock_acquire_recursive>
 80319aa:	89ab      	ldrh	r3, [r5, #12]
 80319ac:	071b      	lsls	r3, r3, #28
 80319ae:	d501      	bpl.n	80319b4 <_vfiprintf_r+0x3c>
 80319b0:	692b      	ldr	r3, [r5, #16]
 80319b2:	b9eb      	cbnz	r3, 80319f0 <_vfiprintf_r+0x78>
 80319b4:	4629      	mov	r1, r5
 80319b6:	4630      	mov	r0, r6
 80319b8:	f000 fb4a 	bl	8032050 <__swsetup_r>
 80319bc:	b1c0      	cbz	r0, 80319f0 <_vfiprintf_r+0x78>
 80319be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80319c0:	07dc      	lsls	r4, r3, #31
 80319c2:	d50e      	bpl.n	80319e2 <_vfiprintf_r+0x6a>
 80319c4:	f04f 30ff 	mov.w	r0, #4294967295
 80319c8:	b01d      	add	sp, #116	; 0x74
 80319ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80319ce:	4b7b      	ldr	r3, [pc, #492]	; (8031bbc <_vfiprintf_r+0x244>)
 80319d0:	429d      	cmp	r5, r3
 80319d2:	d101      	bne.n	80319d8 <_vfiprintf_r+0x60>
 80319d4:	68b5      	ldr	r5, [r6, #8]
 80319d6:	e7df      	b.n	8031998 <_vfiprintf_r+0x20>
 80319d8:	4b79      	ldr	r3, [pc, #484]	; (8031bc0 <_vfiprintf_r+0x248>)
 80319da:	429d      	cmp	r5, r3
 80319dc:	bf08      	it	eq
 80319de:	68f5      	ldreq	r5, [r6, #12]
 80319e0:	e7da      	b.n	8031998 <_vfiprintf_r+0x20>
 80319e2:	89ab      	ldrh	r3, [r5, #12]
 80319e4:	0598      	lsls	r0, r3, #22
 80319e6:	d4ed      	bmi.n	80319c4 <_vfiprintf_r+0x4c>
 80319e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80319ea:	f7ff fe32 	bl	8031652 <__retarget_lock_release_recursive>
 80319ee:	e7e9      	b.n	80319c4 <_vfiprintf_r+0x4c>
 80319f0:	2300      	movs	r3, #0
 80319f2:	9309      	str	r3, [sp, #36]	; 0x24
 80319f4:	2320      	movs	r3, #32
 80319f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80319fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80319fe:	2330      	movs	r3, #48	; 0x30
 8031a00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8031bc4 <_vfiprintf_r+0x24c>
 8031a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031a08:	f04f 0901 	mov.w	r9, #1
 8031a0c:	4623      	mov	r3, r4
 8031a0e:	469a      	mov	sl, r3
 8031a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031a14:	b10a      	cbz	r2, 8031a1a <_vfiprintf_r+0xa2>
 8031a16:	2a25      	cmp	r2, #37	; 0x25
 8031a18:	d1f9      	bne.n	8031a0e <_vfiprintf_r+0x96>
 8031a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8031a1e:	d00b      	beq.n	8031a38 <_vfiprintf_r+0xc0>
 8031a20:	465b      	mov	r3, fp
 8031a22:	4622      	mov	r2, r4
 8031a24:	4629      	mov	r1, r5
 8031a26:	4630      	mov	r0, r6
 8031a28:	f7ff ff93 	bl	8031952 <__sfputs_r>
 8031a2c:	3001      	adds	r0, #1
 8031a2e:	f000 80aa 	beq.w	8031b86 <_vfiprintf_r+0x20e>
 8031a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031a34:	445a      	add	r2, fp
 8031a36:	9209      	str	r2, [sp, #36]	; 0x24
 8031a38:	f89a 3000 	ldrb.w	r3, [sl]
 8031a3c:	2b00      	cmp	r3, #0
 8031a3e:	f000 80a2 	beq.w	8031b86 <_vfiprintf_r+0x20e>
 8031a42:	2300      	movs	r3, #0
 8031a44:	f04f 32ff 	mov.w	r2, #4294967295
 8031a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8031a4c:	f10a 0a01 	add.w	sl, sl, #1
 8031a50:	9304      	str	r3, [sp, #16]
 8031a52:	9307      	str	r3, [sp, #28]
 8031a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8031a58:	931a      	str	r3, [sp, #104]	; 0x68
 8031a5a:	4654      	mov	r4, sl
 8031a5c:	2205      	movs	r2, #5
 8031a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031a62:	4858      	ldr	r0, [pc, #352]	; (8031bc4 <_vfiprintf_r+0x24c>)
 8031a64:	f7ee fbdc 	bl	8020220 <memchr>
 8031a68:	9a04      	ldr	r2, [sp, #16]
 8031a6a:	b9d8      	cbnz	r0, 8031aa4 <_vfiprintf_r+0x12c>
 8031a6c:	06d1      	lsls	r1, r2, #27
 8031a6e:	bf44      	itt	mi
 8031a70:	2320      	movmi	r3, #32
 8031a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031a76:	0713      	lsls	r3, r2, #28
 8031a78:	bf44      	itt	mi
 8031a7a:	232b      	movmi	r3, #43	; 0x2b
 8031a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031a80:	f89a 3000 	ldrb.w	r3, [sl]
 8031a84:	2b2a      	cmp	r3, #42	; 0x2a
 8031a86:	d015      	beq.n	8031ab4 <_vfiprintf_r+0x13c>
 8031a88:	9a07      	ldr	r2, [sp, #28]
 8031a8a:	4654      	mov	r4, sl
 8031a8c:	2000      	movs	r0, #0
 8031a8e:	f04f 0c0a 	mov.w	ip, #10
 8031a92:	4621      	mov	r1, r4
 8031a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031a98:	3b30      	subs	r3, #48	; 0x30
 8031a9a:	2b09      	cmp	r3, #9
 8031a9c:	d94e      	bls.n	8031b3c <_vfiprintf_r+0x1c4>
 8031a9e:	b1b0      	cbz	r0, 8031ace <_vfiprintf_r+0x156>
 8031aa0:	9207      	str	r2, [sp, #28]
 8031aa2:	e014      	b.n	8031ace <_vfiprintf_r+0x156>
 8031aa4:	eba0 0308 	sub.w	r3, r0, r8
 8031aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8031aac:	4313      	orrs	r3, r2
 8031aae:	9304      	str	r3, [sp, #16]
 8031ab0:	46a2      	mov	sl, r4
 8031ab2:	e7d2      	b.n	8031a5a <_vfiprintf_r+0xe2>
 8031ab4:	9b03      	ldr	r3, [sp, #12]
 8031ab6:	1d19      	adds	r1, r3, #4
 8031ab8:	681b      	ldr	r3, [r3, #0]
 8031aba:	9103      	str	r1, [sp, #12]
 8031abc:	2b00      	cmp	r3, #0
 8031abe:	bfbb      	ittet	lt
 8031ac0:	425b      	neglt	r3, r3
 8031ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8031ac6:	9307      	strge	r3, [sp, #28]
 8031ac8:	9307      	strlt	r3, [sp, #28]
 8031aca:	bfb8      	it	lt
 8031acc:	9204      	strlt	r2, [sp, #16]
 8031ace:	7823      	ldrb	r3, [r4, #0]
 8031ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8031ad2:	d10c      	bne.n	8031aee <_vfiprintf_r+0x176>
 8031ad4:	7863      	ldrb	r3, [r4, #1]
 8031ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8031ad8:	d135      	bne.n	8031b46 <_vfiprintf_r+0x1ce>
 8031ada:	9b03      	ldr	r3, [sp, #12]
 8031adc:	1d1a      	adds	r2, r3, #4
 8031ade:	681b      	ldr	r3, [r3, #0]
 8031ae0:	9203      	str	r2, [sp, #12]
 8031ae2:	2b00      	cmp	r3, #0
 8031ae4:	bfb8      	it	lt
 8031ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8031aea:	3402      	adds	r4, #2
 8031aec:	9305      	str	r3, [sp, #20]
 8031aee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8031bd4 <_vfiprintf_r+0x25c>
 8031af2:	7821      	ldrb	r1, [r4, #0]
 8031af4:	2203      	movs	r2, #3
 8031af6:	4650      	mov	r0, sl
 8031af8:	f7ee fb92 	bl	8020220 <memchr>
 8031afc:	b140      	cbz	r0, 8031b10 <_vfiprintf_r+0x198>
 8031afe:	2340      	movs	r3, #64	; 0x40
 8031b00:	eba0 000a 	sub.w	r0, r0, sl
 8031b04:	fa03 f000 	lsl.w	r0, r3, r0
 8031b08:	9b04      	ldr	r3, [sp, #16]
 8031b0a:	4303      	orrs	r3, r0
 8031b0c:	3401      	adds	r4, #1
 8031b0e:	9304      	str	r3, [sp, #16]
 8031b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031b14:	482c      	ldr	r0, [pc, #176]	; (8031bc8 <_vfiprintf_r+0x250>)
 8031b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031b1a:	2206      	movs	r2, #6
 8031b1c:	f7ee fb80 	bl	8020220 <memchr>
 8031b20:	2800      	cmp	r0, #0
 8031b22:	d03f      	beq.n	8031ba4 <_vfiprintf_r+0x22c>
 8031b24:	4b29      	ldr	r3, [pc, #164]	; (8031bcc <_vfiprintf_r+0x254>)
 8031b26:	bb1b      	cbnz	r3, 8031b70 <_vfiprintf_r+0x1f8>
 8031b28:	9b03      	ldr	r3, [sp, #12]
 8031b2a:	3307      	adds	r3, #7
 8031b2c:	f023 0307 	bic.w	r3, r3, #7
 8031b30:	3308      	adds	r3, #8
 8031b32:	9303      	str	r3, [sp, #12]
 8031b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031b36:	443b      	add	r3, r7
 8031b38:	9309      	str	r3, [sp, #36]	; 0x24
 8031b3a:	e767      	b.n	8031a0c <_vfiprintf_r+0x94>
 8031b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8031b40:	460c      	mov	r4, r1
 8031b42:	2001      	movs	r0, #1
 8031b44:	e7a5      	b.n	8031a92 <_vfiprintf_r+0x11a>
 8031b46:	2300      	movs	r3, #0
 8031b48:	3401      	adds	r4, #1
 8031b4a:	9305      	str	r3, [sp, #20]
 8031b4c:	4619      	mov	r1, r3
 8031b4e:	f04f 0c0a 	mov.w	ip, #10
 8031b52:	4620      	mov	r0, r4
 8031b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8031b58:	3a30      	subs	r2, #48	; 0x30
 8031b5a:	2a09      	cmp	r2, #9
 8031b5c:	d903      	bls.n	8031b66 <_vfiprintf_r+0x1ee>
 8031b5e:	2b00      	cmp	r3, #0
 8031b60:	d0c5      	beq.n	8031aee <_vfiprintf_r+0x176>
 8031b62:	9105      	str	r1, [sp, #20]
 8031b64:	e7c3      	b.n	8031aee <_vfiprintf_r+0x176>
 8031b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8031b6a:	4604      	mov	r4, r0
 8031b6c:	2301      	movs	r3, #1
 8031b6e:	e7f0      	b.n	8031b52 <_vfiprintf_r+0x1da>
 8031b70:	ab03      	add	r3, sp, #12
 8031b72:	9300      	str	r3, [sp, #0]
 8031b74:	462a      	mov	r2, r5
 8031b76:	4b16      	ldr	r3, [pc, #88]	; (8031bd0 <_vfiprintf_r+0x258>)
 8031b78:	a904      	add	r1, sp, #16
 8031b7a:	4630      	mov	r0, r6
 8031b7c:	f3af 8000 	nop.w
 8031b80:	4607      	mov	r7, r0
 8031b82:	1c78      	adds	r0, r7, #1
 8031b84:	d1d6      	bne.n	8031b34 <_vfiprintf_r+0x1bc>
 8031b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031b88:	07d9      	lsls	r1, r3, #31
 8031b8a:	d405      	bmi.n	8031b98 <_vfiprintf_r+0x220>
 8031b8c:	89ab      	ldrh	r3, [r5, #12]
 8031b8e:	059a      	lsls	r2, r3, #22
 8031b90:	d402      	bmi.n	8031b98 <_vfiprintf_r+0x220>
 8031b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031b94:	f7ff fd5d 	bl	8031652 <__retarget_lock_release_recursive>
 8031b98:	89ab      	ldrh	r3, [r5, #12]
 8031b9a:	065b      	lsls	r3, r3, #25
 8031b9c:	f53f af12 	bmi.w	80319c4 <_vfiprintf_r+0x4c>
 8031ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8031ba2:	e711      	b.n	80319c8 <_vfiprintf_r+0x50>
 8031ba4:	ab03      	add	r3, sp, #12
 8031ba6:	9300      	str	r3, [sp, #0]
 8031ba8:	462a      	mov	r2, r5
 8031baa:	4b09      	ldr	r3, [pc, #36]	; (8031bd0 <_vfiprintf_r+0x258>)
 8031bac:	a904      	add	r1, sp, #16
 8031bae:	4630      	mov	r0, r6
 8031bb0:	f000 f880 	bl	8031cb4 <_printf_i>
 8031bb4:	e7e4      	b.n	8031b80 <_vfiprintf_r+0x208>
 8031bb6:	bf00      	nop
 8031bb8:	08035460 	.word	0x08035460
 8031bbc:	08035480 	.word	0x08035480
 8031bc0:	08035440 	.word	0x08035440
 8031bc4:	080354a0 	.word	0x080354a0
 8031bc8:	080354aa 	.word	0x080354aa
 8031bcc:	00000000 	.word	0x00000000
 8031bd0:	08031953 	.word	0x08031953
 8031bd4:	080354a6 	.word	0x080354a6

08031bd8 <_printf_common>:
 8031bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031bdc:	4616      	mov	r6, r2
 8031bde:	4699      	mov	r9, r3
 8031be0:	688a      	ldr	r2, [r1, #8]
 8031be2:	690b      	ldr	r3, [r1, #16]
 8031be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031be8:	4293      	cmp	r3, r2
 8031bea:	bfb8      	it	lt
 8031bec:	4613      	movlt	r3, r2
 8031bee:	6033      	str	r3, [r6, #0]
 8031bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031bf4:	4607      	mov	r7, r0
 8031bf6:	460c      	mov	r4, r1
 8031bf8:	b10a      	cbz	r2, 8031bfe <_printf_common+0x26>
 8031bfa:	3301      	adds	r3, #1
 8031bfc:	6033      	str	r3, [r6, #0]
 8031bfe:	6823      	ldr	r3, [r4, #0]
 8031c00:	0699      	lsls	r1, r3, #26
 8031c02:	bf42      	ittt	mi
 8031c04:	6833      	ldrmi	r3, [r6, #0]
 8031c06:	3302      	addmi	r3, #2
 8031c08:	6033      	strmi	r3, [r6, #0]
 8031c0a:	6825      	ldr	r5, [r4, #0]
 8031c0c:	f015 0506 	ands.w	r5, r5, #6
 8031c10:	d106      	bne.n	8031c20 <_printf_common+0x48>
 8031c12:	f104 0a19 	add.w	sl, r4, #25
 8031c16:	68e3      	ldr	r3, [r4, #12]
 8031c18:	6832      	ldr	r2, [r6, #0]
 8031c1a:	1a9b      	subs	r3, r3, r2
 8031c1c:	42ab      	cmp	r3, r5
 8031c1e:	dc26      	bgt.n	8031c6e <_printf_common+0x96>
 8031c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031c24:	1e13      	subs	r3, r2, #0
 8031c26:	6822      	ldr	r2, [r4, #0]
 8031c28:	bf18      	it	ne
 8031c2a:	2301      	movne	r3, #1
 8031c2c:	0692      	lsls	r2, r2, #26
 8031c2e:	d42b      	bmi.n	8031c88 <_printf_common+0xb0>
 8031c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031c34:	4649      	mov	r1, r9
 8031c36:	4638      	mov	r0, r7
 8031c38:	47c0      	blx	r8
 8031c3a:	3001      	adds	r0, #1
 8031c3c:	d01e      	beq.n	8031c7c <_printf_common+0xa4>
 8031c3e:	6823      	ldr	r3, [r4, #0]
 8031c40:	68e5      	ldr	r5, [r4, #12]
 8031c42:	6832      	ldr	r2, [r6, #0]
 8031c44:	f003 0306 	and.w	r3, r3, #6
 8031c48:	2b04      	cmp	r3, #4
 8031c4a:	bf08      	it	eq
 8031c4c:	1aad      	subeq	r5, r5, r2
 8031c4e:	68a3      	ldr	r3, [r4, #8]
 8031c50:	6922      	ldr	r2, [r4, #16]
 8031c52:	bf0c      	ite	eq
 8031c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8031c58:	2500      	movne	r5, #0
 8031c5a:	4293      	cmp	r3, r2
 8031c5c:	bfc4      	itt	gt
 8031c5e:	1a9b      	subgt	r3, r3, r2
 8031c60:	18ed      	addgt	r5, r5, r3
 8031c62:	2600      	movs	r6, #0
 8031c64:	341a      	adds	r4, #26
 8031c66:	42b5      	cmp	r5, r6
 8031c68:	d11a      	bne.n	8031ca0 <_printf_common+0xc8>
 8031c6a:	2000      	movs	r0, #0
 8031c6c:	e008      	b.n	8031c80 <_printf_common+0xa8>
 8031c6e:	2301      	movs	r3, #1
 8031c70:	4652      	mov	r2, sl
 8031c72:	4649      	mov	r1, r9
 8031c74:	4638      	mov	r0, r7
 8031c76:	47c0      	blx	r8
 8031c78:	3001      	adds	r0, #1
 8031c7a:	d103      	bne.n	8031c84 <_printf_common+0xac>
 8031c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8031c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031c84:	3501      	adds	r5, #1
 8031c86:	e7c6      	b.n	8031c16 <_printf_common+0x3e>
 8031c88:	18e1      	adds	r1, r4, r3
 8031c8a:	1c5a      	adds	r2, r3, #1
 8031c8c:	2030      	movs	r0, #48	; 0x30
 8031c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031c92:	4422      	add	r2, r4
 8031c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031c9c:	3302      	adds	r3, #2
 8031c9e:	e7c7      	b.n	8031c30 <_printf_common+0x58>
 8031ca0:	2301      	movs	r3, #1
 8031ca2:	4622      	mov	r2, r4
 8031ca4:	4649      	mov	r1, r9
 8031ca6:	4638      	mov	r0, r7
 8031ca8:	47c0      	blx	r8
 8031caa:	3001      	adds	r0, #1
 8031cac:	d0e6      	beq.n	8031c7c <_printf_common+0xa4>
 8031cae:	3601      	adds	r6, #1
 8031cb0:	e7d9      	b.n	8031c66 <_printf_common+0x8e>
	...

08031cb4 <_printf_i>:
 8031cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031cb8:	7e0f      	ldrb	r7, [r1, #24]
 8031cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031cbc:	2f78      	cmp	r7, #120	; 0x78
 8031cbe:	4691      	mov	r9, r2
 8031cc0:	4680      	mov	r8, r0
 8031cc2:	460c      	mov	r4, r1
 8031cc4:	469a      	mov	sl, r3
 8031cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031cca:	d807      	bhi.n	8031cdc <_printf_i+0x28>
 8031ccc:	2f62      	cmp	r7, #98	; 0x62
 8031cce:	d80a      	bhi.n	8031ce6 <_printf_i+0x32>
 8031cd0:	2f00      	cmp	r7, #0
 8031cd2:	f000 80d8 	beq.w	8031e86 <_printf_i+0x1d2>
 8031cd6:	2f58      	cmp	r7, #88	; 0x58
 8031cd8:	f000 80a3 	beq.w	8031e22 <_printf_i+0x16e>
 8031cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031ce4:	e03a      	b.n	8031d5c <_printf_i+0xa8>
 8031ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031cea:	2b15      	cmp	r3, #21
 8031cec:	d8f6      	bhi.n	8031cdc <_printf_i+0x28>
 8031cee:	a101      	add	r1, pc, #4	; (adr r1, 8031cf4 <_printf_i+0x40>)
 8031cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031cf4:	08031d4d 	.word	0x08031d4d
 8031cf8:	08031d61 	.word	0x08031d61
 8031cfc:	08031cdd 	.word	0x08031cdd
 8031d00:	08031cdd 	.word	0x08031cdd
 8031d04:	08031cdd 	.word	0x08031cdd
 8031d08:	08031cdd 	.word	0x08031cdd
 8031d0c:	08031d61 	.word	0x08031d61
 8031d10:	08031cdd 	.word	0x08031cdd
 8031d14:	08031cdd 	.word	0x08031cdd
 8031d18:	08031cdd 	.word	0x08031cdd
 8031d1c:	08031cdd 	.word	0x08031cdd
 8031d20:	08031e6d 	.word	0x08031e6d
 8031d24:	08031d91 	.word	0x08031d91
 8031d28:	08031e4f 	.word	0x08031e4f
 8031d2c:	08031cdd 	.word	0x08031cdd
 8031d30:	08031cdd 	.word	0x08031cdd
 8031d34:	08031e8f 	.word	0x08031e8f
 8031d38:	08031cdd 	.word	0x08031cdd
 8031d3c:	08031d91 	.word	0x08031d91
 8031d40:	08031cdd 	.word	0x08031cdd
 8031d44:	08031cdd 	.word	0x08031cdd
 8031d48:	08031e57 	.word	0x08031e57
 8031d4c:	682b      	ldr	r3, [r5, #0]
 8031d4e:	1d1a      	adds	r2, r3, #4
 8031d50:	681b      	ldr	r3, [r3, #0]
 8031d52:	602a      	str	r2, [r5, #0]
 8031d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8031d5c:	2301      	movs	r3, #1
 8031d5e:	e0a3      	b.n	8031ea8 <_printf_i+0x1f4>
 8031d60:	6820      	ldr	r0, [r4, #0]
 8031d62:	6829      	ldr	r1, [r5, #0]
 8031d64:	0606      	lsls	r6, r0, #24
 8031d66:	f101 0304 	add.w	r3, r1, #4
 8031d6a:	d50a      	bpl.n	8031d82 <_printf_i+0xce>
 8031d6c:	680e      	ldr	r6, [r1, #0]
 8031d6e:	602b      	str	r3, [r5, #0]
 8031d70:	2e00      	cmp	r6, #0
 8031d72:	da03      	bge.n	8031d7c <_printf_i+0xc8>
 8031d74:	232d      	movs	r3, #45	; 0x2d
 8031d76:	4276      	negs	r6, r6
 8031d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031d7c:	485e      	ldr	r0, [pc, #376]	; (8031ef8 <_printf_i+0x244>)
 8031d7e:	230a      	movs	r3, #10
 8031d80:	e019      	b.n	8031db6 <_printf_i+0x102>
 8031d82:	680e      	ldr	r6, [r1, #0]
 8031d84:	602b      	str	r3, [r5, #0]
 8031d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8031d8a:	bf18      	it	ne
 8031d8c:	b236      	sxthne	r6, r6
 8031d8e:	e7ef      	b.n	8031d70 <_printf_i+0xbc>
 8031d90:	682b      	ldr	r3, [r5, #0]
 8031d92:	6820      	ldr	r0, [r4, #0]
 8031d94:	1d19      	adds	r1, r3, #4
 8031d96:	6029      	str	r1, [r5, #0]
 8031d98:	0601      	lsls	r1, r0, #24
 8031d9a:	d501      	bpl.n	8031da0 <_printf_i+0xec>
 8031d9c:	681e      	ldr	r6, [r3, #0]
 8031d9e:	e002      	b.n	8031da6 <_printf_i+0xf2>
 8031da0:	0646      	lsls	r6, r0, #25
 8031da2:	d5fb      	bpl.n	8031d9c <_printf_i+0xe8>
 8031da4:	881e      	ldrh	r6, [r3, #0]
 8031da6:	4854      	ldr	r0, [pc, #336]	; (8031ef8 <_printf_i+0x244>)
 8031da8:	2f6f      	cmp	r7, #111	; 0x6f
 8031daa:	bf0c      	ite	eq
 8031dac:	2308      	moveq	r3, #8
 8031dae:	230a      	movne	r3, #10
 8031db0:	2100      	movs	r1, #0
 8031db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8031db6:	6865      	ldr	r5, [r4, #4]
 8031db8:	60a5      	str	r5, [r4, #8]
 8031dba:	2d00      	cmp	r5, #0
 8031dbc:	bfa2      	ittt	ge
 8031dbe:	6821      	ldrge	r1, [r4, #0]
 8031dc0:	f021 0104 	bicge.w	r1, r1, #4
 8031dc4:	6021      	strge	r1, [r4, #0]
 8031dc6:	b90e      	cbnz	r6, 8031dcc <_printf_i+0x118>
 8031dc8:	2d00      	cmp	r5, #0
 8031dca:	d04d      	beq.n	8031e68 <_printf_i+0x1b4>
 8031dcc:	4615      	mov	r5, r2
 8031dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8031dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8031dd6:	5dc7      	ldrb	r7, [r0, r7]
 8031dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8031ddc:	4637      	mov	r7, r6
 8031dde:	42bb      	cmp	r3, r7
 8031de0:	460e      	mov	r6, r1
 8031de2:	d9f4      	bls.n	8031dce <_printf_i+0x11a>
 8031de4:	2b08      	cmp	r3, #8
 8031de6:	d10b      	bne.n	8031e00 <_printf_i+0x14c>
 8031de8:	6823      	ldr	r3, [r4, #0]
 8031dea:	07de      	lsls	r6, r3, #31
 8031dec:	d508      	bpl.n	8031e00 <_printf_i+0x14c>
 8031dee:	6923      	ldr	r3, [r4, #16]
 8031df0:	6861      	ldr	r1, [r4, #4]
 8031df2:	4299      	cmp	r1, r3
 8031df4:	bfde      	ittt	le
 8031df6:	2330      	movle	r3, #48	; 0x30
 8031df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8031dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8031e00:	1b52      	subs	r2, r2, r5
 8031e02:	6122      	str	r2, [r4, #16]
 8031e04:	f8cd a000 	str.w	sl, [sp]
 8031e08:	464b      	mov	r3, r9
 8031e0a:	aa03      	add	r2, sp, #12
 8031e0c:	4621      	mov	r1, r4
 8031e0e:	4640      	mov	r0, r8
 8031e10:	f7ff fee2 	bl	8031bd8 <_printf_common>
 8031e14:	3001      	adds	r0, #1
 8031e16:	d14c      	bne.n	8031eb2 <_printf_i+0x1fe>
 8031e18:	f04f 30ff 	mov.w	r0, #4294967295
 8031e1c:	b004      	add	sp, #16
 8031e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031e22:	4835      	ldr	r0, [pc, #212]	; (8031ef8 <_printf_i+0x244>)
 8031e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8031e28:	6829      	ldr	r1, [r5, #0]
 8031e2a:	6823      	ldr	r3, [r4, #0]
 8031e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8031e30:	6029      	str	r1, [r5, #0]
 8031e32:	061d      	lsls	r5, r3, #24
 8031e34:	d514      	bpl.n	8031e60 <_printf_i+0x1ac>
 8031e36:	07df      	lsls	r7, r3, #31
 8031e38:	bf44      	itt	mi
 8031e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8031e3e:	6023      	strmi	r3, [r4, #0]
 8031e40:	b91e      	cbnz	r6, 8031e4a <_printf_i+0x196>
 8031e42:	6823      	ldr	r3, [r4, #0]
 8031e44:	f023 0320 	bic.w	r3, r3, #32
 8031e48:	6023      	str	r3, [r4, #0]
 8031e4a:	2310      	movs	r3, #16
 8031e4c:	e7b0      	b.n	8031db0 <_printf_i+0xfc>
 8031e4e:	6823      	ldr	r3, [r4, #0]
 8031e50:	f043 0320 	orr.w	r3, r3, #32
 8031e54:	6023      	str	r3, [r4, #0]
 8031e56:	2378      	movs	r3, #120	; 0x78
 8031e58:	4828      	ldr	r0, [pc, #160]	; (8031efc <_printf_i+0x248>)
 8031e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8031e5e:	e7e3      	b.n	8031e28 <_printf_i+0x174>
 8031e60:	0659      	lsls	r1, r3, #25
 8031e62:	bf48      	it	mi
 8031e64:	b2b6      	uxthmi	r6, r6
 8031e66:	e7e6      	b.n	8031e36 <_printf_i+0x182>
 8031e68:	4615      	mov	r5, r2
 8031e6a:	e7bb      	b.n	8031de4 <_printf_i+0x130>
 8031e6c:	682b      	ldr	r3, [r5, #0]
 8031e6e:	6826      	ldr	r6, [r4, #0]
 8031e70:	6961      	ldr	r1, [r4, #20]
 8031e72:	1d18      	adds	r0, r3, #4
 8031e74:	6028      	str	r0, [r5, #0]
 8031e76:	0635      	lsls	r5, r6, #24
 8031e78:	681b      	ldr	r3, [r3, #0]
 8031e7a:	d501      	bpl.n	8031e80 <_printf_i+0x1cc>
 8031e7c:	6019      	str	r1, [r3, #0]
 8031e7e:	e002      	b.n	8031e86 <_printf_i+0x1d2>
 8031e80:	0670      	lsls	r0, r6, #25
 8031e82:	d5fb      	bpl.n	8031e7c <_printf_i+0x1c8>
 8031e84:	8019      	strh	r1, [r3, #0]
 8031e86:	2300      	movs	r3, #0
 8031e88:	6123      	str	r3, [r4, #16]
 8031e8a:	4615      	mov	r5, r2
 8031e8c:	e7ba      	b.n	8031e04 <_printf_i+0x150>
 8031e8e:	682b      	ldr	r3, [r5, #0]
 8031e90:	1d1a      	adds	r2, r3, #4
 8031e92:	602a      	str	r2, [r5, #0]
 8031e94:	681d      	ldr	r5, [r3, #0]
 8031e96:	6862      	ldr	r2, [r4, #4]
 8031e98:	2100      	movs	r1, #0
 8031e9a:	4628      	mov	r0, r5
 8031e9c:	f7ee f9c0 	bl	8020220 <memchr>
 8031ea0:	b108      	cbz	r0, 8031ea6 <_printf_i+0x1f2>
 8031ea2:	1b40      	subs	r0, r0, r5
 8031ea4:	6060      	str	r0, [r4, #4]
 8031ea6:	6863      	ldr	r3, [r4, #4]
 8031ea8:	6123      	str	r3, [r4, #16]
 8031eaa:	2300      	movs	r3, #0
 8031eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031eb0:	e7a8      	b.n	8031e04 <_printf_i+0x150>
 8031eb2:	6923      	ldr	r3, [r4, #16]
 8031eb4:	462a      	mov	r2, r5
 8031eb6:	4649      	mov	r1, r9
 8031eb8:	4640      	mov	r0, r8
 8031eba:	47d0      	blx	sl
 8031ebc:	3001      	adds	r0, #1
 8031ebe:	d0ab      	beq.n	8031e18 <_printf_i+0x164>
 8031ec0:	6823      	ldr	r3, [r4, #0]
 8031ec2:	079b      	lsls	r3, r3, #30
 8031ec4:	d413      	bmi.n	8031eee <_printf_i+0x23a>
 8031ec6:	68e0      	ldr	r0, [r4, #12]
 8031ec8:	9b03      	ldr	r3, [sp, #12]
 8031eca:	4298      	cmp	r0, r3
 8031ecc:	bfb8      	it	lt
 8031ece:	4618      	movlt	r0, r3
 8031ed0:	e7a4      	b.n	8031e1c <_printf_i+0x168>
 8031ed2:	2301      	movs	r3, #1
 8031ed4:	4632      	mov	r2, r6
 8031ed6:	4649      	mov	r1, r9
 8031ed8:	4640      	mov	r0, r8
 8031eda:	47d0      	blx	sl
 8031edc:	3001      	adds	r0, #1
 8031ede:	d09b      	beq.n	8031e18 <_printf_i+0x164>
 8031ee0:	3501      	adds	r5, #1
 8031ee2:	68e3      	ldr	r3, [r4, #12]
 8031ee4:	9903      	ldr	r1, [sp, #12]
 8031ee6:	1a5b      	subs	r3, r3, r1
 8031ee8:	42ab      	cmp	r3, r5
 8031eea:	dcf2      	bgt.n	8031ed2 <_printf_i+0x21e>
 8031eec:	e7eb      	b.n	8031ec6 <_printf_i+0x212>
 8031eee:	2500      	movs	r5, #0
 8031ef0:	f104 0619 	add.w	r6, r4, #25
 8031ef4:	e7f5      	b.n	8031ee2 <_printf_i+0x22e>
 8031ef6:	bf00      	nop
 8031ef8:	080354b1 	.word	0x080354b1
 8031efc:	080354c2 	.word	0x080354c2

08031f00 <__sread>:
 8031f00:	b510      	push	{r4, lr}
 8031f02:	460c      	mov	r4, r1
 8031f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f08:	f000 faa4 	bl	8032454 <_read_r>
 8031f0c:	2800      	cmp	r0, #0
 8031f0e:	bfab      	itete	ge
 8031f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8031f12:	89a3      	ldrhlt	r3, [r4, #12]
 8031f14:	181b      	addge	r3, r3, r0
 8031f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031f1a:	bfac      	ite	ge
 8031f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8031f1e:	81a3      	strhlt	r3, [r4, #12]
 8031f20:	bd10      	pop	{r4, pc}

08031f22 <__swrite>:
 8031f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031f26:	461f      	mov	r7, r3
 8031f28:	898b      	ldrh	r3, [r1, #12]
 8031f2a:	05db      	lsls	r3, r3, #23
 8031f2c:	4605      	mov	r5, r0
 8031f2e:	460c      	mov	r4, r1
 8031f30:	4616      	mov	r6, r2
 8031f32:	d505      	bpl.n	8031f40 <__swrite+0x1e>
 8031f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f38:	2302      	movs	r3, #2
 8031f3a:	2200      	movs	r2, #0
 8031f3c:	f000 f9c8 	bl	80322d0 <_lseek_r>
 8031f40:	89a3      	ldrh	r3, [r4, #12]
 8031f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031f4a:	81a3      	strh	r3, [r4, #12]
 8031f4c:	4632      	mov	r2, r6
 8031f4e:	463b      	mov	r3, r7
 8031f50:	4628      	mov	r0, r5
 8031f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031f56:	f000 b869 	b.w	803202c <_write_r>

08031f5a <__sseek>:
 8031f5a:	b510      	push	{r4, lr}
 8031f5c:	460c      	mov	r4, r1
 8031f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f62:	f000 f9b5 	bl	80322d0 <_lseek_r>
 8031f66:	1c43      	adds	r3, r0, #1
 8031f68:	89a3      	ldrh	r3, [r4, #12]
 8031f6a:	bf15      	itete	ne
 8031f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8031f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8031f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031f76:	81a3      	strheq	r3, [r4, #12]
 8031f78:	bf18      	it	ne
 8031f7a:	81a3      	strhne	r3, [r4, #12]
 8031f7c:	bd10      	pop	{r4, pc}

08031f7e <__sclose>:
 8031f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f82:	f000 b8d3 	b.w	803212c <_close_r>
	...

08031f88 <__swbuf_r>:
 8031f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031f8a:	460e      	mov	r6, r1
 8031f8c:	4614      	mov	r4, r2
 8031f8e:	4605      	mov	r5, r0
 8031f90:	b118      	cbz	r0, 8031f9a <__swbuf_r+0x12>
 8031f92:	6983      	ldr	r3, [r0, #24]
 8031f94:	b90b      	cbnz	r3, 8031f9a <__swbuf_r+0x12>
 8031f96:	f7ff fabd 	bl	8031514 <__sinit>
 8031f9a:	4b21      	ldr	r3, [pc, #132]	; (8032020 <__swbuf_r+0x98>)
 8031f9c:	429c      	cmp	r4, r3
 8031f9e:	d12b      	bne.n	8031ff8 <__swbuf_r+0x70>
 8031fa0:	686c      	ldr	r4, [r5, #4]
 8031fa2:	69a3      	ldr	r3, [r4, #24]
 8031fa4:	60a3      	str	r3, [r4, #8]
 8031fa6:	89a3      	ldrh	r3, [r4, #12]
 8031fa8:	071a      	lsls	r2, r3, #28
 8031faa:	d52f      	bpl.n	803200c <__swbuf_r+0x84>
 8031fac:	6923      	ldr	r3, [r4, #16]
 8031fae:	b36b      	cbz	r3, 803200c <__swbuf_r+0x84>
 8031fb0:	6923      	ldr	r3, [r4, #16]
 8031fb2:	6820      	ldr	r0, [r4, #0]
 8031fb4:	1ac0      	subs	r0, r0, r3
 8031fb6:	6963      	ldr	r3, [r4, #20]
 8031fb8:	b2f6      	uxtb	r6, r6
 8031fba:	4283      	cmp	r3, r0
 8031fbc:	4637      	mov	r7, r6
 8031fbe:	dc04      	bgt.n	8031fca <__swbuf_r+0x42>
 8031fc0:	4621      	mov	r1, r4
 8031fc2:	4628      	mov	r0, r5
 8031fc4:	f000 f948 	bl	8032258 <_fflush_r>
 8031fc8:	bb30      	cbnz	r0, 8032018 <__swbuf_r+0x90>
 8031fca:	68a3      	ldr	r3, [r4, #8]
 8031fcc:	3b01      	subs	r3, #1
 8031fce:	60a3      	str	r3, [r4, #8]
 8031fd0:	6823      	ldr	r3, [r4, #0]
 8031fd2:	1c5a      	adds	r2, r3, #1
 8031fd4:	6022      	str	r2, [r4, #0]
 8031fd6:	701e      	strb	r6, [r3, #0]
 8031fd8:	6963      	ldr	r3, [r4, #20]
 8031fda:	3001      	adds	r0, #1
 8031fdc:	4283      	cmp	r3, r0
 8031fde:	d004      	beq.n	8031fea <__swbuf_r+0x62>
 8031fe0:	89a3      	ldrh	r3, [r4, #12]
 8031fe2:	07db      	lsls	r3, r3, #31
 8031fe4:	d506      	bpl.n	8031ff4 <__swbuf_r+0x6c>
 8031fe6:	2e0a      	cmp	r6, #10
 8031fe8:	d104      	bne.n	8031ff4 <__swbuf_r+0x6c>
 8031fea:	4621      	mov	r1, r4
 8031fec:	4628      	mov	r0, r5
 8031fee:	f000 f933 	bl	8032258 <_fflush_r>
 8031ff2:	b988      	cbnz	r0, 8032018 <__swbuf_r+0x90>
 8031ff4:	4638      	mov	r0, r7
 8031ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031ff8:	4b0a      	ldr	r3, [pc, #40]	; (8032024 <__swbuf_r+0x9c>)
 8031ffa:	429c      	cmp	r4, r3
 8031ffc:	d101      	bne.n	8032002 <__swbuf_r+0x7a>
 8031ffe:	68ac      	ldr	r4, [r5, #8]
 8032000:	e7cf      	b.n	8031fa2 <__swbuf_r+0x1a>
 8032002:	4b09      	ldr	r3, [pc, #36]	; (8032028 <__swbuf_r+0xa0>)
 8032004:	429c      	cmp	r4, r3
 8032006:	bf08      	it	eq
 8032008:	68ec      	ldreq	r4, [r5, #12]
 803200a:	e7ca      	b.n	8031fa2 <__swbuf_r+0x1a>
 803200c:	4621      	mov	r1, r4
 803200e:	4628      	mov	r0, r5
 8032010:	f000 f81e 	bl	8032050 <__swsetup_r>
 8032014:	2800      	cmp	r0, #0
 8032016:	d0cb      	beq.n	8031fb0 <__swbuf_r+0x28>
 8032018:	f04f 37ff 	mov.w	r7, #4294967295
 803201c:	e7ea      	b.n	8031ff4 <__swbuf_r+0x6c>
 803201e:	bf00      	nop
 8032020:	08035460 	.word	0x08035460
 8032024:	08035480 	.word	0x08035480
 8032028:	08035440 	.word	0x08035440

0803202c <_write_r>:
 803202c:	b538      	push	{r3, r4, r5, lr}
 803202e:	4d07      	ldr	r5, [pc, #28]	; (803204c <_write_r+0x20>)
 8032030:	4604      	mov	r4, r0
 8032032:	4608      	mov	r0, r1
 8032034:	4611      	mov	r1, r2
 8032036:	2200      	movs	r2, #0
 8032038:	602a      	str	r2, [r5, #0]
 803203a:	461a      	mov	r2, r3
 803203c:	f7ef fc27 	bl	802188e <_write>
 8032040:	1c43      	adds	r3, r0, #1
 8032042:	d102      	bne.n	803204a <_write_r+0x1e>
 8032044:	682b      	ldr	r3, [r5, #0]
 8032046:	b103      	cbz	r3, 803204a <_write_r+0x1e>
 8032048:	6023      	str	r3, [r4, #0]
 803204a:	bd38      	pop	{r3, r4, r5, pc}
 803204c:	20006ba4 	.word	0x20006ba4

08032050 <__swsetup_r>:
 8032050:	4b32      	ldr	r3, [pc, #200]	; (803211c <__swsetup_r+0xcc>)
 8032052:	b570      	push	{r4, r5, r6, lr}
 8032054:	681d      	ldr	r5, [r3, #0]
 8032056:	4606      	mov	r6, r0
 8032058:	460c      	mov	r4, r1
 803205a:	b125      	cbz	r5, 8032066 <__swsetup_r+0x16>
 803205c:	69ab      	ldr	r3, [r5, #24]
 803205e:	b913      	cbnz	r3, 8032066 <__swsetup_r+0x16>
 8032060:	4628      	mov	r0, r5
 8032062:	f7ff fa57 	bl	8031514 <__sinit>
 8032066:	4b2e      	ldr	r3, [pc, #184]	; (8032120 <__swsetup_r+0xd0>)
 8032068:	429c      	cmp	r4, r3
 803206a:	d10f      	bne.n	803208c <__swsetup_r+0x3c>
 803206c:	686c      	ldr	r4, [r5, #4]
 803206e:	89a3      	ldrh	r3, [r4, #12]
 8032070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8032074:	0719      	lsls	r1, r3, #28
 8032076:	d42c      	bmi.n	80320d2 <__swsetup_r+0x82>
 8032078:	06dd      	lsls	r5, r3, #27
 803207a:	d411      	bmi.n	80320a0 <__swsetup_r+0x50>
 803207c:	2309      	movs	r3, #9
 803207e:	6033      	str	r3, [r6, #0]
 8032080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8032084:	81a3      	strh	r3, [r4, #12]
 8032086:	f04f 30ff 	mov.w	r0, #4294967295
 803208a:	e03e      	b.n	803210a <__swsetup_r+0xba>
 803208c:	4b25      	ldr	r3, [pc, #148]	; (8032124 <__swsetup_r+0xd4>)
 803208e:	429c      	cmp	r4, r3
 8032090:	d101      	bne.n	8032096 <__swsetup_r+0x46>
 8032092:	68ac      	ldr	r4, [r5, #8]
 8032094:	e7eb      	b.n	803206e <__swsetup_r+0x1e>
 8032096:	4b24      	ldr	r3, [pc, #144]	; (8032128 <__swsetup_r+0xd8>)
 8032098:	429c      	cmp	r4, r3
 803209a:	bf08      	it	eq
 803209c:	68ec      	ldreq	r4, [r5, #12]
 803209e:	e7e6      	b.n	803206e <__swsetup_r+0x1e>
 80320a0:	0758      	lsls	r0, r3, #29
 80320a2:	d512      	bpl.n	80320ca <__swsetup_r+0x7a>
 80320a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80320a6:	b141      	cbz	r1, 80320ba <__swsetup_r+0x6a>
 80320a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80320ac:	4299      	cmp	r1, r3
 80320ae:	d002      	beq.n	80320b6 <__swsetup_r+0x66>
 80320b0:	4630      	mov	r0, r6
 80320b2:	f7ff f8a7 	bl	8031204 <_free_r>
 80320b6:	2300      	movs	r3, #0
 80320b8:	6363      	str	r3, [r4, #52]	; 0x34
 80320ba:	89a3      	ldrh	r3, [r4, #12]
 80320bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80320c0:	81a3      	strh	r3, [r4, #12]
 80320c2:	2300      	movs	r3, #0
 80320c4:	6063      	str	r3, [r4, #4]
 80320c6:	6923      	ldr	r3, [r4, #16]
 80320c8:	6023      	str	r3, [r4, #0]
 80320ca:	89a3      	ldrh	r3, [r4, #12]
 80320cc:	f043 0308 	orr.w	r3, r3, #8
 80320d0:	81a3      	strh	r3, [r4, #12]
 80320d2:	6923      	ldr	r3, [r4, #16]
 80320d4:	b94b      	cbnz	r3, 80320ea <__swsetup_r+0x9a>
 80320d6:	89a3      	ldrh	r3, [r4, #12]
 80320d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80320dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80320e0:	d003      	beq.n	80320ea <__swsetup_r+0x9a>
 80320e2:	4621      	mov	r1, r4
 80320e4:	4630      	mov	r0, r6
 80320e6:	f000 f92b 	bl	8032340 <__smakebuf_r>
 80320ea:	89a0      	ldrh	r0, [r4, #12]
 80320ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80320f0:	f010 0301 	ands.w	r3, r0, #1
 80320f4:	d00a      	beq.n	803210c <__swsetup_r+0xbc>
 80320f6:	2300      	movs	r3, #0
 80320f8:	60a3      	str	r3, [r4, #8]
 80320fa:	6963      	ldr	r3, [r4, #20]
 80320fc:	425b      	negs	r3, r3
 80320fe:	61a3      	str	r3, [r4, #24]
 8032100:	6923      	ldr	r3, [r4, #16]
 8032102:	b943      	cbnz	r3, 8032116 <__swsetup_r+0xc6>
 8032104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8032108:	d1ba      	bne.n	8032080 <__swsetup_r+0x30>
 803210a:	bd70      	pop	{r4, r5, r6, pc}
 803210c:	0781      	lsls	r1, r0, #30
 803210e:	bf58      	it	pl
 8032110:	6963      	ldrpl	r3, [r4, #20]
 8032112:	60a3      	str	r3, [r4, #8]
 8032114:	e7f4      	b.n	8032100 <__swsetup_r+0xb0>
 8032116:	2000      	movs	r0, #0
 8032118:	e7f7      	b.n	803210a <__swsetup_r+0xba>
 803211a:	bf00      	nop
 803211c:	20000094 	.word	0x20000094
 8032120:	08035460 	.word	0x08035460
 8032124:	08035480 	.word	0x08035480
 8032128:	08035440 	.word	0x08035440

0803212c <_close_r>:
 803212c:	b538      	push	{r3, r4, r5, lr}
 803212e:	4d06      	ldr	r5, [pc, #24]	; (8032148 <_close_r+0x1c>)
 8032130:	2300      	movs	r3, #0
 8032132:	4604      	mov	r4, r0
 8032134:	4608      	mov	r0, r1
 8032136:	602b      	str	r3, [r5, #0]
 8032138:	f7ef fbc5 	bl	80218c6 <_close>
 803213c:	1c43      	adds	r3, r0, #1
 803213e:	d102      	bne.n	8032146 <_close_r+0x1a>
 8032140:	682b      	ldr	r3, [r5, #0]
 8032142:	b103      	cbz	r3, 8032146 <_close_r+0x1a>
 8032144:	6023      	str	r3, [r4, #0]
 8032146:	bd38      	pop	{r3, r4, r5, pc}
 8032148:	20006ba4 	.word	0x20006ba4

0803214c <__sflush_r>:
 803214c:	898a      	ldrh	r2, [r1, #12]
 803214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032152:	4605      	mov	r5, r0
 8032154:	0710      	lsls	r0, r2, #28
 8032156:	460c      	mov	r4, r1
 8032158:	d458      	bmi.n	803220c <__sflush_r+0xc0>
 803215a:	684b      	ldr	r3, [r1, #4]
 803215c:	2b00      	cmp	r3, #0
 803215e:	dc05      	bgt.n	803216c <__sflush_r+0x20>
 8032160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8032162:	2b00      	cmp	r3, #0
 8032164:	dc02      	bgt.n	803216c <__sflush_r+0x20>
 8032166:	2000      	movs	r0, #0
 8032168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803216c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803216e:	2e00      	cmp	r6, #0
 8032170:	d0f9      	beq.n	8032166 <__sflush_r+0x1a>
 8032172:	2300      	movs	r3, #0
 8032174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8032178:	682f      	ldr	r7, [r5, #0]
 803217a:	602b      	str	r3, [r5, #0]
 803217c:	d032      	beq.n	80321e4 <__sflush_r+0x98>
 803217e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8032180:	89a3      	ldrh	r3, [r4, #12]
 8032182:	075a      	lsls	r2, r3, #29
 8032184:	d505      	bpl.n	8032192 <__sflush_r+0x46>
 8032186:	6863      	ldr	r3, [r4, #4]
 8032188:	1ac0      	subs	r0, r0, r3
 803218a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803218c:	b10b      	cbz	r3, 8032192 <__sflush_r+0x46>
 803218e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8032190:	1ac0      	subs	r0, r0, r3
 8032192:	2300      	movs	r3, #0
 8032194:	4602      	mov	r2, r0
 8032196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8032198:	6a21      	ldr	r1, [r4, #32]
 803219a:	4628      	mov	r0, r5
 803219c:	47b0      	blx	r6
 803219e:	1c43      	adds	r3, r0, #1
 80321a0:	89a3      	ldrh	r3, [r4, #12]
 80321a2:	d106      	bne.n	80321b2 <__sflush_r+0x66>
 80321a4:	6829      	ldr	r1, [r5, #0]
 80321a6:	291d      	cmp	r1, #29
 80321a8:	d82c      	bhi.n	8032204 <__sflush_r+0xb8>
 80321aa:	4a2a      	ldr	r2, [pc, #168]	; (8032254 <__sflush_r+0x108>)
 80321ac:	40ca      	lsrs	r2, r1
 80321ae:	07d6      	lsls	r6, r2, #31
 80321b0:	d528      	bpl.n	8032204 <__sflush_r+0xb8>
 80321b2:	2200      	movs	r2, #0
 80321b4:	6062      	str	r2, [r4, #4]
 80321b6:	04d9      	lsls	r1, r3, #19
 80321b8:	6922      	ldr	r2, [r4, #16]
 80321ba:	6022      	str	r2, [r4, #0]
 80321bc:	d504      	bpl.n	80321c8 <__sflush_r+0x7c>
 80321be:	1c42      	adds	r2, r0, #1
 80321c0:	d101      	bne.n	80321c6 <__sflush_r+0x7a>
 80321c2:	682b      	ldr	r3, [r5, #0]
 80321c4:	b903      	cbnz	r3, 80321c8 <__sflush_r+0x7c>
 80321c6:	6560      	str	r0, [r4, #84]	; 0x54
 80321c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80321ca:	602f      	str	r7, [r5, #0]
 80321cc:	2900      	cmp	r1, #0
 80321ce:	d0ca      	beq.n	8032166 <__sflush_r+0x1a>
 80321d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80321d4:	4299      	cmp	r1, r3
 80321d6:	d002      	beq.n	80321de <__sflush_r+0x92>
 80321d8:	4628      	mov	r0, r5
 80321da:	f7ff f813 	bl	8031204 <_free_r>
 80321de:	2000      	movs	r0, #0
 80321e0:	6360      	str	r0, [r4, #52]	; 0x34
 80321e2:	e7c1      	b.n	8032168 <__sflush_r+0x1c>
 80321e4:	6a21      	ldr	r1, [r4, #32]
 80321e6:	2301      	movs	r3, #1
 80321e8:	4628      	mov	r0, r5
 80321ea:	47b0      	blx	r6
 80321ec:	1c41      	adds	r1, r0, #1
 80321ee:	d1c7      	bne.n	8032180 <__sflush_r+0x34>
 80321f0:	682b      	ldr	r3, [r5, #0]
 80321f2:	2b00      	cmp	r3, #0
 80321f4:	d0c4      	beq.n	8032180 <__sflush_r+0x34>
 80321f6:	2b1d      	cmp	r3, #29
 80321f8:	d001      	beq.n	80321fe <__sflush_r+0xb2>
 80321fa:	2b16      	cmp	r3, #22
 80321fc:	d101      	bne.n	8032202 <__sflush_r+0xb6>
 80321fe:	602f      	str	r7, [r5, #0]
 8032200:	e7b1      	b.n	8032166 <__sflush_r+0x1a>
 8032202:	89a3      	ldrh	r3, [r4, #12]
 8032204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032208:	81a3      	strh	r3, [r4, #12]
 803220a:	e7ad      	b.n	8032168 <__sflush_r+0x1c>
 803220c:	690f      	ldr	r7, [r1, #16]
 803220e:	2f00      	cmp	r7, #0
 8032210:	d0a9      	beq.n	8032166 <__sflush_r+0x1a>
 8032212:	0793      	lsls	r3, r2, #30
 8032214:	680e      	ldr	r6, [r1, #0]
 8032216:	bf08      	it	eq
 8032218:	694b      	ldreq	r3, [r1, #20]
 803221a:	600f      	str	r7, [r1, #0]
 803221c:	bf18      	it	ne
 803221e:	2300      	movne	r3, #0
 8032220:	eba6 0807 	sub.w	r8, r6, r7
 8032224:	608b      	str	r3, [r1, #8]
 8032226:	f1b8 0f00 	cmp.w	r8, #0
 803222a:	dd9c      	ble.n	8032166 <__sflush_r+0x1a>
 803222c:	6a21      	ldr	r1, [r4, #32]
 803222e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8032230:	4643      	mov	r3, r8
 8032232:	463a      	mov	r2, r7
 8032234:	4628      	mov	r0, r5
 8032236:	47b0      	blx	r6
 8032238:	2800      	cmp	r0, #0
 803223a:	dc06      	bgt.n	803224a <__sflush_r+0xfe>
 803223c:	89a3      	ldrh	r3, [r4, #12]
 803223e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032242:	81a3      	strh	r3, [r4, #12]
 8032244:	f04f 30ff 	mov.w	r0, #4294967295
 8032248:	e78e      	b.n	8032168 <__sflush_r+0x1c>
 803224a:	4407      	add	r7, r0
 803224c:	eba8 0800 	sub.w	r8, r8, r0
 8032250:	e7e9      	b.n	8032226 <__sflush_r+0xda>
 8032252:	bf00      	nop
 8032254:	20400001 	.word	0x20400001

08032258 <_fflush_r>:
 8032258:	b538      	push	{r3, r4, r5, lr}
 803225a:	690b      	ldr	r3, [r1, #16]
 803225c:	4605      	mov	r5, r0
 803225e:	460c      	mov	r4, r1
 8032260:	b913      	cbnz	r3, 8032268 <_fflush_r+0x10>
 8032262:	2500      	movs	r5, #0
 8032264:	4628      	mov	r0, r5
 8032266:	bd38      	pop	{r3, r4, r5, pc}
 8032268:	b118      	cbz	r0, 8032272 <_fflush_r+0x1a>
 803226a:	6983      	ldr	r3, [r0, #24]
 803226c:	b90b      	cbnz	r3, 8032272 <_fflush_r+0x1a>
 803226e:	f7ff f951 	bl	8031514 <__sinit>
 8032272:	4b14      	ldr	r3, [pc, #80]	; (80322c4 <_fflush_r+0x6c>)
 8032274:	429c      	cmp	r4, r3
 8032276:	d11b      	bne.n	80322b0 <_fflush_r+0x58>
 8032278:	686c      	ldr	r4, [r5, #4]
 803227a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803227e:	2b00      	cmp	r3, #0
 8032280:	d0ef      	beq.n	8032262 <_fflush_r+0xa>
 8032282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8032284:	07d0      	lsls	r0, r2, #31
 8032286:	d404      	bmi.n	8032292 <_fflush_r+0x3a>
 8032288:	0599      	lsls	r1, r3, #22
 803228a:	d402      	bmi.n	8032292 <_fflush_r+0x3a>
 803228c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803228e:	f7ff f9df 	bl	8031650 <__retarget_lock_acquire_recursive>
 8032292:	4628      	mov	r0, r5
 8032294:	4621      	mov	r1, r4
 8032296:	f7ff ff59 	bl	803214c <__sflush_r>
 803229a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803229c:	07da      	lsls	r2, r3, #31
 803229e:	4605      	mov	r5, r0
 80322a0:	d4e0      	bmi.n	8032264 <_fflush_r+0xc>
 80322a2:	89a3      	ldrh	r3, [r4, #12]
 80322a4:	059b      	lsls	r3, r3, #22
 80322a6:	d4dd      	bmi.n	8032264 <_fflush_r+0xc>
 80322a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80322aa:	f7ff f9d2 	bl	8031652 <__retarget_lock_release_recursive>
 80322ae:	e7d9      	b.n	8032264 <_fflush_r+0xc>
 80322b0:	4b05      	ldr	r3, [pc, #20]	; (80322c8 <_fflush_r+0x70>)
 80322b2:	429c      	cmp	r4, r3
 80322b4:	d101      	bne.n	80322ba <_fflush_r+0x62>
 80322b6:	68ac      	ldr	r4, [r5, #8]
 80322b8:	e7df      	b.n	803227a <_fflush_r+0x22>
 80322ba:	4b04      	ldr	r3, [pc, #16]	; (80322cc <_fflush_r+0x74>)
 80322bc:	429c      	cmp	r4, r3
 80322be:	bf08      	it	eq
 80322c0:	68ec      	ldreq	r4, [r5, #12]
 80322c2:	e7da      	b.n	803227a <_fflush_r+0x22>
 80322c4:	08035460 	.word	0x08035460
 80322c8:	08035480 	.word	0x08035480
 80322cc:	08035440 	.word	0x08035440

080322d0 <_lseek_r>:
 80322d0:	b538      	push	{r3, r4, r5, lr}
 80322d2:	4d07      	ldr	r5, [pc, #28]	; (80322f0 <_lseek_r+0x20>)
 80322d4:	4604      	mov	r4, r0
 80322d6:	4608      	mov	r0, r1
 80322d8:	4611      	mov	r1, r2
 80322da:	2200      	movs	r2, #0
 80322dc:	602a      	str	r2, [r5, #0]
 80322de:	461a      	mov	r2, r3
 80322e0:	f7ef fb18 	bl	8021914 <_lseek>
 80322e4:	1c43      	adds	r3, r0, #1
 80322e6:	d102      	bne.n	80322ee <_lseek_r+0x1e>
 80322e8:	682b      	ldr	r3, [r5, #0]
 80322ea:	b103      	cbz	r3, 80322ee <_lseek_r+0x1e>
 80322ec:	6023      	str	r3, [r4, #0]
 80322ee:	bd38      	pop	{r3, r4, r5, pc}
 80322f0:	20006ba4 	.word	0x20006ba4

080322f4 <__swhatbuf_r>:
 80322f4:	b570      	push	{r4, r5, r6, lr}
 80322f6:	460e      	mov	r6, r1
 80322f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80322fc:	2900      	cmp	r1, #0
 80322fe:	b096      	sub	sp, #88	; 0x58
 8032300:	4614      	mov	r4, r2
 8032302:	461d      	mov	r5, r3
 8032304:	da08      	bge.n	8032318 <__swhatbuf_r+0x24>
 8032306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803230a:	2200      	movs	r2, #0
 803230c:	602a      	str	r2, [r5, #0]
 803230e:	061a      	lsls	r2, r3, #24
 8032310:	d410      	bmi.n	8032334 <__swhatbuf_r+0x40>
 8032312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8032316:	e00e      	b.n	8032336 <__swhatbuf_r+0x42>
 8032318:	466a      	mov	r2, sp
 803231a:	f000 f8ad 	bl	8032478 <_fstat_r>
 803231e:	2800      	cmp	r0, #0
 8032320:	dbf1      	blt.n	8032306 <__swhatbuf_r+0x12>
 8032322:	9a01      	ldr	r2, [sp, #4]
 8032324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8032328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803232c:	425a      	negs	r2, r3
 803232e:	415a      	adcs	r2, r3
 8032330:	602a      	str	r2, [r5, #0]
 8032332:	e7ee      	b.n	8032312 <__swhatbuf_r+0x1e>
 8032334:	2340      	movs	r3, #64	; 0x40
 8032336:	2000      	movs	r0, #0
 8032338:	6023      	str	r3, [r4, #0]
 803233a:	b016      	add	sp, #88	; 0x58
 803233c:	bd70      	pop	{r4, r5, r6, pc}
	...

08032340 <__smakebuf_r>:
 8032340:	898b      	ldrh	r3, [r1, #12]
 8032342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8032344:	079d      	lsls	r5, r3, #30
 8032346:	4606      	mov	r6, r0
 8032348:	460c      	mov	r4, r1
 803234a:	d507      	bpl.n	803235c <__smakebuf_r+0x1c>
 803234c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8032350:	6023      	str	r3, [r4, #0]
 8032352:	6123      	str	r3, [r4, #16]
 8032354:	2301      	movs	r3, #1
 8032356:	6163      	str	r3, [r4, #20]
 8032358:	b002      	add	sp, #8
 803235a:	bd70      	pop	{r4, r5, r6, pc}
 803235c:	ab01      	add	r3, sp, #4
 803235e:	466a      	mov	r2, sp
 8032360:	f7ff ffc8 	bl	80322f4 <__swhatbuf_r>
 8032364:	9900      	ldr	r1, [sp, #0]
 8032366:	4605      	mov	r5, r0
 8032368:	4630      	mov	r0, r6
 803236a:	f7fe ffb7 	bl	80312dc <_malloc_r>
 803236e:	b948      	cbnz	r0, 8032384 <__smakebuf_r+0x44>
 8032370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032374:	059a      	lsls	r2, r3, #22
 8032376:	d4ef      	bmi.n	8032358 <__smakebuf_r+0x18>
 8032378:	f023 0303 	bic.w	r3, r3, #3
 803237c:	f043 0302 	orr.w	r3, r3, #2
 8032380:	81a3      	strh	r3, [r4, #12]
 8032382:	e7e3      	b.n	803234c <__smakebuf_r+0xc>
 8032384:	4b0d      	ldr	r3, [pc, #52]	; (80323bc <__smakebuf_r+0x7c>)
 8032386:	62b3      	str	r3, [r6, #40]	; 0x28
 8032388:	89a3      	ldrh	r3, [r4, #12]
 803238a:	6020      	str	r0, [r4, #0]
 803238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032390:	81a3      	strh	r3, [r4, #12]
 8032392:	9b00      	ldr	r3, [sp, #0]
 8032394:	6163      	str	r3, [r4, #20]
 8032396:	9b01      	ldr	r3, [sp, #4]
 8032398:	6120      	str	r0, [r4, #16]
 803239a:	b15b      	cbz	r3, 80323b4 <__smakebuf_r+0x74>
 803239c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80323a0:	4630      	mov	r0, r6
 80323a2:	f000 f87b 	bl	803249c <_isatty_r>
 80323a6:	b128      	cbz	r0, 80323b4 <__smakebuf_r+0x74>
 80323a8:	89a3      	ldrh	r3, [r4, #12]
 80323aa:	f023 0303 	bic.w	r3, r3, #3
 80323ae:	f043 0301 	orr.w	r3, r3, #1
 80323b2:	81a3      	strh	r3, [r4, #12]
 80323b4:	89a0      	ldrh	r0, [r4, #12]
 80323b6:	4305      	orrs	r5, r0
 80323b8:	81a5      	strh	r5, [r4, #12]
 80323ba:	e7cd      	b.n	8032358 <__smakebuf_r+0x18>
 80323bc:	080314ad 	.word	0x080314ad

080323c0 <memmove>:
 80323c0:	4288      	cmp	r0, r1
 80323c2:	b510      	push	{r4, lr}
 80323c4:	eb01 0402 	add.w	r4, r1, r2
 80323c8:	d902      	bls.n	80323d0 <memmove+0x10>
 80323ca:	4284      	cmp	r4, r0
 80323cc:	4623      	mov	r3, r4
 80323ce:	d807      	bhi.n	80323e0 <memmove+0x20>
 80323d0:	1e43      	subs	r3, r0, #1
 80323d2:	42a1      	cmp	r1, r4
 80323d4:	d008      	beq.n	80323e8 <memmove+0x28>
 80323d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80323da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80323de:	e7f8      	b.n	80323d2 <memmove+0x12>
 80323e0:	4402      	add	r2, r0
 80323e2:	4601      	mov	r1, r0
 80323e4:	428a      	cmp	r2, r1
 80323e6:	d100      	bne.n	80323ea <memmove+0x2a>
 80323e8:	bd10      	pop	{r4, pc}
 80323ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80323ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80323f2:	e7f7      	b.n	80323e4 <memmove+0x24>

080323f4 <_realloc_r>:
 80323f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80323f8:	4680      	mov	r8, r0
 80323fa:	4614      	mov	r4, r2
 80323fc:	460e      	mov	r6, r1
 80323fe:	b921      	cbnz	r1, 803240a <_realloc_r+0x16>
 8032400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8032404:	4611      	mov	r1, r2
 8032406:	f7fe bf69 	b.w	80312dc <_malloc_r>
 803240a:	b92a      	cbnz	r2, 8032418 <_realloc_r+0x24>
 803240c:	f7fe fefa 	bl	8031204 <_free_r>
 8032410:	4625      	mov	r5, r4
 8032412:	4628      	mov	r0, r5
 8032414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032418:	f000 f850 	bl	80324bc <_malloc_usable_size_r>
 803241c:	4284      	cmp	r4, r0
 803241e:	4607      	mov	r7, r0
 8032420:	d802      	bhi.n	8032428 <_realloc_r+0x34>
 8032422:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8032426:	d812      	bhi.n	803244e <_realloc_r+0x5a>
 8032428:	4621      	mov	r1, r4
 803242a:	4640      	mov	r0, r8
 803242c:	f7fe ff56 	bl	80312dc <_malloc_r>
 8032430:	4605      	mov	r5, r0
 8032432:	2800      	cmp	r0, #0
 8032434:	d0ed      	beq.n	8032412 <_realloc_r+0x1e>
 8032436:	42bc      	cmp	r4, r7
 8032438:	4622      	mov	r2, r4
 803243a:	4631      	mov	r1, r6
 803243c:	bf28      	it	cs
 803243e:	463a      	movcs	r2, r7
 8032440:	f7fe feca 	bl	80311d8 <memcpy>
 8032444:	4631      	mov	r1, r6
 8032446:	4640      	mov	r0, r8
 8032448:	f7fe fedc 	bl	8031204 <_free_r>
 803244c:	e7e1      	b.n	8032412 <_realloc_r+0x1e>
 803244e:	4635      	mov	r5, r6
 8032450:	e7df      	b.n	8032412 <_realloc_r+0x1e>
	...

08032454 <_read_r>:
 8032454:	b538      	push	{r3, r4, r5, lr}
 8032456:	4d07      	ldr	r5, [pc, #28]	; (8032474 <_read_r+0x20>)
 8032458:	4604      	mov	r4, r0
 803245a:	4608      	mov	r0, r1
 803245c:	4611      	mov	r1, r2
 803245e:	2200      	movs	r2, #0
 8032460:	602a      	str	r2, [r5, #0]
 8032462:	461a      	mov	r2, r3
 8032464:	f7ef f9f6 	bl	8021854 <_read>
 8032468:	1c43      	adds	r3, r0, #1
 803246a:	d102      	bne.n	8032472 <_read_r+0x1e>
 803246c:	682b      	ldr	r3, [r5, #0]
 803246e:	b103      	cbz	r3, 8032472 <_read_r+0x1e>
 8032470:	6023      	str	r3, [r4, #0]
 8032472:	bd38      	pop	{r3, r4, r5, pc}
 8032474:	20006ba4 	.word	0x20006ba4

08032478 <_fstat_r>:
 8032478:	b538      	push	{r3, r4, r5, lr}
 803247a:	4d07      	ldr	r5, [pc, #28]	; (8032498 <_fstat_r+0x20>)
 803247c:	2300      	movs	r3, #0
 803247e:	4604      	mov	r4, r0
 8032480:	4608      	mov	r0, r1
 8032482:	4611      	mov	r1, r2
 8032484:	602b      	str	r3, [r5, #0]
 8032486:	f7ef fa2a 	bl	80218de <_fstat>
 803248a:	1c43      	adds	r3, r0, #1
 803248c:	d102      	bne.n	8032494 <_fstat_r+0x1c>
 803248e:	682b      	ldr	r3, [r5, #0]
 8032490:	b103      	cbz	r3, 8032494 <_fstat_r+0x1c>
 8032492:	6023      	str	r3, [r4, #0]
 8032494:	bd38      	pop	{r3, r4, r5, pc}
 8032496:	bf00      	nop
 8032498:	20006ba4 	.word	0x20006ba4

0803249c <_isatty_r>:
 803249c:	b538      	push	{r3, r4, r5, lr}
 803249e:	4d06      	ldr	r5, [pc, #24]	; (80324b8 <_isatty_r+0x1c>)
 80324a0:	2300      	movs	r3, #0
 80324a2:	4604      	mov	r4, r0
 80324a4:	4608      	mov	r0, r1
 80324a6:	602b      	str	r3, [r5, #0]
 80324a8:	f7ef fa29 	bl	80218fe <_isatty>
 80324ac:	1c43      	adds	r3, r0, #1
 80324ae:	d102      	bne.n	80324b6 <_isatty_r+0x1a>
 80324b0:	682b      	ldr	r3, [r5, #0]
 80324b2:	b103      	cbz	r3, 80324b6 <_isatty_r+0x1a>
 80324b4:	6023      	str	r3, [r4, #0]
 80324b6:	bd38      	pop	{r3, r4, r5, pc}
 80324b8:	20006ba4 	.word	0x20006ba4

080324bc <_malloc_usable_size_r>:
 80324bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80324c0:	1f18      	subs	r0, r3, #4
 80324c2:	2b00      	cmp	r3, #0
 80324c4:	bfbc      	itt	lt
 80324c6:	580b      	ldrlt	r3, [r1, r0]
 80324c8:	18c0      	addlt	r0, r0, r3
 80324ca:	4770      	bx	lr

080324cc <rint>:
 80324cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80324ce:	ec51 0b10 	vmov	r0, r1, d0
 80324d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80324d6:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80324da:	2d13      	cmp	r5, #19
 80324dc:	ee10 3a10 	vmov	r3, s0
 80324e0:	460c      	mov	r4, r1
 80324e2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80324e6:	dc5b      	bgt.n	80325a0 <rint+0xd4>
 80324e8:	2d00      	cmp	r5, #0
 80324ea:	da2d      	bge.n	8032548 <rint+0x7c>
 80324ec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80324f0:	4302      	orrs	r2, r0
 80324f2:	d025      	beq.n	8032540 <rint+0x74>
 80324f4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80324f8:	4302      	orrs	r2, r0
 80324fa:	4253      	negs	r3, r2
 80324fc:	4313      	orrs	r3, r2
 80324fe:	0b1b      	lsrs	r3, r3, #12
 8032500:	0c4a      	lsrs	r2, r1, #17
 8032502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8032506:	0452      	lsls	r2, r2, #17
 8032508:	ea43 0102 	orr.w	r1, r3, r2
 803250c:	460b      	mov	r3, r1
 803250e:	4934      	ldr	r1, [pc, #208]	; (80325e0 <rint+0x114>)
 8032510:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8032514:	e9d6 6700 	ldrd	r6, r7, [r6]
 8032518:	4602      	mov	r2, r0
 803251a:	4639      	mov	r1, r7
 803251c:	4630      	mov	r0, r6
 803251e:	f7ed fed5 	bl	80202cc <__adddf3>
 8032522:	e9cd 0100 	strd	r0, r1, [sp]
 8032526:	463b      	mov	r3, r7
 8032528:	e9dd 0100 	ldrd	r0, r1, [sp]
 803252c:	4632      	mov	r2, r6
 803252e:	f7ed fecb 	bl	80202c8 <__aeabi_dsub>
 8032532:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8032536:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 803253a:	ea43 0704 	orr.w	r7, r3, r4
 803253e:	4639      	mov	r1, r7
 8032540:	ec41 0b10 	vmov	d0, r0, r1
 8032544:	b003      	add	sp, #12
 8032546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032548:	4a26      	ldr	r2, [pc, #152]	; (80325e4 <rint+0x118>)
 803254a:	412a      	asrs	r2, r5
 803254c:	ea01 0702 	and.w	r7, r1, r2
 8032550:	4307      	orrs	r7, r0
 8032552:	d0f5      	beq.n	8032540 <rint+0x74>
 8032554:	0851      	lsrs	r1, r2, #1
 8032556:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 803255a:	4313      	orrs	r3, r2
 803255c:	d00c      	beq.n	8032578 <rint+0xac>
 803255e:	ea24 0201 	bic.w	r2, r4, r1
 8032562:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8032566:	2d13      	cmp	r5, #19
 8032568:	fa44 f505 	asr.w	r5, r4, r5
 803256c:	bf0c      	ite	eq
 803256e:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8032572:	2300      	movne	r3, #0
 8032574:	ea42 0405 	orr.w	r4, r2, r5
 8032578:	4919      	ldr	r1, [pc, #100]	; (80325e0 <rint+0x114>)
 803257a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 803257e:	461a      	mov	r2, r3
 8032580:	4623      	mov	r3, r4
 8032582:	e9d6 4500 	ldrd	r4, r5, [r6]
 8032586:	4620      	mov	r0, r4
 8032588:	4629      	mov	r1, r5
 803258a:	f7ed fe9f 	bl	80202cc <__adddf3>
 803258e:	e9cd 0100 	strd	r0, r1, [sp]
 8032592:	e9dd 0100 	ldrd	r0, r1, [sp]
 8032596:	4622      	mov	r2, r4
 8032598:	462b      	mov	r3, r5
 803259a:	f7ed fe95 	bl	80202c8 <__aeabi_dsub>
 803259e:	e7cf      	b.n	8032540 <rint+0x74>
 80325a0:	2d33      	cmp	r5, #51	; 0x33
 80325a2:	dd08      	ble.n	80325b6 <rint+0xea>
 80325a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80325a8:	d1ca      	bne.n	8032540 <rint+0x74>
 80325aa:	ee10 2a10 	vmov	r2, s0
 80325ae:	460b      	mov	r3, r1
 80325b0:	f7ed fe8c 	bl	80202cc <__adddf3>
 80325b4:	e7c4      	b.n	8032540 <rint+0x74>
 80325b6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80325ba:	f04f 35ff 	mov.w	r5, #4294967295
 80325be:	40d5      	lsrs	r5, r2
 80325c0:	4228      	tst	r0, r5
 80325c2:	d0bd      	beq.n	8032540 <rint+0x74>
 80325c4:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 80325c8:	ea4f 0155 	mov.w	r1, r5, lsr #1
 80325cc:	bf1f      	itttt	ne
 80325ce:	ea23 0101 	bicne.w	r1, r3, r1
 80325d2:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 80325d6:	fa43 f202 	asrne.w	r2, r3, r2
 80325da:	ea41 0302 	orrne.w	r3, r1, r2
 80325de:	e7cb      	b.n	8032578 <rint+0xac>
 80325e0:	080354d8 	.word	0x080354d8
 80325e4:	000fffff 	.word	0x000fffff

080325e8 <pow>:
 80325e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80325ea:	ed2d 8b02 	vpush	{d8}
 80325ee:	eeb0 8a40 	vmov.f32	s16, s0
 80325f2:	eef0 8a60 	vmov.f32	s17, s1
 80325f6:	ec55 4b11 	vmov	r4, r5, d1
 80325fa:	f000 f865 	bl	80326c8 <__ieee754_pow>
 80325fe:	4622      	mov	r2, r4
 8032600:	462b      	mov	r3, r5
 8032602:	4620      	mov	r0, r4
 8032604:	4629      	mov	r1, r5
 8032606:	ec57 6b10 	vmov	r6, r7, d0
 803260a:	f7ee faaf 	bl	8020b6c <__aeabi_dcmpun>
 803260e:	2800      	cmp	r0, #0
 8032610:	d13b      	bne.n	803268a <pow+0xa2>
 8032612:	ec51 0b18 	vmov	r0, r1, d8
 8032616:	2200      	movs	r2, #0
 8032618:	2300      	movs	r3, #0
 803261a:	f7ee fa75 	bl	8020b08 <__aeabi_dcmpeq>
 803261e:	b1b8      	cbz	r0, 8032650 <pow+0x68>
 8032620:	2200      	movs	r2, #0
 8032622:	2300      	movs	r3, #0
 8032624:	4620      	mov	r0, r4
 8032626:	4629      	mov	r1, r5
 8032628:	f7ee fa6e 	bl	8020b08 <__aeabi_dcmpeq>
 803262c:	2800      	cmp	r0, #0
 803262e:	d146      	bne.n	80326be <pow+0xd6>
 8032630:	ec45 4b10 	vmov	d0, r4, r5
 8032634:	f000 fe61 	bl	80332fa <finite>
 8032638:	b338      	cbz	r0, 803268a <pow+0xa2>
 803263a:	2200      	movs	r2, #0
 803263c:	2300      	movs	r3, #0
 803263e:	4620      	mov	r0, r4
 8032640:	4629      	mov	r1, r5
 8032642:	f7ee fa6b 	bl	8020b1c <__aeabi_dcmplt>
 8032646:	b300      	cbz	r0, 803268a <pow+0xa2>
 8032648:	f000 fee8 	bl	803341c <__errno>
 803264c:	2322      	movs	r3, #34	; 0x22
 803264e:	e01b      	b.n	8032688 <pow+0xa0>
 8032650:	ec47 6b10 	vmov	d0, r6, r7
 8032654:	f000 fe51 	bl	80332fa <finite>
 8032658:	b9e0      	cbnz	r0, 8032694 <pow+0xac>
 803265a:	eeb0 0a48 	vmov.f32	s0, s16
 803265e:	eef0 0a68 	vmov.f32	s1, s17
 8032662:	f000 fe4a 	bl	80332fa <finite>
 8032666:	b1a8      	cbz	r0, 8032694 <pow+0xac>
 8032668:	ec45 4b10 	vmov	d0, r4, r5
 803266c:	f000 fe45 	bl	80332fa <finite>
 8032670:	b180      	cbz	r0, 8032694 <pow+0xac>
 8032672:	4632      	mov	r2, r6
 8032674:	463b      	mov	r3, r7
 8032676:	4630      	mov	r0, r6
 8032678:	4639      	mov	r1, r7
 803267a:	f7ee fa77 	bl	8020b6c <__aeabi_dcmpun>
 803267e:	2800      	cmp	r0, #0
 8032680:	d0e2      	beq.n	8032648 <pow+0x60>
 8032682:	f000 fecb 	bl	803341c <__errno>
 8032686:	2321      	movs	r3, #33	; 0x21
 8032688:	6003      	str	r3, [r0, #0]
 803268a:	ecbd 8b02 	vpop	{d8}
 803268e:	ec47 6b10 	vmov	d0, r6, r7
 8032692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8032694:	2200      	movs	r2, #0
 8032696:	2300      	movs	r3, #0
 8032698:	4630      	mov	r0, r6
 803269a:	4639      	mov	r1, r7
 803269c:	f7ee fa34 	bl	8020b08 <__aeabi_dcmpeq>
 80326a0:	2800      	cmp	r0, #0
 80326a2:	d0f2      	beq.n	803268a <pow+0xa2>
 80326a4:	eeb0 0a48 	vmov.f32	s0, s16
 80326a8:	eef0 0a68 	vmov.f32	s1, s17
 80326ac:	f000 fe25 	bl	80332fa <finite>
 80326b0:	2800      	cmp	r0, #0
 80326b2:	d0ea      	beq.n	803268a <pow+0xa2>
 80326b4:	ec45 4b10 	vmov	d0, r4, r5
 80326b8:	f000 fe1f 	bl	80332fa <finite>
 80326bc:	e7c3      	b.n	8032646 <pow+0x5e>
 80326be:	4f01      	ldr	r7, [pc, #4]	; (80326c4 <pow+0xdc>)
 80326c0:	2600      	movs	r6, #0
 80326c2:	e7e2      	b.n	803268a <pow+0xa2>
 80326c4:	3ff00000 	.word	0x3ff00000

080326c8 <__ieee754_pow>:
 80326c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80326cc:	ed2d 8b06 	vpush	{d8-d10}
 80326d0:	b089      	sub	sp, #36	; 0x24
 80326d2:	ed8d 1b00 	vstr	d1, [sp]
 80326d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80326da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80326de:	ea58 0102 	orrs.w	r1, r8, r2
 80326e2:	ec57 6b10 	vmov	r6, r7, d0
 80326e6:	d115      	bne.n	8032714 <__ieee754_pow+0x4c>
 80326e8:	19b3      	adds	r3, r6, r6
 80326ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80326ee:	4152      	adcs	r2, r2
 80326f0:	4299      	cmp	r1, r3
 80326f2:	4b89      	ldr	r3, [pc, #548]	; (8032918 <__ieee754_pow+0x250>)
 80326f4:	4193      	sbcs	r3, r2
 80326f6:	f080 84d2 	bcs.w	803309e <__ieee754_pow+0x9d6>
 80326fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80326fe:	4630      	mov	r0, r6
 8032700:	4639      	mov	r1, r7
 8032702:	f7ed fde3 	bl	80202cc <__adddf3>
 8032706:	ec41 0b10 	vmov	d0, r0, r1
 803270a:	b009      	add	sp, #36	; 0x24
 803270c:	ecbd 8b06 	vpop	{d8-d10}
 8032710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032714:	4b81      	ldr	r3, [pc, #516]	; (803291c <__ieee754_pow+0x254>)
 8032716:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 803271a:	429c      	cmp	r4, r3
 803271c:	ee10 aa10 	vmov	sl, s0
 8032720:	463d      	mov	r5, r7
 8032722:	dc06      	bgt.n	8032732 <__ieee754_pow+0x6a>
 8032724:	d101      	bne.n	803272a <__ieee754_pow+0x62>
 8032726:	2e00      	cmp	r6, #0
 8032728:	d1e7      	bne.n	80326fa <__ieee754_pow+0x32>
 803272a:	4598      	cmp	r8, r3
 803272c:	dc01      	bgt.n	8032732 <__ieee754_pow+0x6a>
 803272e:	d10f      	bne.n	8032750 <__ieee754_pow+0x88>
 8032730:	b172      	cbz	r2, 8032750 <__ieee754_pow+0x88>
 8032732:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8032736:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 803273a:	ea55 050a 	orrs.w	r5, r5, sl
 803273e:	d1dc      	bne.n	80326fa <__ieee754_pow+0x32>
 8032740:	e9dd 3200 	ldrd	r3, r2, [sp]
 8032744:	18db      	adds	r3, r3, r3
 8032746:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 803274a:	4152      	adcs	r2, r2
 803274c:	429d      	cmp	r5, r3
 803274e:	e7d0      	b.n	80326f2 <__ieee754_pow+0x2a>
 8032750:	2d00      	cmp	r5, #0
 8032752:	da3b      	bge.n	80327cc <__ieee754_pow+0x104>
 8032754:	4b72      	ldr	r3, [pc, #456]	; (8032920 <__ieee754_pow+0x258>)
 8032756:	4598      	cmp	r8, r3
 8032758:	dc51      	bgt.n	80327fe <__ieee754_pow+0x136>
 803275a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 803275e:	4598      	cmp	r8, r3
 8032760:	f340 84ac 	ble.w	80330bc <__ieee754_pow+0x9f4>
 8032764:	ea4f 5328 	mov.w	r3, r8, asr #20
 8032768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 803276c:	2b14      	cmp	r3, #20
 803276e:	dd0f      	ble.n	8032790 <__ieee754_pow+0xc8>
 8032770:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8032774:	fa22 f103 	lsr.w	r1, r2, r3
 8032778:	fa01 f303 	lsl.w	r3, r1, r3
 803277c:	4293      	cmp	r3, r2
 803277e:	f040 849d 	bne.w	80330bc <__ieee754_pow+0x9f4>
 8032782:	f001 0101 	and.w	r1, r1, #1
 8032786:	f1c1 0302 	rsb	r3, r1, #2
 803278a:	9304      	str	r3, [sp, #16]
 803278c:	b182      	cbz	r2, 80327b0 <__ieee754_pow+0xe8>
 803278e:	e05f      	b.n	8032850 <__ieee754_pow+0x188>
 8032790:	2a00      	cmp	r2, #0
 8032792:	d15b      	bne.n	803284c <__ieee754_pow+0x184>
 8032794:	f1c3 0314 	rsb	r3, r3, #20
 8032798:	fa48 f103 	asr.w	r1, r8, r3
 803279c:	fa01 f303 	lsl.w	r3, r1, r3
 80327a0:	4543      	cmp	r3, r8
 80327a2:	f040 8488 	bne.w	80330b6 <__ieee754_pow+0x9ee>
 80327a6:	f001 0101 	and.w	r1, r1, #1
 80327aa:	f1c1 0302 	rsb	r3, r1, #2
 80327ae:	9304      	str	r3, [sp, #16]
 80327b0:	4b5c      	ldr	r3, [pc, #368]	; (8032924 <__ieee754_pow+0x25c>)
 80327b2:	4598      	cmp	r8, r3
 80327b4:	d132      	bne.n	803281c <__ieee754_pow+0x154>
 80327b6:	f1b9 0f00 	cmp.w	r9, #0
 80327ba:	f280 8478 	bge.w	80330ae <__ieee754_pow+0x9e6>
 80327be:	4959      	ldr	r1, [pc, #356]	; (8032924 <__ieee754_pow+0x25c>)
 80327c0:	4632      	mov	r2, r6
 80327c2:	463b      	mov	r3, r7
 80327c4:	2000      	movs	r0, #0
 80327c6:	f7ee f861 	bl	802088c <__aeabi_ddiv>
 80327ca:	e79c      	b.n	8032706 <__ieee754_pow+0x3e>
 80327cc:	2300      	movs	r3, #0
 80327ce:	9304      	str	r3, [sp, #16]
 80327d0:	2a00      	cmp	r2, #0
 80327d2:	d13d      	bne.n	8032850 <__ieee754_pow+0x188>
 80327d4:	4b51      	ldr	r3, [pc, #324]	; (803291c <__ieee754_pow+0x254>)
 80327d6:	4598      	cmp	r8, r3
 80327d8:	d1ea      	bne.n	80327b0 <__ieee754_pow+0xe8>
 80327da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80327de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80327e2:	ea53 030a 	orrs.w	r3, r3, sl
 80327e6:	f000 845a 	beq.w	803309e <__ieee754_pow+0x9d6>
 80327ea:	4b4f      	ldr	r3, [pc, #316]	; (8032928 <__ieee754_pow+0x260>)
 80327ec:	429c      	cmp	r4, r3
 80327ee:	dd08      	ble.n	8032802 <__ieee754_pow+0x13a>
 80327f0:	f1b9 0f00 	cmp.w	r9, #0
 80327f4:	f2c0 8457 	blt.w	80330a6 <__ieee754_pow+0x9de>
 80327f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80327fc:	e783      	b.n	8032706 <__ieee754_pow+0x3e>
 80327fe:	2302      	movs	r3, #2
 8032800:	e7e5      	b.n	80327ce <__ieee754_pow+0x106>
 8032802:	f1b9 0f00 	cmp.w	r9, #0
 8032806:	f04f 0000 	mov.w	r0, #0
 803280a:	f04f 0100 	mov.w	r1, #0
 803280e:	f6bf af7a 	bge.w	8032706 <__ieee754_pow+0x3e>
 8032812:	e9dd 0300 	ldrd	r0, r3, [sp]
 8032816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 803281a:	e774      	b.n	8032706 <__ieee754_pow+0x3e>
 803281c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8032820:	d106      	bne.n	8032830 <__ieee754_pow+0x168>
 8032822:	4632      	mov	r2, r6
 8032824:	463b      	mov	r3, r7
 8032826:	4630      	mov	r0, r6
 8032828:	4639      	mov	r1, r7
 803282a:	f7ed ff05 	bl	8020638 <__aeabi_dmul>
 803282e:	e76a      	b.n	8032706 <__ieee754_pow+0x3e>
 8032830:	4b3e      	ldr	r3, [pc, #248]	; (803292c <__ieee754_pow+0x264>)
 8032832:	4599      	cmp	r9, r3
 8032834:	d10c      	bne.n	8032850 <__ieee754_pow+0x188>
 8032836:	2d00      	cmp	r5, #0
 8032838:	db0a      	blt.n	8032850 <__ieee754_pow+0x188>
 803283a:	ec47 6b10 	vmov	d0, r6, r7
 803283e:	b009      	add	sp, #36	; 0x24
 8032840:	ecbd 8b06 	vpop	{d8-d10}
 8032844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032848:	f000 bc6c 	b.w	8033124 <__ieee754_sqrt>
 803284c:	2300      	movs	r3, #0
 803284e:	9304      	str	r3, [sp, #16]
 8032850:	ec47 6b10 	vmov	d0, r6, r7
 8032854:	f000 fd48 	bl	80332e8 <fabs>
 8032858:	ec51 0b10 	vmov	r0, r1, d0
 803285c:	f1ba 0f00 	cmp.w	sl, #0
 8032860:	d129      	bne.n	80328b6 <__ieee754_pow+0x1ee>
 8032862:	b124      	cbz	r4, 803286e <__ieee754_pow+0x1a6>
 8032864:	4b2f      	ldr	r3, [pc, #188]	; (8032924 <__ieee754_pow+0x25c>)
 8032866:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 803286a:	429a      	cmp	r2, r3
 803286c:	d123      	bne.n	80328b6 <__ieee754_pow+0x1ee>
 803286e:	f1b9 0f00 	cmp.w	r9, #0
 8032872:	da05      	bge.n	8032880 <__ieee754_pow+0x1b8>
 8032874:	4602      	mov	r2, r0
 8032876:	460b      	mov	r3, r1
 8032878:	2000      	movs	r0, #0
 803287a:	492a      	ldr	r1, [pc, #168]	; (8032924 <__ieee754_pow+0x25c>)
 803287c:	f7ee f806 	bl	802088c <__aeabi_ddiv>
 8032880:	2d00      	cmp	r5, #0
 8032882:	f6bf af40 	bge.w	8032706 <__ieee754_pow+0x3e>
 8032886:	9b04      	ldr	r3, [sp, #16]
 8032888:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 803288c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8032890:	4323      	orrs	r3, r4
 8032892:	d108      	bne.n	80328a6 <__ieee754_pow+0x1de>
 8032894:	4602      	mov	r2, r0
 8032896:	460b      	mov	r3, r1
 8032898:	4610      	mov	r0, r2
 803289a:	4619      	mov	r1, r3
 803289c:	f7ed fd14 	bl	80202c8 <__aeabi_dsub>
 80328a0:	4602      	mov	r2, r0
 80328a2:	460b      	mov	r3, r1
 80328a4:	e78f      	b.n	80327c6 <__ieee754_pow+0xfe>
 80328a6:	9b04      	ldr	r3, [sp, #16]
 80328a8:	2b01      	cmp	r3, #1
 80328aa:	f47f af2c 	bne.w	8032706 <__ieee754_pow+0x3e>
 80328ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80328b2:	4619      	mov	r1, r3
 80328b4:	e727      	b.n	8032706 <__ieee754_pow+0x3e>
 80328b6:	0feb      	lsrs	r3, r5, #31
 80328b8:	3b01      	subs	r3, #1
 80328ba:	9306      	str	r3, [sp, #24]
 80328bc:	9a06      	ldr	r2, [sp, #24]
 80328be:	9b04      	ldr	r3, [sp, #16]
 80328c0:	4313      	orrs	r3, r2
 80328c2:	d102      	bne.n	80328ca <__ieee754_pow+0x202>
 80328c4:	4632      	mov	r2, r6
 80328c6:	463b      	mov	r3, r7
 80328c8:	e7e6      	b.n	8032898 <__ieee754_pow+0x1d0>
 80328ca:	4b19      	ldr	r3, [pc, #100]	; (8032930 <__ieee754_pow+0x268>)
 80328cc:	4598      	cmp	r8, r3
 80328ce:	f340 80fb 	ble.w	8032ac8 <__ieee754_pow+0x400>
 80328d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80328d6:	4598      	cmp	r8, r3
 80328d8:	4b13      	ldr	r3, [pc, #76]	; (8032928 <__ieee754_pow+0x260>)
 80328da:	dd0c      	ble.n	80328f6 <__ieee754_pow+0x22e>
 80328dc:	429c      	cmp	r4, r3
 80328de:	dc0f      	bgt.n	8032900 <__ieee754_pow+0x238>
 80328e0:	f1b9 0f00 	cmp.w	r9, #0
 80328e4:	da0f      	bge.n	8032906 <__ieee754_pow+0x23e>
 80328e6:	2000      	movs	r0, #0
 80328e8:	b009      	add	sp, #36	; 0x24
 80328ea:	ecbd 8b06 	vpop	{d8-d10}
 80328ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80328f2:	f000 bcf0 	b.w	80332d6 <__math_oflow>
 80328f6:	429c      	cmp	r4, r3
 80328f8:	dbf2      	blt.n	80328e0 <__ieee754_pow+0x218>
 80328fa:	4b0a      	ldr	r3, [pc, #40]	; (8032924 <__ieee754_pow+0x25c>)
 80328fc:	429c      	cmp	r4, r3
 80328fe:	dd19      	ble.n	8032934 <__ieee754_pow+0x26c>
 8032900:	f1b9 0f00 	cmp.w	r9, #0
 8032904:	dcef      	bgt.n	80328e6 <__ieee754_pow+0x21e>
 8032906:	2000      	movs	r0, #0
 8032908:	b009      	add	sp, #36	; 0x24
 803290a:	ecbd 8b06 	vpop	{d8-d10}
 803290e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032912:	f000 bcd7 	b.w	80332c4 <__math_uflow>
 8032916:	bf00      	nop
 8032918:	fff00000 	.word	0xfff00000
 803291c:	7ff00000 	.word	0x7ff00000
 8032920:	433fffff 	.word	0x433fffff
 8032924:	3ff00000 	.word	0x3ff00000
 8032928:	3fefffff 	.word	0x3fefffff
 803292c:	3fe00000 	.word	0x3fe00000
 8032930:	41e00000 	.word	0x41e00000
 8032934:	4b60      	ldr	r3, [pc, #384]	; (8032ab8 <__ieee754_pow+0x3f0>)
 8032936:	2200      	movs	r2, #0
 8032938:	f7ed fcc6 	bl	80202c8 <__aeabi_dsub>
 803293c:	a354      	add	r3, pc, #336	; (adr r3, 8032a90 <__ieee754_pow+0x3c8>)
 803293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032942:	4604      	mov	r4, r0
 8032944:	460d      	mov	r5, r1
 8032946:	f7ed fe77 	bl	8020638 <__aeabi_dmul>
 803294a:	a353      	add	r3, pc, #332	; (adr r3, 8032a98 <__ieee754_pow+0x3d0>)
 803294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032950:	4606      	mov	r6, r0
 8032952:	460f      	mov	r7, r1
 8032954:	4620      	mov	r0, r4
 8032956:	4629      	mov	r1, r5
 8032958:	f7ed fe6e 	bl	8020638 <__aeabi_dmul>
 803295c:	4b57      	ldr	r3, [pc, #348]	; (8032abc <__ieee754_pow+0x3f4>)
 803295e:	4682      	mov	sl, r0
 8032960:	468b      	mov	fp, r1
 8032962:	2200      	movs	r2, #0
 8032964:	4620      	mov	r0, r4
 8032966:	4629      	mov	r1, r5
 8032968:	f7ed fe66 	bl	8020638 <__aeabi_dmul>
 803296c:	4602      	mov	r2, r0
 803296e:	460b      	mov	r3, r1
 8032970:	a14b      	add	r1, pc, #300	; (adr r1, 8032aa0 <__ieee754_pow+0x3d8>)
 8032972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8032976:	f7ed fca7 	bl	80202c8 <__aeabi_dsub>
 803297a:	4622      	mov	r2, r4
 803297c:	462b      	mov	r3, r5
 803297e:	f7ed fe5b 	bl	8020638 <__aeabi_dmul>
 8032982:	4602      	mov	r2, r0
 8032984:	460b      	mov	r3, r1
 8032986:	2000      	movs	r0, #0
 8032988:	494d      	ldr	r1, [pc, #308]	; (8032ac0 <__ieee754_pow+0x3f8>)
 803298a:	f7ed fc9d 	bl	80202c8 <__aeabi_dsub>
 803298e:	4622      	mov	r2, r4
 8032990:	4680      	mov	r8, r0
 8032992:	4689      	mov	r9, r1
 8032994:	462b      	mov	r3, r5
 8032996:	4620      	mov	r0, r4
 8032998:	4629      	mov	r1, r5
 803299a:	f7ed fe4d 	bl	8020638 <__aeabi_dmul>
 803299e:	4602      	mov	r2, r0
 80329a0:	460b      	mov	r3, r1
 80329a2:	4640      	mov	r0, r8
 80329a4:	4649      	mov	r1, r9
 80329a6:	f7ed fe47 	bl	8020638 <__aeabi_dmul>
 80329aa:	a33f      	add	r3, pc, #252	; (adr r3, 8032aa8 <__ieee754_pow+0x3e0>)
 80329ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80329b0:	f7ed fe42 	bl	8020638 <__aeabi_dmul>
 80329b4:	4602      	mov	r2, r0
 80329b6:	460b      	mov	r3, r1
 80329b8:	4650      	mov	r0, sl
 80329ba:	4659      	mov	r1, fp
 80329bc:	f7ed fc84 	bl	80202c8 <__aeabi_dsub>
 80329c0:	4602      	mov	r2, r0
 80329c2:	460b      	mov	r3, r1
 80329c4:	4680      	mov	r8, r0
 80329c6:	4689      	mov	r9, r1
 80329c8:	4630      	mov	r0, r6
 80329ca:	4639      	mov	r1, r7
 80329cc:	f7ed fc7e 	bl	80202cc <__adddf3>
 80329d0:	2000      	movs	r0, #0
 80329d2:	4632      	mov	r2, r6
 80329d4:	463b      	mov	r3, r7
 80329d6:	4604      	mov	r4, r0
 80329d8:	460d      	mov	r5, r1
 80329da:	f7ed fc75 	bl	80202c8 <__aeabi_dsub>
 80329de:	4602      	mov	r2, r0
 80329e0:	460b      	mov	r3, r1
 80329e2:	4640      	mov	r0, r8
 80329e4:	4649      	mov	r1, r9
 80329e6:	f7ed fc6f 	bl	80202c8 <__aeabi_dsub>
 80329ea:	9b04      	ldr	r3, [sp, #16]
 80329ec:	9a06      	ldr	r2, [sp, #24]
 80329ee:	3b01      	subs	r3, #1
 80329f0:	4313      	orrs	r3, r2
 80329f2:	4682      	mov	sl, r0
 80329f4:	468b      	mov	fp, r1
 80329f6:	f040 81e7 	bne.w	8032dc8 <__ieee754_pow+0x700>
 80329fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8032ab0 <__ieee754_pow+0x3e8>
 80329fe:	eeb0 8a47 	vmov.f32	s16, s14
 8032a02:	eef0 8a67 	vmov.f32	s17, s15
 8032a06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8032a0a:	2600      	movs	r6, #0
 8032a0c:	4632      	mov	r2, r6
 8032a0e:	463b      	mov	r3, r7
 8032a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8032a14:	f7ed fc58 	bl	80202c8 <__aeabi_dsub>
 8032a18:	4622      	mov	r2, r4
 8032a1a:	462b      	mov	r3, r5
 8032a1c:	f7ed fe0c 	bl	8020638 <__aeabi_dmul>
 8032a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8032a24:	4680      	mov	r8, r0
 8032a26:	4689      	mov	r9, r1
 8032a28:	4650      	mov	r0, sl
 8032a2a:	4659      	mov	r1, fp
 8032a2c:	f7ed fe04 	bl	8020638 <__aeabi_dmul>
 8032a30:	4602      	mov	r2, r0
 8032a32:	460b      	mov	r3, r1
 8032a34:	4640      	mov	r0, r8
 8032a36:	4649      	mov	r1, r9
 8032a38:	f7ed fc48 	bl	80202cc <__adddf3>
 8032a3c:	4632      	mov	r2, r6
 8032a3e:	463b      	mov	r3, r7
 8032a40:	4680      	mov	r8, r0
 8032a42:	4689      	mov	r9, r1
 8032a44:	4620      	mov	r0, r4
 8032a46:	4629      	mov	r1, r5
 8032a48:	f7ed fdf6 	bl	8020638 <__aeabi_dmul>
 8032a4c:	460b      	mov	r3, r1
 8032a4e:	4604      	mov	r4, r0
 8032a50:	460d      	mov	r5, r1
 8032a52:	4602      	mov	r2, r0
 8032a54:	4649      	mov	r1, r9
 8032a56:	4640      	mov	r0, r8
 8032a58:	f7ed fc38 	bl	80202cc <__adddf3>
 8032a5c:	4b19      	ldr	r3, [pc, #100]	; (8032ac4 <__ieee754_pow+0x3fc>)
 8032a5e:	4299      	cmp	r1, r3
 8032a60:	ec45 4b19 	vmov	d9, r4, r5
 8032a64:	4606      	mov	r6, r0
 8032a66:	460f      	mov	r7, r1
 8032a68:	468b      	mov	fp, r1
 8032a6a:	f340 82f1 	ble.w	8033050 <__ieee754_pow+0x988>
 8032a6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8032a72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8032a76:	4303      	orrs	r3, r0
 8032a78:	f000 81e4 	beq.w	8032e44 <__ieee754_pow+0x77c>
 8032a7c:	ec51 0b18 	vmov	r0, r1, d8
 8032a80:	2200      	movs	r2, #0
 8032a82:	2300      	movs	r3, #0
 8032a84:	f7ee f84a 	bl	8020b1c <__aeabi_dcmplt>
 8032a88:	3800      	subs	r0, #0
 8032a8a:	bf18      	it	ne
 8032a8c:	2001      	movne	r0, #1
 8032a8e:	e72b      	b.n	80328e8 <__ieee754_pow+0x220>
 8032a90:	60000000 	.word	0x60000000
 8032a94:	3ff71547 	.word	0x3ff71547
 8032a98:	f85ddf44 	.word	0xf85ddf44
 8032a9c:	3e54ae0b 	.word	0x3e54ae0b
 8032aa0:	55555555 	.word	0x55555555
 8032aa4:	3fd55555 	.word	0x3fd55555
 8032aa8:	652b82fe 	.word	0x652b82fe
 8032aac:	3ff71547 	.word	0x3ff71547
 8032ab0:	00000000 	.word	0x00000000
 8032ab4:	bff00000 	.word	0xbff00000
 8032ab8:	3ff00000 	.word	0x3ff00000
 8032abc:	3fd00000 	.word	0x3fd00000
 8032ac0:	3fe00000 	.word	0x3fe00000
 8032ac4:	408fffff 	.word	0x408fffff
 8032ac8:	4bd5      	ldr	r3, [pc, #852]	; (8032e20 <__ieee754_pow+0x758>)
 8032aca:	402b      	ands	r3, r5
 8032acc:	2200      	movs	r2, #0
 8032ace:	b92b      	cbnz	r3, 8032adc <__ieee754_pow+0x414>
 8032ad0:	4bd4      	ldr	r3, [pc, #848]	; (8032e24 <__ieee754_pow+0x75c>)
 8032ad2:	f7ed fdb1 	bl	8020638 <__aeabi_dmul>
 8032ad6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8032ada:	460c      	mov	r4, r1
 8032adc:	1523      	asrs	r3, r4, #20
 8032ade:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8032ae2:	4413      	add	r3, r2
 8032ae4:	9305      	str	r3, [sp, #20]
 8032ae6:	4bd0      	ldr	r3, [pc, #832]	; (8032e28 <__ieee754_pow+0x760>)
 8032ae8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8032aec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8032af0:	429c      	cmp	r4, r3
 8032af2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8032af6:	dd08      	ble.n	8032b0a <__ieee754_pow+0x442>
 8032af8:	4bcc      	ldr	r3, [pc, #816]	; (8032e2c <__ieee754_pow+0x764>)
 8032afa:	429c      	cmp	r4, r3
 8032afc:	f340 8162 	ble.w	8032dc4 <__ieee754_pow+0x6fc>
 8032b00:	9b05      	ldr	r3, [sp, #20]
 8032b02:	3301      	adds	r3, #1
 8032b04:	9305      	str	r3, [sp, #20]
 8032b06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8032b0a:	2400      	movs	r4, #0
 8032b0c:	00e3      	lsls	r3, r4, #3
 8032b0e:	9307      	str	r3, [sp, #28]
 8032b10:	4bc7      	ldr	r3, [pc, #796]	; (8032e30 <__ieee754_pow+0x768>)
 8032b12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8032b16:	ed93 7b00 	vldr	d7, [r3]
 8032b1a:	4629      	mov	r1, r5
 8032b1c:	ec53 2b17 	vmov	r2, r3, d7
 8032b20:	eeb0 9a47 	vmov.f32	s18, s14
 8032b24:	eef0 9a67 	vmov.f32	s19, s15
 8032b28:	4682      	mov	sl, r0
 8032b2a:	f7ed fbcd 	bl	80202c8 <__aeabi_dsub>
 8032b2e:	4652      	mov	r2, sl
 8032b30:	4606      	mov	r6, r0
 8032b32:	460f      	mov	r7, r1
 8032b34:	462b      	mov	r3, r5
 8032b36:	ec51 0b19 	vmov	r0, r1, d9
 8032b3a:	f7ed fbc7 	bl	80202cc <__adddf3>
 8032b3e:	4602      	mov	r2, r0
 8032b40:	460b      	mov	r3, r1
 8032b42:	2000      	movs	r0, #0
 8032b44:	49bb      	ldr	r1, [pc, #748]	; (8032e34 <__ieee754_pow+0x76c>)
 8032b46:	f7ed fea1 	bl	802088c <__aeabi_ddiv>
 8032b4a:	ec41 0b1a 	vmov	d10, r0, r1
 8032b4e:	4602      	mov	r2, r0
 8032b50:	460b      	mov	r3, r1
 8032b52:	4630      	mov	r0, r6
 8032b54:	4639      	mov	r1, r7
 8032b56:	f7ed fd6f 	bl	8020638 <__aeabi_dmul>
 8032b5a:	2300      	movs	r3, #0
 8032b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8032b60:	9302      	str	r3, [sp, #8]
 8032b62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8032b66:	46ab      	mov	fp, r5
 8032b68:	106d      	asrs	r5, r5, #1
 8032b6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8032b6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8032b72:	ec41 0b18 	vmov	d8, r0, r1
 8032b76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8032b7a:	2200      	movs	r2, #0
 8032b7c:	4640      	mov	r0, r8
 8032b7e:	4649      	mov	r1, r9
 8032b80:	4614      	mov	r4, r2
 8032b82:	461d      	mov	r5, r3
 8032b84:	f7ed fd58 	bl	8020638 <__aeabi_dmul>
 8032b88:	4602      	mov	r2, r0
 8032b8a:	460b      	mov	r3, r1
 8032b8c:	4630      	mov	r0, r6
 8032b8e:	4639      	mov	r1, r7
 8032b90:	f7ed fb9a 	bl	80202c8 <__aeabi_dsub>
 8032b94:	ec53 2b19 	vmov	r2, r3, d9
 8032b98:	4606      	mov	r6, r0
 8032b9a:	460f      	mov	r7, r1
 8032b9c:	4620      	mov	r0, r4
 8032b9e:	4629      	mov	r1, r5
 8032ba0:	f7ed fb92 	bl	80202c8 <__aeabi_dsub>
 8032ba4:	4602      	mov	r2, r0
 8032ba6:	460b      	mov	r3, r1
 8032ba8:	4650      	mov	r0, sl
 8032baa:	4659      	mov	r1, fp
 8032bac:	f7ed fb8c 	bl	80202c8 <__aeabi_dsub>
 8032bb0:	4642      	mov	r2, r8
 8032bb2:	464b      	mov	r3, r9
 8032bb4:	f7ed fd40 	bl	8020638 <__aeabi_dmul>
 8032bb8:	4602      	mov	r2, r0
 8032bba:	460b      	mov	r3, r1
 8032bbc:	4630      	mov	r0, r6
 8032bbe:	4639      	mov	r1, r7
 8032bc0:	f7ed fb82 	bl	80202c8 <__aeabi_dsub>
 8032bc4:	ec53 2b1a 	vmov	r2, r3, d10
 8032bc8:	f7ed fd36 	bl	8020638 <__aeabi_dmul>
 8032bcc:	ec53 2b18 	vmov	r2, r3, d8
 8032bd0:	ec41 0b19 	vmov	d9, r0, r1
 8032bd4:	ec51 0b18 	vmov	r0, r1, d8
 8032bd8:	f7ed fd2e 	bl	8020638 <__aeabi_dmul>
 8032bdc:	a37c      	add	r3, pc, #496	; (adr r3, 8032dd0 <__ieee754_pow+0x708>)
 8032bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032be2:	4604      	mov	r4, r0
 8032be4:	460d      	mov	r5, r1
 8032be6:	f7ed fd27 	bl	8020638 <__aeabi_dmul>
 8032bea:	a37b      	add	r3, pc, #492	; (adr r3, 8032dd8 <__ieee754_pow+0x710>)
 8032bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032bf0:	f7ed fb6c 	bl	80202cc <__adddf3>
 8032bf4:	4622      	mov	r2, r4
 8032bf6:	462b      	mov	r3, r5
 8032bf8:	f7ed fd1e 	bl	8020638 <__aeabi_dmul>
 8032bfc:	a378      	add	r3, pc, #480	; (adr r3, 8032de0 <__ieee754_pow+0x718>)
 8032bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032c02:	f7ed fb63 	bl	80202cc <__adddf3>
 8032c06:	4622      	mov	r2, r4
 8032c08:	462b      	mov	r3, r5
 8032c0a:	f7ed fd15 	bl	8020638 <__aeabi_dmul>
 8032c0e:	a376      	add	r3, pc, #472	; (adr r3, 8032de8 <__ieee754_pow+0x720>)
 8032c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032c14:	f7ed fb5a 	bl	80202cc <__adddf3>
 8032c18:	4622      	mov	r2, r4
 8032c1a:	462b      	mov	r3, r5
 8032c1c:	f7ed fd0c 	bl	8020638 <__aeabi_dmul>
 8032c20:	a373      	add	r3, pc, #460	; (adr r3, 8032df0 <__ieee754_pow+0x728>)
 8032c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032c26:	f7ed fb51 	bl	80202cc <__adddf3>
 8032c2a:	4622      	mov	r2, r4
 8032c2c:	462b      	mov	r3, r5
 8032c2e:	f7ed fd03 	bl	8020638 <__aeabi_dmul>
 8032c32:	a371      	add	r3, pc, #452	; (adr r3, 8032df8 <__ieee754_pow+0x730>)
 8032c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032c38:	f7ed fb48 	bl	80202cc <__adddf3>
 8032c3c:	4622      	mov	r2, r4
 8032c3e:	4606      	mov	r6, r0
 8032c40:	460f      	mov	r7, r1
 8032c42:	462b      	mov	r3, r5
 8032c44:	4620      	mov	r0, r4
 8032c46:	4629      	mov	r1, r5
 8032c48:	f7ed fcf6 	bl	8020638 <__aeabi_dmul>
 8032c4c:	4602      	mov	r2, r0
 8032c4e:	460b      	mov	r3, r1
 8032c50:	4630      	mov	r0, r6
 8032c52:	4639      	mov	r1, r7
 8032c54:	f7ed fcf0 	bl	8020638 <__aeabi_dmul>
 8032c58:	4642      	mov	r2, r8
 8032c5a:	4604      	mov	r4, r0
 8032c5c:	460d      	mov	r5, r1
 8032c5e:	464b      	mov	r3, r9
 8032c60:	ec51 0b18 	vmov	r0, r1, d8
 8032c64:	f7ed fb32 	bl	80202cc <__adddf3>
 8032c68:	ec53 2b19 	vmov	r2, r3, d9
 8032c6c:	f7ed fce4 	bl	8020638 <__aeabi_dmul>
 8032c70:	4622      	mov	r2, r4
 8032c72:	462b      	mov	r3, r5
 8032c74:	f7ed fb2a 	bl	80202cc <__adddf3>
 8032c78:	4642      	mov	r2, r8
 8032c7a:	4682      	mov	sl, r0
 8032c7c:	468b      	mov	fp, r1
 8032c7e:	464b      	mov	r3, r9
 8032c80:	4640      	mov	r0, r8
 8032c82:	4649      	mov	r1, r9
 8032c84:	f7ed fcd8 	bl	8020638 <__aeabi_dmul>
 8032c88:	4b6b      	ldr	r3, [pc, #428]	; (8032e38 <__ieee754_pow+0x770>)
 8032c8a:	2200      	movs	r2, #0
 8032c8c:	4606      	mov	r6, r0
 8032c8e:	460f      	mov	r7, r1
 8032c90:	f7ed fb1c 	bl	80202cc <__adddf3>
 8032c94:	4652      	mov	r2, sl
 8032c96:	465b      	mov	r3, fp
 8032c98:	f7ed fb18 	bl	80202cc <__adddf3>
 8032c9c:	2000      	movs	r0, #0
 8032c9e:	4604      	mov	r4, r0
 8032ca0:	460d      	mov	r5, r1
 8032ca2:	4602      	mov	r2, r0
 8032ca4:	460b      	mov	r3, r1
 8032ca6:	4640      	mov	r0, r8
 8032ca8:	4649      	mov	r1, r9
 8032caa:	f7ed fcc5 	bl	8020638 <__aeabi_dmul>
 8032cae:	4b62      	ldr	r3, [pc, #392]	; (8032e38 <__ieee754_pow+0x770>)
 8032cb0:	4680      	mov	r8, r0
 8032cb2:	4689      	mov	r9, r1
 8032cb4:	2200      	movs	r2, #0
 8032cb6:	4620      	mov	r0, r4
 8032cb8:	4629      	mov	r1, r5
 8032cba:	f7ed fb05 	bl	80202c8 <__aeabi_dsub>
 8032cbe:	4632      	mov	r2, r6
 8032cc0:	463b      	mov	r3, r7
 8032cc2:	f7ed fb01 	bl	80202c8 <__aeabi_dsub>
 8032cc6:	4602      	mov	r2, r0
 8032cc8:	460b      	mov	r3, r1
 8032cca:	4650      	mov	r0, sl
 8032ccc:	4659      	mov	r1, fp
 8032cce:	f7ed fafb 	bl	80202c8 <__aeabi_dsub>
 8032cd2:	ec53 2b18 	vmov	r2, r3, d8
 8032cd6:	f7ed fcaf 	bl	8020638 <__aeabi_dmul>
 8032cda:	4622      	mov	r2, r4
 8032cdc:	4606      	mov	r6, r0
 8032cde:	460f      	mov	r7, r1
 8032ce0:	462b      	mov	r3, r5
 8032ce2:	ec51 0b19 	vmov	r0, r1, d9
 8032ce6:	f7ed fca7 	bl	8020638 <__aeabi_dmul>
 8032cea:	4602      	mov	r2, r0
 8032cec:	460b      	mov	r3, r1
 8032cee:	4630      	mov	r0, r6
 8032cf0:	4639      	mov	r1, r7
 8032cf2:	f7ed faeb 	bl	80202cc <__adddf3>
 8032cf6:	4606      	mov	r6, r0
 8032cf8:	460f      	mov	r7, r1
 8032cfa:	4602      	mov	r2, r0
 8032cfc:	460b      	mov	r3, r1
 8032cfe:	4640      	mov	r0, r8
 8032d00:	4649      	mov	r1, r9
 8032d02:	f7ed fae3 	bl	80202cc <__adddf3>
 8032d06:	a33e      	add	r3, pc, #248	; (adr r3, 8032e00 <__ieee754_pow+0x738>)
 8032d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032d0c:	2000      	movs	r0, #0
 8032d0e:	4604      	mov	r4, r0
 8032d10:	460d      	mov	r5, r1
 8032d12:	f7ed fc91 	bl	8020638 <__aeabi_dmul>
 8032d16:	4642      	mov	r2, r8
 8032d18:	ec41 0b18 	vmov	d8, r0, r1
 8032d1c:	464b      	mov	r3, r9
 8032d1e:	4620      	mov	r0, r4
 8032d20:	4629      	mov	r1, r5
 8032d22:	f7ed fad1 	bl	80202c8 <__aeabi_dsub>
 8032d26:	4602      	mov	r2, r0
 8032d28:	460b      	mov	r3, r1
 8032d2a:	4630      	mov	r0, r6
 8032d2c:	4639      	mov	r1, r7
 8032d2e:	f7ed facb 	bl	80202c8 <__aeabi_dsub>
 8032d32:	a335      	add	r3, pc, #212	; (adr r3, 8032e08 <__ieee754_pow+0x740>)
 8032d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032d38:	f7ed fc7e 	bl	8020638 <__aeabi_dmul>
 8032d3c:	a334      	add	r3, pc, #208	; (adr r3, 8032e10 <__ieee754_pow+0x748>)
 8032d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032d42:	4606      	mov	r6, r0
 8032d44:	460f      	mov	r7, r1
 8032d46:	4620      	mov	r0, r4
 8032d48:	4629      	mov	r1, r5
 8032d4a:	f7ed fc75 	bl	8020638 <__aeabi_dmul>
 8032d4e:	4602      	mov	r2, r0
 8032d50:	460b      	mov	r3, r1
 8032d52:	4630      	mov	r0, r6
 8032d54:	4639      	mov	r1, r7
 8032d56:	f7ed fab9 	bl	80202cc <__adddf3>
 8032d5a:	9a07      	ldr	r2, [sp, #28]
 8032d5c:	4b37      	ldr	r3, [pc, #220]	; (8032e3c <__ieee754_pow+0x774>)
 8032d5e:	4413      	add	r3, r2
 8032d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032d64:	f7ed fab2 	bl	80202cc <__adddf3>
 8032d68:	4682      	mov	sl, r0
 8032d6a:	9805      	ldr	r0, [sp, #20]
 8032d6c:	468b      	mov	fp, r1
 8032d6e:	f7ed fbf9 	bl	8020564 <__aeabi_i2d>
 8032d72:	9a07      	ldr	r2, [sp, #28]
 8032d74:	4b32      	ldr	r3, [pc, #200]	; (8032e40 <__ieee754_pow+0x778>)
 8032d76:	4413      	add	r3, r2
 8032d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8032d7c:	4606      	mov	r6, r0
 8032d7e:	460f      	mov	r7, r1
 8032d80:	4652      	mov	r2, sl
 8032d82:	465b      	mov	r3, fp
 8032d84:	ec51 0b18 	vmov	r0, r1, d8
 8032d88:	f7ed faa0 	bl	80202cc <__adddf3>
 8032d8c:	4642      	mov	r2, r8
 8032d8e:	464b      	mov	r3, r9
 8032d90:	f7ed fa9c 	bl	80202cc <__adddf3>
 8032d94:	4632      	mov	r2, r6
 8032d96:	463b      	mov	r3, r7
 8032d98:	f7ed fa98 	bl	80202cc <__adddf3>
 8032d9c:	2000      	movs	r0, #0
 8032d9e:	4632      	mov	r2, r6
 8032da0:	463b      	mov	r3, r7
 8032da2:	4604      	mov	r4, r0
 8032da4:	460d      	mov	r5, r1
 8032da6:	f7ed fa8f 	bl	80202c8 <__aeabi_dsub>
 8032daa:	4642      	mov	r2, r8
 8032dac:	464b      	mov	r3, r9
 8032dae:	f7ed fa8b 	bl	80202c8 <__aeabi_dsub>
 8032db2:	ec53 2b18 	vmov	r2, r3, d8
 8032db6:	f7ed fa87 	bl	80202c8 <__aeabi_dsub>
 8032dba:	4602      	mov	r2, r0
 8032dbc:	460b      	mov	r3, r1
 8032dbe:	4650      	mov	r0, sl
 8032dc0:	4659      	mov	r1, fp
 8032dc2:	e610      	b.n	80329e6 <__ieee754_pow+0x31e>
 8032dc4:	2401      	movs	r4, #1
 8032dc6:	e6a1      	b.n	8032b0c <__ieee754_pow+0x444>
 8032dc8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8032e18 <__ieee754_pow+0x750>
 8032dcc:	e617      	b.n	80329fe <__ieee754_pow+0x336>
 8032dce:	bf00      	nop
 8032dd0:	4a454eef 	.word	0x4a454eef
 8032dd4:	3fca7e28 	.word	0x3fca7e28
 8032dd8:	93c9db65 	.word	0x93c9db65
 8032ddc:	3fcd864a 	.word	0x3fcd864a
 8032de0:	a91d4101 	.word	0xa91d4101
 8032de4:	3fd17460 	.word	0x3fd17460
 8032de8:	518f264d 	.word	0x518f264d
 8032dec:	3fd55555 	.word	0x3fd55555
 8032df0:	db6fabff 	.word	0xdb6fabff
 8032df4:	3fdb6db6 	.word	0x3fdb6db6
 8032df8:	33333303 	.word	0x33333303
 8032dfc:	3fe33333 	.word	0x3fe33333
 8032e00:	e0000000 	.word	0xe0000000
 8032e04:	3feec709 	.word	0x3feec709
 8032e08:	dc3a03fd 	.word	0xdc3a03fd
 8032e0c:	3feec709 	.word	0x3feec709
 8032e10:	145b01f5 	.word	0x145b01f5
 8032e14:	be3e2fe0 	.word	0xbe3e2fe0
 8032e18:	00000000 	.word	0x00000000
 8032e1c:	3ff00000 	.word	0x3ff00000
 8032e20:	7ff00000 	.word	0x7ff00000
 8032e24:	43400000 	.word	0x43400000
 8032e28:	0003988e 	.word	0x0003988e
 8032e2c:	000bb679 	.word	0x000bb679
 8032e30:	080354e8 	.word	0x080354e8
 8032e34:	3ff00000 	.word	0x3ff00000
 8032e38:	40080000 	.word	0x40080000
 8032e3c:	08035508 	.word	0x08035508
 8032e40:	080354f8 	.word	0x080354f8
 8032e44:	a3b5      	add	r3, pc, #724	; (adr r3, 803311c <__ieee754_pow+0xa54>)
 8032e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032e4a:	4640      	mov	r0, r8
 8032e4c:	4649      	mov	r1, r9
 8032e4e:	f7ed fa3d 	bl	80202cc <__adddf3>
 8032e52:	4622      	mov	r2, r4
 8032e54:	ec41 0b1a 	vmov	d10, r0, r1
 8032e58:	462b      	mov	r3, r5
 8032e5a:	4630      	mov	r0, r6
 8032e5c:	4639      	mov	r1, r7
 8032e5e:	f7ed fa33 	bl	80202c8 <__aeabi_dsub>
 8032e62:	4602      	mov	r2, r0
 8032e64:	460b      	mov	r3, r1
 8032e66:	ec51 0b1a 	vmov	r0, r1, d10
 8032e6a:	f7ed fe75 	bl	8020b58 <__aeabi_dcmpgt>
 8032e6e:	2800      	cmp	r0, #0
 8032e70:	f47f ae04 	bne.w	8032a7c <__ieee754_pow+0x3b4>
 8032e74:	4aa4      	ldr	r2, [pc, #656]	; (8033108 <__ieee754_pow+0xa40>)
 8032e76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8032e7a:	4293      	cmp	r3, r2
 8032e7c:	f340 8108 	ble.w	8033090 <__ieee754_pow+0x9c8>
 8032e80:	151b      	asrs	r3, r3, #20
 8032e82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8032e86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8032e8a:	fa4a f303 	asr.w	r3, sl, r3
 8032e8e:	445b      	add	r3, fp
 8032e90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8032e94:	4e9d      	ldr	r6, [pc, #628]	; (803310c <__ieee754_pow+0xa44>)
 8032e96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8032e9a:	4116      	asrs	r6, r2
 8032e9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8032ea0:	2000      	movs	r0, #0
 8032ea2:	ea23 0106 	bic.w	r1, r3, r6
 8032ea6:	f1c2 0214 	rsb	r2, r2, #20
 8032eaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8032eae:	fa4a fa02 	asr.w	sl, sl, r2
 8032eb2:	f1bb 0f00 	cmp.w	fp, #0
 8032eb6:	4602      	mov	r2, r0
 8032eb8:	460b      	mov	r3, r1
 8032eba:	4620      	mov	r0, r4
 8032ebc:	4629      	mov	r1, r5
 8032ebe:	bfb8      	it	lt
 8032ec0:	f1ca 0a00 	rsblt	sl, sl, #0
 8032ec4:	f7ed fa00 	bl	80202c8 <__aeabi_dsub>
 8032ec8:	ec41 0b19 	vmov	d9, r0, r1
 8032ecc:	4642      	mov	r2, r8
 8032ece:	464b      	mov	r3, r9
 8032ed0:	ec51 0b19 	vmov	r0, r1, d9
 8032ed4:	f7ed f9fa 	bl	80202cc <__adddf3>
 8032ed8:	a37b      	add	r3, pc, #492	; (adr r3, 80330c8 <__ieee754_pow+0xa00>)
 8032eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032ede:	2000      	movs	r0, #0
 8032ee0:	4604      	mov	r4, r0
 8032ee2:	460d      	mov	r5, r1
 8032ee4:	f7ed fba8 	bl	8020638 <__aeabi_dmul>
 8032ee8:	ec53 2b19 	vmov	r2, r3, d9
 8032eec:	4606      	mov	r6, r0
 8032eee:	460f      	mov	r7, r1
 8032ef0:	4620      	mov	r0, r4
 8032ef2:	4629      	mov	r1, r5
 8032ef4:	f7ed f9e8 	bl	80202c8 <__aeabi_dsub>
 8032ef8:	4602      	mov	r2, r0
 8032efa:	460b      	mov	r3, r1
 8032efc:	4640      	mov	r0, r8
 8032efe:	4649      	mov	r1, r9
 8032f00:	f7ed f9e2 	bl	80202c8 <__aeabi_dsub>
 8032f04:	a372      	add	r3, pc, #456	; (adr r3, 80330d0 <__ieee754_pow+0xa08>)
 8032f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f0a:	f7ed fb95 	bl	8020638 <__aeabi_dmul>
 8032f0e:	a372      	add	r3, pc, #456	; (adr r3, 80330d8 <__ieee754_pow+0xa10>)
 8032f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f14:	4680      	mov	r8, r0
 8032f16:	4689      	mov	r9, r1
 8032f18:	4620      	mov	r0, r4
 8032f1a:	4629      	mov	r1, r5
 8032f1c:	f7ed fb8c 	bl	8020638 <__aeabi_dmul>
 8032f20:	4602      	mov	r2, r0
 8032f22:	460b      	mov	r3, r1
 8032f24:	4640      	mov	r0, r8
 8032f26:	4649      	mov	r1, r9
 8032f28:	f7ed f9d0 	bl	80202cc <__adddf3>
 8032f2c:	4604      	mov	r4, r0
 8032f2e:	460d      	mov	r5, r1
 8032f30:	4602      	mov	r2, r0
 8032f32:	460b      	mov	r3, r1
 8032f34:	4630      	mov	r0, r6
 8032f36:	4639      	mov	r1, r7
 8032f38:	f7ed f9c8 	bl	80202cc <__adddf3>
 8032f3c:	4632      	mov	r2, r6
 8032f3e:	463b      	mov	r3, r7
 8032f40:	4680      	mov	r8, r0
 8032f42:	4689      	mov	r9, r1
 8032f44:	f7ed f9c0 	bl	80202c8 <__aeabi_dsub>
 8032f48:	4602      	mov	r2, r0
 8032f4a:	460b      	mov	r3, r1
 8032f4c:	4620      	mov	r0, r4
 8032f4e:	4629      	mov	r1, r5
 8032f50:	f7ed f9ba 	bl	80202c8 <__aeabi_dsub>
 8032f54:	4642      	mov	r2, r8
 8032f56:	4606      	mov	r6, r0
 8032f58:	460f      	mov	r7, r1
 8032f5a:	464b      	mov	r3, r9
 8032f5c:	4640      	mov	r0, r8
 8032f5e:	4649      	mov	r1, r9
 8032f60:	f7ed fb6a 	bl	8020638 <__aeabi_dmul>
 8032f64:	a35e      	add	r3, pc, #376	; (adr r3, 80330e0 <__ieee754_pow+0xa18>)
 8032f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f6a:	4604      	mov	r4, r0
 8032f6c:	460d      	mov	r5, r1
 8032f6e:	f7ed fb63 	bl	8020638 <__aeabi_dmul>
 8032f72:	a35d      	add	r3, pc, #372	; (adr r3, 80330e8 <__ieee754_pow+0xa20>)
 8032f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f78:	f7ed f9a6 	bl	80202c8 <__aeabi_dsub>
 8032f7c:	4622      	mov	r2, r4
 8032f7e:	462b      	mov	r3, r5
 8032f80:	f7ed fb5a 	bl	8020638 <__aeabi_dmul>
 8032f84:	a35a      	add	r3, pc, #360	; (adr r3, 80330f0 <__ieee754_pow+0xa28>)
 8032f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f8a:	f7ed f99f 	bl	80202cc <__adddf3>
 8032f8e:	4622      	mov	r2, r4
 8032f90:	462b      	mov	r3, r5
 8032f92:	f7ed fb51 	bl	8020638 <__aeabi_dmul>
 8032f96:	a358      	add	r3, pc, #352	; (adr r3, 80330f8 <__ieee754_pow+0xa30>)
 8032f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032f9c:	f7ed f994 	bl	80202c8 <__aeabi_dsub>
 8032fa0:	4622      	mov	r2, r4
 8032fa2:	462b      	mov	r3, r5
 8032fa4:	f7ed fb48 	bl	8020638 <__aeabi_dmul>
 8032fa8:	a355      	add	r3, pc, #340	; (adr r3, 8033100 <__ieee754_pow+0xa38>)
 8032faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032fae:	f7ed f98d 	bl	80202cc <__adddf3>
 8032fb2:	4622      	mov	r2, r4
 8032fb4:	462b      	mov	r3, r5
 8032fb6:	f7ed fb3f 	bl	8020638 <__aeabi_dmul>
 8032fba:	4602      	mov	r2, r0
 8032fbc:	460b      	mov	r3, r1
 8032fbe:	4640      	mov	r0, r8
 8032fc0:	4649      	mov	r1, r9
 8032fc2:	f7ed f981 	bl	80202c8 <__aeabi_dsub>
 8032fc6:	4604      	mov	r4, r0
 8032fc8:	460d      	mov	r5, r1
 8032fca:	4602      	mov	r2, r0
 8032fcc:	460b      	mov	r3, r1
 8032fce:	4640      	mov	r0, r8
 8032fd0:	4649      	mov	r1, r9
 8032fd2:	f7ed fb31 	bl	8020638 <__aeabi_dmul>
 8032fd6:	2200      	movs	r2, #0
 8032fd8:	ec41 0b19 	vmov	d9, r0, r1
 8032fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8032fe0:	4620      	mov	r0, r4
 8032fe2:	4629      	mov	r1, r5
 8032fe4:	f7ed f970 	bl	80202c8 <__aeabi_dsub>
 8032fe8:	4602      	mov	r2, r0
 8032fea:	460b      	mov	r3, r1
 8032fec:	ec51 0b19 	vmov	r0, r1, d9
 8032ff0:	f7ed fc4c 	bl	802088c <__aeabi_ddiv>
 8032ff4:	4632      	mov	r2, r6
 8032ff6:	4604      	mov	r4, r0
 8032ff8:	460d      	mov	r5, r1
 8032ffa:	463b      	mov	r3, r7
 8032ffc:	4640      	mov	r0, r8
 8032ffe:	4649      	mov	r1, r9
 8033000:	f7ed fb1a 	bl	8020638 <__aeabi_dmul>
 8033004:	4632      	mov	r2, r6
 8033006:	463b      	mov	r3, r7
 8033008:	f7ed f960 	bl	80202cc <__adddf3>
 803300c:	4602      	mov	r2, r0
 803300e:	460b      	mov	r3, r1
 8033010:	4620      	mov	r0, r4
 8033012:	4629      	mov	r1, r5
 8033014:	f7ed f958 	bl	80202c8 <__aeabi_dsub>
 8033018:	4642      	mov	r2, r8
 803301a:	464b      	mov	r3, r9
 803301c:	f7ed f954 	bl	80202c8 <__aeabi_dsub>
 8033020:	460b      	mov	r3, r1
 8033022:	4602      	mov	r2, r0
 8033024:	493a      	ldr	r1, [pc, #232]	; (8033110 <__ieee754_pow+0xa48>)
 8033026:	2000      	movs	r0, #0
 8033028:	f7ed f94e 	bl	80202c8 <__aeabi_dsub>
 803302c:	ec41 0b10 	vmov	d0, r0, r1
 8033030:	ee10 3a90 	vmov	r3, s1
 8033034:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8033038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803303c:	da2b      	bge.n	8033096 <__ieee754_pow+0x9ce>
 803303e:	4650      	mov	r0, sl
 8033040:	f000 f966 	bl	8033310 <scalbn>
 8033044:	ec51 0b10 	vmov	r0, r1, d0
 8033048:	ec53 2b18 	vmov	r2, r3, d8
 803304c:	f7ff bbed 	b.w	803282a <__ieee754_pow+0x162>
 8033050:	4b30      	ldr	r3, [pc, #192]	; (8033114 <__ieee754_pow+0xa4c>)
 8033052:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8033056:	429e      	cmp	r6, r3
 8033058:	f77f af0c 	ble.w	8032e74 <__ieee754_pow+0x7ac>
 803305c:	4b2e      	ldr	r3, [pc, #184]	; (8033118 <__ieee754_pow+0xa50>)
 803305e:	440b      	add	r3, r1
 8033060:	4303      	orrs	r3, r0
 8033062:	d009      	beq.n	8033078 <__ieee754_pow+0x9b0>
 8033064:	ec51 0b18 	vmov	r0, r1, d8
 8033068:	2200      	movs	r2, #0
 803306a:	2300      	movs	r3, #0
 803306c:	f7ed fd56 	bl	8020b1c <__aeabi_dcmplt>
 8033070:	3800      	subs	r0, #0
 8033072:	bf18      	it	ne
 8033074:	2001      	movne	r0, #1
 8033076:	e447      	b.n	8032908 <__ieee754_pow+0x240>
 8033078:	4622      	mov	r2, r4
 803307a:	462b      	mov	r3, r5
 803307c:	f7ed f924 	bl	80202c8 <__aeabi_dsub>
 8033080:	4642      	mov	r2, r8
 8033082:	464b      	mov	r3, r9
 8033084:	f7ed fd5e 	bl	8020b44 <__aeabi_dcmpge>
 8033088:	2800      	cmp	r0, #0
 803308a:	f43f aef3 	beq.w	8032e74 <__ieee754_pow+0x7ac>
 803308e:	e7e9      	b.n	8033064 <__ieee754_pow+0x99c>
 8033090:	f04f 0a00 	mov.w	sl, #0
 8033094:	e71a      	b.n	8032ecc <__ieee754_pow+0x804>
 8033096:	ec51 0b10 	vmov	r0, r1, d0
 803309a:	4619      	mov	r1, r3
 803309c:	e7d4      	b.n	8033048 <__ieee754_pow+0x980>
 803309e:	491c      	ldr	r1, [pc, #112]	; (8033110 <__ieee754_pow+0xa48>)
 80330a0:	2000      	movs	r0, #0
 80330a2:	f7ff bb30 	b.w	8032706 <__ieee754_pow+0x3e>
 80330a6:	2000      	movs	r0, #0
 80330a8:	2100      	movs	r1, #0
 80330aa:	f7ff bb2c 	b.w	8032706 <__ieee754_pow+0x3e>
 80330ae:	4630      	mov	r0, r6
 80330b0:	4639      	mov	r1, r7
 80330b2:	f7ff bb28 	b.w	8032706 <__ieee754_pow+0x3e>
 80330b6:	9204      	str	r2, [sp, #16]
 80330b8:	f7ff bb7a 	b.w	80327b0 <__ieee754_pow+0xe8>
 80330bc:	2300      	movs	r3, #0
 80330be:	f7ff bb64 	b.w	803278a <__ieee754_pow+0xc2>
 80330c2:	bf00      	nop
 80330c4:	f3af 8000 	nop.w
 80330c8:	00000000 	.word	0x00000000
 80330cc:	3fe62e43 	.word	0x3fe62e43
 80330d0:	fefa39ef 	.word	0xfefa39ef
 80330d4:	3fe62e42 	.word	0x3fe62e42
 80330d8:	0ca86c39 	.word	0x0ca86c39
 80330dc:	be205c61 	.word	0xbe205c61
 80330e0:	72bea4d0 	.word	0x72bea4d0
 80330e4:	3e663769 	.word	0x3e663769
 80330e8:	c5d26bf1 	.word	0xc5d26bf1
 80330ec:	3ebbbd41 	.word	0x3ebbbd41
 80330f0:	af25de2c 	.word	0xaf25de2c
 80330f4:	3f11566a 	.word	0x3f11566a
 80330f8:	16bebd93 	.word	0x16bebd93
 80330fc:	3f66c16c 	.word	0x3f66c16c
 8033100:	5555553e 	.word	0x5555553e
 8033104:	3fc55555 	.word	0x3fc55555
 8033108:	3fe00000 	.word	0x3fe00000
 803310c:	000fffff 	.word	0x000fffff
 8033110:	3ff00000 	.word	0x3ff00000
 8033114:	4090cbff 	.word	0x4090cbff
 8033118:	3f6f3400 	.word	0x3f6f3400
 803311c:	652b82fe 	.word	0x652b82fe
 8033120:	3c971547 	.word	0x3c971547

08033124 <__ieee754_sqrt>:
 8033124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033128:	ec55 4b10 	vmov	r4, r5, d0
 803312c:	4e55      	ldr	r6, [pc, #340]	; (8033284 <__ieee754_sqrt+0x160>)
 803312e:	43ae      	bics	r6, r5
 8033130:	ee10 0a10 	vmov	r0, s0
 8033134:	ee10 3a10 	vmov	r3, s0
 8033138:	462a      	mov	r2, r5
 803313a:	4629      	mov	r1, r5
 803313c:	d110      	bne.n	8033160 <__ieee754_sqrt+0x3c>
 803313e:	ee10 2a10 	vmov	r2, s0
 8033142:	462b      	mov	r3, r5
 8033144:	f7ed fa78 	bl	8020638 <__aeabi_dmul>
 8033148:	4602      	mov	r2, r0
 803314a:	460b      	mov	r3, r1
 803314c:	4620      	mov	r0, r4
 803314e:	4629      	mov	r1, r5
 8033150:	f7ed f8bc 	bl	80202cc <__adddf3>
 8033154:	4604      	mov	r4, r0
 8033156:	460d      	mov	r5, r1
 8033158:	ec45 4b10 	vmov	d0, r4, r5
 803315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033160:	2d00      	cmp	r5, #0
 8033162:	dc10      	bgt.n	8033186 <__ieee754_sqrt+0x62>
 8033164:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8033168:	4330      	orrs	r0, r6
 803316a:	d0f5      	beq.n	8033158 <__ieee754_sqrt+0x34>
 803316c:	b15d      	cbz	r5, 8033186 <__ieee754_sqrt+0x62>
 803316e:	ee10 2a10 	vmov	r2, s0
 8033172:	462b      	mov	r3, r5
 8033174:	ee10 0a10 	vmov	r0, s0
 8033178:	f7ed f8a6 	bl	80202c8 <__aeabi_dsub>
 803317c:	4602      	mov	r2, r0
 803317e:	460b      	mov	r3, r1
 8033180:	f7ed fb84 	bl	802088c <__aeabi_ddiv>
 8033184:	e7e6      	b.n	8033154 <__ieee754_sqrt+0x30>
 8033186:	1512      	asrs	r2, r2, #20
 8033188:	d074      	beq.n	8033274 <__ieee754_sqrt+0x150>
 803318a:	07d4      	lsls	r4, r2, #31
 803318c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8033190:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8033194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8033198:	bf5e      	ittt	pl
 803319a:	0fda      	lsrpl	r2, r3, #31
 803319c:	005b      	lslpl	r3, r3, #1
 803319e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80331a2:	2400      	movs	r4, #0
 80331a4:	0fda      	lsrs	r2, r3, #31
 80331a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80331aa:	107f      	asrs	r7, r7, #1
 80331ac:	005b      	lsls	r3, r3, #1
 80331ae:	2516      	movs	r5, #22
 80331b0:	4620      	mov	r0, r4
 80331b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80331b6:	1886      	adds	r6, r0, r2
 80331b8:	428e      	cmp	r6, r1
 80331ba:	bfde      	ittt	le
 80331bc:	1b89      	suble	r1, r1, r6
 80331be:	18b0      	addle	r0, r6, r2
 80331c0:	18a4      	addle	r4, r4, r2
 80331c2:	0049      	lsls	r1, r1, #1
 80331c4:	3d01      	subs	r5, #1
 80331c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80331ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80331ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80331d2:	d1f0      	bne.n	80331b6 <__ieee754_sqrt+0x92>
 80331d4:	462a      	mov	r2, r5
 80331d6:	f04f 0e20 	mov.w	lr, #32
 80331da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80331de:	4281      	cmp	r1, r0
 80331e0:	eb06 0c05 	add.w	ip, r6, r5
 80331e4:	dc02      	bgt.n	80331ec <__ieee754_sqrt+0xc8>
 80331e6:	d113      	bne.n	8033210 <__ieee754_sqrt+0xec>
 80331e8:	459c      	cmp	ip, r3
 80331ea:	d811      	bhi.n	8033210 <__ieee754_sqrt+0xec>
 80331ec:	f1bc 0f00 	cmp.w	ip, #0
 80331f0:	eb0c 0506 	add.w	r5, ip, r6
 80331f4:	da43      	bge.n	803327e <__ieee754_sqrt+0x15a>
 80331f6:	2d00      	cmp	r5, #0
 80331f8:	db41      	blt.n	803327e <__ieee754_sqrt+0x15a>
 80331fa:	f100 0801 	add.w	r8, r0, #1
 80331fe:	1a09      	subs	r1, r1, r0
 8033200:	459c      	cmp	ip, r3
 8033202:	bf88      	it	hi
 8033204:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8033208:	eba3 030c 	sub.w	r3, r3, ip
 803320c:	4432      	add	r2, r6
 803320e:	4640      	mov	r0, r8
 8033210:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8033214:	f1be 0e01 	subs.w	lr, lr, #1
 8033218:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 803321c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8033220:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8033224:	d1db      	bne.n	80331de <__ieee754_sqrt+0xba>
 8033226:	430b      	orrs	r3, r1
 8033228:	d006      	beq.n	8033238 <__ieee754_sqrt+0x114>
 803322a:	1c50      	adds	r0, r2, #1
 803322c:	bf13      	iteet	ne
 803322e:	3201      	addne	r2, #1
 8033230:	3401      	addeq	r4, #1
 8033232:	4672      	moveq	r2, lr
 8033234:	f022 0201 	bicne.w	r2, r2, #1
 8033238:	1063      	asrs	r3, r4, #1
 803323a:	0852      	lsrs	r2, r2, #1
 803323c:	07e1      	lsls	r1, r4, #31
 803323e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8033242:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8033246:	bf48      	it	mi
 8033248:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 803324c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8033250:	4614      	mov	r4, r2
 8033252:	e781      	b.n	8033158 <__ieee754_sqrt+0x34>
 8033254:	0ad9      	lsrs	r1, r3, #11
 8033256:	3815      	subs	r0, #21
 8033258:	055b      	lsls	r3, r3, #21
 803325a:	2900      	cmp	r1, #0
 803325c:	d0fa      	beq.n	8033254 <__ieee754_sqrt+0x130>
 803325e:	02cd      	lsls	r5, r1, #11
 8033260:	d50a      	bpl.n	8033278 <__ieee754_sqrt+0x154>
 8033262:	f1c2 0420 	rsb	r4, r2, #32
 8033266:	fa23 f404 	lsr.w	r4, r3, r4
 803326a:	1e55      	subs	r5, r2, #1
 803326c:	4093      	lsls	r3, r2
 803326e:	4321      	orrs	r1, r4
 8033270:	1b42      	subs	r2, r0, r5
 8033272:	e78a      	b.n	803318a <__ieee754_sqrt+0x66>
 8033274:	4610      	mov	r0, r2
 8033276:	e7f0      	b.n	803325a <__ieee754_sqrt+0x136>
 8033278:	0049      	lsls	r1, r1, #1
 803327a:	3201      	adds	r2, #1
 803327c:	e7ef      	b.n	803325e <__ieee754_sqrt+0x13a>
 803327e:	4680      	mov	r8, r0
 8033280:	e7bd      	b.n	80331fe <__ieee754_sqrt+0xda>
 8033282:	bf00      	nop
 8033284:	7ff00000 	.word	0x7ff00000

08033288 <with_errno>:
 8033288:	b570      	push	{r4, r5, r6, lr}
 803328a:	4604      	mov	r4, r0
 803328c:	460d      	mov	r5, r1
 803328e:	4616      	mov	r6, r2
 8033290:	f000 f8c4 	bl	803341c <__errno>
 8033294:	4629      	mov	r1, r5
 8033296:	6006      	str	r6, [r0, #0]
 8033298:	4620      	mov	r0, r4
 803329a:	bd70      	pop	{r4, r5, r6, pc}

0803329c <xflow>:
 803329c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803329e:	4614      	mov	r4, r2
 80332a0:	461d      	mov	r5, r3
 80332a2:	b108      	cbz	r0, 80332a8 <xflow+0xc>
 80332a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80332a8:	e9cd 2300 	strd	r2, r3, [sp]
 80332ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80332b0:	4620      	mov	r0, r4
 80332b2:	4629      	mov	r1, r5
 80332b4:	f7ed f9c0 	bl	8020638 <__aeabi_dmul>
 80332b8:	2222      	movs	r2, #34	; 0x22
 80332ba:	b003      	add	sp, #12
 80332bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80332c0:	f7ff bfe2 	b.w	8033288 <with_errno>

080332c4 <__math_uflow>:
 80332c4:	b508      	push	{r3, lr}
 80332c6:	2200      	movs	r2, #0
 80332c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80332cc:	f7ff ffe6 	bl	803329c <xflow>
 80332d0:	ec41 0b10 	vmov	d0, r0, r1
 80332d4:	bd08      	pop	{r3, pc}

080332d6 <__math_oflow>:
 80332d6:	b508      	push	{r3, lr}
 80332d8:	2200      	movs	r2, #0
 80332da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80332de:	f7ff ffdd 	bl	803329c <xflow>
 80332e2:	ec41 0b10 	vmov	d0, r0, r1
 80332e6:	bd08      	pop	{r3, pc}

080332e8 <fabs>:
 80332e8:	ec51 0b10 	vmov	r0, r1, d0
 80332ec:	ee10 2a10 	vmov	r2, s0
 80332f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80332f4:	ec43 2b10 	vmov	d0, r2, r3
 80332f8:	4770      	bx	lr

080332fa <finite>:
 80332fa:	b082      	sub	sp, #8
 80332fc:	ed8d 0b00 	vstr	d0, [sp]
 8033300:	9801      	ldr	r0, [sp, #4]
 8033302:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8033306:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 803330a:	0fc0      	lsrs	r0, r0, #31
 803330c:	b002      	add	sp, #8
 803330e:	4770      	bx	lr

08033310 <scalbn>:
 8033310:	b570      	push	{r4, r5, r6, lr}
 8033312:	ec55 4b10 	vmov	r4, r5, d0
 8033316:	f3c5 520a 	ubfx	r2, r5, #20, #11
 803331a:	4606      	mov	r6, r0
 803331c:	462b      	mov	r3, r5
 803331e:	b99a      	cbnz	r2, 8033348 <scalbn+0x38>
 8033320:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8033324:	4323      	orrs	r3, r4
 8033326:	d036      	beq.n	8033396 <scalbn+0x86>
 8033328:	4b39      	ldr	r3, [pc, #228]	; (8033410 <scalbn+0x100>)
 803332a:	4629      	mov	r1, r5
 803332c:	ee10 0a10 	vmov	r0, s0
 8033330:	2200      	movs	r2, #0
 8033332:	f7ed f981 	bl	8020638 <__aeabi_dmul>
 8033336:	4b37      	ldr	r3, [pc, #220]	; (8033414 <scalbn+0x104>)
 8033338:	429e      	cmp	r6, r3
 803333a:	4604      	mov	r4, r0
 803333c:	460d      	mov	r5, r1
 803333e:	da10      	bge.n	8033362 <scalbn+0x52>
 8033340:	a32b      	add	r3, pc, #172	; (adr r3, 80333f0 <scalbn+0xe0>)
 8033342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033346:	e03a      	b.n	80333be <scalbn+0xae>
 8033348:	f240 71ff 	movw	r1, #2047	; 0x7ff
 803334c:	428a      	cmp	r2, r1
 803334e:	d10c      	bne.n	803336a <scalbn+0x5a>
 8033350:	ee10 2a10 	vmov	r2, s0
 8033354:	4620      	mov	r0, r4
 8033356:	4629      	mov	r1, r5
 8033358:	f7ec ffb8 	bl	80202cc <__adddf3>
 803335c:	4604      	mov	r4, r0
 803335e:	460d      	mov	r5, r1
 8033360:	e019      	b.n	8033396 <scalbn+0x86>
 8033362:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8033366:	460b      	mov	r3, r1
 8033368:	3a36      	subs	r2, #54	; 0x36
 803336a:	4432      	add	r2, r6
 803336c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8033370:	428a      	cmp	r2, r1
 8033372:	dd08      	ble.n	8033386 <scalbn+0x76>
 8033374:	2d00      	cmp	r5, #0
 8033376:	a120      	add	r1, pc, #128	; (adr r1, 80333f8 <scalbn+0xe8>)
 8033378:	e9d1 0100 	ldrd	r0, r1, [r1]
 803337c:	da1c      	bge.n	80333b8 <scalbn+0xa8>
 803337e:	a120      	add	r1, pc, #128	; (adr r1, 8033400 <scalbn+0xf0>)
 8033380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033384:	e018      	b.n	80333b8 <scalbn+0xa8>
 8033386:	2a00      	cmp	r2, #0
 8033388:	dd08      	ble.n	803339c <scalbn+0x8c>
 803338a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 803338e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8033392:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8033396:	ec45 4b10 	vmov	d0, r4, r5
 803339a:	bd70      	pop	{r4, r5, r6, pc}
 803339c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80333a0:	da19      	bge.n	80333d6 <scalbn+0xc6>
 80333a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80333a6:	429e      	cmp	r6, r3
 80333a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80333ac:	dd0a      	ble.n	80333c4 <scalbn+0xb4>
 80333ae:	a112      	add	r1, pc, #72	; (adr r1, 80333f8 <scalbn+0xe8>)
 80333b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80333b4:	2b00      	cmp	r3, #0
 80333b6:	d1e2      	bne.n	803337e <scalbn+0x6e>
 80333b8:	a30f      	add	r3, pc, #60	; (adr r3, 80333f8 <scalbn+0xe8>)
 80333ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80333be:	f7ed f93b 	bl	8020638 <__aeabi_dmul>
 80333c2:	e7cb      	b.n	803335c <scalbn+0x4c>
 80333c4:	a10a      	add	r1, pc, #40	; (adr r1, 80333f0 <scalbn+0xe0>)
 80333c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80333ca:	2b00      	cmp	r3, #0
 80333cc:	d0b8      	beq.n	8033340 <scalbn+0x30>
 80333ce:	a10e      	add	r1, pc, #56	; (adr r1, 8033408 <scalbn+0xf8>)
 80333d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80333d4:	e7b4      	b.n	8033340 <scalbn+0x30>
 80333d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80333da:	3236      	adds	r2, #54	; 0x36
 80333dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80333e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80333e4:	4620      	mov	r0, r4
 80333e6:	4b0c      	ldr	r3, [pc, #48]	; (8033418 <scalbn+0x108>)
 80333e8:	2200      	movs	r2, #0
 80333ea:	e7e8      	b.n	80333be <scalbn+0xae>
 80333ec:	f3af 8000 	nop.w
 80333f0:	c2f8f359 	.word	0xc2f8f359
 80333f4:	01a56e1f 	.word	0x01a56e1f
 80333f8:	8800759c 	.word	0x8800759c
 80333fc:	7e37e43c 	.word	0x7e37e43c
 8033400:	8800759c 	.word	0x8800759c
 8033404:	fe37e43c 	.word	0xfe37e43c
 8033408:	c2f8f359 	.word	0xc2f8f359
 803340c:	81a56e1f 	.word	0x81a56e1f
 8033410:	43500000 	.word	0x43500000
 8033414:	ffff3cb0 	.word	0xffff3cb0
 8033418:	3c900000 	.word	0x3c900000

0803341c <__errno>:
 803341c:	4b01      	ldr	r3, [pc, #4]	; (8033424 <__errno+0x8>)
 803341e:	6818      	ldr	r0, [r3, #0]
 8033420:	4770      	bx	lr
 8033422:	bf00      	nop
 8033424:	20000094 	.word	0x20000094

08033428 <_init>:
 8033428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803342a:	bf00      	nop
 803342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803342e:	bc08      	pop	{r3}
 8033430:	469e      	mov	lr, r3
 8033432:	4770      	bx	lr

08033434 <_fini>:
 8033434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8033436:	bf00      	nop
 8033438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803343a:	bc08      	pop	{r3}
 803343c:	469e      	mov	lr, r3
 803343e:	4770      	bx	lr
